In archive libAPDuinOS.a:

AnalogSensor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000003  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000037  2**0
                  ALLOC
  3 .stab         000011f4  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003edc  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN12AnalogSensor9getValueSEPc 00000062  00000000  00000000  00005108  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN12AnalogSensor13perform_checkEv 00000058  00000000  00000000  0000516a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN12AnalogSensorD0Ev 0000003e  00000000  00000000  000051c2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN12AnalogSensorD1Ev 00000038  00000000  00000000  00005200  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN12AnalogSensorD2Ev 00000038  00000000  00000000  00005238  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN12AnalogSensorC1EP6SDCONF 00000048  00000000  00000000  00005270  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN12AnalogSensorC2EP6SDCONF 00000048  00000000  00000000  000052b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .rodata._ZTV12AnalogSensor 0000000e  00000000  00000000  00005300  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN12AnalogSensor9getValueSEPc:

00000000 <_ZN12AnalogSensor9getValueSEPc>:
  boolean retcode = (this->sensor->value = analogRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *AnalogSensor::getValueS(char *strdest) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	16 2f       	mov	r17, r22
   a:	07 2f       	mov	r16, r23
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN12AnalogSensor9getValueSEPc+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN12AnalogSensor9getValueSEPc+0x10>
  10:	ad b7       	in	r26, 0x3d	; 61
  12:	be b7       	in	r27, 0x3e	; 62
  14:	11 96       	adiw	r26, 0x01	; 1
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	69 83       	std	Y+1, r22	; 0x01
  1c:	11 96       	adiw	r26, 0x01	; 1
  1e:	7c 93       	st	X, r23
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	13 96       	adiw	r26, 0x03	; 3
  28:	3c 93       	st	X, r19
  2a:	2e 93       	st	-X, r18
  2c:	12 97       	sbiw	r26, 0x02	; 2
  2e:	ec 01       	movw	r28, r24
  30:	ee ad       	ldd	r30, Y+62	; 0x3e
  32:	ff ad       	ldd	r31, Y+63	; 0x3f
  34:	80 81       	ld	r24, Z
  36:	91 81       	ldd	r25, Z+1	; 0x01
  38:	15 96       	adiw	r26, 0x05	; 5
  3a:	9c 93       	st	X, r25
  3c:	8e 93       	st	-X, r24
  3e:	14 97       	sbiw	r26, 0x04	; 4
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensor9getValueSEPc>
  44:	ed b7       	in	r30, 0x3d	; 61
  46:	fe b7       	in	r31, 0x3e	; 62
  48:	36 96       	adiw	r30, 0x06	; 6
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	fe bf       	out	0x3e, r31	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	ed bf       	out	0x3d, r30	; 61
  retstr=strdest;
  return retstr;
}
  54:	81 2f       	mov	r24, r17
  56:	90 2f       	mov	r25, r16
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	08 95       	ret

Disassembly of section .text._ZN12AnalogSensor13perform_checkEv:

00000000 <_ZN12AnalogSensor13perform_checkEv>:
  boolean retcode = (this->sensor->value = analogRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *AnalogSensor::getValueS(char *strdest) {
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	8c 01       	movw	r16, r24
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	dc 01       	movw	r26, r24
   e:	de 96       	adiw	r26, 0x3e	; 62
  10:	ed 90       	ld	r14, X+
  12:	fc 90       	ld	r15, X
  14:	df 97       	sbiw	r26, 0x3f	; 63
  16:	55 96       	adiw	r26, 0x15	; 21
  18:	8c 91       	ld	r24, X
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensor13perform_checkEv>
  1e:	d8 2e       	mov	r13, r24
  20:	f7 01       	movw	r30, r14
  22:	80 83       	st	Z, r24
  24:	91 83       	std	Z+1, r25	; 0x01
  26:	d8 01       	movw	r26, r16
  28:	de 96       	adiw	r26, 0x3e	; 62
  2a:	ed 91       	ld	r30, X+
  2c:	fc 91       	ld	r31, X
  2e:	df 97       	sbiw	r26, 0x3f	; 63
  30:	60 81       	ld	r22, Z
  32:	71 81       	ldd	r23, Z+1	; 0x01
  34:	88 27       	eor	r24, r24
  36:	77 fd       	sbrc	r23, 7
  38:	80 95       	com	r24
  3a:	98 2f       	mov	r25, r24
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensor13perform_checkEv>
  40:	f8 01       	movw	r30, r16
  42:	67 ab       	std	Z+55, r22	; 0x37
  44:	70 af       	std	Z+56, r23	; 0x38
  46:	81 af       	std	Z+57, r24	; 0x39
  48:	92 af       	std	Z+58, r25	; 0x3a
  4a:	8d 2d       	mov	r24, r13
  4c:	1f 91       	pop	r17
  4e:	0f 91       	pop	r16
  50:	ff 90       	pop	r15
  52:	ef 90       	pop	r14
  retstr=strdest;
  return retstr;
}
  54:	df 90       	pop	r13
  56:	08 95       	ret

Disassembly of section .text._ZN12AnalogSensorD0Ev:

00000000 <_ZN12AnalogSensorD0Ev>:
  boolean retcode = (this->sensor->value = analogRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *AnalogSensor::getValueS(char *strdest) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	86 ad       	ldd	r24, Z+62	; 0x3e
  12:	97 ad       	ldd	r25, Z+63	; 0x3f
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD0Ev>
  18:	f8 01       	movw	r30, r16
  1a:	17 ae       	std	Z+63, r1	; 0x3f
  1c:	16 ae       	std	Z+62, r1	; 0x3e
  1e:	83 ad       	ldd	r24, Z+59	; 0x3b
  20:	94 ad       	ldd	r25, Z+60	; 0x3c
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD0Ev>
  26:	f8 01       	movw	r30, r16
  28:	14 ae       	std	Z+60, r1	; 0x3c
  2a:	13 ae       	std	Z+59, r1	; 0x3b
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD0Ev>
  32:	c8 01       	movw	r24, r16
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD0Ev>
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	08 95       	ret

Disassembly of section .text._ZN12AnalogSensorD1Ev:

00000000 <_ZN12AnalogSensorD1Ev>:
  boolean retcode = (this->sensor->value = analogRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *AnalogSensor::getValueS(char *strdest) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	86 ad       	ldd	r24, Z+62	; 0x3e
  12:	97 ad       	ldd	r25, Z+63	; 0x3f
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD1Ev>
  18:	f8 01       	movw	r30, r16
  1a:	17 ae       	std	Z+63, r1	; 0x3f
  1c:	16 ae       	std	Z+62, r1	; 0x3e
  1e:	83 ad       	ldd	r24, Z+59	; 0x3b
  20:	94 ad       	ldd	r25, Z+60	; 0x3c
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD1Ev>
  26:	f8 01       	movw	r30, r16
  28:	14 ae       	std	Z+60, r1	; 0x3c
  2a:	13 ae       	std	Z+59, r1	; 0x3b
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD1Ev>
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	08 95       	ret

Disassembly of section .text._ZN12AnalogSensorD2Ev:

00000000 <_ZN12AnalogSensorD2Ev>:
  boolean retcode = (this->sensor->value = analogRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *AnalogSensor::getValueS(char *strdest) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	86 ad       	ldd	r24, Z+62	; 0x3e
  12:	97 ad       	ldd	r25, Z+63	; 0x3f
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD2Ev>
  18:	f8 01       	movw	r30, r16
  1a:	17 ae       	std	Z+63, r1	; 0x3f
  1c:	16 ae       	std	Z+62, r1	; 0x3e
  1e:	83 ad       	ldd	r24, Z+59	; 0x3b
  20:	94 ad       	ldd	r25, Z+60	; 0x3c
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD2Ev>
  26:	f8 01       	movw	r30, r16
  28:	14 ae       	std	Z+60, r1	; 0x3c
  2a:	13 ae       	std	Z+59, r1	; 0x3b
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorD2Ev>
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	08 95       	ret

Disassembly of section .text._ZN12AnalogSensorC1EP6SDCONF:

00000000 <_ZN12AnalogSensorC1EP6SDCONF>:
  boolean retcode = (this->sensor->value = analogRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *AnalogSensor::getValueS(char *strdest) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
   a:	7b 01       	movw	r14, r22
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorC1EP6SDCONF>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	d8 01       	movw	r26, r16
  16:	8d 93       	st	X+, r24
  18:	9c 93       	st	X, r25
  1a:	c8 01       	movw	r24, r16
  1c:	b7 01       	movw	r22, r14
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorC1EP6SDCONF>
  22:	82 e0       	ldi	r24, 0x02	; 2
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorC1EP6SDCONF>
  2a:	fc 01       	movw	r30, r24
  2c:	d8 01       	movw	r26, r16
  2e:	df 96       	adiw	r26, 0x3f	; 63
  30:	9c 93       	st	X, r25
  32:	8e 93       	st	-X, r24
  34:	de 97       	sbiw	r26, 0x3e	; 62
  36:	11 82       	std	Z+1, r1	; 0x01
  38:	10 82       	st	Z, r1
  3a:	dd 96       	adiw	r26, 0x3d	; 61
  3c:	1c 92       	st	X, r1
  3e:	1f 91       	pop	r17
  40:	0f 91       	pop	r16
  42:	ff 90       	pop	r15
  44:	ef 90       	pop	r14
  46:	08 95       	ret

Disassembly of section .text._ZN12AnalogSensorC2EP6SDCONF:

00000000 <_ZN12AnalogSensorC2EP6SDCONF>:
  boolean retcode = (this->sensor->value = analogRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *AnalogSensor::getValueS(char *strdest) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
   a:	7b 01       	movw	r14, r22
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorC2EP6SDCONF>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	d8 01       	movw	r26, r16
  16:	8d 93       	st	X+, r24
  18:	9c 93       	st	X, r25
  1a:	c8 01       	movw	r24, r16
  1c:	b7 01       	movw	r22, r14
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorC2EP6SDCONF>
  22:	82 e0       	ldi	r24, 0x02	; 2
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN12AnalogSensorC2EP6SDCONF>
  2a:	fc 01       	movw	r30, r24
  2c:	d8 01       	movw	r26, r16
  2e:	df 96       	adiw	r26, 0x3f	; 63
  30:	9c 93       	st	X, r25
  32:	8e 93       	st	-X, r24
  34:	de 97       	sbiw	r26, 0x3e	; 62
  36:	11 82       	std	Z+1, r1	; 0x01
  38:	10 82       	st	Z, r1
  3a:	dd 96       	adiw	r26, 0x3d	; 61
  3c:	1c 92       	st	X, r1
  3e:	1f 91       	pop	r17
  40:	0f 91       	pop	r16
  42:	ff 90       	pop	r15
  44:	ef 90       	pop	r14
  46:	08 95       	ret

AtlasScientificSensor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000015  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000049  2**0
                  ALLOC
  3 .stab         0000201c  00000000  00000000  0000004c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000045ea  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN21AtlasScientificSensor14is_soft_serialEv 00000020  00000000  00000000  00006652  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN21AtlasScientificSensor9availableEv 0000003c  00000000  00000000  00006672  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN21AtlasScientificSensor4readEv 00000040  00000000  00000000  000066ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN21AtlasScientificSensor5fetchEPc 00000066  00000000  00000000  000066ee  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN21AtlasScientificSensor9calibrateEv 0000000a  00000000  00000000  00006754  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN21AtlasScientificSensor14selectHWSerialEv 00000090  00000000  00000000  0000675e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN21AtlasScientificSensor14selectSWSerialEv 000000ba  00000000  00000000  000067ee  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN21AtlasScientificSensor11openChannelEs 0000009a  00000000  00000000  000068a8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN21AtlasScientificSensor11openChannelEv 0000001c  00000000  00000000  00006942  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN21AtlasScientificSensor5printEc 0000003c  00000000  00000000  0000695e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN21AtlasScientificSensor5printEPKc 00000040  00000000  00000000  0000699a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN21AtlasScientificSensor11diagnosticsEv 00000084  00000000  00000000  000069da  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN21AtlasScientificSensor14as_sensor_readEv 000002a8  00000000  00000000  00006a5e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN21AtlasScientificSensor13perform_checkEv 00000066  00000000  00000000  00006d06  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN21AtlasScientificSensorD0Ev 000000c6  00000000  00000000  00006d6c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN21AtlasScientificSensorD1Ev 000000c0  00000000  00000000  00006e32  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN21AtlasScientificSensorD2Ev 000000c0  00000000  00000000  00006ef2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN21AtlasScientificSensorC1EP6SDCONFPv 00000394  00000000  00000000  00006fb2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN21AtlasScientificSensorC2EP6SDCONFPv 00000394  00000000  00000000  00007346  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .rodata._ZTV21AtlasScientificSensor 0000000e  00000000  00000000  000076da  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 25 .progmem.data 00000170  00000000  00000000  000076e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN21AtlasScientificSensor14is_soft_serialEv:

00000000 <_ZN21AtlasScientificSensor14is_soft_serialEv>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	dc 01       	movw	r26, r24
   2:	de 96       	adiw	r26, 0x3e	; 62
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	df 97       	sbiw	r26, 0x3f	; 63
   a:	30 97       	sbiw	r30, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN21AtlasScientificSensor14is_soft_serialEv+0xe>
   e:	20 e0       	ldi	r18, 0x00	; 0
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN21AtlasScientificSensor14is_soft_serialEv+0x12>
  12:	20 e0       	ldi	r18, 0x00	; 0
  14:	82 81       	ldd	r24, Z+2	; 0x02
  16:	93 81       	ldd	r25, Z+3	; 0x03
  18:	97 ff       	sbrs	r25, 7
  1a:	21 e0       	ldi	r18, 0x01	; 1
  1c:	82 2f       	mov	r24, r18
  1e:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor9availableEv:

00000000 <_ZN21AtlasScientificSensor9availableEv>:
   0:	dc 01       	movw	r26, r24
   2:	de 96       	adiw	r26, 0x3e	; 62
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	df 97       	sbiw	r26, 0x3f	; 63
   a:	30 97       	sbiw	r30, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN21AtlasScientificSensor9availableEv+0xe>
   e:	a0 81       	ld	r26, Z
  10:	b1 81       	ldd	r27, Z+1	; 0x01
  12:	10 97       	sbiw	r26, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN21AtlasScientificSensor9availableEv+0x16>
  16:	0d 90       	ld	r0, X+
  18:	bc 91       	ld	r27, X
  1a:	a0 2d       	mov	r26, r0
  1c:	10 97       	sbiw	r26, 0x00	; 0
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN21AtlasScientificSensor9availableEv+0x20>
  20:	2f ef       	ldi	r18, 0xFF	; 255
  22:	3f ef       	ldi	r19, 0xFF	; 255
  24:	c9 01       	movw	r24, r18
  26:	08 95       	ret
  28:	ed 91       	ld	r30, X+
  2a:	fc 91       	ld	r31, X
  2c:	11 97       	sbiw	r26, 0x01	; 1
  2e:	04 80       	ldd	r0, Z+4	; 0x04
  30:	f5 81       	ldd	r31, Z+5	; 0x05
  32:	e0 2d       	mov	r30, r0
  34:	cd 01       	movw	r24, r26
  36:	19 95       	eicall
  38:	9c 01       	movw	r18, r24
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__CCP__+0x8>

Disassembly of section .text._ZN21AtlasScientificSensor4readEv:

00000000 <_ZN21AtlasScientificSensor4readEv>:
   0:	dc 01       	movw	r26, r24
   2:	de 96       	adiw	r26, 0x3e	; 62
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	df 97       	sbiw	r26, 0x3f	; 63
   a:	30 97       	sbiw	r30, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN21AtlasScientificSensor4readEv+0xe>
   e:	a0 81       	ld	r26, Z
  10:	b1 81       	ldd	r27, Z+1	; 0x01
  12:	10 97       	sbiw	r26, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN21AtlasScientificSensor4readEv+0x16>
  16:	0d 90       	ld	r0, X+
  18:	bc 91       	ld	r27, X
  1a:	a0 2d       	mov	r26, r0
  1c:	10 97       	sbiw	r26, 0x00	; 0
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN21AtlasScientificSensor4readEv+0x20>
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	28 2f       	mov	r18, r24
  24:	33 27       	eor	r19, r19
  26:	27 fd       	sbrc	r18, 7
  28:	30 95       	com	r19
  2a:	c9 01       	movw	r24, r18
  2c:	08 95       	ret
  2e:	ed 91       	ld	r30, X+
  30:	fc 91       	ld	r31, X
  32:	11 97       	sbiw	r26, 0x01	; 1
  34:	06 80       	ldd	r0, Z+6	; 0x06
  36:	f7 81       	ldd	r31, Z+7	; 0x07
  38:	e0 2d       	mov	r30, r0
  3a:	cd 01       	movw	r24, r26
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	19 95       	eicall
  3e:	00 c0       	rjmp	.+0      	; 0x40 <__SREG__+0x1>

Disassembly of section .text._ZN21AtlasScientificSensor5fetchEPc:

00000000 <_ZN21AtlasScientificSensor5fetchEPc>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
  12:	16 2f       	mov	r17, r22
  14:	07 2f       	mov	r16, r23
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor5fetchEPc>
  1a:	7c 01       	movw	r14, r24
  1c:	18 16       	cp	r1, r24
  1e:	19 06       	cpc	r1, r25
  20:	04 f0       	brlt	.+0      	; 0x22 <_ZN21AtlasScientificSensor5fetchEPc+0x22>
  22:	c0 e0       	ldi	r28, 0x00	; 0
  24:	d0 e0       	ldi	r29, 0x00	; 0
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN21AtlasScientificSensor5fetchEPc+0x28>
  28:	81 2f       	mov	r24, r17
  2a:	90 2f       	mov	r25, r16
  2c:	9c 01       	movw	r18, r24
  2e:	89 01       	movw	r16, r18
  30:	c0 e0       	ldi	r28, 0x00	; 0
  32:	d0 e0       	ldi	r29, 0x00	; 0
  34:	c6 01       	movw	r24, r12
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor5fetchEPc>
  3a:	f8 01       	movw	r30, r16
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	80 83       	st	Z, r24
  3e:	8d 30       	cpi	r24, 0x0D	; 13
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN21AtlasScientificSensor5fetchEPc+0x42>
  42:	10 82       	st	Z, r1

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN21AtlasScientificSensor5fetchEPc+0x46>
  46:	21 96       	adiw	r28, 0x01	; 1
  48:	0f 5f       	subi	r16, 0xFF	; 255
  4a:	1f 4f       	sbci	r17, 0xFF	; 255
  4c:	ce 15       	cp	r28, r14
  4e:	df 05       	cpc	r29, r15
  50:	04 f0       	brlt	.+0      	; 0x52 <_ZN21AtlasScientificSensor5fetchEPc+0x52>
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	ce 01       	movw	r24, r28
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	ef 90       	pop	r14
  60:	df 90       	pop	r13
  62:	cf 90       	pop	r12
  64:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor9calibrateEv:

00000000 <_ZN21AtlasScientificSensor9calibrateEv>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor9calibrateEv>
   8:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor14selectHWSerialEv:

00000000 <_ZN21AtlasScientificSensor14selectHWSerialEv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	ee ad       	ldd	r30, Y+62	; 0x3e
   8:	ff ad       	ldd	r31, Y+63	; 0x3f
   a:	30 97       	sbiw	r30, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN21AtlasScientificSensor14selectHWSerialEv+0xe>
   e:	01 90       	ld	r0, Z+
  10:	f0 81       	ld	r31, Z
  12:	e0 2d       	mov	r30, r0
  14:	80 81       	ld	r24, Z
  16:	91 81       	ldd	r25, Z+1	; 0x01
  18:	89 2b       	or	r24, r25
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN21AtlasScientificSensor14selectHWSerialEv+0x1c>
  1c:	2d 89       	ldd	r18, Y+21	; 0x15
  1e:	3e 89       	ldd	r19, Y+22	; 0x16
  20:	8f 89       	ldd	r24, Y+23	; 0x17
  22:	98 8d       	ldd	r25, Y+24	; 0x18
  24:	a9 01       	movw	r20, r18
  26:	48 1b       	sub	r20, r24
  28:	59 0b       	sbc	r21, r25
  2a:	41 30       	cpi	r20, 0x01	; 1
  2c:	51 05       	cpc	r21, r1
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN21AtlasScientificSensor14selectHWSerialEv+0x30>
  30:	21 31       	cpi	r18, 0x11	; 17
  32:	31 05       	cpc	r19, r1
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN21AtlasScientificSensor14selectHWSerialEv+0x36>
  36:	23 31       	cpi	r18, 0x13	; 19
  38:	31 05       	cpc	r19, r1
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN21AtlasScientificSensor14selectHWSerialEv+0x3c>
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	2f 30       	cpi	r18, 0x0F	; 15
  3e:	31 05       	cpc	r19, r1
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN21AtlasScientificSensor14selectHWSerialEv+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN21AtlasScientificSensor14selectHWSerialEv+0x44>

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	30 e0       	ldi	r19, 0x00	; 0
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN21AtlasScientificSensor14selectHWSerialEv+0x4a>
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN21AtlasScientificSensor14selectHWSerialEv+0x50>
  50:	20 e0       	ldi	r18, 0x00	; 0
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	30 e0       	ldi	r19, 0x00	; 0
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZN21AtlasScientificSensor14selectHWSerialEv+0x56>
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN21AtlasScientificSensor14selectHWSerialEv+0x5c>
  5c:	80 e0       	ldi	r24, 0x00	; 0
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectHWSerialEv>
  64:	20 e0       	ldi	r18, 0x00	; 0
  66:	30 e0       	ldi	r19, 0x00	; 0
  68:	ee ad       	ldd	r30, Y+62	; 0x3e
  6a:	ff ad       	ldd	r31, Y+63	; 0x3f
  6c:	01 90       	ld	r0, Z+
  6e:	f0 81       	ld	r31, Z
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	e0 2d       	mov	r30, r0
  72:	31 83       	std	Z+1, r19	; 0x01
  74:	20 83       	st	Z, r18
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	23 2b       	or	r18, r19
  7a:	01 f0       	breq	.+0      	; 0x7c <_ZN21AtlasScientificSensor14selectHWSerialEv+0x7c>
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN21AtlasScientificSensor14selectHWSerialEv+0x80>
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectHWSerialEv>
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor14selectSWSerialEv:

00000000 <_ZN21AtlasScientificSensor14selectSWSerialEv>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectSWSerialEv>
  12:	d8 01       	movw	r26, r16
  14:	de 96       	adiw	r26, 0x3e	; 62
  16:	ed 91       	ld	r30, X+
  18:	fc 91       	ld	r31, X
  1a:	df 97       	sbiw	r26, 0x3f	; 63
  1c:	30 97       	sbiw	r30, 0x00	; 0
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN21AtlasScientificSensor14selectSWSerialEv+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN21AtlasScientificSensor14selectSWSerialEv+0x22>
  22:	01 90       	ld	r0, Z+
  24:	f0 81       	ld	r31, Z
  26:	e0 2d       	mov	r30, r0
  28:	80 81       	ld	r24, Z
  2a:	91 81       	ldd	r25, Z+1	; 0x01
  2c:	89 2b       	or	r24, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN21AtlasScientificSensor14selectSWSerialEv+0x30>
  30:	8c e1       	ldi	r24, 0x1C	; 28
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectSWSerialEv>
  38:	ec 01       	movw	r28, r24
  3a:	f8 01       	movw	r30, r16
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	65 89       	ldd	r22, Z+21	; 0x15
  3e:	47 89       	ldd	r20, Z+23	; 0x17
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectSWSerialEv>

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  46:	20 97       	sbiw	r28, 0x00	; 0
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN21AtlasScientificSensor14selectSWSerialEv+0x4a>
  4a:	d8 01       	movw	r26, r16
  4c:	de 96       	adiw	r26, 0x3e	; 62
  4e:	ed 91       	ld	r30, X+
  50:	fc 91       	ld	r31, X
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	df 97       	sbiw	r26, 0x3f	; 63
  54:	01 90       	ld	r0, Z+
  56:	f0 81       	ld	r31, Z
  58:	e0 2d       	mov	r30, r0
  5a:	d1 83       	std	Z+1, r29	; 0x01
  5c:	c0 83       	st	Z, r28
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	82 81       	ldd	r24, Z+2	; 0x02
  60:	61 e0       	ldi	r22, 0x01	; 1
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectSWSerialEv>
  66:	d8 01       	movw	r26, r16
  68:	de 96       	adiw	r26, 0x3e	; 62
  6a:	ed 91       	ld	r30, X+
  6c:	fc 91       	ld	r31, X
  6e:	df 97       	sbiw	r26, 0x3f	; 63
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	01 90       	ld	r0, Z+
  72:	f0 81       	ld	r31, Z
  74:	e0 2d       	mov	r30, r0
  76:	83 81       	ldd	r24, Z+3	; 0x03
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectSWSerialEv>
  7e:	d8 01       	movw	r26, r16
  80:	de 96       	adiw	r26, 0x3e	; 62
  82:	ed 91       	ld	r30, X+
  84:	fc 91       	ld	r31, X
  86:	df 97       	sbiw	r26, 0x3f	; 63
  88:	01 90       	ld	r0, Z+
  8a:	f0 81       	ld	r31, Z
  8c:	e0 2d       	mov	r30, r0
  8e:	84 81       	ldd	r24, Z+4	; 0x04
  90:	88 23       	and	r24, r24
  92:	01 f0       	breq	.+0      	; 0x94 <_ZN21AtlasScientificSensor14selectSWSerialEv+0x94>
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectSWSerialEv>
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectSWSerialEv>
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_ZN21AtlasScientificSensor14selectSWSerialEv+0xa6>
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14selectSWSerialEv>
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	1f 91       	pop	r17
  b6:	0f 91       	pop	r16
  b8:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor11openChannelEs:

00000000 <_ZN21AtlasScientificSensor11openChannelEs>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	61 30       	cpi	r22, 0x01	; 1
   8:	71 05       	cpc	r23, r1
   a:	01 f0       	breq	.+0      	; 0xc <_ZN21AtlasScientificSensor11openChannelEs+0xc>
   c:	62 30       	cpi	r22, 0x02	; 2
   e:	71 05       	cpc	r23, r1
  10:	04 f4       	brge	.+0      	; 0x12 <_ZN21AtlasScientificSensor11openChannelEs+0x12>
  12:	67 2b       	or	r22, r23
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN21AtlasScientificSensor11openChannelEs+0x16>
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN21AtlasScientificSensor11openChannelEs+0x18>
  18:	62 30       	cpi	r22, 0x02	; 2
  1a:	71 05       	cpc	r23, r1
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN21AtlasScientificSensor11openChannelEs+0x1e>
  1e:	63 30       	cpi	r22, 0x03	; 3
  20:	71 05       	cpc	r23, r1
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN21AtlasScientificSensor11openChannelEs+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN21AtlasScientificSensor11openChannelEs+0x26>
  26:	ee ad       	ldd	r30, Y+62	; 0x3e
  28:	ff ad       	ldd	r31, Y+63	; 0x3f
  2a:	01 90       	ld	r0, Z+
  2c:	f0 81       	ld	r31, Z
  2e:	e0 2d       	mov	r30, r0
  30:	82 81       	ldd	r24, Z+2	; 0x02
  32:	60 e0       	ldi	r22, 0x00	; 0
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN21AtlasScientificSensor11openChannelEs+0x36>
  36:	ee ad       	ldd	r30, Y+62	; 0x3e
  38:	ff ad       	ldd	r31, Y+63	; 0x3f
  3a:	01 90       	ld	r0, Z+
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	f0 81       	ld	r31, Z
  3e:	e0 2d       	mov	r30, r0
  40:	82 81       	ldd	r24, Z+2	; 0x02
  42:	61 e0       	ldi	r22, 0x01	; 1

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11openChannelEs>
  48:	ee ad       	ldd	r30, Y+62	; 0x3e
  4a:	ff ad       	ldd	r31, Y+63	; 0x3f
  4c:	01 90       	ld	r0, Z+
  4e:	f0 81       	ld	r31, Z
  50:	e0 2d       	mov	r30, r0
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	83 81       	ldd	r24, Z+3	; 0x03
  54:	60 e0       	ldi	r22, 0x00	; 0
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN21AtlasScientificSensor11openChannelEs+0x58>
  58:	ee ad       	ldd	r30, Y+62	; 0x3e
  5a:	ff ad       	ldd	r31, Y+63	; 0x3f
  5c:	01 90       	ld	r0, Z+
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	f0 81       	ld	r31, Z
  60:	e0 2d       	mov	r30, r0
  62:	82 81       	ldd	r24, Z+2	; 0x02
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN21AtlasScientificSensor11openChannelEs+0x68>
  68:	ee ad       	ldd	r30, Y+62	; 0x3e
  6a:	ff ad       	ldd	r31, Y+63	; 0x3f
  6c:	01 90       	ld	r0, Z+
  6e:	f0 81       	ld	r31, Z
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	e0 2d       	mov	r30, r0
  72:	82 81       	ldd	r24, Z+2	; 0x02
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11openChannelEs>
  7a:	ee ad       	ldd	r30, Y+62	; 0x3e
  7c:	ff ad       	ldd	r31, Y+63	; 0x3f
  7e:	01 90       	ld	r0, Z+
  80:	f0 81       	ld	r31, Z
  82:	e0 2d       	mov	r30, r0
  84:	83 81       	ldd	r24, Z+3	; 0x03
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11openChannelEs>
  8c:	ce 01       	movw	r24, r28
  8e:	62 e7       	ldi	r22, 0x72	; 114
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11openChannelEs>
  94:	df 91       	pop	r29
  96:	cf 91       	pop	r28
  98:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor11openChannelEv:

00000000 <_ZN21AtlasScientificSensor11openChannelEv>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	dc 01       	movw	r26, r24
   2:	de 96       	adiw	r26, 0x3e	; 62
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	df 97       	sbiw	r26, 0x3f	; 63
   a:	30 97       	sbiw	r30, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN21AtlasScientificSensor11openChannelEv+0xe>
   e:	62 81       	ldd	r22, Z+2	; 0x02
  10:	73 81       	ldd	r23, Z+3	; 0x03
  12:	77 fd       	sbrc	r23, 7
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN21AtlasScientificSensor11openChannelEv+0x16>
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11openChannelEv>
  1a:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor5printEc:

00000000 <_ZN21AtlasScientificSensor5printEc>:
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	16 2f       	mov	r17, r22
   a:	ee ad       	ldd	r30, Y+62	; 0x3e
   c:	ff ad       	ldd	r31, Y+63	; 0x3f
   e:	30 97       	sbiw	r30, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN21AtlasScientificSensor5printEc+0x12>
  12:	82 81       	ldd	r24, Z+2	; 0x02
  14:	93 81       	ldd	r25, Z+3	; 0x03
  16:	97 fd       	sbrc	r25, 7
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZN21AtlasScientificSensor5printEc+0x1a>
  1a:	ce 01       	movw	r24, r28
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor5printEc>
  20:	ee ad       	ldd	r30, Y+62	; 0x3e
  22:	ff ad       	ldd	r31, Y+63	; 0x3f
  24:	01 90       	ld	r0, Z+
  26:	f0 81       	ld	r31, Z
  28:	e0 2d       	mov	r30, r0
  2a:	80 81       	ld	r24, Z
  2c:	91 81       	ldd	r25, Z+1	; 0x01
  2e:	61 2f       	mov	r22, r17
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor5printEc>
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor5printEPKc:

00000000 <_ZN21AtlasScientificSensor5printEPKc>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	ee ad       	ldd	r30, Y+62	; 0x3e
   e:	ff ad       	ldd	r31, Y+63	; 0x3f
  10:	30 97       	sbiw	r30, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN21AtlasScientificSensor5printEPKc+0x14>
  14:	82 81       	ldd	r24, Z+2	; 0x02
  16:	93 81       	ldd	r25, Z+3	; 0x03
  18:	97 fd       	sbrc	r25, 7
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN21AtlasScientificSensor5printEPKc+0x1c>
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor5printEPKc>
  22:	ee ad       	ldd	r30, Y+62	; 0x3e
  24:	ff ad       	ldd	r31, Y+63	; 0x3f
  26:	01 90       	ld	r0, Z+
  28:	f0 81       	ld	r31, Z
  2a:	e0 2d       	mov	r30, r0
  2c:	80 81       	ld	r24, Z
  2e:	91 81       	ldd	r25, Z+1	; 0x01
  30:	b8 01       	movw	r22, r16
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor5printEPKc>
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	1f 91       	pop	r17
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	0f 91       	pop	r16
  3e:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor11diagnosticsEv:

00000000 <_ZN21AtlasScientificSensor11diagnosticsEv>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	fc 01       	movw	r30, r24
   c:	81 89       	ldd	r24, Z+17	; 0x11
   e:	92 89       	ldd	r25, Z+18	; 0x12
  10:	80 32       	cpi	r24, 0x20	; 32
  12:	91 05       	cpc	r25, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN21AtlasScientificSensor11diagnosticsEv+0x16>
  16:	80 32       	cpi	r24, 0x20	; 32
  18:	91 05       	cpc	r25, r1
  1a:	04 f0       	brlt	.+0      	; 0x1c <_ZN21AtlasScientificSensor11diagnosticsEv+0x1c>
  1c:	84 97       	sbiw	r24, 0x24	; 36
  1e:	04 f4       	brge	.+0      	; 0x20 <_ZN21AtlasScientificSensor11diagnosticsEv+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN21AtlasScientificSensor11diagnosticsEv+0x22>
  22:	c8 01       	movw	r24, r16
  24:	60 e0       	ldi	r22, 0x00	; 0
  26:	70 e0       	ldi	r23, 0x00	; 0
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11diagnosticsEv>
  2c:	c0 e0       	ldi	r28, 0x00	; 0
  2e:	d0 e0       	ldi	r29, 0x00	; 0
  30:	c8 01       	movw	r24, r16
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11diagnosticsEv>
  36:	89 2b       	or	r24, r25
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN21AtlasScientificSensor11diagnosticsEv+0x3a>
  3a:	c8 3c       	cpi	r28, 0xC8	; 200
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	d1 05       	cpc	r29, r1
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN21AtlasScientificSensor11diagnosticsEv+0x40>
  40:	6a e0       	ldi	r22, 0x0A	; 10
  42:	70 e0       	ldi	r23, 0x00	; 0

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11diagnosticsEv>
  4c:	21 96       	adiw	r28, 0x01	; 1
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN21AtlasScientificSensor11diagnosticsEv+0x50>
  50:	c8 01       	movw	r24, r16
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11diagnosticsEv>
  56:	68 2f       	mov	r22, r24
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11diagnosticsEv>
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  60:	c8 01       	movw	r24, r16
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11diagnosticsEv>
  66:	89 2b       	or	r24, r25
  68:	01 f4       	brne	.+0      	; 0x6a <_ZN21AtlasScientificSensor11diagnosticsEv+0x6a>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN21AtlasScientificSensor11diagnosticsEv+0x6c>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZN21AtlasScientificSensor11diagnosticsEv+0x72>
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor11diagnosticsEv>
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor14as_sensor_readEv:

00000000 <_ZN21AtlasScientificSensor14as_sensor_readEv>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	c4 54       	subi	r28, 0x44	; 68
  12:	d0 40       	sbci	r29, 0x00	; 0
  14:	0f b6       	in	r0, 0x3f	; 63
  16:	f8 94       	cli
  18:	de bf       	out	0x3e, r29	; 62
  1a:	0f be       	out	0x3f, r0	; 63
  1c:	cd bf       	out	0x3d, r28	; 61
  1e:	7c 01       	movw	r14, r24
  20:	dc 01       	movw	r26, r24
  22:	de 96       	adiw	r26, 0x3e	; 62
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	df 97       	sbiw	r26, 0x3f	; 63
  2a:	01 90       	ld	r0, Z+
  2c:	f0 81       	ld	r31, Z
  2e:	e0 2d       	mov	r30, r0
  30:	30 97       	sbiw	r30, 0x00	; 0
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN21AtlasScientificSensor14as_sensor_readEv+0x34>
  34:	80 81       	ld	r24, Z
  36:	91 81       	ldd	r25, Z+1	; 0x01
  38:	89 2b       	or	r24, r25
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN21AtlasScientificSensor14as_sensor_readEv+0x3c>
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	60 ec       	ldi	r22, 0xC0	; 192
  46:	99 e7       	ldi	r25, 0x79	; 121
  48:	84 ec       	ldi	r24, 0xC4	; 196
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN21AtlasScientificSensor14as_sensor_readEv+0x4c>
  4c:	d7 01       	movw	r26, r14
  4e:	dd 96       	adiw	r26, 0x3d	; 61
  50:	8c 91       	ld	r24, X
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	dd 97       	sbiw	r26, 0x3d	; 61
  54:	88 23       	and	r24, r24
  56:	01 f0       	breq	.+0      	; 0x58 <_ZN21AtlasScientificSensor14as_sensor_readEv+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN21AtlasScientificSensor14as_sensor_readEv+0x5a>
  5a:	85 81       	ldd	r24, Z+5	; 0x05
  5c:	88 23       	and	r24, r24
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN21AtlasScientificSensor14as_sensor_readEv+0x60>
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	85 83       	std	Z+5, r24	; 0x05
  64:	88 e0       	ldi	r24, 0x08	; 8
  66:	dd 96       	adiw	r26, 0x3d	; 61
  68:	8c 93       	st	X, r24
  6a:	c7 01       	movw	r24, r14
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	70 e0       	ldi	r23, 0x00	; 0
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
  74:	f7 01       	movw	r30, r14
  76:	83 ad       	ldd	r24, Z+59	; 0x3b
  78:	94 ad       	ldd	r25, Z+60	; 0x3c
  7a:	4c e4       	ldi	r20, 0x4C	; 76
  7c:	54 e0       	ldi	r21, 0x04	; 4
  7e:	60 e0       	ldi	r22, 0x00	; 0
  80:	70 e0       	ldi	r23, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
  8e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
  92:	ab 01       	movw	r20, r22
  94:	bc 01       	movw	r22, r24
  96:	87 01       	movw	r16, r14
  98:	0f 5b       	subi	r16, 0xBF	; 191
  9a:	1f 4f       	sbci	r17, 0xFF	; 255
  9c:	f8 01       	movw	r30, r16
  9e:	80 81       	ld	r24, Z
  a0:	91 81       	ldd	r25, Z+1	; 0x01
  a2:	a2 81       	ldd	r26, Z+2	; 0x02
  a4:	b3 81       	ldd	r27, Z+3	; 0x03
  a6:	48 1b       	sub	r20, r24
  a8:	59 0b       	sbc	r21, r25
  aa:	6a 0b       	sbc	r22, r26
  ac:	7b 0b       	sbc	r23, r27
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a e0       	ldi	r18, 0x0A	; 10
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
  be:	d8 01       	movw	r26, r16
  c0:	6d 93       	st	X+, r22
  c2:	7d 93       	st	X+, r23
  c4:	8d 93       	st	X+, r24
  c6:	9c 93       	st	X, r25
  c8:	13 97       	sbiw	r26, 0x03	; 3
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN21AtlasScientificSensor14as_sensor_readEv+0xcc>
  cc:	f7 01       	movw	r30, r14
  ce:	83 ad       	ldd	r24, Z+59	; 0x3b
  d0:	94 ad       	ldd	r25, Z+60	; 0x3c

  // todo we might want to bail out now if 0 < edscand  < 3 because it means the config for SW serial is corrupted

  // start building up the sensor
  if (this->sensor != NULL) {
  d2:	4a e0       	ldi	r20, 0x0A	; 10
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	00 c0       	rjmp	.+0      	; 0xdc <_ZN21AtlasScientificSensor14as_sensor_readEv+0xdc>
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	01 f0       	breq	.+0      	; 0xe0 <_ZN21AtlasScientificSensor14as_sensor_readEv+0xe0>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <_ZN21AtlasScientificSensor14as_sensor_readEv+0xe2>
  e2:	8e 01       	movw	r16, r28
  e4:	0b 5f       	subi	r16, 0xFB	; 251
  e6:	1f 4f       	sbci	r17, 0xFF	; 255
  e8:	c7 01       	movw	r24, r14
  ea:	b8 01       	movw	r22, r16
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
  f0:	bc 01       	movw	r22, r24
  f2:	80 e0       	ldi	r24, 0x00	; 0
      if (assensor!=NULL) {			// if reusing another AtlasScientific on this port (should be SW Serial!)
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	4a e0       	ldi	r20, 0x0A	; 10
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
// returns true if using software serial
bool AtlasScientificSensor::is_soft_serial() {
	// decision is made if S0 and S1 filled and a channel is provided
	//return (this->sensor != NULL && this->sensor->asenc != NULL && this->sensor->asenc->S0 != 0 && this->sensor->asenc->S1 != 0 && this->sensor->channel > -1 );
	// if channel is used, it should be a software serial
	return (this->sensor != NULL && this->sensor->channel > -1);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	b8 01       	movw	r22, r16
 10c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	a0 e0       	ldi	r26, 0x00	; 0
 116:	b0 e0       	ldi	r27, 0x00	; 0

  // start building up the sensor
  if (this->sensor != NULL) {
      if (assensor!=NULL) {			// if reusing another AtlasScientific on this port (should be SW Serial!)
    	  if (((AtlasScientificSensor*)assensor)->is_soft_serial()) {	// reusable Atlas Sensor MUST be SW
			  this->bPrimary = false;
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	9a 83       	std	Y+2, r25	; 0x02
 11c:	ab 83       	std	Y+3, r26	; 0x03
 11e:	bc 83       	std	Y+4, r27	; 0x04
 120:	00 d0       	rcall	.+0      	; 0x122 <_ZN21AtlasScientificSensor14as_sensor_readEv+0x122>
 122:	00 d0       	rcall	.+0      	; 0x124 <_ZN21AtlasScientificSensor14as_sensor_readEv+0x124>
 124:	ed b7       	in	r30, 0x3d	; 61
 126:	fe b7       	in	r31, 0x3e	; 62
 128:	31 96       	adiw	r30, 0x01	; 1
 12a:	ad b7       	in	r26, 0x3d	; 61
			  this->sensor->asenc = ((AtlasScientificSensor*)assensor)->sensor->asenc;
 12c:	be b7       	in	r27, 0x3e	; 62
 12e:	12 96       	adiw	r26, 0x02	; 2
 130:	1c 93       	st	X, r17
 132:	0e 93       	st	-X, r16
 134:	11 97       	sbiw	r26, 0x01	; 1
 136:	80 e0       	ldi	r24, 0x00	; 0
			  if (memcmp(&(ast.S0), &(this->sensor->asenc->S0), sizeof(byte)*3) == 0) {
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	93 83       	std	Z+3, r25	; 0x03
 13c:	82 83       	std	Z+2, r24	; 0x02
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	95 83       	std	Z+5, r25	; 0x05
 144:	84 83       	std	Z+4, r24	; 0x04
 146:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
				  if (cht != ((AtlasScientificSensor*)assensor)->sensor->channel) {
 14a:	ed b7       	in	r30, 0x3d	; 61
 14c:	fe b7       	in	r31, 0x3e	; 62
 14e:	36 96       	adiw	r30, 0x06	; 6
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	fe bf       	out	0x3e, r31	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	ed bf       	out	0x3d, r30	; 61
 15a:	89 2b       	or	r24, r25
 15c:	01 f4       	brne	.+0      	; 0x15e <_ZN21AtlasScientificSensor14as_sensor_readEv+0x15e>
					  this->sensor->channel = cht;	// OK, reusing a softserial, setting channel
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
					  SerPrintP(" channel "); Serial.print(this->sensor->channel);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	b8 01       	movw	r22, r16
 16c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 170:	00 c0       	rjmp	.+0      	; 0x172 <_ZN21AtlasScientificSensor14as_sensor_readEv+0x172>
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	ab 81       	ldd	r26, Y+3	; 0x03
 178:	bc 81       	ldd	r27, Y+4	; 0x04
 17a:	f7 01       	movw	r30, r14
 17c:	87 ab       	std	Z+55, r24	; 0x37
 17e:	90 af       	std	Z+56, r25	; 0x38
 180:	a1 af       	std	Z+57, r26	; 0x39
 182:	b2 af       	std	Z+58, r27	; 0x3a
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
				  } else {
					  SerPrintP("E");		// ERROR same SW serial channel
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 18c:	d7 01       	movw	r26, r14
				  }
			  } else {
				  SerPrintP("E");			// ERROR different SoftSerial config on same HW pins
 18e:	d7 96       	adiw	r26, 0x37	; 55
 190:	4d 91       	ld	r20, X+
 192:	5d 91       	ld	r21, X+
			  }
    	  } else {
    		  SerPrintP("E");				// ERROR invalid reusable Atlas Sensor (not SW Serial)
    	  }
      } else {
          this->bPrimary = true;
 194:	6d 91       	ld	r22, X+
 196:	7c 91       	ld	r23, X
 198:	da 97       	sbiw	r26, 0x3a	; 58
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	22 e0       	ldi	r18, 0x02	; 2
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
          this->sensor->asenc = (ASENC*)malloc(sizeof(ASENC));
 1aa:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 1ae:	b7 01       	movw	r22, r14
 1b0:	6e 5f       	subi	r22, 0xFE	; 254
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
          if (this->sensor->asenc != NULL) {
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 1c4:	f7 01       	movw	r30, r14
 1c6:	65 89       	ldd	r22, Z+21	; 0x15
 1c8:	76 89       	ldd	r23, Z+22	; 0x16
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	4a e0       	ldi	r20, 0x0A	; 10
        	  memset(this->sensor->asenc,0,sizeof(ASENC));
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
        	 // get ptr to HW serial or allocate a new SW serial object, according to extra config
        	 if (edscand == 0) {	// hardware serial (0 SW serial parameters scanned)
 1da:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 1de:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
        	 //#ifdef DEBUG
        	     SerPrintP("ATLAS: HW Serial.\n");
 1e2:	ab 01       	movw	r20, r22
 1e4:	bc 01       	movw	r22, r24
 1e6:	87 01       	movw	r16, r14
        	 //#endif
        	     if (this->selectHWSerial()) {		// will detect which HW serial to open
 1e8:	0f 5b       	subi	r16, 0xBF	; 191
 1ea:	1f 4f       	sbci	r17, 0xFF	; 255
 1ec:	f8 01       	movw	r30, r16
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
        	    	 // start the hardware serial port
        	    	 ((HardwareSerial*)(((ASSENS*)(this->sensor))->asenc->serialport))->begin(ATLAS_BAUD_RATE);
 1f2:	a2 81       	ldd	r26, Z+2	; 0x02
 1f4:	b3 81       	ldd	r27, Z+3	; 0x03
 1f6:	48 1b       	sub	r20, r24
 1f8:	59 0b       	sbc	r21, r25
 1fa:	6a 0b       	sbc	r22, r26
 1fc:	7b 0b       	sbc	r23, r27
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	2a e0       	ldi	r18, 0x0A	; 10
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 20a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 20e:	d8 01       	movw	r26, r16
 210:	6d 93       	st	X+, r22
 212:	7d 93       	st	X+, r23
        	     }	else {
        	    	 SerPrintP("E"); 				// ERROR selecting HW serial
 214:	8d 93       	st	X+, r24
 216:	9c 93       	st	X, r25
 218:	13 97       	sbiw	r26, 0x03	; 3
        	     }
        	     // todo halt?
        	   } else {			// Software Serial (3 or 4 SW serial params scanned)
        	 	  if (edscand >= 3) {	// we at least have YN,S0,S1
 21a:	f7 01       	movw	r30, r14
 21c:	15 ae       	std	Z+61, r1	; 0x3d
 21e:	06 ac       	ldd	r0, Z+62	; 0x3e
 220:	f7 ad       	ldd	r31, Z+63	; 0x3f
        	 		  SerPrintP("ATLAS: SW Serial.\n");
 222:	e0 2d       	mov	r30, r0
 224:	01 90       	ld	r0, Z+
 226:	f0 81       	ld	r31, Z
 228:	e0 2d       	mov	r30, r0
        	 		  SerPrintP("YN: ");Serial.print(cht);SerPrintP(" S0: ");Serial.print(ast.S0);SerPrintP(" S1: ");Serial.print(ast.S1);
 22a:	15 82       	std	Z+5, r1	; 0x05
 22c:	d7 01       	movw	r26, r14
 22e:	59 96       	adiw	r26, 0x19	; 25
 230:	4d 91       	ld	r20, X+
 232:	5c 91       	ld	r21, X
 234:	5a 97       	sbiw	r26, 0x1a	; 26
 236:	66 27       	eor	r22, r22
 238:	57 fd       	sbrc	r21, 7
 23a:	60 95       	com	r22
 23c:	76 2f       	mov	r23, r22
 23e:	db 96       	adiw	r26, 0x3b	; 59
 240:	8d 91       	ld	r24, X+
 242:	9c 91       	ld	r25, X
 244:	dc 97       	sbiw	r26, 0x3c	; 60
 246:	00 c0       	rjmp	.+0      	; 0x248 <_ZN21AtlasScientificSensor14as_sensor_readEv+0x248>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 250:	f7 01       	movw	r30, r14
 252:	81 8d       	ldd	r24, Z+25	; 0x19
 254:	92 8d       	ldd	r25, Z+26	; 0x1a
 256:	ac 01       	movw	r20, r24
 258:	33 e0       	ldi	r19, 0x03	; 3
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	3a 95       	dec	r19
 260:	01 f4       	brne	.+0      	; 0x262 <_ZN21AtlasScientificSensor14as_sensor_readEv+0x262>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	48 0f       	add	r20, r24
 268:	59 1f       	adc	r21, r25
 26a:	66 27       	eor	r22, r22
 26c:	57 fd       	sbrc	r21, 7

        	 		  if (edscand > 3) {
 26e:	60 95       	com	r22
 270:	76 2f       	mov	r23, r22
 272:	83 ad       	ldd	r24, Z+59	; 0x3b
        	 			  SerPrintP(" E: ");Serial.print(ast.E);
 274:	94 ad       	ldd	r25, Z+60	; 0x3c
 276:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor14as_sensor_readEv>
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	90 ef       	ldi	r25, 0xF0	; 240
 27e:	82 ec       	ldi	r24, 0xC2	; 194
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	36 2f       	mov	r19, r22
 284:	49 2f       	mov	r20, r25
 286:	58 2f       	mov	r21, r24
 288:	b9 01       	movw	r22, r18
 28a:	ca 01       	movw	r24, r20
        	 		  } else {
        	 			  ast.E = -1;		// E should be hard pulled GND
 28c:	cc 5b       	subi	r28, 0xBC	; 188
 28e:	df 4f       	sbci	r29, 0xFF	; 255
        	 		  }
        	 		  this->sensor->asenc->S0 = ast.S0;
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
        	 		  this->sensor->asenc->S1 = ast.S1;
 2a4:	ef 90       	pop	r14
 2a6:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensor13perform_checkEv:

00000000 <_ZN21AtlasScientificSensor13perform_checkEv>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor13perform_checkEv>
  14:	7b 01       	movw	r14, r22
  16:	8c 01       	movw	r16, r24
  18:	8d ad       	ldd	r24, Y+61	; 0x3d
  1a:	88 23       	and	r24, r24
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN21AtlasScientificSensor13perform_checkEv+0x1e>
  1e:	c8 01       	movw	r24, r16
  20:	b7 01       	movw	r22, r14
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	48 e4       	ldi	r20, 0x48	; 72
  28:	52 ec       	ldi	r21, 0xC2	; 194
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor13perform_checkEv>
  2e:	18 16       	cp	r1, r24
  30:	04 f4       	brge	.+0      	; 0x32 <_ZN21AtlasScientificSensor13perform_checkEv+0x32>
  32:	ef aa       	std	Y+55, r14	; 0x37
  34:	f8 ae       	std	Y+56, r15	; 0x38
  36:	09 af       	std	Y+57, r16	; 0x39
  38:	1a af       	std	Y+58, r17	; 0x3a
  3a:	dd 24       	eor	r13, r13
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	c8 01       	movw	r24, r16
  3e:	b7 01       	movw	r22, r14
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	30 e0       	ldi	r19, 0x00	; 0

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	48 ec       	ldi	r20, 0xC8	; 200
  46:	52 ec       	ldi	r21, 0xC2	; 194
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensor13perform_checkEv>
  4c:	18 16       	cp	r1, r24
  4e:	04 f4       	brge	.+0      	; 0x50 <_ZN21AtlasScientificSensor13perform_checkEv+0x50>
  50:	dd 24       	eor	r13, r13
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	d3 94       	inc	r13
  54:	8d 2d       	mov	r24, r13
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	df 90       	pop	r13
  64:	08 95       	ret

Disassembly of section .text._ZN21AtlasScientificSensorD0Ev:

00000000 <_ZN21AtlasScientificSensorD0Ev>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	99 83       	std	Y+1, r25	; 0x01
  10:	88 83       	st	Y, r24
  12:	ee ad       	ldd	r30, Y+62	; 0x3e
  14:	ff ad       	ldd	r31, Y+63	; 0x3f
  16:	30 97       	sbiw	r30, 0x00	; 0
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN21AtlasScientificSensorD0Ev+0x1a>
  1a:	a0 81       	ld	r26, Z
  1c:	b1 81       	ldd	r27, Z+1	; 0x01
  1e:	10 97       	sbiw	r26, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN21AtlasScientificSensorD0Ev+0x22>
  22:	c0 5c       	subi	r28, 0xC0	; 192
  24:	df 4f       	sbci	r29, 0xFF	; 255
  26:	88 81       	ld	r24, Y
  28:	c0 54       	subi	r28, 0x40	; 64
  2a:	d0 40       	sbci	r29, 0x00	; 0
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN21AtlasScientificSensorD0Ev+0x30>
  30:	0d 91       	ld	r16, X+
  32:	1c 91       	ld	r17, X
  34:	01 15       	cp	r16, r1
  36:	11 05       	cpc	r17, r1
  38:	01 f0       	breq	.+0      	; 0x3a <_ZN21AtlasScientificSensorD0Ev+0x3a>
  3a:	82 81       	ldd	r24, Z+2	; 0x02
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	93 81       	ldd	r25, Z+3	; 0x03
  3e:	97 fd       	sbrc	r25, 7
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN21AtlasScientificSensorD0Ev+0x42>
  42:	c8 01       	movw	r24, r16

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  56:	ee ad       	ldd	r30, Y+62	; 0x3e
  58:	ff ad       	ldd	r31, Y+63	; 0x3f
  5a:	01 90       	ld	r0, Z+
  5c:	f0 81       	ld	r31, Z
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	e0 2d       	mov	r30, r0
  60:	11 82       	std	Z+1, r1	; 0x01
  62:	10 82       	st	Z, r1
  64:	ee ad       	ldd	r30, Y+62	; 0x3e
  66:	ff ad       	ldd	r31, Y+63	; 0x3f
  68:	80 81       	ld	r24, Z
  6a:	91 81       	ldd	r25, Z+1	; 0x01
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  78:	ee ad       	ldd	r30, Y+62	; 0x3e
  7a:	ff ad       	ldd	r31, Y+63	; 0x3f
  7c:	11 82       	std	Z+1, r1	; 0x01
  7e:	10 82       	st	Z, r1
  80:	8e ad       	ldd	r24, Y+62	; 0x3e
  82:	9f ad       	ldd	r25, Y+63	; 0x3f
  84:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  90:	1f ae       	std	Y+63, r1	; 0x3f
  92:	1e ae       	std	Y+62, r1	; 0x3e
  94:	8b ad       	ldd	r24, Y+59	; 0x3b
  96:	9c ad       	ldd	r25, Y+60	; 0x3c
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  a4:	1c ae       	std	Y+60, r1	; 0x3c
  a6:	1b ae       	std	Y+59, r1	; 0x3b
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  ae:	ce 01       	movw	r24, r28
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	1f 91       	pop	r17
  ba:	0f 91       	pop	r16
  bc:	08 95       	ret
  be:	c8 01       	movw	r24, r16
  c0:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD0Ev>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZZN21AtlasScientificSensor14selectSWSerialEvE3__c+0x1>

Disassembly of section .text._ZN21AtlasScientificSensorD1Ev:

00000000 <_ZN21AtlasScientificSensorD1Ev>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	99 83       	std	Y+1, r25	; 0x01
  10:	88 83       	st	Y, r24
  12:	ee ad       	ldd	r30, Y+62	; 0x3e
  14:	ff ad       	ldd	r31, Y+63	; 0x3f
  16:	30 97       	sbiw	r30, 0x00	; 0
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN21AtlasScientificSensorD1Ev+0x1a>
  1a:	a0 81       	ld	r26, Z
  1c:	b1 81       	ldd	r27, Z+1	; 0x01
  1e:	10 97       	sbiw	r26, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN21AtlasScientificSensorD1Ev+0x22>
  22:	c0 5c       	subi	r28, 0xC0	; 192
  24:	df 4f       	sbci	r29, 0xFF	; 255
  26:	88 81       	ld	r24, Y
  28:	c0 54       	subi	r28, 0x40	; 64
  2a:	d0 40       	sbci	r29, 0x00	; 0
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN21AtlasScientificSensorD1Ev+0x30>
  30:	0d 91       	ld	r16, X+
  32:	1c 91       	ld	r17, X
  34:	01 15       	cp	r16, r1
  36:	11 05       	cpc	r17, r1
  38:	01 f0       	breq	.+0      	; 0x3a <_ZN21AtlasScientificSensorD1Ev+0x3a>
  3a:	82 81       	ldd	r24, Z+2	; 0x02
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	93 81       	ldd	r25, Z+3	; 0x03
  3e:	97 fd       	sbrc	r25, 7
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN21AtlasScientificSensorD1Ev+0x42>
  42:	c8 01       	movw	r24, r16

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  56:	ee ad       	ldd	r30, Y+62	; 0x3e
  58:	ff ad       	ldd	r31, Y+63	; 0x3f
  5a:	01 90       	ld	r0, Z+
  5c:	f0 81       	ld	r31, Z
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	e0 2d       	mov	r30, r0
  60:	11 82       	std	Z+1, r1	; 0x01
  62:	10 82       	st	Z, r1
  64:	ee ad       	ldd	r30, Y+62	; 0x3e
  66:	ff ad       	ldd	r31, Y+63	; 0x3f
  68:	80 81       	ld	r24, Z
  6a:	91 81       	ldd	r25, Z+1	; 0x01
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  78:	ee ad       	ldd	r30, Y+62	; 0x3e
  7a:	ff ad       	ldd	r31, Y+63	; 0x3f
  7c:	11 82       	std	Z+1, r1	; 0x01
  7e:	10 82       	st	Z, r1
  80:	8e ad       	ldd	r24, Y+62	; 0x3e
  82:	9f ad       	ldd	r25, Y+63	; 0x3f
  84:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  90:	1f ae       	std	Y+63, r1	; 0x3f
  92:	1e ae       	std	Y+62, r1	; 0x3e
  94:	8b ad       	ldd	r24, Y+59	; 0x3b
  96:	9c ad       	ldd	r25, Y+60	; 0x3c
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  a4:	1c ae       	std	Y+60, r1	; 0x3c
  a6:	1b ae       	std	Y+59, r1	; 0x3b
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret
  b8:	c8 01       	movw	r24, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD1Ev>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_ZZN21AtlasScientificSensor14selectSWSerialEvE3__c_0+0x10>

Disassembly of section .text._ZN21AtlasScientificSensorD2Ev:

00000000 <_ZN21AtlasScientificSensorD2Ev>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	99 83       	std	Y+1, r25	; 0x01
  10:	88 83       	st	Y, r24
  12:	ee ad       	ldd	r30, Y+62	; 0x3e
  14:	ff ad       	ldd	r31, Y+63	; 0x3f
  16:	30 97       	sbiw	r30, 0x00	; 0
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN21AtlasScientificSensorD2Ev+0x1a>
  1a:	a0 81       	ld	r26, Z
  1c:	b1 81       	ldd	r27, Z+1	; 0x01
  1e:	10 97       	sbiw	r26, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN21AtlasScientificSensorD2Ev+0x22>
  22:	c0 5c       	subi	r28, 0xC0	; 192
  24:	df 4f       	sbci	r29, 0xFF	; 255
  26:	88 81       	ld	r24, Y
  28:	c0 54       	subi	r28, 0x40	; 64
  2a:	d0 40       	sbci	r29, 0x00	; 0
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN21AtlasScientificSensorD2Ev+0x30>
  30:	0d 91       	ld	r16, X+
  32:	1c 91       	ld	r17, X
  34:	01 15       	cp	r16, r1
  36:	11 05       	cpc	r17, r1
  38:	01 f0       	breq	.+0      	; 0x3a <_ZN21AtlasScientificSensorD2Ev+0x3a>
  3a:	82 81       	ldd	r24, Z+2	; 0x02
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	93 81       	ldd	r25, Z+3	; 0x03
  3e:	97 fd       	sbrc	r25, 7
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN21AtlasScientificSensorD2Ev+0x42>
  42:	c8 01       	movw	r24, r16

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  56:	ee ad       	ldd	r30, Y+62	; 0x3e
  58:	ff ad       	ldd	r31, Y+63	; 0x3f
  5a:	01 90       	ld	r0, Z+
  5c:	f0 81       	ld	r31, Z
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	e0 2d       	mov	r30, r0
  60:	11 82       	std	Z+1, r1	; 0x01
  62:	10 82       	st	Z, r1
  64:	ee ad       	ldd	r30, Y+62	; 0x3e
  66:	ff ad       	ldd	r31, Y+63	; 0x3f
  68:	80 81       	ld	r24, Z
  6a:	91 81       	ldd	r25, Z+1	; 0x01
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  78:	ee ad       	ldd	r30, Y+62	; 0x3e
  7a:	ff ad       	ldd	r31, Y+63	; 0x3f
  7c:	11 82       	std	Z+1, r1	; 0x01
  7e:	10 82       	st	Z, r1
  80:	8e ad       	ldd	r24, Y+62	; 0x3e
  82:	9f ad       	ldd	r25, Y+63	; 0x3f
  84:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  90:	1f ae       	std	Y+63, r1	; 0x3f
  92:	1e ae       	std	Y+62, r1	; 0x3e
  94:	8b ad       	ldd	r24, Y+59	; 0x3b
  96:	9c ad       	ldd	r25, Y+60	; 0x3c
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  a4:	1c ae       	std	Y+60, r1	; 0x3c
  a6:	1b ae       	std	Y+59, r1	; 0x3b
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret
  b8:	c8 01       	movw	r24, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorD2Ev>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_ZZN21AtlasScientificSensor14selectSWSerialEvE3__c_0+0x10>

Disassembly of section .text._ZN21AtlasScientificSensorC1EP6SDCONFPv:

00000000 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	28 97       	sbiw	r28, 0x08	; 8
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	7c 01       	movw	r14, r24
  2a:	8b 01       	movw	r16, r22
  2c:	5a 01       	movw	r10, r20
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	d7 01       	movw	r26, r14
  38:	8d 93       	st	X+, r24
  3a:	9c 93       	st	X, r25
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	c7 01       	movw	r24, r14
  3e:	b8 01       	movw	r22, r16
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	88 e0       	ldi	r24, 0x08	; 8
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
  4c:	f7 01       	movw	r30, r14
  4e:	86 af       	std	Z+62, r24	; 0x3e
  50:	97 af       	std	Z+63, r25	; 0x3f
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	fc 01       	movw	r30, r24
  54:	88 e0       	ldi	r24, 0x08	; 8
  56:	df 01       	movw	r26, r30
  58:	1d 92       	st	X+, r1
  5a:	8a 95       	dec	r24
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x5e>
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	d7 01       	movw	r26, r14
  60:	de 96       	adiw	r26, 0x3e	; 62
  62:	ed 91       	ld	r30, X+
  64:	fc 91       	ld	r31, X
  66:	df 97       	sbiw	r26, 0x3f	; 63
  68:	8f ef       	ldi	r24, 0xFF	; 255
  6a:	9f ef       	ldi	r25, 0xFF	; 255
  6c:	93 83       	std	Z+3, r25	; 0x03
  6e:	82 83       	std	Z+2, r24	; 0x02
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	ed b7       	in	r30, 0x3d	; 61
  72:	fe b7       	in	r31, 0x3e	; 62
  74:	3c 97       	sbiw	r30, 0x0c	; 12
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	fe bf       	out	0x3e, r31	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	ed bf       	out	0x3d, r30	; 61
  80:	31 96       	adiw	r30, 0x01	; 1
  82:	2d e1       	ldi	r18, 0x1D	; 29
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	e2 0e       	add	r14, r18
  88:	f3 1e       	adc	r15, r19
  8a:	ad b7       	in	r26, 0x3d	; 61
  8c:	be b7       	in	r27, 0x3e	; 62
  8e:	12 96       	adiw	r26, 0x02	; 2
  90:	fc 92       	st	X, r15
  92:	ee 92       	st	-X, r14
  94:	11 97       	sbiw	r26, 0x01	; 1
  96:	23 ee       	ldi	r18, 0xE3	; 227
  98:	3f ef       	ldi	r19, 0xFF	; 255
  9a:	e2 0e       	add	r14, r18
  9c:	f3 1e       	adc	r15, r19
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	93 83       	std	Z+3, r25	; 0x03
  a4:	82 83       	std	Z+2, r24	; 0x02
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	95 83       	std	Z+5, r25	; 0x05
  ac:	84 83       	std	Z+4, r24	; 0x04
  ae:	45 e0       	ldi	r20, 0x05	; 5
  b0:	84 2e       	mov	r8, r20
  b2:	91 2c       	mov	r9, r1
  b4:	8c 0e       	add	r8, r28
  b6:	9d 1e       	adc	r9, r29
  b8:	97 82       	std	Z+7, r9	; 0x07
  ba:	86 82       	std	Z+6, r8	; 0x06
  bc:	ce 01       	movw	r24, r28
  be:	06 96       	adiw	r24, 0x06	; 6
  c0:	91 87       	std	Z+9, r25	; 0x09
  c2:	80 87       	std	Z+8, r24	; 0x08
  c4:	ce 01       	movw	r24, r28
  c6:	07 96       	adiw	r24, 0x07	; 7
  c8:	93 87       	std	Z+11, r25	; 0x0b
  ca:	82 87       	std	Z+10, r24	; 0x0a
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
  d0:	8c 01       	movw	r16, r24

  // todo we might want to bail out now if 0 < edscand  < 3 because it means the config for SW serial is corrupted

  // start building up the sensor
  if (this->sensor != NULL) {
  d2:	8d b7       	in	r24, 0x3d	; 61
  d4:	9e b7       	in	r25, 0x3e	; 62
  d6:	0c 96       	adiw	r24, 0x0c	; 12
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	9e bf       	out	0x3e, r25	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	8d bf       	out	0x3d, r24	; 61
  e2:	d7 01       	movw	r26, r14
  e4:	de 96       	adiw	r26, 0x3e	; 62
  e6:	cd 90       	ld	r12, X+
  e8:	dc 90       	ld	r13, X
  ea:	df 97       	sbiw	r26, 0x3f	; 63
  ec:	c1 14       	cp	r12, r1
  ee:	d1 04       	cpc	r13, r1
  f0:	01 f4       	brne	.+0      	; 0xf2 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0xf2>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0xf4>
      if (assensor!=NULL) {			// if reusing another AtlasScientific on this port (should be SW Serial!)
  f4:	a1 14       	cp	r10, r1
  f6:	b1 04       	cpc	r11, r1
  f8:	01 f4       	brne	.+0      	; 0xfa <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0xfa>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0xfc>
// returns true if using software serial
bool AtlasScientificSensor::is_soft_serial() {
	// decision is made if S0 and S1 filled and a channel is provided
	//return (this->sensor != NULL && this->sensor->asenc != NULL && this->sensor->asenc->S0 != 0 && this->sensor->asenc->S1 != 0 && this->sensor->channel > -1 );
	// if channel is used, it should be a software serial
	return (this->sensor != NULL && this->sensor->channel > -1);
  fc:	f5 01       	movw	r30, r10
  fe:	06 ad       	ldd	r16, Z+62	; 0x3e
 100:	17 ad       	ldd	r17, Z+63	; 0x3f
 102:	01 15       	cp	r16, r1
 104:	11 05       	cpc	r17, r1
 106:	01 f4       	brne	.+0      	; 0x108 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x108>
 108:	00 c0       	rjmp	.+0      	; 0x10a <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x10a>
 10a:	d8 01       	movw	r26, r16
 10c:	12 96       	adiw	r26, 0x02	; 2
 10e:	8d 91       	ld	r24, X+
 110:	9c 91       	ld	r25, X
 112:	13 97       	sbiw	r26, 0x03	; 3
 114:	97 fd       	sbrc	r25, 7
 116:	00 c0       	rjmp	.+0      	; 0x118 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x118>

  // start building up the sensor
  if (this->sensor != NULL) {
      if (assensor!=NULL) {			// if reusing another AtlasScientific on this port (should be SW Serial!)
    	  if (((AtlasScientificSensor*)assensor)->is_soft_serial()) {	// reusable Atlas Sensor MUST be SW
			  this->bPrimary = false;
 118:	e0 e4       	ldi	r30, 0x40	; 64
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	ee 0e       	add	r14, r30
 11e:	ff 1e       	adc	r15, r31
 120:	d7 01       	movw	r26, r14
 122:	1c 92       	st	X, r1
 124:	e0 ec       	ldi	r30, 0xC0	; 192
 126:	ff ef       	ldi	r31, 0xFF	; 255
 128:	ee 0e       	add	r14, r30
 12a:	ff 1e       	adc	r15, r31
			  this->sensor->asenc = ((AtlasScientificSensor*)assensor)->sensor->asenc;
 12c:	d8 01       	movw	r26, r16
 12e:	6d 91       	ld	r22, X+
 130:	7c 91       	ld	r23, X
 132:	f6 01       	movw	r30, r12
 134:	71 83       	std	Z+1, r23	; 0x01
 136:	60 83       	st	Z, r22
			  if (memcmp(&(ast.S0), &(this->sensor->asenc->S0), sizeof(byte)*3) == 0) {
 138:	6e 5f       	subi	r22, 0xFE	; 254
 13a:	7f 4f       	sbci	r23, 0xFF	; 255
 13c:	c4 01       	movw	r24, r8
 13e:	43 e0       	ldi	r20, 0x03	; 3
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	01 f4       	brne	.+0      	; 0x14a <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x14a>
				  if (cht != ((AtlasScientificSensor*)assensor)->sensor->channel) {
 14a:	29 81       	ldd	r18, Y+1	; 0x01
 14c:	3a 81       	ldd	r19, Y+2	; 0x02
 14e:	d8 01       	movw	r26, r16
 150:	12 96       	adiw	r26, 0x02	; 2
 152:	8d 91       	ld	r24, X+
 154:	9c 91       	ld	r25, X
 156:	13 97       	sbiw	r26, 0x03	; 3
 158:	28 17       	cp	r18, r24
 15a:	39 07       	cpc	r19, r25
 15c:	01 f0       	breq	.+0      	; 0x15e <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x15e>
					  this->sensor->channel = cht;	// OK, reusing a softserial, setting channel
 15e:	f6 01       	movw	r30, r12
 160:	33 83       	std	Z+3, r19	; 0x03
 162:	22 83       	std	Z+2, r18	; 0x02
					  SerPrintP(" channel "); Serial.print(this->sensor->channel);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 16c:	d7 01       	movw	r26, r14
 16e:	de 96       	adiw	r26, 0x3e	; 62
 170:	ed 91       	ld	r30, X+
 172:	fc 91       	ld	r31, X
 174:	df 97       	sbiw	r26, 0x3f	; 63
 176:	62 81       	ldd	r22, Z+2	; 0x02
 178:	73 81       	ldd	r23, Z+3	; 0x03
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	4a e0       	ldi	r20, 0x0A	; 10
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 186:	00 c0       	rjmp	.+0      	; 0x188 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x188>
				  } else {
					  SerPrintP("E");		// ERROR same SW serial channel
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	00 c0       	rjmp	.+0      	; 0x18e <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x18e>
				  }
			  } else {
				  SerPrintP("E");			// ERROR different SoftSerial config on same HW pins
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	00 c0       	rjmp	.+0      	; 0x194 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x194>
			  }
    	  } else {
    		  SerPrintP("E");				// ERROR invalid reusable Atlas Sensor (not SW Serial)
    	  }
      } else {
          this->bPrimary = true;
 194:	e0 e4       	ldi	r30, 0x40	; 64
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ee 0e       	add	r14, r30
 19a:	ff 1e       	adc	r15, r31
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	d7 01       	movw	r26, r14
 1a0:	8c 93       	st	X, r24
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	ff ef       	ldi	r31, 0xFF	; 255
 1a6:	ee 0e       	add	r14, r30
 1a8:	ff 1e       	adc	r15, r31
          this->sensor->asenc = (ASENC*)malloc(sizeof(ASENC));
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 1b2:	d6 01       	movw	r26, r12
 1b4:	8c 93       	st	X, r24
 1b6:	11 96       	adiw	r26, 0x01	; 1
 1b8:	9c 93       	st	X, r25
          if (this->sensor->asenc != NULL) {
 1ba:	d7 01       	movw	r26, r14
 1bc:	de 96       	adiw	r26, 0x3e	; 62
 1be:	ed 91       	ld	r30, X+
 1c0:	fc 91       	ld	r31, X
 1c2:	df 97       	sbiw	r26, 0x3f	; 63
 1c4:	01 90       	ld	r0, Z+
 1c6:	f0 81       	ld	r31, Z
 1c8:	e0 2d       	mov	r30, r0
 1ca:	30 97       	sbiw	r30, 0x00	; 0
 1cc:	01 f4       	brne	.+0      	; 0x1ce <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x1ce>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x1d0>
        	  memset(this->sensor->asenc,0,sizeof(ASENC));
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	df 01       	movw	r26, r30
 1d4:	1d 92       	st	X+, r1
 1d6:	8a 95       	dec	r24
 1d8:	01 f4       	brne	.+0      	; 0x1da <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x1da>
        	 // get ptr to HW serial or allocate a new SW serial object, according to extra config
        	 if (edscand == 0) {	// hardware serial (0 SW serial parameters scanned)
 1da:	01 15       	cp	r16, r1
 1dc:	11 05       	cpc	r17, r1
 1de:	01 f4       	brne	.+0      	; 0x1e0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x1e0>
        	 //#ifdef DEBUG
        	     SerPrintP("ATLAS: HW Serial.\n");
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
        	 //#endif
        	     if (this->selectHWSerial()) {		// will detect which HW serial to open
 1e8:	c7 01       	movw	r24, r14
 1ea:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 1ee:	88 23       	and	r24, r24
 1f0:	01 f0       	breq	.+0      	; 0x1f2 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x1f2>
        	    	 // start the hardware serial port
        	    	 ((HardwareSerial*)(((ASSENS*)(this->sensor))->asenc->serialport))->begin(ATLAS_BAUD_RATE);
 1f2:	d7 01       	movw	r26, r14
 1f4:	de 96       	adiw	r26, 0x3e	; 62
 1f6:	ed 91       	ld	r30, X+
 1f8:	fc 91       	ld	r31, X
 1fa:	df 97       	sbiw	r26, 0x3f	; 63
 1fc:	01 90       	ld	r0, Z+
 1fe:	f0 81       	ld	r31, Z
 200:	e0 2d       	mov	r30, r0
 202:	80 81       	ld	r24, Z
 204:	91 81       	ldd	r25, Z+1	; 0x01
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	56 e9       	ldi	r21, 0x96	; 150
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 212:	00 c0       	rjmp	.+0      	; 0x214 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x214>
        	     }	else {
        	    	 SerPrintP("E"); 				// ERROR selecting HW serial
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	00 c0       	rjmp	.+0      	; 0x21a <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x21a>
        	     }
        	     // todo halt?
        	   } else {			// Software Serial (3 or 4 SW serial params scanned)
        	 	  if (edscand >= 3) {	// we at least have YN,S0,S1
 21a:	03 30       	cpi	r16, 0x03	; 3
 21c:	11 05       	cpc	r17, r1
 21e:	04 f4       	brge	.+0      	; 0x220 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x220>
 220:	00 c0       	rjmp	.+0      	; 0x222 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x222>
        	 		  SerPrintP("ATLAS: SW Serial.\n");
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
        	 		  SerPrintP("YN: ");Serial.print(cht);SerPrintP(" S0: ");Serial.print(ast.S0);SerPrintP(" S1: ");Serial.print(ast.S1);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 232:	69 81       	ldd	r22, Y+1	; 0x01
 234:	7a 81       	ldd	r23, Y+2	; 0x02
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	4a e0       	ldi	r20, 0x0A	; 10
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	6d 81       	ldd	r22, Y+5	; 0x05
 250:	4a e0       	ldi	r20, 0x0A	; 10
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	6e 81       	ldd	r22, Y+6	; 0x06
 266:	4a e0       	ldi	r20, 0x0A	; 10
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>

        	 		  if (edscand > 3) {
 26e:	03 30       	cpi	r16, 0x03	; 3
 270:	11 05       	cpc	r17, r1
 272:	01 f0       	breq	.+0      	; 0x274 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x274>
        	 			  SerPrintP(" E: ");Serial.print(ast.E);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	6f 81       	ldd	r22, Y+7	; 0x07
 282:	4a e0       	ldi	r20, 0x0A	; 10
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x28c>
        	 		  } else {
        	 			  ast.E = -1;		// E should be hard pulled GND
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8f 83       	std	Y+7, r24	; 0x07
        	 		  }
        	 		  this->sensor->asenc->S0 = ast.S0;
 290:	d7 01       	movw	r26, r14
 292:	de 96       	adiw	r26, 0x3e	; 62
 294:	ed 91       	ld	r30, X+
 296:	fc 91       	ld	r31, X
 298:	df 97       	sbiw	r26, 0x3f	; 63
 29a:	01 90       	ld	r0, Z+
 29c:	f0 81       	ld	r31, Z
 29e:	e0 2d       	mov	r30, r0
 2a0:	8d 81       	ldd	r24, Y+5	; 0x05
 2a2:	82 83       	std	Z+2, r24	; 0x02
        	 		  this->sensor->asenc->S1 = ast.S1;
 2a4:	de 96       	adiw	r26, 0x3e	; 62
 2a6:	ed 91       	ld	r30, X+
 2a8:	fc 91       	ld	r31, X
 2aa:	df 97       	sbiw	r26, 0x3f	; 63
 2ac:	01 90       	ld	r0, Z+
 2ae:	f0 81       	ld	r31, Z
 2b0:	e0 2d       	mov	r30, r0
 2b2:	8e 81       	ldd	r24, Y+6	; 0x06
 2b4:	83 83       	std	Z+3, r24	; 0x03
        	 		  this->sensor->asenc->E = ast.E;
 2b6:	de 96       	adiw	r26, 0x3e	; 62
 2b8:	ed 91       	ld	r30, X+
 2ba:	fc 91       	ld	r31, X
 2bc:	df 97       	sbiw	r26, 0x3f	; 63
 2be:	01 90       	ld	r0, Z+
 2c0:	f0 81       	ld	r31, Z
 2c2:	e0 2d       	mov	r30, r0
 2c4:	8f 81       	ldd	r24, Y+7	; 0x07
 2c6:	84 83       	std	Z+4, r24	; 0x04
//        	 		  this->sensor->channel = cht;		// todo, remove, this should have been done already
        	 		  if (this->selectSWSerial()) {
 2c8:	c7 01       	movw	r24, r14
 2ca:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 2ce:	88 23       	and	r24, r24
 2d0:	01 f0       	breq	.+0      	; 0x2d2 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x2d2>
        	 			 ((SoftwareSerial*)(((ASSENS*)(this->sensor))->asenc->serialport))->begin(ATLAS_BAUD_RATE);
 2d2:	d7 01       	movw	r26, r14
 2d4:	de 96       	adiw	r26, 0x3e	; 62
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	df 97       	sbiw	r26, 0x3f	; 63
 2dc:	01 90       	ld	r0, Z+
 2de:	f0 81       	ld	r31, Z
 2e0:	e0 2d       	mov	r30, r0
 2e2:	80 81       	ld	r24, Z
 2e4:	91 81       	ldd	r25, Z+1	; 0x01
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	56 e9       	ldi	r21, 0x96	; 150
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x2f4>
        	 		  } else {
        	 			  SerPrintP("E2");		// ERROR selecting sw serial
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x2fa>
        	 		  }
        	 	  } else {
        	 		  SerPrintP("E1");			// ERROR configuration error, at least 3 parameters (YN,S0,S1) should be provided for softserial
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
        	 	  }
        	   }
        	 	// todo bail out on previous errors otherwise state will look like ready even if error(s) occurred
          	this->sensor->asenc->state = STATE_READY;
 302:	d7 01       	movw	r26, r14
 304:	de 96       	adiw	r26, 0x3e	; 62
 306:	ed 91       	ld	r30, X+
 308:	fc 91       	ld	r31, X
 30a:	df 97       	sbiw	r26, 0x3f	; 63
 30c:	01 90       	ld	r0, Z+
 30e:	f0 81       	ld	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	15 82       	std	Z+5, r1	; 0x05
 314:	00 c0       	rjmp	.+0      	; 0x316 <_ZN21AtlasScientificSensorC1EP6SDCONFPv+0x316>
          } else {
          	SerPrintP("E0");			// ERROR - out of ram
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
          }
      }

      this->sensor->value = 0;
 31e:	d7 01       	movw	r26, r14
 320:	de 96       	adiw	r26, 0x3e	; 62
 322:	ed 91       	ld	r30, X+
 324:	fc 91       	ld	r31, X
 326:	df 97       	sbiw	r26, 0x3f	; 63
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	a0 e0       	ldi	r26, 0x00	; 0
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	84 83       	std	Z+4, r24	; 0x04
 332:	95 83       	std	Z+5, r25	; 0x05
 334:	a6 83       	std	Z+6, r26	; 0x06
 336:	b7 83       	std	Z+7, r27	; 0x07
      this->fvalue = 0;
 338:	f7 01       	movw	r30, r14
 33a:	87 ab       	std	Z+55, r24	; 0x37
 33c:	90 af       	std	Z+56, r25	; 0x38
 33e:	a1 af       	std	Z+57, r26	; 0x39
 340:	b2 af       	std	Z+58, r27	; 0x3a

  }

  this->_lm = millis();
 342:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC1EP6SDCONFPv>
 346:	21 e4       	ldi	r18, 0x41	; 65
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	e2 0e       	add	r14, r18
 34c:	f3 1e       	adc	r15, r19
 34e:	d7 01       	movw	r26, r14
 350:	6d 93       	st	X+, r22
 352:	7d 93       	st	X+, r23
 354:	8d 93       	st	X+, r24
 356:	9c 93       	st	X, r25
 358:	13 97       	sbiw	r26, 0x03	; 3
 35a:	ef eb       	ldi	r30, 0xBF	; 191
 35c:	ff ef       	ldi	r31, 0xFF	; 255
 35e:	ee 0e       	add	r14, r30
 360:	ff 1e       	adc	r15, r31
  this->_state = STATE_READY;
 362:	d7 01       	movw	r26, r14
 364:	dd 96       	adiw	r26, 0x3d	; 61
 366:	1c 92       	st	X, r1
}
 368:	28 96       	adiw	r28, 0x08	; 8
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	cf 91       	pop	r28
 376:	df 91       	pop	r29
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	bf 90       	pop	r11
 386:	af 90       	pop	r10
 388:	9f 90       	pop	r9
 38a:	8f 90       	pop	r8
 38c:	08 95       	ret
				  }
			  } else {
				  SerPrintP("E");			// ERROR different SoftSerial config on same HW pins
			  }
    	  } else {
    		  SerPrintP("E");				// ERROR invalid reusable Atlas Sensor (not SW Serial)
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	00 c0       	rjmp	.+0      	; 0x394 <_ZZN21AtlasScientificSensorC1EP6SDCONFPvE3__c+0x22e>

Disassembly of section .text._ZN21AtlasScientificSensorC2EP6SDCONFPv:

00000000 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>:
 *  Created on: Aug 27, 2012
 *      Author: George Schreiber
 */

#include "AtlasScientificSensor.h"
AtlasScientificSensor::AtlasScientificSensor(SDCONF *sdc, void *assensor)
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	28 97       	sbiw	r28, 0x08	; 8
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	7c 01       	movw	r14, r24
  2a:	8b 01       	movw	r16, r22
  2c:	5a 01       	movw	r10, r20
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	d7 01       	movw	r26, r14
  38:	8d 93       	st	X+, r24
  3a:	9c 93       	st	X, r25
{
  int edscand = 0;		// extra data parameters scanned
  this->initSensor(sdc);
  3c:	c7 01       	movw	r24, r14
  3e:	b8 01       	movw	r22, r16
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>

  this->sensor = (ASSENS*)malloc(sizeof(ASSENS));		// allocate sensor data
  44:	88 e0       	ldi	r24, 0x08	; 8
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
  4c:	f7 01       	movw	r30, r14
  4e:	86 af       	std	Z+62, r24	; 0x3e
  50:	97 af       	std	Z+63, r25	; 0x3f
  memset(this->sensor,0,sizeof(ASSENS));				// 0 the memory
  52:	fc 01       	movw	r30, r24
  54:	88 e0       	ldi	r24, 0x08	; 8
  56:	df 01       	movw	r26, r30
  58:	1d 92       	st	X+, r1
  5a:	8a 95       	dec	r24
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x5e>
  this->sensor->channel = -1;							// channel defaults to -1 (unused)
  5e:	d7 01       	movw	r26, r14
  60:	de 96       	adiw	r26, 0x3e	; 62
  62:	ed 91       	ld	r30, X+
  64:	fc 91       	ld	r31, X
  66:	df 97       	sbiw	r26, 0x3f	; 63
  68:	8f ef       	ldi	r24, 0xFF	; 255
  6a:	9f ef       	ldi	r25, 0xFF	; 255
  6c:	93 83       	std	Z+3, r25	; 0x03
  6e:	82 83       	std	Z+2, r24	; 0x02
  // pre-scan (before building sensor) the extra parameters from the config

  // extra data should hold RS-232 port splitter configuration -> Software Serial
  // if present, it should be "<YN>,<S0>,<S1>,<E>", where YN is the split port no. 0-3, S0 and S1 are the pins to select channel and E is the enable pin
  edscand = sscanf(this->config.extra_data, "%d,%d,%d,%d",
		  	  	  	  	  	  	  	&cht, &(ast.S0), &(ast.S1), &(ast.E));
  70:	ed b7       	in	r30, 0x3d	; 61
  72:	fe b7       	in	r31, 0x3e	; 62
  74:	3c 97       	sbiw	r30, 0x0c	; 12
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	fe bf       	out	0x3e, r31	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	ed bf       	out	0x3d, r30	; 61
  80:	31 96       	adiw	r30, 0x01	; 1
  82:	2d e1       	ldi	r18, 0x1D	; 29
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	e2 0e       	add	r14, r18
  88:	f3 1e       	adc	r15, r19
  8a:	ad b7       	in	r26, 0x3d	; 61
  8c:	be b7       	in	r27, 0x3e	; 62
  8e:	12 96       	adiw	r26, 0x02	; 2
  90:	fc 92       	st	X, r15
  92:	ee 92       	st	-X, r14
  94:	11 97       	sbiw	r26, 0x01	; 1
  96:	23 ee       	ldi	r18, 0xE3	; 227
  98:	3f ef       	ldi	r19, 0xFF	; 255
  9a:	e2 0e       	add	r14, r18
  9c:	f3 1e       	adc	r15, r19
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	93 83       	std	Z+3, r25	; 0x03
  a4:	82 83       	std	Z+2, r24	; 0x02
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	95 83       	std	Z+5, r25	; 0x05
  ac:	84 83       	std	Z+4, r24	; 0x04
  ae:	55 e0       	ldi	r21, 0x05	; 5
  b0:	85 2e       	mov	r8, r21
  b2:	91 2c       	mov	r9, r1
  b4:	8c 0e       	add	r8, r28
  b6:	9d 1e       	adc	r9, r29
  b8:	97 82       	std	Z+7, r9	; 0x07
  ba:	86 82       	std	Z+6, r8	; 0x06
  bc:	ce 01       	movw	r24, r28
  be:	06 96       	adiw	r24, 0x06	; 6
  c0:	91 87       	std	Z+9, r25	; 0x09
  c2:	80 87       	std	Z+8, r24	; 0x08
  c4:	ce 01       	movw	r24, r28
  c6:	07 96       	adiw	r24, 0x07	; 7
  c8:	93 87       	std	Z+11, r25	; 0x0b
  ca:	82 87       	std	Z+10, r24	; 0x0a
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
  d0:	8c 01       	movw	r16, r24

  // todo we might want to bail out now if 0 < edscand  < 3 because it means the config for SW serial is corrupted

  // start building up the sensor
  if (this->sensor != NULL) {
  d2:	8d b7       	in	r24, 0x3d	; 61
  d4:	9e b7       	in	r25, 0x3e	; 62
  d6:	0c 96       	adiw	r24, 0x0c	; 12
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	9e bf       	out	0x3e, r25	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	8d bf       	out	0x3d, r24	; 61
  e2:	d7 01       	movw	r26, r14
  e4:	de 96       	adiw	r26, 0x3e	; 62
  e6:	cd 90       	ld	r12, X+
  e8:	dc 90       	ld	r13, X
  ea:	df 97       	sbiw	r26, 0x3f	; 63
  ec:	c1 14       	cp	r12, r1
  ee:	d1 04       	cpc	r13, r1
  f0:	01 f4       	brne	.+0      	; 0xf2 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0xf2>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0xf4>
      if (assensor!=NULL) {			// if reusing another AtlasScientific on this port (should be SW Serial!)
  f4:	a1 14       	cp	r10, r1
  f6:	b1 04       	cpc	r11, r1
  f8:	01 f4       	brne	.+0      	; 0xfa <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0xfa>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0xfc>
// returns true if using software serial
bool AtlasScientificSensor::is_soft_serial() {
	// decision is made if S0 and S1 filled and a channel is provided
	//return (this->sensor != NULL && this->sensor->asenc != NULL && this->sensor->asenc->S0 != 0 && this->sensor->asenc->S1 != 0 && this->sensor->channel > -1 );
	// if channel is used, it should be a software serial
	return (this->sensor != NULL && this->sensor->channel > -1);
  fc:	f5 01       	movw	r30, r10
  fe:	06 ad       	ldd	r16, Z+62	; 0x3e
 100:	17 ad       	ldd	r17, Z+63	; 0x3f
 102:	01 15       	cp	r16, r1
 104:	11 05       	cpc	r17, r1
 106:	01 f4       	brne	.+0      	; 0x108 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x108>
 108:	00 c0       	rjmp	.+0      	; 0x10a <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x10a>
 10a:	d8 01       	movw	r26, r16
 10c:	12 96       	adiw	r26, 0x02	; 2
 10e:	8d 91       	ld	r24, X+
 110:	9c 91       	ld	r25, X
 112:	13 97       	sbiw	r26, 0x03	; 3
 114:	97 fd       	sbrc	r25, 7
 116:	00 c0       	rjmp	.+0      	; 0x118 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x118>

  // start building up the sensor
  if (this->sensor != NULL) {
      if (assensor!=NULL) {			// if reusing another AtlasScientific on this port (should be SW Serial!)
    	  if (((AtlasScientificSensor*)assensor)->is_soft_serial()) {	// reusable Atlas Sensor MUST be SW
			  this->bPrimary = false;
 118:	e0 e4       	ldi	r30, 0x40	; 64
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	ee 0e       	add	r14, r30
 11e:	ff 1e       	adc	r15, r31
 120:	d7 01       	movw	r26, r14
 122:	1c 92       	st	X, r1
 124:	e0 ec       	ldi	r30, 0xC0	; 192
 126:	ff ef       	ldi	r31, 0xFF	; 255
 128:	ee 0e       	add	r14, r30
 12a:	ff 1e       	adc	r15, r31
			  this->sensor->asenc = ((AtlasScientificSensor*)assensor)->sensor->asenc;
 12c:	d8 01       	movw	r26, r16
 12e:	6d 91       	ld	r22, X+
 130:	7c 91       	ld	r23, X
 132:	f6 01       	movw	r30, r12
 134:	71 83       	std	Z+1, r23	; 0x01
 136:	60 83       	st	Z, r22
			  if (memcmp(&(ast.S0), &(this->sensor->asenc->S0), sizeof(byte)*3) == 0) {
 138:	6e 5f       	subi	r22, 0xFE	; 254
 13a:	7f 4f       	sbci	r23, 0xFF	; 255
 13c:	c4 01       	movw	r24, r8
 13e:	43 e0       	ldi	r20, 0x03	; 3
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	01 f4       	brne	.+0      	; 0x14a <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x14a>
				  if (cht != ((AtlasScientificSensor*)assensor)->sensor->channel) {
 14a:	29 81       	ldd	r18, Y+1	; 0x01
 14c:	3a 81       	ldd	r19, Y+2	; 0x02
 14e:	d8 01       	movw	r26, r16
 150:	12 96       	adiw	r26, 0x02	; 2
 152:	8d 91       	ld	r24, X+
 154:	9c 91       	ld	r25, X
 156:	13 97       	sbiw	r26, 0x03	; 3
 158:	28 17       	cp	r18, r24
 15a:	39 07       	cpc	r19, r25
 15c:	01 f0       	breq	.+0      	; 0x15e <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x15e>
					  this->sensor->channel = cht;	// OK, reusing a softserial, setting channel
 15e:	f6 01       	movw	r30, r12
 160:	33 83       	std	Z+3, r19	; 0x03
 162:	22 83       	std	Z+2, r18	; 0x02
					  SerPrintP(" channel "); Serial.print(this->sensor->channel);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 16c:	d7 01       	movw	r26, r14
 16e:	de 96       	adiw	r26, 0x3e	; 62
 170:	ed 91       	ld	r30, X+
 172:	fc 91       	ld	r31, X
 174:	df 97       	sbiw	r26, 0x3f	; 63
 176:	62 81       	ldd	r22, Z+2	; 0x02
 178:	73 81       	ldd	r23, Z+3	; 0x03
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	4a e0       	ldi	r20, 0x0A	; 10
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 186:	00 c0       	rjmp	.+0      	; 0x188 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x188>
				  } else {
					  SerPrintP("E");		// ERROR same SW serial channel
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	00 c0       	rjmp	.+0      	; 0x18e <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x18e>
				  }
			  } else {
				  SerPrintP("E");			// ERROR different SoftSerial config on same HW pins
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	00 c0       	rjmp	.+0      	; 0x194 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x194>
			  }
    	  } else {
    		  SerPrintP("E");				// ERROR invalid reusable Atlas Sensor (not SW Serial)
    	  }
      } else {
          this->bPrimary = true;
 194:	e0 e4       	ldi	r30, 0x40	; 64
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ee 0e       	add	r14, r30
 19a:	ff 1e       	adc	r15, r31
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	d7 01       	movw	r26, r14
 1a0:	8c 93       	st	X, r24
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	ff ef       	ldi	r31, 0xFF	; 255
 1a6:	ee 0e       	add	r14, r30
 1a8:	ff 1e       	adc	r15, r31
          this->sensor->asenc = (ASENC*)malloc(sizeof(ASENC));
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 1b2:	d6 01       	movw	r26, r12
 1b4:	8c 93       	st	X, r24
 1b6:	11 96       	adiw	r26, 0x01	; 1
 1b8:	9c 93       	st	X, r25
          if (this->sensor->asenc != NULL) {
 1ba:	d7 01       	movw	r26, r14
 1bc:	de 96       	adiw	r26, 0x3e	; 62
 1be:	ed 91       	ld	r30, X+
 1c0:	fc 91       	ld	r31, X
 1c2:	df 97       	sbiw	r26, 0x3f	; 63
 1c4:	01 90       	ld	r0, Z+
 1c6:	f0 81       	ld	r31, Z
 1c8:	e0 2d       	mov	r30, r0
 1ca:	30 97       	sbiw	r30, 0x00	; 0
 1cc:	01 f4       	brne	.+0      	; 0x1ce <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x1ce>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x1d0>
        	  memset(this->sensor->asenc,0,sizeof(ASENC));
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	df 01       	movw	r26, r30
 1d4:	1d 92       	st	X+, r1
 1d6:	8a 95       	dec	r24
 1d8:	01 f4       	brne	.+0      	; 0x1da <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x1da>
        	 // get ptr to HW serial or allocate a new SW serial object, according to extra config
        	 if (edscand == 0) {	// hardware serial (0 SW serial parameters scanned)
 1da:	01 15       	cp	r16, r1
 1dc:	11 05       	cpc	r17, r1
 1de:	01 f4       	brne	.+0      	; 0x1e0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x1e0>
        	 //#ifdef DEBUG
        	     SerPrintP("ATLAS: HW Serial.\n");
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
        	 //#endif
        	     if (this->selectHWSerial()) {		// will detect which HW serial to open
 1e8:	c7 01       	movw	r24, r14
 1ea:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 1ee:	88 23       	and	r24, r24
 1f0:	01 f0       	breq	.+0      	; 0x1f2 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x1f2>
        	    	 // start the hardware serial port
        	    	 ((HardwareSerial*)(((ASSENS*)(this->sensor))->asenc->serialport))->begin(ATLAS_BAUD_RATE);
 1f2:	d7 01       	movw	r26, r14
 1f4:	de 96       	adiw	r26, 0x3e	; 62
 1f6:	ed 91       	ld	r30, X+
 1f8:	fc 91       	ld	r31, X
 1fa:	df 97       	sbiw	r26, 0x3f	; 63
 1fc:	01 90       	ld	r0, Z+
 1fe:	f0 81       	ld	r31, Z
 200:	e0 2d       	mov	r30, r0
 202:	80 81       	ld	r24, Z
 204:	91 81       	ldd	r25, Z+1	; 0x01
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	56 e9       	ldi	r21, 0x96	; 150
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 212:	00 c0       	rjmp	.+0      	; 0x214 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x214>
        	     }	else {
        	    	 SerPrintP("E"); 				// ERROR selecting HW serial
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	00 c0       	rjmp	.+0      	; 0x21a <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x21a>
        	     }
        	     // todo halt?
        	   } else {			// Software Serial (3 or 4 SW serial params scanned)
        	 	  if (edscand >= 3) {	// we at least have YN,S0,S1
 21a:	03 30       	cpi	r16, 0x03	; 3
 21c:	11 05       	cpc	r17, r1
 21e:	04 f4       	brge	.+0      	; 0x220 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x220>
 220:	00 c0       	rjmp	.+0      	; 0x222 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x222>
        	 		  SerPrintP("ATLAS: SW Serial.\n");
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
        	 		  SerPrintP("YN: ");Serial.print(cht);SerPrintP(" S0: ");Serial.print(ast.S0);SerPrintP(" S1: ");Serial.print(ast.S1);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 232:	69 81       	ldd	r22, Y+1	; 0x01
 234:	7a 81       	ldd	r23, Y+2	; 0x02
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	4a e0       	ldi	r20, 0x0A	; 10
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	6d 81       	ldd	r22, Y+5	; 0x05
 250:	4a e0       	ldi	r20, 0x0A	; 10
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	6e 81       	ldd	r22, Y+6	; 0x06
 266:	4a e0       	ldi	r20, 0x0A	; 10
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>

        	 		  if (edscand > 3) {
 26e:	03 30       	cpi	r16, 0x03	; 3
 270:	11 05       	cpc	r17, r1
 272:	01 f0       	breq	.+0      	; 0x274 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x274>
        	 			  SerPrintP(" E: ");Serial.print(ast.E);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	6f 81       	ldd	r22, Y+7	; 0x07
 282:	4a e0       	ldi	r20, 0x0A	; 10
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x28c>
        	 		  } else {
        	 			  ast.E = -1;		// E should be hard pulled GND
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8f 83       	std	Y+7, r24	; 0x07
        	 		  }
        	 		  this->sensor->asenc->S0 = ast.S0;
 290:	d7 01       	movw	r26, r14
 292:	de 96       	adiw	r26, 0x3e	; 62
 294:	ed 91       	ld	r30, X+
 296:	fc 91       	ld	r31, X
 298:	df 97       	sbiw	r26, 0x3f	; 63
 29a:	01 90       	ld	r0, Z+
 29c:	f0 81       	ld	r31, Z
 29e:	e0 2d       	mov	r30, r0
 2a0:	8d 81       	ldd	r24, Y+5	; 0x05
 2a2:	82 83       	std	Z+2, r24	; 0x02
        	 		  this->sensor->asenc->S1 = ast.S1;
 2a4:	de 96       	adiw	r26, 0x3e	; 62
 2a6:	ed 91       	ld	r30, X+
 2a8:	fc 91       	ld	r31, X
 2aa:	df 97       	sbiw	r26, 0x3f	; 63
 2ac:	01 90       	ld	r0, Z+
 2ae:	f0 81       	ld	r31, Z
 2b0:	e0 2d       	mov	r30, r0
 2b2:	8e 81       	ldd	r24, Y+6	; 0x06
 2b4:	83 83       	std	Z+3, r24	; 0x03
        	 		  this->sensor->asenc->E = ast.E;
 2b6:	de 96       	adiw	r26, 0x3e	; 62
 2b8:	ed 91       	ld	r30, X+
 2ba:	fc 91       	ld	r31, X
 2bc:	df 97       	sbiw	r26, 0x3f	; 63
 2be:	01 90       	ld	r0, Z+
 2c0:	f0 81       	ld	r31, Z
 2c2:	e0 2d       	mov	r30, r0
 2c4:	8f 81       	ldd	r24, Y+7	; 0x07
 2c6:	84 83       	std	Z+4, r24	; 0x04
//        	 		  this->sensor->channel = cht;		// todo, remove, this should have been done already
        	 		  if (this->selectSWSerial()) {
 2c8:	c7 01       	movw	r24, r14
 2ca:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 2ce:	88 23       	and	r24, r24
 2d0:	01 f0       	breq	.+0      	; 0x2d2 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x2d2>
        	 			 ((SoftwareSerial*)(((ASSENS*)(this->sensor))->asenc->serialport))->begin(ATLAS_BAUD_RATE);
 2d2:	d7 01       	movw	r26, r14
 2d4:	de 96       	adiw	r26, 0x3e	; 62
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	df 97       	sbiw	r26, 0x3f	; 63
 2dc:	01 90       	ld	r0, Z+
 2de:	f0 81       	ld	r31, Z
 2e0:	e0 2d       	mov	r30, r0
 2e2:	80 81       	ld	r24, Z
 2e4:	91 81       	ldd	r25, Z+1	; 0x01
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	56 e9       	ldi	r21, 0x96	; 150
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x2f4>
        	 		  } else {
        	 			  SerPrintP("E2");		// ERROR selecting sw serial
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x2fa>
        	 		  }
        	 	  } else {
        	 		  SerPrintP("E1");			// ERROR configuration error, at least 3 parameters (YN,S0,S1) should be provided for softserial
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
        	 	  }
        	   }
        	 	// todo bail out on previous errors otherwise state will look like ready even if error(s) occurred
          	this->sensor->asenc->state = STATE_READY;
 302:	d7 01       	movw	r26, r14
 304:	de 96       	adiw	r26, 0x3e	; 62
 306:	ed 91       	ld	r30, X+
 308:	fc 91       	ld	r31, X
 30a:	df 97       	sbiw	r26, 0x3f	; 63
 30c:	01 90       	ld	r0, Z+
 30e:	f0 81       	ld	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	15 82       	std	Z+5, r1	; 0x05
 314:	00 c0       	rjmp	.+0      	; 0x316 <_ZN21AtlasScientificSensorC2EP6SDCONFPv+0x316>
          } else {
          	SerPrintP("E0");			// ERROR - out of ram
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
          }
      }

      this->sensor->value = 0;
 31e:	d7 01       	movw	r26, r14
 320:	de 96       	adiw	r26, 0x3e	; 62
 322:	ed 91       	ld	r30, X+
 324:	fc 91       	ld	r31, X
 326:	df 97       	sbiw	r26, 0x3f	; 63
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	a0 e0       	ldi	r26, 0x00	; 0
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	84 83       	std	Z+4, r24	; 0x04
 332:	95 83       	std	Z+5, r25	; 0x05
 334:	a6 83       	std	Z+6, r26	; 0x06
 336:	b7 83       	std	Z+7, r27	; 0x07
      this->fvalue = 0;
 338:	f7 01       	movw	r30, r14
 33a:	87 ab       	std	Z+55, r24	; 0x37
 33c:	90 af       	std	Z+56, r25	; 0x38
 33e:	a1 af       	std	Z+57, r26	; 0x39
 340:	b2 af       	std	Z+58, r27	; 0x3a

  }

  this->_lm = millis();
 342:	0e 94 00 00 	call	0	; 0x0 <_ZN21AtlasScientificSensorC2EP6SDCONFPv>
 346:	21 e4       	ldi	r18, 0x41	; 65
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	e2 0e       	add	r14, r18
 34c:	f3 1e       	adc	r15, r19
 34e:	d7 01       	movw	r26, r14
 350:	6d 93       	st	X+, r22
 352:	7d 93       	st	X+, r23
 354:	8d 93       	st	X+, r24
 356:	9c 93       	st	X, r25
 358:	13 97       	sbiw	r26, 0x03	; 3
 35a:	ef eb       	ldi	r30, 0xBF	; 191
 35c:	ff ef       	ldi	r31, 0xFF	; 255
 35e:	ee 0e       	add	r14, r30
 360:	ff 1e       	adc	r15, r31
  this->_state = STATE_READY;
 362:	d7 01       	movw	r26, r14
 364:	dd 96       	adiw	r26, 0x3d	; 61
 366:	1c 92       	st	X, r1
}
 368:	28 96       	adiw	r28, 0x08	; 8
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	cf 91       	pop	r28
 376:	df 91       	pop	r29
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	bf 90       	pop	r11
 386:	af 90       	pop	r10
 388:	9f 90       	pop	r9
 38a:	8f 90       	pop	r8
 38c:	08 95       	ret
				  }
			  } else {
				  SerPrintP("E");			// ERROR different SoftSerial config on same HW pins
			  }
    	  } else {
    		  SerPrintP("E");				// ERROR invalid reusable Atlas Sensor (not SW Serial)
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	00 c0       	rjmp	.+0      	; 0x394 <_ZZN21AtlasScientificSensorC1EP6SDCONFPvE3__c+0x22e>

BMPSensor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000038  2**0
                  ALLOC
  3 .stab         00001524  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000419c  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN9BMPSensor16read_temperatureEv 00000014  00000000  00000000  000056f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN9BMPSensor13read_pressureEv 00000018  00000000  00000000  0000570c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN9BMPSensor11diagnosticsEv 000000ea  00000000  00000000  00005724  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9BMPSensor13read_altitudeEv 0000001c  00000000  00000000  0000580e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN9BMPSensor13perform_checkEv 0000007a  00000000  00000000  0000582a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9BMPSensorD0Ev 00000066  00000000  00000000  000058a4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9BMPSensorD1Ev 00000060  00000000  00000000  0000590a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9BMPSensorD2Ev 00000060  00000000  00000000  0000596a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN9BMPSensorC1EP6SDCONFPv 000000a2  00000000  00000000  000059ca  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN9BMPSensorC2EP6SDCONFPv 000000a2  00000000  00000000  00005a6c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .rodata._ZTV9BMPSensor 0000000e  00000000  00000000  00005b0e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 16 .progmem.data 0000004e  00000000  00000000  00005b1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN9BMPSensor16read_temperatureEv:

00000000 <_ZN9BMPSensor16read_temperatureEv>:
 *
 */

#include "BMPSensor.h"

BMPSensor::BMPSensor(SDCONF *sdc, void *bmpsensor)
   0:	dc 01       	movw	r26, r24
   2:	de 96       	adiw	r26, 0x3e	; 62
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	df 97       	sbiw	r26, 0x3f	; 63
   a:	80 81       	ld	r24, Z
   c:	91 81       	ldd	r25, Z+1	; 0x01
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor16read_temperatureEv>
  12:	08 95       	ret

Disassembly of section .text._ZN9BMPSensor13read_pressureEv:

00000000 <_ZN9BMPSensor13read_pressureEv>:
   0:	dc 01       	movw	r26, r24
   2:	de 96       	adiw	r26, 0x3e	; 62
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	df 97       	sbiw	r26, 0x3f	; 63
   a:	80 81       	ld	r24, Z
   c:	91 81       	ldd	r25, Z+1	; 0x01
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor13read_pressureEv>
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor13read_pressureEv>
  16:	08 95       	ret

Disassembly of section .text._ZN9BMPSensor11diagnosticsEv:

00000000 <_ZN9BMPSensor11diagnosticsEv>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  12:	d7 01       	movw	r26, r14
  14:	de 96       	adiw	r26, 0x3e	; 62
  16:	ed 91       	ld	r30, X+
  18:	fc 91       	ld	r31, X
  1a:	df 97       	sbiw	r26, 0x3f	; 63
  1c:	80 81       	ld	r24, Z
  1e:	91 81       	ldd	r25, Z+1	; 0x01
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
{
  this->initSensor(sdc);
  24:	ab 01       	movw	r20, r22
  26:	bc 01       	movw	r22, r24
  28:	00 e0       	ldi	r16, 0x00	; 0
  2a:	10 e0       	ldi	r17, 0x00	; 0
  // TODO Auto-generated constructor stub
  this->sensor = (BMPSENS*)malloc(sizeof(BMPSENS));
  2c:	c8 01       	movw	r24, r16
  2e:	22 e0       	ldi	r18, 0x02	; 2
  30:	30 e0       	ldi	r19, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  36:	80 e0       	ldi	r24, 0x00	; 0
  38:	90 e0       	ldi	r25, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  if (this->sensor != NULL) {
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
      if (bmpsensor!=NULL) {
  46:	d7 01       	movw	r26, r14
  48:	de 96       	adiw	r26, 0x3e	; 62
          this->bPrimary = false;
  4a:	ed 91       	ld	r30, X+
          this->sensor->pbmp = ((BMPSensor*)bmpsensor)->sensor->pbmp;
  4c:	fc 91       	ld	r31, X
  4e:	df 97       	sbiw	r26, 0x3f	; 63
  50:	80 81       	ld	r24, Z
  52:	91 81       	ldd	r25, Z+1	; 0x01
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  58:	ab 01       	movw	r20, r22
  5a:	bc 01       	movw	r22, r24
  5c:	c8 01       	movw	r24, r16
  5e:	2a e0       	ldi	r18, 0x0A	; 10
      } else {
          this->bPrimary = true;
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
          this->sensor->pbmp = new Adafruit_BMP085();
  66:	c8 01       	movw	r24, r16
  68:	60 e0       	ldi	r22, 0x00	; 0
  6a:	70 e0       	ldi	r23, 0x00	; 0
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
          this->sensor->pbmp->begin();                  // TODO allow one of the BMP guys to take mode as extra
  78:	d7 01       	movw	r26, r14
  7a:	de 96       	adiw	r26, 0x3e	; 62
  7c:	ed 91       	ld	r30, X+
  7e:	fc 91       	ld	r31, X
  80:	df 97       	sbiw	r26, 0x3f	; 63
  82:	80 81       	ld	r24, Z
  84:	91 81       	ldd	r25, Z+1	; 0x01
  86:	40 e8       	ldi	r20, 0x80	; 128
  88:	56 ee       	ldi	r21, 0xE6	; 230
  8a:	65 ec       	ldi	r22, 0xC5	; 197
      }
  }
  this->_state = STATE_READY;
  8c:	77 e4       	ldi	r23, 0x47	; 71
  8e:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
}
  92:	ab 01       	movw	r20, r22
  94:	bc 01       	movw	r22, r24
  96:	c8 01       	movw	r24, r16
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  b0:	d7 01       	movw	r26, r14
  b2:	de 96       	adiw	r26, 0x3e	; 62
  b4:	ed 91       	ld	r30, X+
  b6:	fc 91       	ld	r31, X
  b8:	df 97       	sbiw	r26, 0x3f	; 63
  ba:	46 81       	ldd	r20, Z+6	; 0x06
  bc:	57 81       	ldd	r21, Z+7	; 0x07
  be:	60 85       	ldd	r22, Z+8	; 0x08
  c0:	71 85       	ldd	r23, Z+9	; 0x09
  c2:	80 81       	ld	r24, Z
  c4:	91 81       	ldd	r25, Z+1	; 0x01
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  ca:	ab 01       	movw	r20, r22
  cc:	bc 01       	movw	r22, r24
  ce:	c8 01       	movw	r24, r16
  d0:	22 e0       	ldi	r18, 0x02	; 2
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor11diagnosticsEv>
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	ff 90       	pop	r15
  e6:	ef 90       	pop	r14
  e8:	08 95       	ret

Disassembly of section .text._ZN9BMPSensor13read_altitudeEv:

00000000 <_ZN9BMPSensor13read_altitudeEv>:
 *
 */

#include "BMPSensor.h"

BMPSensor::BMPSensor(SDCONF *sdc, void *bmpsensor)
   0:	dc 01       	movw	r26, r24
   2:	de 96       	adiw	r26, 0x3e	; 62
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	df 97       	sbiw	r26, 0x3f	; 63
   a:	80 81       	ld	r24, Z
   c:	91 81       	ldd	r25, Z+1	; 0x01
   e:	40 e8       	ldi	r20, 0x80	; 128
  10:	56 ee       	ldi	r21, 0xE6	; 230
  12:	65 ec       	ldi	r22, 0xC5	; 197
  14:	77 e4       	ldi	r23, 0x47	; 71
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor13read_altitudeEv>
  1a:	08 95       	ret

Disassembly of section .text._ZN9BMPSensor13perform_checkEv:

00000000 <_ZN9BMPSensor13perform_checkEv>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	89 89       	ldd	r24, Y+17	; 0x11
   c:	9a 89       	ldd	r25, Y+18	; 0x12
   e:	86 30       	cpi	r24, 0x06	; 6
  10:	91 05       	cpc	r25, r1
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN9BMPSensor13perform_checkEv+0x14>
  14:	87 30       	cpi	r24, 0x07	; 7
  16:	91 05       	cpc	r25, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN9BMPSensor13perform_checkEv+0x1a>
  1a:	02 97       	sbiw	r24, 0x02	; 2
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN9BMPSensor13perform_checkEv+0x1e>
  1e:	60 e0       	ldi	r22, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN9BMPSensor13perform_checkEv+0x22>
  22:	0e ad       	ldd	r16, Y+62	; 0x3e
{
  this->initSensor(sdc);
  24:	1f ad       	ldd	r17, Y+63	; 0x3f
  26:	f8 01       	movw	r30, r16
  28:	80 81       	ld	r24, Z
  2a:	91 81       	ldd	r25, Z+1	; 0x01
  // TODO Auto-generated constructor stub
  this->sensor = (BMPSENS*)malloc(sizeof(BMPSENS));
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor13perform_checkEv>
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN9BMPSensor13perform_checkEv+0x32>
  32:	0e ad       	ldd	r16, Y+62	; 0x3e
  34:	1f ad       	ldd	r17, Y+63	; 0x3f
  36:	ce 01       	movw	r24, r28
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor13perform_checkEv>
  if (this->sensor != NULL) {
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN9BMPSensor13perform_checkEv+0x3e>
  3e:	0e ad       	ldd	r16, Y+62	; 0x3e
  40:	1f ad       	ldd	r17, Y+63	; 0x3f
  42:	ce 01       	movw	r24, r28
      if (bmpsensor!=NULL) {
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor13perform_checkEv>
  48:	f8 01       	movw	r30, r16
          this->bPrimary = false;
  4a:	62 83       	std	Z+2, r22	; 0x02
          this->sensor->pbmp = ((BMPSensor*)bmpsensor)->sensor->pbmp;
  4c:	73 83       	std	Z+3, r23	; 0x03
  4e:	84 83       	std	Z+4, r24	; 0x04
  50:	95 83       	std	Z+5, r25	; 0x05
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensor13perform_checkEv>
  56:	66 23       	and	r22, r22
  58:	01 f0       	breq	.+0      	; 0x5a <_ZN9BMPSensor13perform_checkEv+0x5a>
  5a:	ee ad       	ldd	r30, Y+62	; 0x3e
  5c:	ff ad       	ldd	r31, Y+63	; 0x3f
  5e:	82 81       	ldd	r24, Z+2	; 0x02
      } else {
          this->bPrimary = true;
  60:	93 81       	ldd	r25, Z+3	; 0x03
  62:	a4 81       	ldd	r26, Z+4	; 0x04
          this->sensor->pbmp = new Adafruit_BMP085();
  64:	b5 81       	ldd	r27, Z+5	; 0x05
  66:	8f ab       	std	Y+55, r24	; 0x37
  68:	98 af       	std	Y+56, r25	; 0x38
  6a:	a9 af       	std	Y+57, r26	; 0x39
  6c:	ba af       	std	Y+58, r27	; 0x3a
  6e:	86 2f       	mov	r24, r22
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
          this->sensor->pbmp->begin();                  // TODO allow one of the BMP guys to take mode as extra
  78:	08 95       	ret

Disassembly of section .text._ZN9BMPSensorD0Ev:

00000000 <_ZN9BMPSensorD0Ev>:
 *
 */

#include "BMPSensor.h"

BMPSensor::BMPSensor(SDCONF *sdc, void *bmpsensor)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ee ad       	ldd	r30, Y+62	; 0x3e
  10:	ff ad       	ldd	r31, Y+63	; 0x3f
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9BMPSensorD0Ev+0x16>
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN9BMPSensorD0Ev+0x20>
  20:	c0 5c       	subi	r28, 0xC0	; 192
  22:	df 4f       	sbci	r29, 0xFF	; 255
{
  this->initSensor(sdc);
  24:	88 81       	ld	r24, Y
  26:	c0 54       	subi	r28, 0x40	; 64
  28:	d0 40       	sbci	r29, 0x00	; 0
  2a:	88 23       	and	r24, r24
  // TODO Auto-generated constructor stub
  this->sensor = (BMPSENS*)malloc(sizeof(BMPSENS));
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN9BMPSensorD0Ev+0x2e>
  2e:	c9 01       	movw	r24, r18
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD0Ev>
  34:	ee ad       	ldd	r30, Y+62	; 0x3e
  36:	ff ad       	ldd	r31, Y+63	; 0x3f
  38:	11 82       	std	Z+1, r1	; 0x01
  3a:	10 82       	st	Z, r1
  if (this->sensor != NULL) {
  3c:	8e ad       	ldd	r24, Y+62	; 0x3e
  3e:	9f ad       	ldd	r25, Y+63	; 0x3f
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD0Ev>
      if (bmpsensor!=NULL) {
  44:	1f ae       	std	Y+63, r1	; 0x3f
  46:	1e ae       	std	Y+62, r1	; 0x3e
  48:	8b ad       	ldd	r24, Y+59	; 0x3b
          this->bPrimary = false;
  4a:	9c ad       	ldd	r25, Y+60	; 0x3c
          this->sensor->pbmp = ((BMPSensor*)bmpsensor)->sensor->pbmp;
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD0Ev>
  50:	1c ae       	std	Y+60, r1	; 0x3c
  52:	1b ae       	std	Y+59, r1	; 0x3b
  54:	ce 01       	movw	r24, r28
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD0Ev>
  5a:	ce 01       	movw	r24, r28
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD0Ev>
      } else {
          this->bPrimary = true;
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
          this->sensor->pbmp = new Adafruit_BMP085();
  64:	08 95       	ret

Disassembly of section .text._ZN9BMPSensorD1Ev:

00000000 <_ZN9BMPSensorD1Ev>:
 *
 */

#include "BMPSensor.h"

BMPSensor::BMPSensor(SDCONF *sdc, void *bmpsensor)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ee ad       	ldd	r30, Y+62	; 0x3e
  10:	ff ad       	ldd	r31, Y+63	; 0x3f
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9BMPSensorD1Ev+0x16>
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN9BMPSensorD1Ev+0x20>
  20:	c0 5c       	subi	r28, 0xC0	; 192
  22:	df 4f       	sbci	r29, 0xFF	; 255
{
  this->initSensor(sdc);
  24:	88 81       	ld	r24, Y
  26:	c0 54       	subi	r28, 0x40	; 64
  28:	d0 40       	sbci	r29, 0x00	; 0
  2a:	88 23       	and	r24, r24
  // TODO Auto-generated constructor stub
  this->sensor = (BMPSENS*)malloc(sizeof(BMPSENS));
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN9BMPSensorD1Ev+0x2e>
  2e:	c9 01       	movw	r24, r18
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD1Ev>
  34:	ee ad       	ldd	r30, Y+62	; 0x3e
  36:	ff ad       	ldd	r31, Y+63	; 0x3f
  38:	11 82       	std	Z+1, r1	; 0x01
  3a:	10 82       	st	Z, r1
  if (this->sensor != NULL) {
  3c:	8e ad       	ldd	r24, Y+62	; 0x3e
  3e:	9f ad       	ldd	r25, Y+63	; 0x3f
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD1Ev>
      if (bmpsensor!=NULL) {
  44:	1f ae       	std	Y+63, r1	; 0x3f
  46:	1e ae       	std	Y+62, r1	; 0x3e
  48:	8b ad       	ldd	r24, Y+59	; 0x3b
          this->bPrimary = false;
  4a:	9c ad       	ldd	r25, Y+60	; 0x3c
          this->sensor->pbmp = ((BMPSensor*)bmpsensor)->sensor->pbmp;
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD1Ev>
  50:	1c ae       	std	Y+60, r1	; 0x3c
  52:	1b ae       	std	Y+59, r1	; 0x3b
  54:	ce 01       	movw	r24, r28
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD1Ev>
  5a:	df 91       	pop	r29
  5c:	cf 91       	pop	r28
  5e:	08 95       	ret

Disassembly of section .text._ZN9BMPSensorD2Ev:

00000000 <_ZN9BMPSensorD2Ev>:
 *
 */

#include "BMPSensor.h"

BMPSensor::BMPSensor(SDCONF *sdc, void *bmpsensor)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ee ad       	ldd	r30, Y+62	; 0x3e
  10:	ff ad       	ldd	r31, Y+63	; 0x3f
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9BMPSensorD2Ev+0x16>
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN9BMPSensorD2Ev+0x20>
  20:	c0 5c       	subi	r28, 0xC0	; 192
  22:	df 4f       	sbci	r29, 0xFF	; 255
{
  this->initSensor(sdc);
  24:	88 81       	ld	r24, Y
  26:	c0 54       	subi	r28, 0x40	; 64
  28:	d0 40       	sbci	r29, 0x00	; 0
  2a:	88 23       	and	r24, r24
  // TODO Auto-generated constructor stub
  this->sensor = (BMPSENS*)malloc(sizeof(BMPSENS));
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN9BMPSensorD2Ev+0x2e>
  2e:	c9 01       	movw	r24, r18
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD2Ev>
  34:	ee ad       	ldd	r30, Y+62	; 0x3e
  36:	ff ad       	ldd	r31, Y+63	; 0x3f
  38:	11 82       	std	Z+1, r1	; 0x01
  3a:	10 82       	st	Z, r1
  if (this->sensor != NULL) {
  3c:	8e ad       	ldd	r24, Y+62	; 0x3e
  3e:	9f ad       	ldd	r25, Y+63	; 0x3f
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD2Ev>
      if (bmpsensor!=NULL) {
  44:	1f ae       	std	Y+63, r1	; 0x3f
  46:	1e ae       	std	Y+62, r1	; 0x3e
  48:	8b ad       	ldd	r24, Y+59	; 0x3b
          this->bPrimary = false;
  4a:	9c ad       	ldd	r25, Y+60	; 0x3c
          this->sensor->pbmp = ((BMPSensor*)bmpsensor)->sensor->pbmp;
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD2Ev>
  50:	1c ae       	std	Y+60, r1	; 0x3c
  52:	1b ae       	std	Y+59, r1	; 0x3b
  54:	ce 01       	movw	r24, r28
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorD2Ev>
  5a:	df 91       	pop	r29
  5c:	cf 91       	pop	r28
  5e:	08 95       	ret

Disassembly of section .text._ZN9BMPSensorC1EP6SDCONFPv:

00000000 <_ZN9BMPSensorC1EP6SDCONFPv>:
 *
 */

#include "BMPSensor.h"

BMPSensor::BMPSensor(SDCONF *sdc, void *bmpsensor)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	8b 01       	movw	r16, r22
  14:	6a 01       	movw	r12, r20
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC1EP6SDCONFPv>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	d7 01       	movw	r26, r14
  20:	8d 93       	st	X+, r24
  22:	9c 93       	st	X, r25
{
  this->initSensor(sdc);
  24:	c7 01       	movw	r24, r14
  26:	b8 01       	movw	r22, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC1EP6SDCONFPv>
  // TODO Auto-generated constructor stub
  this->sensor = (BMPSENS*)malloc(sizeof(BMPSENS));
  2c:	8a e0       	ldi	r24, 0x0A	; 10
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC1EP6SDCONFPv>
  34:	ec 01       	movw	r28, r24
  36:	f7 01       	movw	r30, r14
  38:	97 af       	std	Z+63, r25	; 0x3f
  3a:	86 af       	std	Z+62, r24	; 0x3e
  if (this->sensor != NULL) {
  3c:	00 97       	sbiw	r24, 0x00	; 0
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN9BMPSensorC1EP6SDCONFPv+0x40>
  40:	e0 5c       	subi	r30, 0xC0	; 192
  42:	ff 4f       	sbci	r31, 0xFF	; 255
      if (bmpsensor!=NULL) {
  44:	c1 14       	cp	r12, r1
  46:	d1 04       	cpc	r13, r1
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN9BMPSensorC1EP6SDCONFPv+0x4a>
          this->bPrimary = false;
  4a:	10 82       	st	Z, r1
          this->sensor->pbmp = ((BMPSensor*)bmpsensor)->sensor->pbmp;
  4c:	d6 01       	movw	r26, r12
  4e:	de 96       	adiw	r26, 0x3e	; 62
  50:	ed 91       	ld	r30, X+
  52:	fc 91       	ld	r31, X
  54:	df 97       	sbiw	r26, 0x3f	; 63
  56:	80 81       	ld	r24, Z
  58:	91 81       	ldd	r25, Z+1	; 0x01
  5a:	99 83       	std	Y+1, r25	; 0x01
  5c:	88 83       	st	Y, r24
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZN9BMPSensorC1EP6SDCONFPv+0x60>
      } else {
          this->bPrimary = true;
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	80 83       	st	Z, r24
          this->sensor->pbmp = new Adafruit_BMP085();
  64:	87 e1       	ldi	r24, 0x17	; 23
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC1EP6SDCONFPv>
  6c:	18 2f       	mov	r17, r24
  6e:	09 2f       	mov	r16, r25
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC1EP6SDCONFPv>
  74:	18 83       	st	Y, r17
  76:	09 83       	std	Y+1, r16	; 0x01
          this->sensor->pbmp->begin();                  // TODO allow one of the BMP guys to take mode as extra
  78:	d7 01       	movw	r26, r14
  7a:	de 96       	adiw	r26, 0x3e	; 62
  7c:	ed 91       	ld	r30, X+
  7e:	fc 91       	ld	r31, X
  80:	df 97       	sbiw	r26, 0x3f	; 63
  82:	80 81       	ld	r24, Z
  84:	91 81       	ldd	r25, Z+1	; 0x01
  86:	63 e0       	ldi	r22, 0x03	; 3
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC1EP6SDCONFPv>
      }
  }
  this->_state = STATE_READY;
  8c:	f7 01       	movw	r30, r14
  8e:	15 ae       	std	Z+61, r1	; 0x3d
}
  90:	df 91       	pop	r29
  92:	cf 91       	pop	r28
  94:	1f 91       	pop	r17
  96:	0f 91       	pop	r16
  98:	ff 90       	pop	r15
  9a:	ef 90       	pop	r14
  9c:	df 90       	pop	r13
  9e:	cf 90       	pop	r12
  a0:	08 95       	ret

Disassembly of section .text._ZN9BMPSensorC2EP6SDCONFPv:

00000000 <_ZN9BMPSensorC2EP6SDCONFPv>:
 *
 */

#include "BMPSensor.h"

BMPSensor::BMPSensor(SDCONF *sdc, void *bmpsensor)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	8b 01       	movw	r16, r22
  14:	6a 01       	movw	r12, r20
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC2EP6SDCONFPv>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	d7 01       	movw	r26, r14
  20:	8d 93       	st	X+, r24
  22:	9c 93       	st	X, r25
{
  this->initSensor(sdc);
  24:	c7 01       	movw	r24, r14
  26:	b8 01       	movw	r22, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC2EP6SDCONFPv>
  // TODO Auto-generated constructor stub
  this->sensor = (BMPSENS*)malloc(sizeof(BMPSENS));
  2c:	8a e0       	ldi	r24, 0x0A	; 10
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC2EP6SDCONFPv>
  34:	ec 01       	movw	r28, r24
  36:	f7 01       	movw	r30, r14
  38:	97 af       	std	Z+63, r25	; 0x3f
  3a:	86 af       	std	Z+62, r24	; 0x3e
  if (this->sensor != NULL) {
  3c:	00 97       	sbiw	r24, 0x00	; 0
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN9BMPSensorC2EP6SDCONFPv+0x40>
  40:	e0 5c       	subi	r30, 0xC0	; 192
  42:	ff 4f       	sbci	r31, 0xFF	; 255
      if (bmpsensor!=NULL) {
  44:	c1 14       	cp	r12, r1
  46:	d1 04       	cpc	r13, r1
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN9BMPSensorC2EP6SDCONFPv+0x4a>
          this->bPrimary = false;
  4a:	10 82       	st	Z, r1
          this->sensor->pbmp = ((BMPSensor*)bmpsensor)->sensor->pbmp;
  4c:	d6 01       	movw	r26, r12
  4e:	de 96       	adiw	r26, 0x3e	; 62
  50:	ed 91       	ld	r30, X+
  52:	fc 91       	ld	r31, X
  54:	df 97       	sbiw	r26, 0x3f	; 63
  56:	80 81       	ld	r24, Z
  58:	91 81       	ldd	r25, Z+1	; 0x01
  5a:	99 83       	std	Y+1, r25	; 0x01
  5c:	88 83       	st	Y, r24
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZN9BMPSensorC2EP6SDCONFPv+0x60>
      } else {
          this->bPrimary = true;
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	80 83       	st	Z, r24
          this->sensor->pbmp = new Adafruit_BMP085();
  64:	87 e1       	ldi	r24, 0x17	; 23
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC2EP6SDCONFPv>
  6c:	18 2f       	mov	r17, r24
  6e:	09 2f       	mov	r16, r25
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC2EP6SDCONFPv>
  74:	18 83       	st	Y, r17
  76:	09 83       	std	Y+1, r16	; 0x01
          this->sensor->pbmp->begin();                  // TODO allow one of the BMP guys to take mode as extra
  78:	d7 01       	movw	r26, r14
  7a:	de 96       	adiw	r26, 0x3e	; 62
  7c:	ed 91       	ld	r30, X+
  7e:	fc 91       	ld	r31, X
  80:	df 97       	sbiw	r26, 0x3f	; 63
  82:	80 81       	ld	r24, Z
  84:	91 81       	ldd	r25, Z+1	; 0x01
  86:	63 e0       	ldi	r22, 0x03	; 3
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN9BMPSensorC2EP6SDCONFPv>
      }
  }
  this->_state = STATE_READY;
  8c:	f7 01       	movw	r30, r14
  8e:	15 ae       	std	Z+61, r1	; 0x3d
}
  90:	df 91       	pop	r29
  92:	cf 91       	pop	r28
  94:	1f 91       	pop	r17
  96:	0f 91       	pop	r16
  98:	ff 90       	pop	r15
  9a:	ef 90       	pop	r14
  9c:	df 90       	pop	r13
  9e:	cf 90       	pop	r12
  a0:	08 95       	ret

DHTSensor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000138c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003fa9  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN9DHTSensor13perform_checkEv 0000006a  00000000  00000000  00005369  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN9DHTSensorD0Ev 00000066  00000000  00000000  000053d3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN9DHTSensorD1Ev 00000060  00000000  00000000  00005439  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9DHTSensorD2Ev 00000060  00000000  00000000  00005499  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN9DHTSensorC1EP6SDCONFPv 000000ba  00000000  00000000  000054f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9DHTSensorC2EP6SDCONFPv 000000ba  00000000  00000000  000055b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .rodata._ZTV9DHTSensor 0000000e  00000000  00000000  0000566d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 12 .progmem.data 00000021  00000000  00000000  0000567b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN9DHTSensor13perform_checkEv:

00000000 <_ZN9DHTSensor13perform_checkEv>:
  }
  delete(this->pmetro);
  this->pmetro = NULL;
}

boolean DHTSensor::perform_check()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  float value = 0;
  switch (this->config.sensor_class) {
   6:	89 89       	ldd	r24, Y+17	; 0x11
   8:	9a 89       	ldd	r25, Y+18	; 0x12
   a:	82 30       	cpi	r24, 0x02	; 2
   c:	91 05       	cpc	r25, r1
   e:	01 f0       	breq	.+0      	; 0x10 <_ZN9DHTSensor13perform_checkEv+0x10>
  10:	03 97       	sbiw	r24, 0x03	; 3
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN9DHTSensor13perform_checkEv+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN9DHTSensor13perform_checkEv+0x16>
    case SENSE_TEMP:
#ifdef DEBUG
      SerPrintP("TEMP");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readTemperature();
  16:	ee ad       	ldd	r30, Y+62	; 0x3e
  18:	ff ad       	ldd	r31, Y+63	; 0x3f
  1a:	82 81       	ldd	r24, Z+2	; 0x02
  1c:	93 81       	ldd	r25, Z+3	; 0x03
  1e:	60 e0       	ldi	r22, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensor13perform_checkEv>
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN9DHTSensor13perform_checkEv+0x26>
      break;
    case SENSE_HUMIDITY:
#ifdef DEBUG
      SerPrintP("HUM");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readHumidity();
  26:	ee ad       	ldd	r30, Y+62	; 0x3e
  28:	ff ad       	ldd	r31, Y+63	; 0x3f
  2a:	82 81       	ldd	r24, Z+2	; 0x02
  2c:	93 81       	ldd	r25, Z+3	; 0x03
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensor13perform_checkEv>
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN9DHTSensor13perform_checkEv+0x34>
      break;
    default:
//#ifdef DEBUG
      SerPrintP("DHTSensor: Invalid sensor class!"); Serial.print(this->config.sensor_class);
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensor13perform_checkEv>
  3c:	69 89       	ldd	r22, Y+17	; 0x11
  3e:	7a 89       	ldd	r23, Y+18	; 0x12
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	4a e0       	ldi	r20, 0x0A	; 10
  46:	50 e0       	ldi	r21, 0x00	; 0
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensor13perform_checkEv>
  4c:	60 e0       	ldi	r22, 0x00	; 0
  4e:	70 e0       	ldi	r23, 0x00	; 0
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
//#endif
      break;
  }

  return (this->fvalue = value);
  54:	6f ab       	std	Y+55, r22	; 0x37
  56:	78 af       	std	Y+56, r23	; 0x38
  58:	89 af       	std	Y+57, r24	; 0x39
  5a:	9a af       	std	Y+58, r25	; 0x3a
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensor13perform_checkEv>
  60:	dc 01       	movw	r26, r24
  62:	cb 01       	movw	r24, r22
}
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	08 95       	ret

Disassembly of section .text._ZN9DHTSensorD0Ev:

00000000 <_ZN9DHTSensorD0Ev>:
  }
  delete(this->pmetro);
  this->pmetro = NULL;
}

boolean DHTSensor::perform_check()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  float value = 0;
  switch (this->config.sensor_class) {
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ee ad       	ldd	r30, Y+62	; 0x3e
  10:	ff ad       	ldd	r31, Y+63	; 0x3f
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9DHTSensorD0Ev+0x16>
    case SENSE_TEMP:
#ifdef DEBUG
      SerPrintP("TEMP");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readTemperature();
  16:	22 81       	ldd	r18, Z+2	; 0x02
  18:	33 81       	ldd	r19, Z+3	; 0x03
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN9DHTSensorD0Ev+0x20>
  20:	c0 5c       	subi	r28, 0xC0	; 192
  22:	df 4f       	sbci	r29, 0xFF	; 255
  24:	88 81       	ld	r24, Y
      break;
    case SENSE_HUMIDITY:
#ifdef DEBUG
      SerPrintP("HUM");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readHumidity();
  26:	c0 54       	subi	r28, 0x40	; 64
  28:	d0 40       	sbci	r29, 0x00	; 0
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN9DHTSensorD0Ev+0x2e>
  2e:	c9 01       	movw	r24, r18
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD0Ev>
      break;
    default:
//#ifdef DEBUG
      SerPrintP("DHTSensor: Invalid sensor class!"); Serial.print(this->config.sensor_class);
  34:	ee ad       	ldd	r30, Y+62	; 0x3e
  36:	ff ad       	ldd	r31, Y+63	; 0x3f
  38:	13 82       	std	Z+3, r1	; 0x03
  3a:	12 82       	std	Z+2, r1	; 0x02
  3c:	8e ad       	ldd	r24, Y+62	; 0x3e
  3e:	9f ad       	ldd	r25, Y+63	; 0x3f
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD0Ev>
  44:	1f ae       	std	Y+63, r1	; 0x3f
  46:	1e ae       	std	Y+62, r1	; 0x3e
  48:	8b ad       	ldd	r24, Y+59	; 0x3b
  4a:	9c ad       	ldd	r25, Y+60	; 0x3c
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD0Ev>
  50:	1c ae       	std	Y+60, r1	; 0x3c
  52:	1b ae       	std	Y+59, r1	; 0x3b
//#endif
      break;
  }

  return (this->fvalue = value);
  54:	ce 01       	movw	r24, r28
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD0Ev>
  5a:	ce 01       	movw	r24, r28
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD0Ev>
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
}
  64:	08 95       	ret

Disassembly of section .text._ZN9DHTSensorD1Ev:

00000000 <_ZN9DHTSensorD1Ev>:
  }
  delete(this->pmetro);
  this->pmetro = NULL;
}

boolean DHTSensor::perform_check()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  float value = 0;
  switch (this->config.sensor_class) {
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ee ad       	ldd	r30, Y+62	; 0x3e
  10:	ff ad       	ldd	r31, Y+63	; 0x3f
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9DHTSensorD1Ev+0x16>
    case SENSE_TEMP:
#ifdef DEBUG
      SerPrintP("TEMP");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readTemperature();
  16:	22 81       	ldd	r18, Z+2	; 0x02
  18:	33 81       	ldd	r19, Z+3	; 0x03
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN9DHTSensorD1Ev+0x20>
  20:	c0 5c       	subi	r28, 0xC0	; 192
  22:	df 4f       	sbci	r29, 0xFF	; 255
  24:	88 81       	ld	r24, Y
      break;
    case SENSE_HUMIDITY:
#ifdef DEBUG
      SerPrintP("HUM");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readHumidity();
  26:	c0 54       	subi	r28, 0x40	; 64
  28:	d0 40       	sbci	r29, 0x00	; 0
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN9DHTSensorD1Ev+0x2e>
  2e:	c9 01       	movw	r24, r18
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD1Ev>
      break;
    default:
//#ifdef DEBUG
      SerPrintP("DHTSensor: Invalid sensor class!"); Serial.print(this->config.sensor_class);
  34:	ee ad       	ldd	r30, Y+62	; 0x3e
  36:	ff ad       	ldd	r31, Y+63	; 0x3f
  38:	13 82       	std	Z+3, r1	; 0x03
  3a:	12 82       	std	Z+2, r1	; 0x02
  3c:	8e ad       	ldd	r24, Y+62	; 0x3e
  3e:	9f ad       	ldd	r25, Y+63	; 0x3f
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD1Ev>
  44:	1f ae       	std	Y+63, r1	; 0x3f
  46:	1e ae       	std	Y+62, r1	; 0x3e
  48:	8b ad       	ldd	r24, Y+59	; 0x3b
  4a:	9c ad       	ldd	r25, Y+60	; 0x3c
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD1Ev>
  50:	1c ae       	std	Y+60, r1	; 0x3c
  52:	1b ae       	std	Y+59, r1	; 0x3b
//#endif
      break;
  }

  return (this->fvalue = value);
  54:	ce 01       	movw	r24, r28
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD1Ev>
  5a:	df 91       	pop	r29
  5c:	cf 91       	pop	r28
  5e:	08 95       	ret

Disassembly of section .text._ZN9DHTSensorD2Ev:

00000000 <_ZN9DHTSensorD2Ev>:
  }
  delete(this->pmetro);
  this->pmetro = NULL;
}

boolean DHTSensor::perform_check()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  float value = 0;
  switch (this->config.sensor_class) {
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ee ad       	ldd	r30, Y+62	; 0x3e
  10:	ff ad       	ldd	r31, Y+63	; 0x3f
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9DHTSensorD2Ev+0x16>
    case SENSE_TEMP:
#ifdef DEBUG
      SerPrintP("TEMP");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readTemperature();
  16:	22 81       	ldd	r18, Z+2	; 0x02
  18:	33 81       	ldd	r19, Z+3	; 0x03
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN9DHTSensorD2Ev+0x20>
  20:	c0 5c       	subi	r28, 0xC0	; 192
  22:	df 4f       	sbci	r29, 0xFF	; 255
  24:	88 81       	ld	r24, Y
      break;
    case SENSE_HUMIDITY:
#ifdef DEBUG
      SerPrintP("HUM");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readHumidity();
  26:	c0 54       	subi	r28, 0x40	; 64
  28:	d0 40       	sbci	r29, 0x00	; 0
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN9DHTSensorD2Ev+0x2e>
  2e:	c9 01       	movw	r24, r18
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD2Ev>
      break;
    default:
//#ifdef DEBUG
      SerPrintP("DHTSensor: Invalid sensor class!"); Serial.print(this->config.sensor_class);
  34:	ee ad       	ldd	r30, Y+62	; 0x3e
  36:	ff ad       	ldd	r31, Y+63	; 0x3f
  38:	13 82       	std	Z+3, r1	; 0x03
  3a:	12 82       	std	Z+2, r1	; 0x02
  3c:	8e ad       	ldd	r24, Y+62	; 0x3e
  3e:	9f ad       	ldd	r25, Y+63	; 0x3f
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD2Ev>
  44:	1f ae       	std	Y+63, r1	; 0x3f
  46:	1e ae       	std	Y+62, r1	; 0x3e
  48:	8b ad       	ldd	r24, Y+59	; 0x3b
  4a:	9c ad       	ldd	r25, Y+60	; 0x3c
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD2Ev>
  50:	1c ae       	std	Y+60, r1	; 0x3c
  52:	1b ae       	std	Y+59, r1	; 0x3b
//#endif
      break;
  }

  return (this->fvalue = value);
  54:	ce 01       	movw	r24, r28
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorD2Ev>
  5a:	df 91       	pop	r29
  5c:	cf 91       	pop	r28
  5e:	08 95       	ret

Disassembly of section .text._ZN9DHTSensorC1EP6SDCONFPv:

00000000 <_ZN9DHTSensorC1EP6SDCONFPv>:
  }
  delete(this->pmetro);
  this->pmetro = NULL;
}

boolean DHTSensor::perform_check()
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
{
  float value = 0;
  switch (this->config.sensor_class) {
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	8b 01       	movw	r16, r22
  14:	6a 01       	movw	r12, r20
    case SENSE_TEMP:
#ifdef DEBUG
      SerPrintP("TEMP");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readTemperature();
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC1EP6SDCONFPv>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	d7 01       	movw	r26, r14
  20:	8d 93       	st	X+, r24
  22:	9c 93       	st	X, r25
  24:	c7 01       	movw	r24, r14
      break;
    case SENSE_HUMIDITY:
#ifdef DEBUG
      SerPrintP("HUM");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readHumidity();
  26:	b8 01       	movw	r22, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC1EP6SDCONFPv>
  2c:	88 e0       	ldi	r24, 0x08	; 8
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC1EP6SDCONFPv>
      break;
    default:
//#ifdef DEBUG
      SerPrintP("DHTSensor: Invalid sensor class!"); Serial.print(this->config.sensor_class);
  34:	ec 01       	movw	r28, r24
  36:	f7 01       	movw	r30, r14
  38:	97 af       	std	Z+63, r25	; 0x3f
  3a:	86 af       	std	Z+62, r24	; 0x3e
  3c:	00 97       	sbiw	r24, 0x00	; 0
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN9DHTSensorC1EP6SDCONFPv+0x40>
  40:	e0 5c       	subi	r30, 0xC0	; 192
  42:	ff 4f       	sbci	r31, 0xFF	; 255
  44:	c1 14       	cp	r12, r1
  46:	d1 04       	cpc	r13, r1
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN9DHTSensorC1EP6SDCONFPv+0x4a>
  4a:	10 82       	st	Z, r1
  4c:	d6 01       	movw	r26, r12
  4e:	de 96       	adiw	r26, 0x3e	; 62
  50:	ed 91       	ld	r30, X+
  52:	fc 91       	ld	r31, X
//#endif
      break;
  }

  return (this->fvalue = value);
  54:	df 97       	sbiw	r26, 0x3f	; 63
  56:	82 81       	ldd	r24, Z+2	; 0x02
  58:	93 81       	ldd	r25, Z+3	; 0x03
  5a:	9b 83       	std	Y+3, r25	; 0x03
  5c:	8a 83       	std	Y+2, r24	; 0x02
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZN9DHTSensorC1EP6SDCONFPv+0x60>
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	80 83       	st	Z, r24
}
  64:	8d e0       	ldi	r24, 0x0D	; 13
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC1EP6SDCONFPv>
  6c:	18 2f       	mov	r17, r24
  6e:	09 2f       	mov	r16, r25
  70:	f7 01       	movw	r30, r14
  72:	65 89       	ldd	r22, Z+21	; 0x15
  74:	43 89       	ldd	r20, Z+19	; 0x13
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC1EP6SDCONFPv>
  7a:	1a 83       	std	Y+2, r17	; 0x02
  7c:	0b 83       	std	Y+3, r16	; 0x03
  7e:	d7 01       	movw	r26, r14
  80:	de 96       	adiw	r26, 0x3e	; 62
  82:	ed 91       	ld	r30, X+
  84:	fc 91       	ld	r31, X
  86:	df 97       	sbiw	r26, 0x3f	; 63
  88:	82 81       	ldd	r24, Z+2	; 0x02
  8a:	93 81       	ldd	r25, Z+3	; 0x03
  8c:	00 97       	sbiw	r24, 0x00	; 0
  8e:	01 f0       	breq	.+0      	; 0x90 <_ZN9DHTSensorC1EP6SDCONFPv+0x90>
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC1EP6SDCONFPv>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	f7 01       	movw	r30, r14
  9e:	87 ab       	std	Z+55, r24	; 0x37
  a0:	90 af       	std	Z+56, r25	; 0x38
  a2:	a1 af       	std	Z+57, r26	; 0x39
  a4:	b2 af       	std	Z+58, r27	; 0x3a
  a6:	15 ae       	std	Z+61, r1	; 0x3d
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	08 95       	ret

Disassembly of section .text._ZN9DHTSensorC2EP6SDCONFPv:

00000000 <_ZN9DHTSensorC2EP6SDCONFPv>:
  }
  delete(this->pmetro);
  this->pmetro = NULL;
}

boolean DHTSensor::perform_check()
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
{
  float value = 0;
  switch (this->config.sensor_class) {
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	8b 01       	movw	r16, r22
  14:	6a 01       	movw	r12, r20
    case SENSE_TEMP:
#ifdef DEBUG
      SerPrintP("TEMP");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readTemperature();
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC2EP6SDCONFPv>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	d7 01       	movw	r26, r14
  20:	8d 93       	st	X+, r24
  22:	9c 93       	st	X, r25
  24:	c7 01       	movw	r24, r14
      break;
    case SENSE_HUMIDITY:
#ifdef DEBUG
      SerPrintP("HUM");
#endif
      value = ((DHTSENS *)this->sensor)->dht->readHumidity();
  26:	b8 01       	movw	r22, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC2EP6SDCONFPv>
  2c:	88 e0       	ldi	r24, 0x08	; 8
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC2EP6SDCONFPv>
      break;
    default:
//#ifdef DEBUG
      SerPrintP("DHTSensor: Invalid sensor class!"); Serial.print(this->config.sensor_class);
  34:	ec 01       	movw	r28, r24
  36:	f7 01       	movw	r30, r14
  38:	97 af       	std	Z+63, r25	; 0x3f
  3a:	86 af       	std	Z+62, r24	; 0x3e
  3c:	00 97       	sbiw	r24, 0x00	; 0
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN9DHTSensorC2EP6SDCONFPv+0x40>
  40:	e0 5c       	subi	r30, 0xC0	; 192
  42:	ff 4f       	sbci	r31, 0xFF	; 255
  44:	c1 14       	cp	r12, r1
  46:	d1 04       	cpc	r13, r1
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN9DHTSensorC2EP6SDCONFPv+0x4a>
  4a:	10 82       	st	Z, r1
  4c:	d6 01       	movw	r26, r12
  4e:	de 96       	adiw	r26, 0x3e	; 62
  50:	ed 91       	ld	r30, X+
  52:	fc 91       	ld	r31, X
//#endif
      break;
  }

  return (this->fvalue = value);
  54:	df 97       	sbiw	r26, 0x3f	; 63
  56:	82 81       	ldd	r24, Z+2	; 0x02
  58:	93 81       	ldd	r25, Z+3	; 0x03
  5a:	9b 83       	std	Y+3, r25	; 0x03
  5c:	8a 83       	std	Y+2, r24	; 0x02
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZN9DHTSensorC2EP6SDCONFPv+0x60>
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	80 83       	st	Z, r24
}
  64:	8d e0       	ldi	r24, 0x0D	; 13
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC2EP6SDCONFPv>
  6c:	18 2f       	mov	r17, r24
  6e:	09 2f       	mov	r16, r25
  70:	f7 01       	movw	r30, r14
  72:	65 89       	ldd	r22, Z+21	; 0x15
  74:	43 89       	ldd	r20, Z+19	; 0x13
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC2EP6SDCONFPv>
  7a:	1a 83       	std	Y+2, r17	; 0x02
  7c:	0b 83       	std	Y+3, r16	; 0x03
  7e:	d7 01       	movw	r26, r14
  80:	de 96       	adiw	r26, 0x3e	; 62
  82:	ed 91       	ld	r30, X+
  84:	fc 91       	ld	r31, X
  86:	df 97       	sbiw	r26, 0x3f	; 63
  88:	82 81       	ldd	r24, Z+2	; 0x02
  8a:	93 81       	ldd	r25, Z+3	; 0x03
  8c:	00 97       	sbiw	r24, 0x00	; 0
  8e:	01 f0       	breq	.+0      	; 0x90 <_ZN9DHTSensorC2EP6SDCONFPv+0x90>
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN9DHTSensorC2EP6SDCONFPv>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	f7 01       	movw	r30, r14
  9e:	87 ab       	std	Z+55, r24	; 0x37
  a0:	90 af       	std	Z+56, r25	; 0x38
  a2:	a1 af       	std	Z+57, r26	; 0x39
  a4:	b2 af       	std	Z+58, r27	; 0x3a
  a6:	15 ae       	std	Z+61, r1	; 0x3d
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	08 95       	ret

DigitalSensor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000003  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000037  2**0
                  ALLOC
  3 .stab         000011f4  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003ee9  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN13DigitalSensor9getValueSEPc 00000062  00000000  00000000  00005115  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN13DigitalSensor13perform_checkEv 00000058  00000000  00000000  00005177  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN13DigitalSensorD0Ev 0000003e  00000000  00000000  000051cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN13DigitalSensorD1Ev 00000038  00000000  00000000  0000520d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN13DigitalSensorD2Ev 00000038  00000000  00000000  00005245  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN13DigitalSensorC1EP6SDCONF 00000046  00000000  00000000  0000527d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN13DigitalSensorC2EP6SDCONF 00000046  00000000  00000000  000052c3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .rodata._ZTV13DigitalSensor 0000000e  00000000  00000000  00005309  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN13DigitalSensor9getValueSEPc:

00000000 <_ZN13DigitalSensor9getValueSEPc>:
  boolean retcode = (this->sensor->value = digitalRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *DigitalSensor::getValueS(char *strdest) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	16 2f       	mov	r17, r22
   a:	07 2f       	mov	r16, r23
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN13DigitalSensor9getValueSEPc+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN13DigitalSensor9getValueSEPc+0x10>
  10:	ad b7       	in	r26, 0x3d	; 61
  12:	be b7       	in	r27, 0x3e	; 62
  14:	11 96       	adiw	r26, 0x01	; 1
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	69 83       	std	Y+1, r22	; 0x01
  1c:	11 96       	adiw	r26, 0x01	; 1
  1e:	7c 93       	st	X, r23
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	13 96       	adiw	r26, 0x03	; 3
  28:	3c 93       	st	X, r19
  2a:	2e 93       	st	-X, r18
  2c:	12 97       	sbiw	r26, 0x02	; 2
  2e:	ec 01       	movw	r28, r24
  30:	ee ad       	ldd	r30, Y+62	; 0x3e
  32:	ff ad       	ldd	r31, Y+63	; 0x3f
  34:	80 81       	ld	r24, Z
  36:	91 81       	ldd	r25, Z+1	; 0x01
  38:	15 96       	adiw	r26, 0x05	; 5
  3a:	9c 93       	st	X, r25
  3c:	8e 93       	st	-X, r24
  3e:	14 97       	sbiw	r26, 0x04	; 4
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensor9getValueSEPc>
  44:	ed b7       	in	r30, 0x3d	; 61
  46:	fe b7       	in	r31, 0x3e	; 62
  48:	36 96       	adiw	r30, 0x06	; 6
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	fe bf       	out	0x3e, r31	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	ed bf       	out	0x3d, r30	; 61
  retstr=strdest;
  return retstr;
}
  54:	81 2f       	mov	r24, r17
  56:	90 2f       	mov	r25, r16
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	08 95       	ret

Disassembly of section .text._ZN13DigitalSensor13perform_checkEv:

00000000 <_ZN13DigitalSensor13perform_checkEv>:
  boolean retcode = (this->sensor->value = digitalRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *DigitalSensor::getValueS(char *strdest) {
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	8c 01       	movw	r16, r24
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	dc 01       	movw	r26, r24
   e:	de 96       	adiw	r26, 0x3e	; 62
  10:	ed 90       	ld	r14, X+
  12:	fc 90       	ld	r15, X
  14:	df 97       	sbiw	r26, 0x3f	; 63
  16:	55 96       	adiw	r26, 0x15	; 21
  18:	8c 91       	ld	r24, X
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensor13perform_checkEv>
  1e:	d8 2e       	mov	r13, r24
  20:	f7 01       	movw	r30, r14
  22:	80 83       	st	Z, r24
  24:	91 83       	std	Z+1, r25	; 0x01
  26:	d8 01       	movw	r26, r16
  28:	de 96       	adiw	r26, 0x3e	; 62
  2a:	ed 91       	ld	r30, X+
  2c:	fc 91       	ld	r31, X
  2e:	df 97       	sbiw	r26, 0x3f	; 63
  30:	60 81       	ld	r22, Z
  32:	71 81       	ldd	r23, Z+1	; 0x01
  34:	88 27       	eor	r24, r24
  36:	77 fd       	sbrc	r23, 7
  38:	80 95       	com	r24
  3a:	98 2f       	mov	r25, r24
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensor13perform_checkEv>
  40:	f8 01       	movw	r30, r16
  42:	67 ab       	std	Z+55, r22	; 0x37
  44:	70 af       	std	Z+56, r23	; 0x38
  46:	81 af       	std	Z+57, r24	; 0x39
  48:	92 af       	std	Z+58, r25	; 0x3a
  4a:	8d 2d       	mov	r24, r13
  4c:	1f 91       	pop	r17
  4e:	0f 91       	pop	r16
  50:	ff 90       	pop	r15
  52:	ef 90       	pop	r14
  retstr=strdest;
  return retstr;
}
  54:	df 90       	pop	r13
  56:	08 95       	ret

Disassembly of section .text._ZN13DigitalSensorD0Ev:

00000000 <_ZN13DigitalSensorD0Ev>:
  boolean retcode = (this->sensor->value = digitalRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *DigitalSensor::getValueS(char *strdest) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	86 ad       	ldd	r24, Z+62	; 0x3e
  12:	97 ad       	ldd	r25, Z+63	; 0x3f
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD0Ev>
  18:	f8 01       	movw	r30, r16
  1a:	17 ae       	std	Z+63, r1	; 0x3f
  1c:	16 ae       	std	Z+62, r1	; 0x3e
  1e:	83 ad       	ldd	r24, Z+59	; 0x3b
  20:	94 ad       	ldd	r25, Z+60	; 0x3c
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD0Ev>
  26:	f8 01       	movw	r30, r16
  28:	14 ae       	std	Z+60, r1	; 0x3c
  2a:	13 ae       	std	Z+59, r1	; 0x3b
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD0Ev>
  32:	c8 01       	movw	r24, r16
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD0Ev>
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	08 95       	ret

Disassembly of section .text._ZN13DigitalSensorD1Ev:

00000000 <_ZN13DigitalSensorD1Ev>:
  boolean retcode = (this->sensor->value = digitalRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *DigitalSensor::getValueS(char *strdest) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	86 ad       	ldd	r24, Z+62	; 0x3e
  12:	97 ad       	ldd	r25, Z+63	; 0x3f
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD1Ev>
  18:	f8 01       	movw	r30, r16
  1a:	17 ae       	std	Z+63, r1	; 0x3f
  1c:	16 ae       	std	Z+62, r1	; 0x3e
  1e:	83 ad       	ldd	r24, Z+59	; 0x3b
  20:	94 ad       	ldd	r25, Z+60	; 0x3c
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD1Ev>
  26:	f8 01       	movw	r30, r16
  28:	14 ae       	std	Z+60, r1	; 0x3c
  2a:	13 ae       	std	Z+59, r1	; 0x3b
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD1Ev>
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	08 95       	ret

Disassembly of section .text._ZN13DigitalSensorD2Ev:

00000000 <_ZN13DigitalSensorD2Ev>:
  boolean retcode = (this->sensor->value = digitalRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *DigitalSensor::getValueS(char *strdest) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	86 ad       	ldd	r24, Z+62	; 0x3e
  12:	97 ad       	ldd	r25, Z+63	; 0x3f
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD2Ev>
  18:	f8 01       	movw	r30, r16
  1a:	17 ae       	std	Z+63, r1	; 0x3f
  1c:	16 ae       	std	Z+62, r1	; 0x3e
  1e:	83 ad       	ldd	r24, Z+59	; 0x3b
  20:	94 ad       	ldd	r25, Z+60	; 0x3c
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD2Ev>
  26:	f8 01       	movw	r30, r16
  28:	14 ae       	std	Z+60, r1	; 0x3c
  2a:	13 ae       	std	Z+59, r1	; 0x3b
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorD2Ev>
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	08 95       	ret

Disassembly of section .text._ZN13DigitalSensorC1EP6SDCONF:

00000000 <_ZN13DigitalSensorC1EP6SDCONF>:
  boolean retcode = (this->sensor->value = digitalRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *DigitalSensor::getValueS(char *strdest) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
   a:	7b 01       	movw	r14, r22
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorC1EP6SDCONF>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	d8 01       	movw	r26, r16
  16:	8d 93       	st	X+, r24
  18:	9c 93       	st	X, r25
  1a:	c8 01       	movw	r24, r16
  1c:	b7 01       	movw	r22, r14
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorC1EP6SDCONF>
  22:	82 e0       	ldi	r24, 0x02	; 2
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorC1EP6SDCONF>
  2a:	f8 01       	movw	r30, r16
  2c:	86 af       	std	Z+62, r24	; 0x3e
  2e:	97 af       	std	Z+63, r25	; 0x3f
  30:	15 ae       	std	Z+61, r1	; 0x3d
  32:	06 ac       	ldd	r0, Z+62	; 0x3e
  34:	f7 ad       	ldd	r31, Z+63	; 0x3f
  36:	e0 2d       	mov	r30, r0
  38:	11 82       	std	Z+1, r1	; 0x01
  3a:	10 82       	st	Z, r1
  3c:	1f 91       	pop	r17
  3e:	0f 91       	pop	r16
  40:	ff 90       	pop	r15
  42:	ef 90       	pop	r14
  44:	08 95       	ret

Disassembly of section .text._ZN13DigitalSensorC2EP6SDCONF:

00000000 <_ZN13DigitalSensorC2EP6SDCONF>:
  boolean retcode = (this->sensor->value = digitalRead(this->config.sensor_pin));
  this->fvalue = this->sensor->value;
  return retcode;
}

char *DigitalSensor::getValueS(char *strdest) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
   a:	7b 01       	movw	r14, r22
  char *retstr = NULL;
  sprintf(strdest,"%d",this->sensor->value);
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorC2EP6SDCONF>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	d8 01       	movw	r26, r16
  16:	8d 93       	st	X+, r24
  18:	9c 93       	st	X, r25
  1a:	c8 01       	movw	r24, r16
  1c:	b7 01       	movw	r22, r14
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorC2EP6SDCONF>
  22:	82 e0       	ldi	r24, 0x02	; 2
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN13DigitalSensorC2EP6SDCONF>
  2a:	f8 01       	movw	r30, r16
  2c:	86 af       	std	Z+62, r24	; 0x3e
  2e:	97 af       	std	Z+63, r25	; 0x3f
  30:	15 ae       	std	Z+61, r1	; 0x3d
  32:	06 ac       	ldd	r0, Z+62	; 0x3e
  34:	f7 ad       	ldd	r31, Z+63	; 0x3f
  36:	e0 2d       	mov	r30, r0
  38:	11 82       	std	Z+1, r1	; 0x01
  3a:	10 82       	st	Z, r1
  3c:	1f 91       	pop	r17
  3e:	0f 91       	pop	r16
  40:	ff 90       	pop	r15
  42:	ef 90       	pop	r14
  44:	08 95       	ret

OneWireSensor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00001dac  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000455b  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN13OneWireSensor11diagnosticsEv 000001fe  00000000  00000000  0000633b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN13OneWireSensor19ow_temperature_readEv 000002ca  00000000  00000000  00006539  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN13OneWireSensor13perform_checkEv 00000066  00000000  00000000  00006803  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN13OneWireSensor14verify_addressEv 000002da  00000000  00000000  00006869  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN13OneWireSensorD0Ev 00000086  00000000  00000000  00006b43  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN13OneWireSensorD1Ev 00000080  00000000  00000000  00006bc9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN13OneWireSensorD2Ev 00000080  00000000  00000000  00006c49  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN13OneWireSensorC1EP6SDCONFPv 00000198  00000000  00000000  00006cc9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN13OneWireSensorC2EP6SDCONFPv 00000198  00000000  00000000  00006e61  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .rodata._ZTV13OneWireSensor 0000000e  00000000  00000000  00006ff9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 15 .progmem.data 00000335  00000000  00000000  00007007  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN13OneWireSensor11diagnosticsEv:

00000000 <_ZN13OneWireSensor11diagnosticsEv>:
 * Integrated into APDuinOS by George Schreiber 05-04-2012
 */

#include "OneWireSensor.h"

OneWireSensor::OneWireSensor(SDCONF *sdc, void *owsensor)
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	28 97       	sbiw	r28, 0x08	; 8
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
{
  this->initSensor(sdc);
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	8c 01       	movw	r16, r24
  2a:	dc 01       	movw	r26, r24
  // TODO Auto-generated constructor stub
  this->sensor = (OWSENS*)malloc(sizeof(OWSENS));
  2c:	de 96       	adiw	r26, 0x3e	; 62
  2e:	ed 91       	ld	r30, X+
  30:	fc 91       	ld	r31, X
  32:	df 97       	sbiw	r26, 0x3f	; 63
  34:	00 84       	ldd	r0, Z+8	; 0x08
  36:	f1 85       	ldd	r31, Z+9	; 0x09
  38:	e0 2d       	mov	r30, r0
  3a:	30 97       	sbiw	r30, 0x00	; 0

  if (this->sensor != NULL) {
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN13OneWireSensor11diagnosticsEv+0x3e>
  3e:	80 81       	ld	r24, Z
  40:	91 81       	ldd	r25, Z+1	; 0x01
  42:	89 2b       	or	r24, r25
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN13OneWireSensor11diagnosticsEv+0x46>
      if (owsensor!=NULL) {
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN13OneWireSensor11diagnosticsEv+0x4c>
          this->bPrimary = false;
  4c:	82 81       	ldd	r24, Z+2	; 0x02
          this->sensor->owenc = ((OneWireSensor*)owsensor)->sensor->owenc;
  4e:	88 23       	and	r24, r24
  50:	01 f0       	breq	.+0      	; 0x52 <_ZN13OneWireSensor11diagnosticsEv+0x52>
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN13OneWireSensor11diagnosticsEv+0x58>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
  60:	80 e0       	ldi	r24, 0x00	; 0
      } else {
          this->bPrimary = true;
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
          this->sensor->owenc = (OWENC*)malloc(sizeof(OWENC));
  68:	f8 01       	movw	r30, r16
  6a:	65 89       	ldd	r22, Z+21	; 0x15
  6c:	76 89       	ldd	r23, Z+22	; 0x16
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
          if (this->sensor->owenc != NULL) {
  72:	4a e0       	ldi	r20, 0x0A	; 10
  74:	50 e0       	ldi	r21, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
  82:	0e 5f       	subi	r16, 0xFE	; 254
          	this->sensor->owenc->ow = new OneWire(this->config.sensor_pin);
  84:	1f 4f       	sbci	r17, 0xFF	; 255
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	b8 01       	movw	r22, r16
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
  98:	01 5c       	subi	r16, 0xC1	; 193
  9a:	1f 4f       	sbci	r17, 0xFF	; 255
          	this->sensor->owenc->state = STATE_READY;
  9c:	d8 01       	movw	r26, r16
  9e:	8c 91       	ld	r24, X
  a0:	01 54       	subi	r16, 0x41	; 65
  a2:	10 40       	sbci	r17, 0x00	; 0
  a4:	88 23       	and	r24, r24
  a6:	01 f4       	brne	.+0      	; 0xa8 <_ZN13OneWireSensor11diagnosticsEv+0xa8>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN13OneWireSensor11diagnosticsEv+0xae>
  ae:	d8 01       	movw	r26, r16
          } else {
          	SerPrintP("malloc error");
  b0:	de 96       	adiw	r26, 0x3e	; 62
  b2:	ed 91       	ld	r30, X+
  b4:	fc 91       	ld	r31, X
  b6:	df 97       	sbiw	r26, 0x3f	; 63
          }
      }
      //TODO add address, other parameters ,etc
      if (strlen(this->config.extra_data)) {
  b8:	00 84       	ldd	r0, Z+8	; 0x08
  ba:	f1 85       	ldd	r31, Z+9	; 0x09
  bc:	e0 2d       	mov	r30, r0
  be:	c0 80       	ld	r12, Z
      	hexbytes(this->config.extra_data,(byte*)(&this->sensor->address),8);
  c0:	d1 80       	ldd	r13, Z+1	; 0x01
  c2:	c6 01       	movw	r24, r12
  c4:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
  c8:	68 ee       	ldi	r22, 0xE8	; 232
  ca:	73 e0       	ldi	r23, 0x03	; 3
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
      } else {
      	memset(&(this->sensor->address),0,sizeof(this->sensor->address));
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	ee 24       	eor	r14, r14
  d8:	ff 24       	eor	r15, r15
  da:	5e 01       	movw	r10, r28
  dc:	08 94       	sec
  de:	a1 1c       	adc	r10, r1
  e0:	b1 1c       	adc	r11, r1
  e2:	89 e0       	ldi	r24, 0x09	; 9
  e4:	88 2e       	mov	r8, r24
  e6:	91 2c       	mov	r9, r1
      }
      this->sensor->value = 0;
  e8:	8c 0e       	add	r8, r28
  ea:	9d 1e       	adc	r9, r29
  ec:	00 c0       	rjmp	.+0      	; 0xee <_ZN13OneWireSensor11diagnosticsEv+0xee>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	60 e2       	ldi	r22, 0x20	; 32
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	f8 01       	movw	r30, r16
  fe:	61 91       	ld	r22, Z+
 100:	8f 01       	movw	r16, r30
      this->fvalue = 0;
 102:	40 e1       	ldi	r20, 0x10	; 16
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 10a:	08 15       	cp	r16, r8

      SerPrintP("ADDR: ");
 10c:	19 05       	cpc	r17, r9
 10e:	01 f4       	brne	.+0      	; 0x110 <_ZN13OneWireSensor11diagnosticsEv+0x110>
 110:	c5 01       	movw	r24, r10
 112:	67 e0       	ldi	r22, 0x07	; 7
 114:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
      for(byte i = 0; i < 8; i++) {
        Serial.write(' ');
 118:	98 85       	ldd	r25, Y+8	; 0x08
 11a:	89 17       	cp	r24, r25
 11c:	01 f0       	breq	.+0      	; 0x11e <_ZN13OneWireSensor11diagnosticsEv+0x11e>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
        Serial.print(this->sensor->address[i], HEX);
 122:	00 c0       	rjmp	.+0      	; 0x124 <_ZN13OneWireSensor11diagnosticsEv+0x124>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	82 32       	cpi	r24, 0x22	; 34
 130:	01 f0       	breq	.+0      	; 0x132 <_ZN13OneWireSensor11diagnosticsEv+0x132>
 132:	88 32       	cpi	r24, 0x28	; 40
 134:	01 f0       	breq	.+0      	; 0x136 <_ZN13OneWireSensor11diagnosticsEv+0x136>
 136:	80 31       	cpi	r24, 0x10	; 16
 138:	01 f4       	brne	.+0      	; 0x13a <_ZN13OneWireSensor11diagnosticsEv+0x13a>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_ZN13OneWireSensor11diagnosticsEv+0x140>
      }
      this->sensor->value = 0;
      this->fvalue = 0;

      SerPrintP("ADDR: ");
      for(byte i = 0; i < 8; i++) {
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	00 c0       	rjmp	.+0      	; 0x146 <_ZN13OneWireSensor11diagnosticsEv+0x146>
        Serial.write(' ');
        Serial.print(this->sensor->address[i], HEX);
      }
      SerPrintP("\n");
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>

      // verify address before use; if address invalid, then invalidate the address field and the sensor
      this->verify_address();
 14e:	08 94       	sec
 150:	e1 1c       	adc	r14, r1
 152:	f1 1c       	adc	r15, r1
  }
  this->_type_s = 0;
 154:	11 e0       	ldi	r17, 0x01	; 1
 156:	00 c0       	rjmp	.+0      	; 0x158 <_ZN13OneWireSensor11diagnosticsEv+0x158>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
  this->_lm = millis();
 160:	00 c0       	rjmp	.+0      	; 0x162 <_ZN13OneWireSensor11diagnosticsEv+0x162>
 162:	c6 01       	movw	r24, r12
 164:	b5 01       	movw	r22, r10
 166:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 16a:	88 23       	and	r24, r24
 16c:	01 f0       	breq	.+0      	; 0x16e <_ZN13OneWireSensor11diagnosticsEv+0x16e>
 16e:	fa e0       	ldi	r31, 0x0A	; 10
 170:	ef 16       	cp	r14, r31
 172:	f1 04       	cpc	r15, r1
 174:	01 f0       	breq	.+0      	; 0x176 <_ZN13OneWireSensor11diagnosticsEv+0x176>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 17e:	80 e0       	ldi	r24, 0x00	; 0
  this->_state = STATE_READY;
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	b7 01       	movw	r22, r14
 184:	4a e0       	ldi	r20, 0x0A	; 10
}
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 19c:	85 01       	movw	r16, r10
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_ZN13OneWireSensor11diagnosticsEv+0x1a0>
 1a0:	11 23       	and	r17, r17
 1a2:	01 f0       	breq	.+0      	; 0x1a4 <_ZN13OneWireSensor11diagnosticsEv+0x1a4>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 1ac:	c6 01       	movw	r24, r12
 1ae:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 1b2:	6a ef       	ldi	r22, 0xFA	; 250
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 1be:	c6 01       	movw	r24, r12
 1c0:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 1cc:	68 ee       	ldi	r22, 0xE8	; 232
 1ce:	73 e0       	ldi	r23, 0x03	; 3
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor11diagnosticsEv>
 1d8:	28 96       	adiw	r28, 0x08	; 8
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	af 90       	pop	r10
 1f8:	9f 90       	pop	r9
 1fa:	8f 90       	pop	r8
 1fc:	08 95       	ret

Disassembly of section .text._ZN13OneWireSensor19ow_temperature_readEv:

00000000 <_ZN13OneWireSensor19ow_temperature_readEv>:
 * Integrated into APDuinOS by George Schreiber 05-04-2012
 */

#include "OneWireSensor.h"

OneWireSensor::OneWireSensor(SDCONF *sdc, void *owsensor)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	df 93       	push	r29
  12:	cf 93       	push	r28
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	6c 97       	sbiw	r28, 0x1c	; 28
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	de bf       	out	0x3e, r29	; 62
  20:	0f be       	out	0x3f, r0	; 63
  22:	cd bf       	out	0x3d, r28	; 61
{
  this->initSensor(sdc);
  24:	7c 01       	movw	r14, r24
  26:	dc 01       	movw	r26, r24
  28:	1f 96       	adiw	r26, 0x0f	; 15
  2a:	8d 91       	ld	r24, X+
  // TODO Auto-generated constructor stub
  this->sensor = (OWSENS*)malloc(sizeof(OWSENS));
  2c:	9c 91       	ld	r25, X
  2e:	50 97       	sbiw	r26, 0x10	; 16
  30:	03 97       	sbiw	r24, 0x03	; 3
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN13OneWireSensor19ow_temperature_readEv+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN13OneWireSensor19ow_temperature_readEv+0x36>
  36:	51 96       	adiw	r26, 0x11	; 17
  38:	8d 91       	ld	r24, X+
  3a:	9c 91       	ld	r25, X

  if (this->sensor != NULL) {
  3c:	52 97       	sbiw	r26, 0x12	; 18
  3e:	02 97       	sbiw	r24, 0x02	; 2
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN13OneWireSensor19ow_temperature_readEv+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN13OneWireSensor19ow_temperature_readEv+0x44>
  44:	18 e0       	ldi	r17, 0x08	; 8
      if (owsensor!=NULL) {
  46:	b1 2e       	mov	r11, r17
  48:	fe 01       	movw	r30, r28
  4a:	31 96       	adiw	r30, 0x01	; 1
          this->bPrimary = false;
  4c:	df 01       	movw	r26, r30
          this->sensor->owenc = ((OneWireSensor*)owsensor)->sensor->owenc;
  4e:	2b 2d       	mov	r18, r11
  50:	1d 92       	st	X+, r1
  52:	2a 95       	dec	r18
  54:	01 f4       	brne	.+0      	; 0x56 <_ZN13OneWireSensor19ow_temperature_readEv+0x56>
  56:	d7 01       	movw	r26, r14
  58:	de 96       	adiw	r26, 0x3e	; 62
  5a:	0d 91       	ld	r16, X+
  5c:	1c 91       	ld	r17, X
  5e:	df 97       	sbiw	r26, 0x3f	; 63
  60:	c8 01       	movw	r24, r16
      } else {
          this->bPrimary = true;
  62:	bf 01       	movw	r22, r30
  64:	48 e0       	ldi	r20, 0x08	; 8
          this->sensor->owenc = (OWENC*)malloc(sizeof(OWENC));
  66:	50 e0       	ldi	r21, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	01 f4       	brne	.+0      	; 0x70 <_ZN13OneWireSensor19ow_temperature_readEv+0x70>
  70:	80 e0       	ldi	r24, 0x00	; 0
          if (this->sensor->owenc != NULL) {
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
  78:	cc 24       	eor	r12, r12
  7a:	dd 24       	eor	r13, r13
  7c:	06 ec       	ldi	r16, 0xC6	; 198
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN13OneWireSensor19ow_temperature_readEv+0x80>
  80:	d8 01       	movw	r26, r16
  82:	18 96       	adiw	r26, 0x08	; 8
          	this->sensor->owenc->ow = new OneWire(this->config.sensor_pin);
  84:	ed 91       	ld	r30, X+
  86:	fc 91       	ld	r31, X
  88:	19 97       	sbiw	r26, 0x09	; 9
  8a:	30 97       	sbiw	r30, 0x00	; 0
  8c:	01 f0       	breq	.+0      	; 0x8e <_ZN13OneWireSensor19ow_temperature_readEv+0x8e>
  8e:	c0 80       	ld	r12, Z
  90:	d1 80       	ldd	r13, Z+1	; 0x01
  92:	c1 14       	cp	r12, r1
  94:	d1 04       	cpc	r13, r1
  96:	01 f4       	brne	.+0      	; 0x98 <_ZN13OneWireSensor19ow_temperature_readEv+0x98>
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
          	this->sensor->owenc->state = STATE_READY;
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
  a0:	cc 24       	eor	r12, r12
  a2:	b0 ec       	ldi	r27, 0xC0	; 192
  a4:	db 2e       	mov	r13, r27
  a6:	09 e7       	ldi	r16, 0x79	; 121
  a8:	14 ec       	ldi	r17, 0xC4	; 196
  aa:	00 c0       	rjmp	.+0      	; 0xac <_ZN13OneWireSensor19ow_temperature_readEv+0xac>
  ac:	d7 01       	movw	r26, r14
  ae:	dd 96       	adiw	r26, 0x3d	; 61
          } else {
          	SerPrintP("malloc error");
  b0:	8c 91       	ld	r24, X
  b2:	dd 97       	sbiw	r26, 0x3d	; 61
  b4:	88 23       	and	r24, r24
  b6:	01 f4       	brne	.+0      	; 0xb8 <_ZN13OneWireSensor19ow_temperature_readEv+0xb8>
          }
      }
      //TODO add address, other parameters ,etc
      if (strlen(this->config.extra_data)) {
  b8:	82 81       	ldd	r24, Z+2	; 0x02
  ba:	88 23       	and	r24, r24
  bc:	01 f4       	brne	.+0      	; 0xbe <_ZN13OneWireSensor19ow_temperature_readEv+0xbe>
  be:	81 e0       	ldi	r24, 0x01	; 1
      	hexbytes(this->config.extra_data,(byte*)(&this->sensor->address),8);
  c0:	82 83       	std	Z+2, r24	; 0x02
  c2:	dd 96       	adiw	r26, 0x3d	; 61
  c4:	bc 92       	st	X, r11
  c6:	c6 01       	movw	r24, r12
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
  cc:	f7 01       	movw	r30, r14
  ce:	66 ad       	ldd	r22, Z+62	; 0x3e
  d0:	77 ad       	ldd	r23, Z+63	; 0x3f
      } else {
      	memset(&(this->sensor->address),0,sizeof(this->sensor->address));
  d2:	c6 01       	movw	r24, r12
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
  d8:	c6 01       	movw	r24, r12
  da:	64 e4       	ldi	r22, 0x44	; 68
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
  e2:	d7 01       	movw	r26, r14
  e4:	db 96       	adiw	r26, 0x3b	; 59
  e6:	8d 91       	ld	r24, X+
      }
      this->sensor->value = 0;
  e8:	9c 91       	ld	r25, X
  ea:	dc 97       	sbiw	r26, 0x3c	; 60
  ec:	48 ee       	ldi	r20, 0xE8	; 232
  ee:	53 e0       	ldi	r21, 0x03	; 3
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
  f8:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
  fc:	e2 e4       	ldi	r30, 0x42	; 66
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ee 0e       	add	r14, r30
      this->fvalue = 0;
 102:	ff 1e       	adc	r15, r31
 104:	d7 01       	movw	r26, r14
 106:	6d 93       	st	X+, r22
 108:	7d 93       	st	X+, r23
 10a:	8d 93       	st	X+, r24

      SerPrintP("ADDR: ");
 10c:	9c 93       	st	X, r25
 10e:	13 97       	sbiw	r26, 0x03	; 3
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZN13OneWireSensor19ow_temperature_readEv+0x112>
 112:	f7 01       	movw	r30, r14
 114:	83 ad       	ldd	r24, Z+59	; 0x3b
 116:	94 ad       	ldd	r25, Z+60	; 0x3c
      for(byte i = 0; i < 8; i++) {
        Serial.write(' ');
 118:	4a e0       	ldi	r20, 0x0A	; 10
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	00 c0       	rjmp	.+0      	; 0x122 <_ZN13OneWireSensor19ow_temperature_readEv+0x122>
        Serial.print(this->sensor->address[i], HEX);
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	01 f0       	breq	.+0      	; 0x126 <_ZN13OneWireSensor19ow_temperature_readEv+0x126>
 126:	00 c0       	rjmp	.+0      	; 0x128 <_ZN13OneWireSensor19ow_temperature_readEv+0x128>
 128:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 12c:	22 e4       	ldi	r18, 0x42	; 66
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	e2 0e       	add	r14, r18
 132:	f3 1e       	adc	r15, r19
 134:	d7 01       	movw	r26, r14
 136:	6d 93       	st	X+, r22
 138:	7d 93       	st	X+, r23
 13a:	8d 93       	st	X+, r24
 13c:	9c 93       	st	X, r25
 13e:	13 97       	sbiw	r26, 0x03	; 3
      }
      this->sensor->value = 0;
      this->fvalue = 0;

      SerPrintP("ADDR: ");
      for(byte i = 0; i < 8; i++) {
 140:	ee eb       	ldi	r30, 0xBE	; 190
 142:	ff ef       	ldi	r31, 0xFF	; 255
 144:	ee 0e       	add	r14, r30
        Serial.write(' ');
        Serial.print(this->sensor->address[i], HEX);
      }
      SerPrintP("\n");
 146:	ff 1e       	adc	r15, r31
 148:	de 01       	movw	r26, r28
 14a:	19 96       	adiw	r26, 0x09	; 9
 14c:	f7 01       	movw	r30, r14

      // verify address before use; if address invalid, then invalidate the address field and the sensor
      this->verify_address();
 14e:	26 ad       	ldd	r18, Z+62	; 0x3e
 150:	37 ad       	ldd	r19, Z+63	; 0x3f
 152:	c9 01       	movw	r24, r18
  }
  this->_type_s = 0;
 154:	fc 01       	movw	r30, r24
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	01 90       	ld	r0, Z+
 15a:	0d 92       	st	X+, r0
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	01 f4       	brne	.+0      	; 0x160 <_ZN13OneWireSensor19ow_temperature_readEv+0x160>
  this->_lm = millis();
 160:	c6 01       	movw	r24, r12
 162:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 166:	c6 01       	movw	r24, r12
 168:	be 01       	movw	r22, r28
 16a:	67 5f       	subi	r22, 0xF7	; 247
 16c:	7f 4f       	sbci	r23, 0xFF	; 255
 16e:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 172:	c6 01       	movw	r24, r12
 174:	6e eb       	ldi	r22, 0xBE	; 190
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 17c:	8e 01       	movw	r16, r28
 17e:	0f 5e       	subi	r16, 0xEF	; 239
  this->_state = STATE_READY;
 180:	1f 4f       	sbci	r17, 0xFF	; 255
 182:	aa e1       	ldi	r26, 0x1A	; 26
 184:	aa 2e       	mov	r10, r26
}
 186:	b1 2c       	mov	r11, r1
 188:	ac 0e       	add	r10, r28
 18a:	bd 1e       	adc	r11, r29
 18c:	c6 01       	movw	r24, r12
 18e:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 192:	d8 01       	movw	r26, r16
 194:	8d 93       	st	X+, r24
 196:	8d 01       	movw	r16, r26
 198:	aa 15       	cp	r26, r10
 19a:	bb 05       	cpc	r27, r11
 19c:	01 f4       	brne	.+0      	; 0x19e <_ZN13OneWireSensor19ow_temperature_readEv+0x19e>
 19e:	9a 89       	ldd	r25, Y+18	; 0x12
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	29 89       	ldd	r18, Y+17	; 0x11
 1a4:	42 2f       	mov	r20, r18
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	48 2b       	or	r20, r24
 1aa:	59 2b       	or	r21, r25
 1ac:	e0 e4       	ldi	r30, 0x40	; 64
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ee 0e       	add	r14, r30
 1b2:	ff 1e       	adc	r15, r31
 1b4:	d7 01       	movw	r26, r14
 1b6:	8c 91       	ld	r24, X
 1b8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ba:	ff ef       	ldi	r31, 0xFF	; 255
 1bc:	ee 0e       	add	r14, r30
 1be:	ff 1e       	adc	r15, r31
 1c0:	88 23       	and	r24, r24
 1c2:	01 f0       	breq	.+0      	; 0x1c4 <_ZN13OneWireSensor19ow_temperature_readEv+0x1c4>
 1c4:	f3 e0       	ldi	r31, 0x03	; 3
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	fa 95       	dec	r31
 1cc:	01 f4       	brne	.+0      	; 0x1ce <_ZN13OneWireSensor19ow_temperature_readEv+0x1ce>
 1ce:	88 8d       	ldd	r24, Y+24	; 0x18
 1d0:	80 31       	cpi	r24, 0x10	; 16
 1d2:	01 f4       	brne	.+0      	; 0x1d4 <_ZN13OneWireSensor19ow_temperature_readEv+0x1d4>
 1d4:	2f 89       	ldd	r18, Y+23	; 0x17
 1d6:	8c e0       	ldi	r24, 0x0C	; 12
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	82 1b       	sub	r24, r18
 1dc:	91 09       	sbc	r25, r1
 1de:	40 7f       	andi	r20, 0xF0	; 240
 1e0:	48 0f       	add	r20, r24
 1e2:	59 1f       	adc	r21, r25
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_ZN13OneWireSensor19ow_temperature_readEv+0x1e6>
 1e6:	8d 89       	ldd	r24, Y+21	; 0x15
 1e8:	80 76       	andi	r24, 0x60	; 96
 1ea:	01 f4       	brne	.+0      	; 0x1ec <_ZN13OneWireSensor19ow_temperature_readEv+0x1ec>
 1ec:	e3 e0       	ldi	r30, 0x03	; 3
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	ea 95       	dec	r30
 1f4:	01 f4       	brne	.+0      	; 0x1f6 <_ZN13OneWireSensor19ow_temperature_readEv+0x1f6>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_ZN13OneWireSensor19ow_temperature_readEv+0x1f8>
 1f8:	80 32       	cpi	r24, 0x20	; 32
 1fa:	01 f4       	brne	.+0      	; 0x1fc <_ZN13OneWireSensor19ow_temperature_readEv+0x1fc>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	44 0f       	add	r20, r20
 202:	55 1f       	adc	r21, r21
 204:	00 c0       	rjmp	.+0      	; 0x206 <_ZN13OneWireSensor19ow_temperature_readEv+0x206>
 206:	80 34       	cpi	r24, 0x40	; 64
 208:	01 f4       	brne	.+0      	; 0x20a <_ZN13OneWireSensor19ow_temperature_readEv+0x20a>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	ba 01       	movw	r22, r20
 210:	88 27       	eor	r24, r24
 212:	77 fd       	sbrc	r23, 7
 214:	80 95       	com	r24
 216:	98 2f       	mov	r25, r24
 218:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e8       	ldi	r20, 0x80	; 128
 222:	5d e3       	ldi	r21, 0x3D	; 61
 224:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 228:	6b 01       	movw	r12, r22
 22a:	8c 01       	movw	r16, r24
 22c:	d7 01       	movw	r26, r14
 22e:	dd 96       	adiw	r26, 0x3d	; 61
 230:	1c 92       	st	X, r1
 232:	dd 97       	sbiw	r26, 0x3d	; 61
 234:	de 96       	adiw	r26, 0x3e	; 62
 236:	ed 91       	ld	r30, X+
 238:	fc 91       	ld	r31, X
 23a:	df 97       	sbiw	r26, 0x3f	; 63
 23c:	00 84       	ldd	r0, Z+8	; 0x08
 23e:	f1 85       	ldd	r31, Z+9	; 0x09
 240:	e0 2d       	mov	r30, r0
 242:	12 82       	std	Z+2, r1	; 0x02
 244:	59 96       	adiw	r26, 0x19	; 25
 246:	4d 91       	ld	r20, X+
 248:	5c 91       	ld	r21, X
 24a:	5a 97       	sbiw	r26, 0x1a	; 26
 24c:	66 27       	eor	r22, r22
 24e:	57 fd       	sbrc	r21, 7
 250:	60 95       	com	r22
 252:	76 2f       	mov	r23, r22
 254:	db 96       	adiw	r26, 0x3b	; 59
 256:	8d 91       	ld	r24, X+
 258:	9c 91       	ld	r25, X
 25a:	dc 97       	sbiw	r26, 0x3c	; 60
 25c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 260:	00 c0       	rjmp	.+0      	; 0x262 <_ZN13OneWireSensor19ow_temperature_readEv+0x262>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 26a:	f7 01       	movw	r30, r14
 26c:	81 8d       	ldd	r24, Z+25	; 0x19
 26e:	92 8d       	ldd	r25, Z+26	; 0x1a
 270:	ac 01       	movw	r20, r24
 272:	33 e0       	ldi	r19, 0x03	; 3
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	3a 95       	dec	r19
 27a:	01 f4       	brne	.+0      	; 0x27c <_ZN13OneWireSensor19ow_temperature_readEv+0x27c>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	48 0f       	add	r20, r24
 282:	59 1f       	adc	r21, r25
 284:	66 27       	eor	r22, r22
 286:	57 fd       	sbrc	r21, 7
 288:	60 95       	com	r22
 28a:	76 2f       	mov	r23, r22
 28c:	83 ad       	ldd	r24, Z+59	; 0x3b
 28e:	94 ad       	ldd	r25, Z+60	; 0x3c
 290:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor19ow_temperature_readEv>
 294:	cc 24       	eor	r12, r12
 296:	dd 24       	eor	r13, r13
 298:	00 ef       	ldi	r16, 0xF0	; 240
 29a:	00 c0       	rjmp	.+0      	; 0x29c <_ZN13OneWireSensor19ow_temperature_readEv+0x29c>
 29c:	cc 24       	eor	r12, r12
 29e:	dd 24       	eor	r13, r13
 2a0:	04 ec       	ldi	r16, 0xC4	; 196
 2a2:	12 ec       	ldi	r17, 0xC2	; 194
 2a4:	b6 01       	movw	r22, r12
 2a6:	c8 01       	movw	r24, r16
 2a8:	6c 96       	adiw	r28, 0x1c	; 28
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	cf 91       	pop	r28
 2b6:	df 91       	pop	r29
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	cf 90       	pop	r12
 2c4:	bf 90       	pop	r11
 2c6:	af 90       	pop	r10
 2c8:	08 95       	ret

Disassembly of section .text._ZN13OneWireSensor13perform_checkEv:

00000000 <_ZN13OneWireSensor13perform_checkEv>:
 * Integrated into APDuinOS by George Schreiber 05-04-2012
 */

#include "OneWireSensor.h"

OneWireSensor::OneWireSensor(SDCONF *sdc, void *owsensor)
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor13perform_checkEv>
  14:	7b 01       	movw	r14, r22
  16:	8c 01       	movw	r16, r24
  18:	8d ad       	ldd	r24, Y+61	; 0x3d
  1a:	88 23       	and	r24, r24
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN13OneWireSensor13perform_checkEv+0x1e>
  1e:	c8 01       	movw	r24, r16
  20:	b7 01       	movw	r22, r14
  22:	20 e0       	ldi	r18, 0x00	; 0
{
  this->initSensor(sdc);
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	48 e4       	ldi	r20, 0x48	; 72
  28:	52 ec       	ldi	r21, 0xC2	; 194
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor13perform_checkEv>
  // TODO Auto-generated constructor stub
  this->sensor = (OWSENS*)malloc(sizeof(OWSENS));
  2e:	18 16       	cp	r1, r24
  30:	04 f4       	brge	.+0      	; 0x32 <_ZN13OneWireSensor13perform_checkEv+0x32>
  32:	ef aa       	std	Y+55, r14	; 0x37
  34:	f8 ae       	std	Y+56, r15	; 0x38
  36:	09 af       	std	Y+57, r16	; 0x39
  38:	1a af       	std	Y+58, r17	; 0x3a
  3a:	dd 24       	eor	r13, r13

  if (this->sensor != NULL) {
  3c:	c8 01       	movw	r24, r16
  3e:	b7 01       	movw	r22, r14
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	48 ec       	ldi	r20, 0xC8	; 200
      if (owsensor!=NULL) {
  46:	52 ec       	ldi	r21, 0xC2	; 194
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor13perform_checkEv>
          this->bPrimary = false;
  4c:	18 16       	cp	r1, r24
          this->sensor->owenc = ((OneWireSensor*)owsensor)->sensor->owenc;
  4e:	04 f4       	brge	.+0      	; 0x50 <_ZN13OneWireSensor13perform_checkEv+0x50>
  50:	dd 24       	eor	r13, r13
  52:	d3 94       	inc	r13
  54:	8d 2d       	mov	r24, r13
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
      } else {
          this->bPrimary = true;
  62:	df 90       	pop	r13
  64:	08 95       	ret

Disassembly of section .text._ZN13OneWireSensor14verify_addressEv:

00000000 <_ZN13OneWireSensor14verify_addressEv>:
 * Integrated into APDuinOS by George Schreiber 05-04-2012
 */

#include "OneWireSensor.h"

OneWireSensor::OneWireSensor(SDCONF *sdc, void *owsensor)
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
{
  this->initSensor(sdc);
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	60 97       	sbiw	r28, 0x10	; 16
  2a:	0f b6       	in	r0, 0x3f	; 63
  // TODO Auto-generated constructor stub
  this->sensor = (OWSENS*)malloc(sizeof(OWSENS));
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	7c 01       	movw	r14, r24
  36:	8e 01       	movw	r16, r28
  38:	0f 5f       	subi	r16, 0xFF	; 255
  3a:	1f 4f       	sbci	r17, 0xFF	; 255

  if (this->sensor != NULL) {
  3c:	88 e0       	ldi	r24, 0x08	; 8
  3e:	d8 01       	movw	r26, r16
  40:	1d 92       	st	X+, r1
  42:	8a 95       	dec	r24
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN13OneWireSensor14verify_addressEv+0x46>
      if (owsensor!=NULL) {
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
          this->bPrimary = false;
          this->sensor->owenc = ((OneWireSensor*)owsensor)->sensor->owenc;
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
  56:	f7 01       	movw	r30, r14
  58:	65 89       	ldd	r22, Z+21	; 0x15
  5a:	76 89       	ldd	r23, Z+22	; 0x16
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	4a e0       	ldi	r20, 0x0A	; 10
      } else {
          this->bPrimary = true;
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
          this->sensor->owenc = (OWENC*)malloc(sizeof(OWENC));
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
  70:	b7 01       	movw	r22, r14
          if (this->sensor->owenc != NULL) {
  72:	6e 5f       	subi	r22, 0xFE	; 254
  74:	7f 4f       	sbci	r23, 0xFF	; 255
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
          	this->sensor->owenc->ow = new OneWire(this->config.sensor_pin);
  86:	f7 01       	movw	r30, r14
  88:	a6 ad       	ldd	r26, Z+62	; 0x3e
  8a:	b7 ad       	ldd	r27, Z+63	; 0x3f
  8c:	18 96       	adiw	r26, 0x08	; 8
  8e:	ed 91       	ld	r30, X+
  90:	fc 91       	ld	r31, X
  92:	19 97       	sbiw	r26, 0x09	; 9
  94:	30 97       	sbiw	r30, 0x00	; 0
  96:	01 f0       	breq	.+0      	; 0x98 <_ZN13OneWireSensor14verify_addressEv+0x98>
  98:	a0 80       	ld	r10, Z
  9a:	b1 80       	ldd	r11, Z+1	; 0x01
          	this->sensor->owenc->state = STATE_READY;
  9c:	a1 14       	cp	r10, r1
  9e:	b1 04       	cpc	r11, r1
  a0:	01 f4       	brne	.+0      	; 0xa2 <_ZN13OneWireSensor14verify_addressEv+0xa2>
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN13OneWireSensor14verify_addressEv+0xa8>
  a8:	82 81       	ldd	r24, Z+2	; 0x02
  aa:	88 23       	and	r24, r24
  ac:	01 f0       	breq	.+0      	; 0xae <_ZN13OneWireSensor14verify_addressEv+0xae>
  ae:	80 e0       	ldi	r24, 0x00	; 0
          } else {
          	SerPrintP("malloc error");
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN13OneWireSensor14verify_addressEv+0xb4>
  b4:	cd 01       	movw	r24, r26
  b6:	b8 01       	movw	r22, r16
          }
      }
      //TODO add address, other parameters ,etc
      if (strlen(this->config.extra_data)) {
  b8:	48 e0       	ldi	r20, 0x08	; 8
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
      	hexbytes(this->config.extra_data,(byte*)(&this->sensor->address),8);
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	01 f0       	breq	.+0      	; 0xc4 <_ZN13OneWireSensor14verify_addressEv+0xc4>
  c4:	c5 01       	movw	r24, r10
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	cc 24       	eor	r12, r12
  ce:	dd 24       	eor	r13, r13
  d0:	99 e0       	ldi	r25, 0x09	; 9
      } else {
      	memset(&(this->sensor->address),0,sizeof(this->sensor->address));
  d2:	89 2e       	mov	r8, r25
  d4:	91 2c       	mov	r9, r1
  d6:	8c 0e       	add	r8, r28
  d8:	9d 1e       	adc	r9, r29
  da:	81 e1       	ldi	r24, 0x11	; 17
  dc:	28 2e       	mov	r2, r24
  de:	31 2c       	mov	r3, r1
  e0:	2c 0e       	add	r2, r28
  e2:	3d 1e       	adc	r3, r29
  e4:	2e 01       	movw	r4, r28
  e6:	08 94       	sec
      }
      this->sensor->value = 0;
  e8:	41 1c       	adc	r4, r1
  ea:	51 1c       	adc	r5, r1
  ec:	00 e4       	ldi	r16, 0x40	; 64
  ee:	60 2e       	mov	r6, r16
  f0:	71 2c       	mov	r7, r1
  f2:	6e 0c       	add	r6, r14
  f4:	7f 1c       	adc	r7, r15
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_ZN13OneWireSensor14verify_addressEv+0xf8>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 100:	00 c0       	rjmp	.+0      	; 0x102 <_ZN13OneWireSensor14verify_addressEv+0x102>
      this->fvalue = 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	60 e2       	ldi	r22, 0x20	; 32
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>

      SerPrintP("ADDR: ");
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	d8 01       	movw	r26, r16
 112:	6d 91       	ld	r22, X+
 114:	8d 01       	movw	r16, r26
 116:	40 e1       	ldi	r20, 0x10	; 16
      for(byte i = 0; i < 8; i++) {
        Serial.write(' ');
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 11e:	02 15       	cp	r16, r2
 120:	13 05       	cpc	r17, r3
        Serial.print(this->sensor->address[i], HEX);
 122:	01 f4       	brne	.+0      	; 0x124 <_ZN13OneWireSensor14verify_addressEv+0x124>
 124:	c4 01       	movw	r24, r8
 126:	67 e0       	ldi	r22, 0x07	; 7
 128:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 12c:	98 89       	ldd	r25, Y+16	; 0x10
 12e:	89 17       	cp	r24, r25
 130:	01 f0       	breq	.+0      	; 0x132 <_ZN13OneWireSensor14verify_addressEv+0x132>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	00 c0       	rjmp	.+0      	; 0x138 <_ZN13OneWireSensor14verify_addressEv+0x138>
 138:	f7 01       	movw	r30, r14
 13a:	06 ad       	ldd	r16, Z+62	; 0x3e
 13c:	17 ad       	ldd	r17, Z+63	; 0x3f
 13e:	c8 01       	movw	r24, r16
      }
      this->sensor->value = 0;
      this->fvalue = 0;

      SerPrintP("ADDR: ");
      for(byte i = 0; i < 8; i++) {
 140:	b2 01       	movw	r22, r4
 142:	48 e0       	ldi	r20, 0x08	; 8
 144:	50 e0       	ldi	r21, 0x00	; 0
        Serial.write(' ');
        Serial.print(this->sensor->address[i], HEX);
      }
      SerPrintP("\n");
 146:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	01 f0       	breq	.+0      	; 0x14e <_ZN13OneWireSensor14verify_addressEv+0x14e>

      // verify address before use; if address invalid, then invalidate the address field and the sensor
      this->verify_address();
 14e:	c8 01       	movw	r24, r16
 150:	b4 01       	movw	r22, r8
 152:	48 e0       	ldi	r20, 0x08	; 8
  }
  this->_type_s = 0;
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	01 f0       	breq	.+0      	; 0x15e <_ZN13OneWireSensor14verify_addressEv+0x15e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_ZN13OneWireSensor14verify_addressEv+0x160>
  this->_lm = millis();
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 168:	d7 01       	movw	r26, r14
 16a:	de 96       	adiw	r26, 0x3e	; 62
 16c:	8c 91       	ld	r24, X
 16e:	de 97       	sbiw	r26, 0x3e	; 62
 170:	df 96       	adiw	r26, 0x3f	; 63
 172:	9c 91       	ld	r25, X
 174:	9c 01       	movw	r18, r24
 176:	d9 01       	movw	r26, r18
 178:	f4 01       	movw	r30, r8
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	01 90       	ld	r0, Z+
 17e:	0d 92       	st	X+, r0
  this->_state = STATE_READY;
 180:	81 50       	subi	r24, 0x01	; 1
 182:	01 f4       	brne	.+0      	; 0x184 <_ZN13OneWireSensor14verify_addressEv+0x184>
 184:	80 e0       	ldi	r24, 0x00	; 0
}
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 194:	01 e0       	ldi	r16, 0x01	; 1
 196:	00 c0       	rjmp	.+0      	; 0x198 <_ZN13OneWireSensor14verify_addressEv+0x198>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 1aa:	89 85       	ldd	r24, Y+9	; 0x09
 1ac:	82 32       	cpi	r24, 0x22	; 34
 1ae:	01 f0       	breq	.+0      	; 0x1b0 <_ZN13OneWireSensor14verify_addressEv+0x1b0>
 1b0:	88 32       	cpi	r24, 0x28	; 40
 1b2:	01 f0       	breq	.+0      	; 0x1b4 <_ZN13OneWireSensor14verify_addressEv+0x1b4>
 1b4:	80 31       	cpi	r24, 0x10	; 16
 1b6:	01 f4       	brne	.+0      	; 0x1b8 <_ZN13OneWireSensor14verify_addressEv+0x1b8>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 1c0:	11 e0       	ldi	r17, 0x01	; 1
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_ZN13OneWireSensor14verify_addressEv+0x1c4>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_ZN13OneWireSensor14verify_addressEv+0x1ca>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_ZN13OneWireSensor14verify_addressEv+0x1d6>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <_ZN13OneWireSensor14verify_addressEv+0x1dc>
 1dc:	f7 01       	movw	r30, r14
 1de:	86 ad       	ldd	r24, Z+62	; 0x3e
 1e0:	97 ad       	ldd	r25, Z+63	; 0x3f
 1e2:	b4 01       	movw	r22, r8
 1e4:	48 e0       	ldi	r20, 0x08	; 8
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	01 f4       	brne	.+0      	; 0x1f0 <_ZN13OneWireSensor14verify_addressEv+0x1f0>
 1f0:	d3 01       	movw	r26, r6
 1f2:	1c 93       	st	X, r17
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	f3 01       	movw	r30, r6
 202:	60 81       	ld	r22, Z
 204:	4a e0       	ldi	r20, 0x0A	; 10
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 20c:	00 23       	and	r16, r16
 20e:	01 f0       	breq	.+0      	; 0x210 <_ZN13OneWireSensor14verify_addressEv+0x210>
 210:	00 c0       	rjmp	.+0      	; 0x212 <_ZN13OneWireSensor14verify_addressEv+0x212>
 212:	08 94       	sec
 214:	c1 1c       	adc	r12, r1
 216:	d1 1c       	adc	r13, r1
 218:	11 e0       	ldi	r17, 0x01	; 1
 21a:	fa e0       	ldi	r31, 0x0A	; 10
 21c:	cf 16       	cp	r12, r31
 21e:	d1 04       	cpc	r13, r1
 220:	01 f0       	breq	.+0      	; 0x222 <_ZN13OneWireSensor14verify_addressEv+0x222>
 222:	c5 01       	movw	r24, r10
 224:	b4 01       	movw	r22, r8
 226:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 22a:	88 23       	and	r24, r24
 22c:	01 f4       	brne	.+0      	; 0x22e <_ZN13OneWireSensor14verify_addressEv+0x22e>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <_ZN13OneWireSensor14verify_addressEv+0x230>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	b6 01       	movw	r22, r12
 23e:	4a e0       	ldi	r20, 0x0A	; 10
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 256:	84 01       	movw	r16, r8
 258:	00 c0       	rjmp	.+0      	; 0x25a <_ZN13OneWireSensor14verify_addressEv+0x25a>
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 262:	c5 01       	movw	r24, r10
 264:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 268:	6a ef       	ldi	r22, 0xFA	; 250
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 274:	00 c0       	rjmp	.+0      	; 0x276 <_ZN13OneWireSensor14verify_addressEv+0x276>
 276:	d7 01       	movw	r26, r14
 278:	de 96       	adiw	r26, 0x3e	; 62
 27a:	ec 91       	ld	r30, X
 27c:	de 97       	sbiw	r26, 0x3e	; 62
 27e:	df 96       	adiw	r26, 0x3f	; 63
 280:	fc 91       	ld	r31, X
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	df 01       	movw	r26, r30
 286:	1d 92       	st	X+, r1
 288:	8a 95       	dec	r24
 28a:	01 f4       	brne	.+0      	; 0x28c <_ZN13OneWireSensor14verify_addressEv+0x28c>
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensor14verify_addressEv>
 29c:	60 96       	adiw	r28, 0x10	; 16
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
 2a8:	cf 91       	pop	r28
 2aa:	df 91       	pop	r29
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	bf 90       	pop	r11
 2ba:	af 90       	pop	r10
 2bc:	9f 90       	pop	r9
 2be:	8f 90       	pop	r8
 2c0:	7f 90       	pop	r7
 2c2:	6f 90       	pop	r6
 2c4:	5f 90       	pop	r5
 2c6:	4f 90       	pop	r4
 2c8:	3f 90       	pop	r3
 2ca:	2f 90       	pop	r2
 2cc:	08 95       	ret
 2ce:	11 23       	and	r17, r17
 2d0:	01 f0       	breq	.+0      	; 0x2d2 <_ZN13OneWireSensor14verify_addressEv+0x2d2>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <_ZN13OneWireSensor14verify_addressEv+0x2d4>
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <_ZZN13OneWireSensor14verify_addressEvE3__c_3+0x13>

Disassembly of section .text._ZN13OneWireSensorD0Ev:

00000000 <_ZN13OneWireSensorD0Ev>:
 * Integrated into APDuinOS by George Schreiber 05-04-2012
 */

#include "OneWireSensor.h"

OneWireSensor::OneWireSensor(SDCONF *sdc, void *owsensor)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ee ad       	ldd	r30, Y+62	; 0x3e
  10:	ff ad       	ldd	r31, Y+63	; 0x3f
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN13OneWireSensorD0Ev+0x16>
  16:	00 84       	ldd	r0, Z+8	; 0x08
  18:	f1 85       	ldd	r31, Z+9	; 0x09
  1a:	e0 2d       	mov	r30, r0
  1c:	30 97       	sbiw	r30, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN13OneWireSensorD0Ev+0x20>
  20:	cf 5b       	subi	r28, 0xBF	; 191
  22:	df 4f       	sbci	r29, 0xFF	; 255
{
  this->initSensor(sdc);
  24:	88 81       	ld	r24, Y
  26:	c1 54       	subi	r28, 0x41	; 65
  28:	d0 40       	sbci	r29, 0x00	; 0
  2a:	88 23       	and	r24, r24
  // TODO Auto-generated constructor stub
  this->sensor = (OWSENS*)malloc(sizeof(OWSENS));
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN13OneWireSensorD0Ev+0x2e>
  2e:	80 81       	ld	r24, Z
  30:	91 81       	ldd	r25, Z+1	; 0x01
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN13OneWireSensorD0Ev+0x36>
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD0Ev>
  3a:	ee ad       	ldd	r30, Y+62	; 0x3e

  if (this->sensor != NULL) {
  3c:	ff ad       	ldd	r31, Y+63	; 0x3f
  3e:	00 84       	ldd	r0, Z+8	; 0x08
  40:	f1 85       	ldd	r31, Z+9	; 0x09
  42:	e0 2d       	mov	r30, r0
  44:	11 82       	std	Z+1, r1	; 0x01
      if (owsensor!=NULL) {
  46:	10 82       	st	Z, r1
  48:	ee ad       	ldd	r30, Y+62	; 0x3e
  4a:	ff ad       	ldd	r31, Y+63	; 0x3f
          this->bPrimary = false;
  4c:	80 85       	ldd	r24, Z+8	; 0x08
          this->sensor->owenc = ((OneWireSensor*)owsensor)->sensor->owenc;
  4e:	91 85       	ldd	r25, Z+9	; 0x09
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD0Ev>
  54:	ee ad       	ldd	r30, Y+62	; 0x3e
  56:	ff ad       	ldd	r31, Y+63	; 0x3f
  58:	11 86       	std	Z+9, r1	; 0x09
  5a:	10 86       	std	Z+8, r1	; 0x08
  5c:	8e ad       	ldd	r24, Y+62	; 0x3e
  5e:	9f ad       	ldd	r25, Y+63	; 0x3f
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD0Ev>
      } else {
          this->bPrimary = true;
  64:	1f ae       	std	Y+63, r1	; 0x3f
          this->sensor->owenc = (OWENC*)malloc(sizeof(OWENC));
  66:	1e ae       	std	Y+62, r1	; 0x3e
  68:	8b ad       	ldd	r24, Y+59	; 0x3b
  6a:	9c ad       	ldd	r25, Y+60	; 0x3c
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD0Ev>
  70:	1c ae       	std	Y+60, r1	; 0x3c
          if (this->sensor->owenc != NULL) {
  72:	1b ae       	std	Y+59, r1	; 0x3b
  74:	ce 01       	movw	r24, r28
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD0Ev>
  7a:	ce 01       	movw	r24, r28
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD0Ev>
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
          	this->sensor->owenc->ow = new OneWire(this->config.sensor_pin);
  84:	08 95       	ret

Disassembly of section .text._ZN13OneWireSensorD1Ev:

00000000 <_ZN13OneWireSensorD1Ev>:
 * Integrated into APDuinOS by George Schreiber 05-04-2012
 */

#include "OneWireSensor.h"

OneWireSensor::OneWireSensor(SDCONF *sdc, void *owsensor)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ee ad       	ldd	r30, Y+62	; 0x3e
  10:	ff ad       	ldd	r31, Y+63	; 0x3f
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN13OneWireSensorD1Ev+0x16>
  16:	00 84       	ldd	r0, Z+8	; 0x08
  18:	f1 85       	ldd	r31, Z+9	; 0x09
  1a:	e0 2d       	mov	r30, r0
  1c:	30 97       	sbiw	r30, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN13OneWireSensorD1Ev+0x20>
  20:	cf 5b       	subi	r28, 0xBF	; 191
  22:	df 4f       	sbci	r29, 0xFF	; 255
{
  this->initSensor(sdc);
  24:	88 81       	ld	r24, Y
  26:	c1 54       	subi	r28, 0x41	; 65
  28:	d0 40       	sbci	r29, 0x00	; 0
  2a:	88 23       	and	r24, r24
  // TODO Auto-generated constructor stub
  this->sensor = (OWSENS*)malloc(sizeof(OWSENS));
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN13OneWireSensorD1Ev+0x2e>
  2e:	80 81       	ld	r24, Z
  30:	91 81       	ldd	r25, Z+1	; 0x01
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN13OneWireSensorD1Ev+0x36>
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD1Ev>
  3a:	ee ad       	ldd	r30, Y+62	; 0x3e

  if (this->sensor != NULL) {
  3c:	ff ad       	ldd	r31, Y+63	; 0x3f
  3e:	00 84       	ldd	r0, Z+8	; 0x08
  40:	f1 85       	ldd	r31, Z+9	; 0x09
  42:	e0 2d       	mov	r30, r0
  44:	11 82       	std	Z+1, r1	; 0x01
      if (owsensor!=NULL) {
  46:	10 82       	st	Z, r1
  48:	ee ad       	ldd	r30, Y+62	; 0x3e
  4a:	ff ad       	ldd	r31, Y+63	; 0x3f
          this->bPrimary = false;
  4c:	80 85       	ldd	r24, Z+8	; 0x08
          this->sensor->owenc = ((OneWireSensor*)owsensor)->sensor->owenc;
  4e:	91 85       	ldd	r25, Z+9	; 0x09
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD1Ev>
  54:	ee ad       	ldd	r30, Y+62	; 0x3e
  56:	ff ad       	ldd	r31, Y+63	; 0x3f
  58:	11 86       	std	Z+9, r1	; 0x09
  5a:	10 86       	std	Z+8, r1	; 0x08
  5c:	8e ad       	ldd	r24, Y+62	; 0x3e
  5e:	9f ad       	ldd	r25, Y+63	; 0x3f
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD1Ev>
      } else {
          this->bPrimary = true;
  64:	1f ae       	std	Y+63, r1	; 0x3f
          this->sensor->owenc = (OWENC*)malloc(sizeof(OWENC));
  66:	1e ae       	std	Y+62, r1	; 0x3e
  68:	8b ad       	ldd	r24, Y+59	; 0x3b
  6a:	9c ad       	ldd	r25, Y+60	; 0x3c
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD1Ev>
  70:	1c ae       	std	Y+60, r1	; 0x3c
          if (this->sensor->owenc != NULL) {
  72:	1b ae       	std	Y+59, r1	; 0x3b
  74:	ce 01       	movw	r24, r28
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD1Ev>
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	08 95       	ret

Disassembly of section .text._ZN13OneWireSensorD2Ev:

00000000 <_ZN13OneWireSensorD2Ev>:
 * Integrated into APDuinOS by George Schreiber 05-04-2012
 */

#include "OneWireSensor.h"

OneWireSensor::OneWireSensor(SDCONF *sdc, void *owsensor)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ee ad       	ldd	r30, Y+62	; 0x3e
  10:	ff ad       	ldd	r31, Y+63	; 0x3f
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN13OneWireSensorD2Ev+0x16>
  16:	00 84       	ldd	r0, Z+8	; 0x08
  18:	f1 85       	ldd	r31, Z+9	; 0x09
  1a:	e0 2d       	mov	r30, r0
  1c:	30 97       	sbiw	r30, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN13OneWireSensorD2Ev+0x20>
  20:	cf 5b       	subi	r28, 0xBF	; 191
  22:	df 4f       	sbci	r29, 0xFF	; 255
{
  this->initSensor(sdc);
  24:	88 81       	ld	r24, Y
  26:	c1 54       	subi	r28, 0x41	; 65
  28:	d0 40       	sbci	r29, 0x00	; 0
  2a:	88 23       	and	r24, r24
  // TODO Auto-generated constructor stub
  this->sensor = (OWSENS*)malloc(sizeof(OWSENS));
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN13OneWireSensorD2Ev+0x2e>
  2e:	80 81       	ld	r24, Z
  30:	91 81       	ldd	r25, Z+1	; 0x01
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN13OneWireSensorD2Ev+0x36>
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD2Ev>
  3a:	ee ad       	ldd	r30, Y+62	; 0x3e

  if (this->sensor != NULL) {
  3c:	ff ad       	ldd	r31, Y+63	; 0x3f
  3e:	00 84       	ldd	r0, Z+8	; 0x08
  40:	f1 85       	ldd	r31, Z+9	; 0x09
  42:	e0 2d       	mov	r30, r0
  44:	11 82       	std	Z+1, r1	; 0x01
      if (owsensor!=NULL) {
  46:	10 82       	st	Z, r1
  48:	ee ad       	ldd	r30, Y+62	; 0x3e
  4a:	ff ad       	ldd	r31, Y+63	; 0x3f
          this->bPrimary = false;
  4c:	80 85       	ldd	r24, Z+8	; 0x08
          this->sensor->owenc = ((OneWireSensor*)owsensor)->sensor->owenc;
  4e:	91 85       	ldd	r25, Z+9	; 0x09
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD2Ev>
  54:	ee ad       	ldd	r30, Y+62	; 0x3e
  56:	ff ad       	ldd	r31, Y+63	; 0x3f
  58:	11 86       	std	Z+9, r1	; 0x09
  5a:	10 86       	std	Z+8, r1	; 0x08
  5c:	8e ad       	ldd	r24, Y+62	; 0x3e
  5e:	9f ad       	ldd	r25, Y+63	; 0x3f
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD2Ev>
      } else {
          this->bPrimary = true;
  64:	1f ae       	std	Y+63, r1	; 0x3f
          this->sensor->owenc = (OWENC*)malloc(sizeof(OWENC));
  66:	1e ae       	std	Y+62, r1	; 0x3e
  68:	8b ad       	ldd	r24, Y+59	; 0x3b
  6a:	9c ad       	ldd	r25, Y+60	; 0x3c
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD2Ev>
  70:	1c ae       	std	Y+60, r1	; 0x3c
          if (this->sensor->owenc != NULL) {
  72:	1b ae       	std	Y+59, r1	; 0x3b
  74:	ce 01       	movw	r24, r28
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorD2Ev>
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	08 95       	ret

Disassembly of section .text._ZN13OneWireSensorC1EP6SDCONFPv:

00000000 <_ZN13OneWireSensorC1EP6SDCONFPv>:
 * Integrated into APDuinOS by George Schreiber 05-04-2012
 */

#include "OneWireSensor.h"

OneWireSensor::OneWireSensor(SDCONF *sdc, void *owsensor)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	8b 01       	movw	r16, r22
  14:	6a 01       	movw	r12, r20
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	d7 01       	movw	r26, r14
  20:	8d 93       	st	X+, r24
  22:	9c 93       	st	X, r25
{
  this->initSensor(sdc);
  24:	c7 01       	movw	r24, r14
  26:	b8 01       	movw	r22, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
  // TODO Auto-generated constructor stub
  this->sensor = (OWSENS*)malloc(sizeof(OWSENS));
  2c:	8e e0       	ldi	r24, 0x0E	; 14
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
  34:	ec 01       	movw	r28, r24
  36:	f7 01       	movw	r30, r14
  38:	97 af       	std	Z+63, r25	; 0x3f
  3a:	86 af       	std	Z+62, r24	; 0x3e

  if (this->sensor != NULL) {
  3c:	00 97       	sbiw	r24, 0x00	; 0
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN13OneWireSensorC1EP6SDCONFPv+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN13OneWireSensorC1EP6SDCONFPv+0x42>
  42:	ef 5b       	subi	r30, 0xBF	; 191
  44:	ff 4f       	sbci	r31, 0xFF	; 255
      if (owsensor!=NULL) {
  46:	c1 14       	cp	r12, r1
  48:	d1 04       	cpc	r13, r1
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN13OneWireSensorC1EP6SDCONFPv+0x4c>
          this->bPrimary = false;
  4c:	10 82       	st	Z, r1
          this->sensor->owenc = ((OneWireSensor*)owsensor)->sensor->owenc;
  4e:	d6 01       	movw	r26, r12
  50:	de 96       	adiw	r26, 0x3e	; 62
  52:	ed 91       	ld	r30, X+
  54:	fc 91       	ld	r31, X
  56:	df 97       	sbiw	r26, 0x3f	; 63
  58:	80 85       	ldd	r24, Z+8	; 0x08
  5a:	91 85       	ldd	r25, Z+9	; 0x09
  5c:	99 87       	std	Y+9, r25	; 0x09
  5e:	88 87       	std	Y+8, r24	; 0x08
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN13OneWireSensorC1EP6SDCONFPv+0x62>
      } else {
          this->bPrimary = true;
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	80 83       	st	Z, r24
          this->sensor->owenc = (OWENC*)malloc(sizeof(OWENC));
  66:	83 e0       	ldi	r24, 0x03	; 3
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
  6e:	88 87       	std	Y+8, r24	; 0x08
  70:	99 87       	std	Y+9, r25	; 0x09
          if (this->sensor->owenc != NULL) {
  72:	d7 01       	movw	r26, r14
  74:	de 96       	adiw	r26, 0x3e	; 62
  76:	ed 91       	ld	r30, X+
  78:	fc 91       	ld	r31, X
  7a:	df 97       	sbiw	r26, 0x3f	; 63
  7c:	c0 85       	ldd	r28, Z+8	; 0x08
  7e:	d1 85       	ldd	r29, Z+9	; 0x09
  80:	20 97       	sbiw	r28, 0x00	; 0
  82:	01 f0       	breq	.+0      	; 0x84 <_ZN13OneWireSensorC1EP6SDCONFPv+0x84>
          	this->sensor->owenc->ow = new OneWire(this->config.sensor_pin);
  84:	8e e0       	ldi	r24, 0x0E	; 14
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
  8c:	18 2f       	mov	r17, r24
  8e:	09 2f       	mov	r16, r25
  90:	f7 01       	movw	r30, r14
  92:	65 89       	ldd	r22, Z+21	; 0x15
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
  98:	18 83       	st	Y, r17
  9a:	09 83       	std	Y+1, r16	; 0x01
          	this->sensor->owenc->state = STATE_READY;
  9c:	d7 01       	movw	r26, r14
  9e:	de 96       	adiw	r26, 0x3e	; 62
  a0:	ed 91       	ld	r30, X+
  a2:	fc 91       	ld	r31, X
  a4:	df 97       	sbiw	r26, 0x3f	; 63
  a6:	00 84       	ldd	r0, Z+8	; 0x08
  a8:	f1 85       	ldd	r31, Z+9	; 0x09
  aa:	e0 2d       	mov	r30, r0
  ac:	12 82       	std	Z+2, r1	; 0x02
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN13OneWireSensorC1EP6SDCONFPv+0xb0>
          } else {
          	SerPrintP("malloc error");
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
          }
      }
      //TODO add address, other parameters ,etc
      if (strlen(this->config.extra_data)) {
  b8:	f7 01       	movw	r30, r14
  ba:	85 8d       	ldd	r24, Z+29	; 0x1d
  bc:	88 23       	and	r24, r24
  be:	01 f0       	breq	.+0      	; 0xc0 <_ZN13OneWireSensorC1EP6SDCONFPv+0xc0>
      	hexbytes(this->config.extra_data,(byte*)(&this->sensor->address),8);
  c0:	66 ad       	ldd	r22, Z+62	; 0x3e
  c2:	77 ad       	ldd	r23, Z+63	; 0x3f
  c4:	c7 01       	movw	r24, r14
  c6:	4d 96       	adiw	r24, 0x1d	; 29
  c8:	48 e0       	ldi	r20, 0x08	; 8
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_ZN13OneWireSensorC1EP6SDCONFPv+0xd2>
      } else {
      	memset(&(this->sensor->address),0,sizeof(this->sensor->address));
  d2:	d7 01       	movw	r26, r14
  d4:	de 96       	adiw	r26, 0x3e	; 62
  d6:	ec 91       	ld	r30, X
  d8:	de 97       	sbiw	r26, 0x3e	; 62
  da:	df 96       	adiw	r26, 0x3f	; 63
  dc:	fc 91       	ld	r31, X
  de:	88 e0       	ldi	r24, 0x08	; 8
  e0:	df 01       	movw	r26, r30
  e2:	1d 92       	st	X+, r1
  e4:	8a 95       	dec	r24
  e6:	01 f4       	brne	.+0      	; 0xe8 <_ZN13OneWireSensorC1EP6SDCONFPv+0xe8>
      }
      this->sensor->value = 0;
  e8:	d7 01       	movw	r26, r14
  ea:	de 96       	adiw	r26, 0x3e	; 62
  ec:	ed 91       	ld	r30, X+
  ee:	fc 91       	ld	r31, X
  f0:	df 97       	sbiw	r26, 0x3f	; 63
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	82 87       	std	Z+10, r24	; 0x0a
  fc:	93 87       	std	Z+11, r25	; 0x0b
  fe:	a4 87       	std	Z+12, r26	; 0x0c
 100:	b5 87       	std	Z+13, r27	; 0x0d
      this->fvalue = 0;
 102:	f7 01       	movw	r30, r14
 104:	87 ab       	std	Z+55, r24	; 0x37
 106:	90 af       	std	Z+56, r25	; 0x38
 108:	a1 af       	std	Z+57, r26	; 0x39
 10a:	b2 af       	std	Z+58, r27	; 0x3a

      SerPrintP("ADDR: ");
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d0 e0       	ldi	r29, 0x00	; 0
      for(byte i = 0; i < 8; i++) {
        Serial.write(' ');
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	60 e2       	ldi	r22, 0x20	; 32
 11e:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
        Serial.print(this->sensor->address[i], HEX);
 122:	d7 01       	movw	r26, r14
 124:	de 96       	adiw	r26, 0x3e	; 62
 126:	ed 91       	ld	r30, X+
 128:	fc 91       	ld	r31, X
 12a:	df 97       	sbiw	r26, 0x3f	; 63
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	60 81       	ld	r22, Z
 136:	40 e1       	ldi	r20, 0x10	; 16
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
 13e:	21 96       	adiw	r28, 0x01	; 1
      }
      this->sensor->value = 0;
      this->fvalue = 0;

      SerPrintP("ADDR: ");
      for(byte i = 0; i < 8; i++) {
 140:	c8 30       	cpi	r28, 0x08	; 8
 142:	d1 05       	cpc	r29, r1
 144:	01 f4       	brne	.+0      	; 0x146 <_ZN13OneWireSensorC1EP6SDCONFPv+0x146>
        Serial.write(' ');
        Serial.print(this->sensor->address[i], HEX);
      }
      SerPrintP("\n");
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>

      // verify address before use; if address invalid, then invalidate the address field and the sensor
      this->verify_address();
 14e:	c7 01       	movw	r24, r14
 150:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
  }
  this->_type_s = 0;
 154:	e0 e4       	ldi	r30, 0x40	; 64
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0e       	add	r14, r30
 15a:	ff 1e       	adc	r15, r31
 15c:	d7 01       	movw	r26, r14
 15e:	1c 92       	st	X, r1
  this->_lm = millis();
 160:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC1EP6SDCONFPv>
 164:	e2 e0       	ldi	r30, 0x02	; 2
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ee 0e       	add	r14, r30
 16a:	ff 1e       	adc	r15, r31
 16c:	d7 01       	movw	r26, r14
 16e:	6d 93       	st	X+, r22
 170:	7d 93       	st	X+, r23
 172:	8d 93       	st	X+, r24
 174:	9c 93       	st	X, r25
 176:	13 97       	sbiw	r26, 0x03	; 3
 178:	ee eb       	ldi	r30, 0xBE	; 190
 17a:	ff ef       	ldi	r31, 0xFF	; 255
 17c:	ee 0e       	add	r14, r30
 17e:	ff 1e       	adc	r15, r31
  this->_state = STATE_READY;
 180:	d7 01       	movw	r26, r14
 182:	dd 96       	adiw	r26, 0x3d	; 61
 184:	1c 92       	st	X, r1
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	df 90       	pop	r13
 194:	cf 90       	pop	r12
 196:	08 95       	ret

Disassembly of section .text._ZN13OneWireSensorC2EP6SDCONFPv:

00000000 <_ZN13OneWireSensorC2EP6SDCONFPv>:
 * Integrated into APDuinOS by George Schreiber 05-04-2012
 */

#include "OneWireSensor.h"

OneWireSensor::OneWireSensor(SDCONF *sdc, void *owsensor)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	8b 01       	movw	r16, r22
  14:	6a 01       	movw	r12, r20
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	d7 01       	movw	r26, r14
  20:	8d 93       	st	X+, r24
  22:	9c 93       	st	X, r25
{
  this->initSensor(sdc);
  24:	c7 01       	movw	r24, r14
  26:	b8 01       	movw	r22, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
  // TODO Auto-generated constructor stub
  this->sensor = (OWSENS*)malloc(sizeof(OWSENS));
  2c:	8e e0       	ldi	r24, 0x0E	; 14
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
  34:	ec 01       	movw	r28, r24
  36:	f7 01       	movw	r30, r14
  38:	97 af       	std	Z+63, r25	; 0x3f
  3a:	86 af       	std	Z+62, r24	; 0x3e

  if (this->sensor != NULL) {
  3c:	00 97       	sbiw	r24, 0x00	; 0
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN13OneWireSensorC2EP6SDCONFPv+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN13OneWireSensorC2EP6SDCONFPv+0x42>
  42:	ef 5b       	subi	r30, 0xBF	; 191
  44:	ff 4f       	sbci	r31, 0xFF	; 255
      if (owsensor!=NULL) {
  46:	c1 14       	cp	r12, r1
  48:	d1 04       	cpc	r13, r1
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN13OneWireSensorC2EP6SDCONFPv+0x4c>
          this->bPrimary = false;
  4c:	10 82       	st	Z, r1
          this->sensor->owenc = ((OneWireSensor*)owsensor)->sensor->owenc;
  4e:	d6 01       	movw	r26, r12
  50:	de 96       	adiw	r26, 0x3e	; 62
  52:	ed 91       	ld	r30, X+
  54:	fc 91       	ld	r31, X
  56:	df 97       	sbiw	r26, 0x3f	; 63
  58:	80 85       	ldd	r24, Z+8	; 0x08
  5a:	91 85       	ldd	r25, Z+9	; 0x09
  5c:	99 87       	std	Y+9, r25	; 0x09
  5e:	88 87       	std	Y+8, r24	; 0x08
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN13OneWireSensorC2EP6SDCONFPv+0x62>
      } else {
          this->bPrimary = true;
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	80 83       	st	Z, r24
          this->sensor->owenc = (OWENC*)malloc(sizeof(OWENC));
  66:	83 e0       	ldi	r24, 0x03	; 3
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
  6e:	88 87       	std	Y+8, r24	; 0x08
  70:	99 87       	std	Y+9, r25	; 0x09
          if (this->sensor->owenc != NULL) {
  72:	d7 01       	movw	r26, r14
  74:	de 96       	adiw	r26, 0x3e	; 62
  76:	ed 91       	ld	r30, X+
  78:	fc 91       	ld	r31, X
  7a:	df 97       	sbiw	r26, 0x3f	; 63
  7c:	c0 85       	ldd	r28, Z+8	; 0x08
  7e:	d1 85       	ldd	r29, Z+9	; 0x09
  80:	20 97       	sbiw	r28, 0x00	; 0
  82:	01 f0       	breq	.+0      	; 0x84 <_ZN13OneWireSensorC2EP6SDCONFPv+0x84>
          	this->sensor->owenc->ow = new OneWire(this->config.sensor_pin);
  84:	8e e0       	ldi	r24, 0x0E	; 14
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
  8c:	18 2f       	mov	r17, r24
  8e:	09 2f       	mov	r16, r25
  90:	f7 01       	movw	r30, r14
  92:	65 89       	ldd	r22, Z+21	; 0x15
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
  98:	18 83       	st	Y, r17
  9a:	09 83       	std	Y+1, r16	; 0x01
          	this->sensor->owenc->state = STATE_READY;
  9c:	d7 01       	movw	r26, r14
  9e:	de 96       	adiw	r26, 0x3e	; 62
  a0:	ed 91       	ld	r30, X+
  a2:	fc 91       	ld	r31, X
  a4:	df 97       	sbiw	r26, 0x3f	; 63
  a6:	00 84       	ldd	r0, Z+8	; 0x08
  a8:	f1 85       	ldd	r31, Z+9	; 0x09
  aa:	e0 2d       	mov	r30, r0
  ac:	12 82       	std	Z+2, r1	; 0x02
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN13OneWireSensorC2EP6SDCONFPv+0xb0>
          } else {
          	SerPrintP("malloc error");
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
          }
      }
      //TODO add address, other parameters ,etc
      if (strlen(this->config.extra_data)) {
  b8:	f7 01       	movw	r30, r14
  ba:	85 8d       	ldd	r24, Z+29	; 0x1d
  bc:	88 23       	and	r24, r24
  be:	01 f0       	breq	.+0      	; 0xc0 <_ZN13OneWireSensorC2EP6SDCONFPv+0xc0>
      	hexbytes(this->config.extra_data,(byte*)(&this->sensor->address),8);
  c0:	66 ad       	ldd	r22, Z+62	; 0x3e
  c2:	77 ad       	ldd	r23, Z+63	; 0x3f
  c4:	c7 01       	movw	r24, r14
  c6:	4d 96       	adiw	r24, 0x1d	; 29
  c8:	48 e0       	ldi	r20, 0x08	; 8
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_ZN13OneWireSensorC2EP6SDCONFPv+0xd2>
      } else {
      	memset(&(this->sensor->address),0,sizeof(this->sensor->address));
  d2:	d7 01       	movw	r26, r14
  d4:	de 96       	adiw	r26, 0x3e	; 62
  d6:	ec 91       	ld	r30, X
  d8:	de 97       	sbiw	r26, 0x3e	; 62
  da:	df 96       	adiw	r26, 0x3f	; 63
  dc:	fc 91       	ld	r31, X
  de:	88 e0       	ldi	r24, 0x08	; 8
  e0:	df 01       	movw	r26, r30
  e2:	1d 92       	st	X+, r1
  e4:	8a 95       	dec	r24
  e6:	01 f4       	brne	.+0      	; 0xe8 <_ZN13OneWireSensorC2EP6SDCONFPv+0xe8>
      }
      this->sensor->value = 0;
  e8:	d7 01       	movw	r26, r14
  ea:	de 96       	adiw	r26, 0x3e	; 62
  ec:	ed 91       	ld	r30, X+
  ee:	fc 91       	ld	r31, X
  f0:	df 97       	sbiw	r26, 0x3f	; 63
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	82 87       	std	Z+10, r24	; 0x0a
  fc:	93 87       	std	Z+11, r25	; 0x0b
  fe:	a4 87       	std	Z+12, r26	; 0x0c
 100:	b5 87       	std	Z+13, r27	; 0x0d
      this->fvalue = 0;
 102:	f7 01       	movw	r30, r14
 104:	87 ab       	std	Z+55, r24	; 0x37
 106:	90 af       	std	Z+56, r25	; 0x38
 108:	a1 af       	std	Z+57, r26	; 0x39
 10a:	b2 af       	std	Z+58, r27	; 0x3a

      SerPrintP("ADDR: ");
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d0 e0       	ldi	r29, 0x00	; 0
      for(byte i = 0; i < 8; i++) {
        Serial.write(' ');
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	60 e2       	ldi	r22, 0x20	; 32
 11e:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
        Serial.print(this->sensor->address[i], HEX);
 122:	d7 01       	movw	r26, r14
 124:	de 96       	adiw	r26, 0x3e	; 62
 126:	ed 91       	ld	r30, X+
 128:	fc 91       	ld	r31, X
 12a:	df 97       	sbiw	r26, 0x3f	; 63
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	60 81       	ld	r22, Z
 136:	40 e1       	ldi	r20, 0x10	; 16
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
 13e:	21 96       	adiw	r28, 0x01	; 1
      }
      this->sensor->value = 0;
      this->fvalue = 0;

      SerPrintP("ADDR: ");
      for(byte i = 0; i < 8; i++) {
 140:	c8 30       	cpi	r28, 0x08	; 8
 142:	d1 05       	cpc	r29, r1
 144:	01 f4       	brne	.+0      	; 0x146 <_ZN13OneWireSensorC2EP6SDCONFPv+0x146>
        Serial.write(' ');
        Serial.print(this->sensor->address[i], HEX);
      }
      SerPrintP("\n");
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>

      // verify address before use; if address invalid, then invalidate the address field and the sensor
      this->verify_address();
 14e:	c7 01       	movw	r24, r14
 150:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
  }
  this->_type_s = 0;
 154:	e0 e4       	ldi	r30, 0x40	; 64
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0e       	add	r14, r30
 15a:	ff 1e       	adc	r15, r31
 15c:	d7 01       	movw	r26, r14
 15e:	1c 92       	st	X, r1
  this->_lm = millis();
 160:	0e 94 00 00 	call	0	; 0x0 <_ZN13OneWireSensorC2EP6SDCONFPv>
 164:	e2 e0       	ldi	r30, 0x02	; 2
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ee 0e       	add	r14, r30
 16a:	ff 1e       	adc	r15, r31
 16c:	d7 01       	movw	r26, r14
 16e:	6d 93       	st	X+, r22
 170:	7d 93       	st	X+, r23
 172:	8d 93       	st	X+, r24
 174:	9c 93       	st	X, r25
 176:	13 97       	sbiw	r26, 0x03	; 3
 178:	ee eb       	ldi	r30, 0xBE	; 190
 17a:	ff ef       	ldi	r31, 0xFF	; 255
 17c:	ee 0e       	add	r14, r30
 17e:	ff 1e       	adc	r15, r31
  this->_state = STATE_READY;
 180:	d7 01       	movw	r26, r14
 182:	dd 96       	adiw	r26, 0x3d	; 61
 184:	1c 92       	st	X, r1
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	df 90       	pop	r13
 194:	cf 90       	pop	r12
 196:	08 95       	ret

SonarSensor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000003  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000037  2**0
                  ALLOC
  3 .stab         00001350  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003f35  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN11SonarSensor10read_sonarEv 00000188  00000000  00000000  000052bd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN11SonarSensor13perform_checkEv 00000066  00000000  00000000  00005445  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN11SonarSensorD0Ev 0000003e  00000000  00000000  000054ab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN11SonarSensorD1Ev 00000038  00000000  00000000  000054e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN11SonarSensorD2Ev 00000038  00000000  00000000  00005521  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN11SonarSensorC1EP6SDCONF 000000b0  00000000  00000000  00005559  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN11SonarSensorC2EP6SDCONF 000000b0  00000000  00000000  00005609  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .rodata._ZTV11SonarSensor 0000000e  00000000  00000000  000056b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 13 .progmem.data 0000002f  00000000  00000000  000056c7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN11SonarSensor10read_sonarEv:

00000000 <_ZN11SonarSensor10read_sonarEv>:
  boolean retcode = (this->sensor->value = this->read_sonar());
  this->fvalue = this->sensor->value;
  return retcode;
}

float SonarSensor::read_sonar() {
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	66 97       	sbiw	r28, 0x16	; 22
  2a:	0f b6       	in	r0, 0x3f	; 63
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	1c 01       	movw	r2, r24
  SerPrintP("SRF05 READING");
  36:	80 e0       	ldi	r24, 0x00	; 0
  38:	90 e0       	ldi	r25, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
  int arrayIndex = 0;                             // arrayIndex of the current item in the array
  int total = 0;                                  // stores the cumlative total
  float averageDistance = 0;                        // stores the average value

  // setup pins and variables for SRF05 sonar device
  int echoPin = this->config.sensor_pin;                    // SRF05 echo pin - we read
  3e:	d1 01       	movw	r26, r2
  40:	55 96       	adiw	r26, 0x15	; 21
  42:	bc 91       	ld	r27, X
  44:	be 8b       	std	Y+22, r27	; 0x16
  int initPin = this->config.sensor_secondary_pin;          // SRF05 trigger pin - we write
  unsigned long pulseTime = 0;                    // stores the pulse in Micro Seconds
  unsigned long distance = 0;                     // variable for storing the distance (cm)

  pinMode(initPin, OUTPUT);                     // set init pin as output
  46:	f1 01       	movw	r30, r2
  48:	f7 89       	ldd	r31, Z+23	; 0x17
  4a:	fd 8b       	std	Y+21, r31	; 0x15
  4c:	8f 2f       	mov	r24, r31
  4e:	61 e0       	ldi	r22, 0x01	; 1
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
  pinMode(echoPin, INPUT);                      // set echo pin as input
  54:	8e 89       	ldd	r24, Y+22	; 0x16
  56:	60 e0       	ldi	r22, 0x00	; 0
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
  5c:	fe 01       	movw	r30, r28
  5e:	31 96       	adiw	r30, 0x01	; 1

  // create array loop to iterate over every item in the array

  for (int thisReading = 0; thisReading < numOfReadings; thisReading++) {
  60:	ce 01       	movw	r24, r28
  62:	45 96       	adiw	r24, 0x15	; 21
    readings[thisReading] = 0;
  64:	11 92       	st	Z+, r1
  66:	11 92       	st	Z+, r1
  pinMode(initPin, OUTPUT);                     // set init pin as output
  pinMode(echoPin, INPUT);                      // set echo pin as input

  // create array loop to iterate over every item in the array

  for (int thisReading = 0; thisReading < numOfReadings; thisReading++) {
  68:	e8 17       	cp	r30, r24
  6a:	f9 07       	cpc	r31, r25
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN11SonarSensor10read_sonarEv+0x6e>
  6e:	cc 24       	eor	r12, r12
  70:	dd 24       	eor	r13, r13
  72:	aa 24       	eor	r10, r10
  74:	bb 24       	eor	r11, r11
  76:	3a e0       	ldi	r19, 0x0A	; 10
  78:	63 2e       	mov	r6, r19
  7a:	71 2c       	mov	r7, r1
  7c:	44 24       	eor	r4, r4
  7e:	55 24       	eor	r5, r5
  80:	88 24       	eor	r8, r8
  82:	99 24       	eor	r9, r9
  int numValidReadings = 0;
   for (int i=0; i < numOfReadings; i++) {
#ifdef DEBUG
    SerPrintP("TRIGGER AND WAIT ECHO...");
#endif
    digitalWrite(initPin, HIGH);                    // send 10 microsecond pulse
  84:	8d 89       	ldd	r24, Y+21	; 0x15
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
    delayMicroseconds(10);                  // wait 10 microseconds before turning off
  8c:	8a e0       	ldi	r24, 0x0A	; 10
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
    digitalWrite(initPin, LOW);                     // stop sending the pulse
  94:	8d 89       	ldd	r24, Y+21	; 0x15
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
    pulseTime = pulseIn(echoPin, HIGH);             // Look for a return pulse, it should be high as the pulse goes low-high-low
  9c:	8e 89       	ldd	r24, Y+22	; 0x16
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	20 e4       	ldi	r18, 0x40	; 64
  a2:	32 e4       	ldi	r19, 0x42	; 66
  a4:	4f e0       	ldi	r20, 0x0F	; 15
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
    if (pulseTime > 0 || i+1 >= numOfReadings) {                // only the last reading is taken as valid if 0
  ac:	61 15       	cp	r22, r1
  ae:	71 05       	cpc	r23, r1
  b0:	81 05       	cpc	r24, r1
  b2:	91 05       	cpc	r25, r1
  b4:	01 f4       	brne	.+0      	; 0xb6 <_ZN11SonarSensor10read_sonarEv+0xb6>
  b6:	29 e0       	ldi	r18, 0x09	; 9
  b8:	82 16       	cp	r8, r18
  ba:	91 04       	cpc	r9, r1
  bc:	01 f4       	brne	.+0      	; 0xbe <_ZN11SonarSensor10read_sonarEv+0xbe>
      numValidReadings++;
  be:	08 94       	sec
  c0:	41 1c       	adc	r4, r1
  c2:	51 1c       	adc	r5, r1
#endif
      distance = pulseTime * this->sensor->calibration_value;        // Distance = pulse time * calibration value to convert to cm.
#ifdef DEBUG
      SerPrintP("..calc dist: "); Serial.print(distance); SerPrintP(" cm");
#endif
      total= total - readings[arrayIndex];           // subtract the last distance
  c4:	86 01       	movw	r16, r12
  c6:	00 0f       	add	r16, r16
  c8:	11 1f       	adc	r17, r17
  ca:	a1 e0       	ldi	r26, 0x01	; 1
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ac 0f       	add	r26, r28
  d0:	bd 1f       	adc	r27, r29
  d2:	0a 0f       	add	r16, r26
  d4:	1b 1f       	adc	r17, r27
  d6:	f8 01       	movw	r30, r16
  d8:	e0 80       	ld	r14, Z
  da:	f1 80       	ldd	r15, Z+1	; 0x01
      readings[arrayIndex] = distance;                // add distance reading to array
  dc:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
  e0:	d1 01       	movw	r26, r2
  e2:	de 96       	adiw	r26, 0x3e	; 62
  e4:	ed 91       	ld	r30, X+
  e6:	fc 91       	ld	r31, X
  e8:	df 97       	sbiw	r26, 0x3f	; 63
  ea:	22 81       	ldd	r18, Z+2	; 0x02
  ec:	33 81       	ldd	r19, Z+3	; 0x03
  ee:	44 81       	ldd	r20, Z+4	; 0x04
  f0:	55 81       	ldd	r21, Z+5	; 0x05
  f2:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
  f6:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
  fa:	f8 01       	movw	r30, r16
  fc:	71 83       	std	Z+1, r23	; 0x01
  fe:	60 83       	st	Z, r22
#endif
      distance = pulseTime * this->sensor->calibration_value;        // Distance = pulse time * calibration value to convert to cm.
#ifdef DEBUG
      SerPrintP("..calc dist: "); Serial.print(distance); SerPrintP(" cm");
#endif
      total= total - readings[arrayIndex];           // subtract the last distance
 100:	ae 18       	sub	r10, r14
 102:	bf 08       	sbc	r11, r15
      readings[arrayIndex] = distance;                // add distance reading to array
      total= total + readings[arrayIndex];            // add the reading to the total
 104:	a6 0e       	add	r10, r22
 106:	b7 1e       	adc	r11, r23
      arrayIndex = arrayIndex + 1;                    // go to the next item in the array
 108:	08 94       	sec
 10a:	c1 1c       	adc	r12, r1
 10c:	d1 1c       	adc	r13, r1
      // At the end of the array (10 items) then start again
      if (arrayIndex >= numOfReadings)  {
 10e:	fa e0       	ldi	r31, 0x0A	; 10
 110:	cf 16       	cp	r12, r31
 112:	d1 04       	cpc	r13, r1
 114:	04 f0       	brlt	.+0      	; 0x116 <_ZN11SonarSensor10read_sonarEv+0x116>
 116:	cc 24       	eor	r12, r12
 118:	dd 24       	eor	r13, r13
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_ZN11SonarSensor10read_sonarEv+0x11c>
          arrayIndex = 0;
        }

    } else {    // wait for silence

        iDelay += 5;
 11c:	25 e0       	ldi	r18, 0x05	; 5
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	62 0e       	add	r6, r18
 122:	73 1e       	adc	r7, r19
    }
    delay(iDelay);
 124:	b3 01       	movw	r22, r6
 126:	88 27       	eor	r24, r24
 128:	77 fd       	sbrc	r23, 7
 12a:	80 95       	com	r24
 12c:	98 2f       	mov	r25, r24
 12e:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
    readings[thisReading] = 0;
   }

  int iDelay = 10;
  int numValidReadings = 0;
   for (int i=0; i < numOfReadings; i++) {
 132:	08 94       	sec
 134:	81 1c       	adc	r8, r1
 136:	91 1c       	adc	r9, r1
 138:	3a e0       	ldi	r19, 0x0A	; 10
 13a:	83 16       	cp	r8, r19
 13c:	91 04       	cpc	r9, r1
 13e:	01 f0       	breq	.+0      	; 0x140 <_ZN11SonarSensor10read_sonarEv+0x140>
 140:	00 c0       	rjmp	.+0      	; 0x142 <_ZN11SonarSensor10read_sonarEv+0x142>
 142:	c5 01       	movw	r24, r10
 144:	b2 01       	movw	r22, r4
 146:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
 14a:	88 27       	eor	r24, r24
 14c:	77 fd       	sbrc	r23, 7
 14e:	80 95       	com	r24
 150:	98 2f       	mov	r25, r24
 152:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor10read_sonarEv>
     averageDistance = total / numValidReadings;      // calculate the average distance
#ifdef DEBUG
    SerPrintP("Average distance measured: "); Serial.println(averageDistance, DEC);         // print out the average distance to the debugger
#endif
    return averageDistance;
}
 156:	66 96       	adiw	r28, 0x16	; 22
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	df 90       	pop	r13
 170:	cf 90       	pop	r12
 172:	bf 90       	pop	r11
 174:	af 90       	pop	r10
 176:	9f 90       	pop	r9
 178:	8f 90       	pop	r8
 17a:	7f 90       	pop	r7
 17c:	6f 90       	pop	r6
 17e:	5f 90       	pop	r5
 180:	4f 90       	pop	r4
 182:	3f 90       	pop	r3
 184:	2f 90       	pop	r2
 186:	08 95       	ret

Disassembly of section .text._ZN11SonarSensor13perform_checkEv:

00000000 <_ZN11SonarSensor13perform_checkEv>:
  boolean retcode = (this->sensor->value = this->read_sonar());
  this->fvalue = this->sensor->value;
  return retcode;
}

float SonarSensor::read_sonar() {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	6c 01       	movw	r12, r24
  12:	dc 01       	movw	r26, r24
  14:	de 96       	adiw	r26, 0x3e	; 62
  16:	ad 90       	ld	r10, X+
  18:	bc 90       	ld	r11, X
  1a:	df 97       	sbiw	r26, 0x3f	; 63
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor13perform_checkEv>
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor13perform_checkEv>
  24:	7b 01       	movw	r14, r22
  26:	8c 01       	movw	r16, r24
  28:	f5 01       	movw	r30, r10
  2a:	60 83       	st	Z, r22
  2c:	f1 82       	std	Z+1, r15	; 0x01
  2e:	d6 01       	movw	r26, r12
  30:	de 96       	adiw	r26, 0x3e	; 62
  32:	ed 91       	ld	r30, X+
  34:	fc 91       	ld	r31, X
  SerPrintP("SRF05 READING");
  36:	df 97       	sbiw	r26, 0x3f	; 63
  38:	60 81       	ld	r22, Z
  3a:	71 81       	ldd	r23, Z+1	; 0x01
  3c:	88 27       	eor	r24, r24
  int arrayIndex = 0;                             // arrayIndex of the current item in the array
  int total = 0;                                  // stores the cumlative total
  float averageDistance = 0;                        // stores the average value

  // setup pins and variables for SRF05 sonar device
  int echoPin = this->config.sensor_pin;                    // SRF05 echo pin - we read
  3e:	77 fd       	sbrc	r23, 7
  40:	80 95       	com	r24
  42:	98 2f       	mov	r25, r24
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensor13perform_checkEv>
  int initPin = this->config.sensor_secondary_pin;          // SRF05 trigger pin - we write
  unsigned long pulseTime = 0;                    // stores the pulse in Micro Seconds
  unsigned long distance = 0;                     // variable for storing the distance (cm)

  pinMode(initPin, OUTPUT);                     // set init pin as output
  48:	f6 01       	movw	r30, r12
  4a:	67 ab       	std	Z+55, r22	; 0x37
  4c:	70 af       	std	Z+56, r23	; 0x38
  4e:	81 af       	std	Z+57, r24	; 0x39
  50:	92 af       	std	Z+58, r25	; 0x3a
  52:	8e 2d       	mov	r24, r14
  pinMode(echoPin, INPUT);                      // set echo pin as input
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	ef 90       	pop	r14
  5c:	df 90       	pop	r13
  5e:	cf 90       	pop	r12

  // create array loop to iterate over every item in the array

  for (int thisReading = 0; thisReading < numOfReadings; thisReading++) {
  60:	bf 90       	pop	r11
  62:	af 90       	pop	r10
    readings[thisReading] = 0;
  64:	08 95       	ret

Disassembly of section .text._ZN11SonarSensorD0Ev:

00000000 <_ZN11SonarSensorD0Ev>:
  boolean retcode = (this->sensor->value = this->read_sonar());
  this->fvalue = this->sensor->value;
  return retcode;
}

float SonarSensor::read_sonar() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	86 ad       	ldd	r24, Z+62	; 0x3e
  12:	97 ad       	ldd	r25, Z+63	; 0x3f
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD0Ev>
  18:	f8 01       	movw	r30, r16
  1a:	17 ae       	std	Z+63, r1	; 0x3f
  1c:	16 ae       	std	Z+62, r1	; 0x3e
  1e:	83 ad       	ldd	r24, Z+59	; 0x3b
  20:	94 ad       	ldd	r25, Z+60	; 0x3c
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD0Ev>
  26:	f8 01       	movw	r30, r16
  28:	14 ae       	std	Z+60, r1	; 0x3c
  2a:	13 ae       	std	Z+59, r1	; 0x3b
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD0Ev>
  32:	c8 01       	movw	r24, r16
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD0Ev>
  SerPrintP("SRF05 READING");
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	08 95       	ret

Disassembly of section .text._ZN11SonarSensorD1Ev:

00000000 <_ZN11SonarSensorD1Ev>:
  boolean retcode = (this->sensor->value = this->read_sonar());
  this->fvalue = this->sensor->value;
  return retcode;
}

float SonarSensor::read_sonar() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	86 ad       	ldd	r24, Z+62	; 0x3e
  12:	97 ad       	ldd	r25, Z+63	; 0x3f
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD1Ev>
  18:	f8 01       	movw	r30, r16
  1a:	17 ae       	std	Z+63, r1	; 0x3f
  1c:	16 ae       	std	Z+62, r1	; 0x3e
  1e:	83 ad       	ldd	r24, Z+59	; 0x3b
  20:	94 ad       	ldd	r25, Z+60	; 0x3c
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD1Ev>
  26:	f8 01       	movw	r30, r16
  28:	14 ae       	std	Z+60, r1	; 0x3c
  2a:	13 ae       	std	Z+59, r1	; 0x3b
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD1Ev>
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  SerPrintP("SRF05 READING");
  36:	08 95       	ret

Disassembly of section .text._ZN11SonarSensorD2Ev:

00000000 <_ZN11SonarSensorD2Ev>:
  boolean retcode = (this->sensor->value = this->read_sonar());
  this->fvalue = this->sensor->value;
  return retcode;
}

float SonarSensor::read_sonar() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	86 ad       	ldd	r24, Z+62	; 0x3e
  12:	97 ad       	ldd	r25, Z+63	; 0x3f
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD2Ev>
  18:	f8 01       	movw	r30, r16
  1a:	17 ae       	std	Z+63, r1	; 0x3f
  1c:	16 ae       	std	Z+62, r1	; 0x3e
  1e:	83 ad       	ldd	r24, Z+59	; 0x3b
  20:	94 ad       	ldd	r25, Z+60	; 0x3c
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD2Ev>
  26:	f8 01       	movw	r30, r16
  28:	14 ae       	std	Z+60, r1	; 0x3c
  2a:	13 ae       	std	Z+59, r1	; 0x3b
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorD2Ev>
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  SerPrintP("SRF05 READING");
  36:	08 95       	ret

Disassembly of section .text._ZN11SonarSensorC1EP6SDCONF:

00000000 <_ZN11SonarSensorC1EP6SDCONF>:
  boolean retcode = (this->sensor->value = this->read_sonar());
  this->fvalue = this->sensor->value;
  return retcode;
}

float SonarSensor::read_sonar() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC1EP6SDCONF>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	99 83       	std	Y+1, r25	; 0x01
  16:	88 83       	st	Y, r24
  18:	ce 01       	movw	r24, r28
  1a:	b8 01       	movw	r22, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC1EP6SDCONF>
  20:	86 e0       	ldi	r24, 0x06	; 6
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC1EP6SDCONF>
  28:	9c 01       	movw	r18, r24
  2a:	9f af       	std	Y+63, r25	; 0x3f
  2c:	8e af       	std	Y+62, r24	; 0x3e
  2e:	00 d0       	rcall	.+0      	; 0x30 <_ZN11SonarSensorC1EP6SDCONF+0x30>
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN11SonarSensorC1EP6SDCONF+0x32>
  32:	ed b7       	in	r30, 0x3d	; 61
  34:	fe b7       	in	r31, 0x3e	; 62
  SerPrintP("SRF05 READING");
  36:	31 96       	adiw	r30, 0x01	; 1
  38:	6d 96       	adiw	r28, 0x1d	; 29
  3a:	ad b7       	in	r26, 0x3d	; 61
  3c:	be b7       	in	r27, 0x3e	; 62
  int arrayIndex = 0;                             // arrayIndex of the current item in the array
  int total = 0;                                  // stores the cumlative total
  float averageDistance = 0;                        // stores the average value

  // setup pins and variables for SRF05 sonar device
  int echoPin = this->config.sensor_pin;                    // SRF05 echo pin - we read
  3e:	12 96       	adiw	r26, 0x02	; 2
  40:	dc 93       	st	X, r29
  42:	ce 93       	st	-X, r28
  44:	11 97       	sbiw	r26, 0x01	; 1
  int initPin = this->config.sensor_secondary_pin;          // SRF05 trigger pin - we write
  unsigned long pulseTime = 0;                    // stores the pulse in Micro Seconds
  unsigned long distance = 0;                     // variable for storing the distance (cm)

  pinMode(initPin, OUTPUT);                     // set init pin as output
  46:	6d 97       	sbiw	r28, 0x1d	; 29
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	93 83       	std	Z+3, r25	; 0x03
  4e:	82 83       	std	Z+2, r24	; 0x02
  50:	2e 5f       	subi	r18, 0xFE	; 254
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  pinMode(echoPin, INPUT);                      // set echo pin as input
  54:	35 83       	std	Z+5, r19	; 0x05
  56:	24 83       	std	Z+4, r18	; 0x04
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC1EP6SDCONF>
  5c:	2d b7       	in	r18, 0x3d	; 61
  5e:	3e b7       	in	r19, 0x3e	; 62

  // create array loop to iterate over every item in the array

  for (int thisReading = 0; thisReading < numOfReadings; thisReading++) {
  60:	2a 5f       	subi	r18, 0xFA	; 250
  62:	3f 4f       	sbci	r19, 0xFF	; 255
    readings[thisReading] = 0;
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	f8 94       	cli
  pinMode(initPin, OUTPUT);                     // set init pin as output
  pinMode(echoPin, INPUT);                      // set echo pin as input

  // create array loop to iterate over every item in the array

  for (int thisReading = 0; thisReading < numOfReadings; thisReading++) {
  68:	3e bf       	out	0x3e, r19	; 62
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	2d bf       	out	0x3d, r18	; 61
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	01 f0       	breq	.+0      	; 0x72 <_ZN11SonarSensorC1EP6SDCONF+0x72>
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC1EP6SDCONF>
  7a:	ee ad       	ldd	r30, Y+62	; 0x3e
  7c:	ff ad       	ldd	r31, Y+63	; 0x3f
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	a0 e0       	ldi	r26, 0x00	; 0
  int numValidReadings = 0;
   for (int i=0; i < numOfReadings; i++) {
#ifdef DEBUG
    SerPrintP("TRIGGER AND WAIT ECHO...");
#endif
    digitalWrite(initPin, HIGH);                    // send 10 microsecond pulse
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	82 83       	std	Z+2, r24	; 0x02
  88:	93 83       	std	Z+3, r25	; 0x03
  8a:	a4 83       	std	Z+4, r26	; 0x04
    delayMicroseconds(10);                  // wait 10 microseconds before turning off
  8c:	b5 83       	std	Z+5, r27	; 0x05
  8e:	ee ad       	ldd	r30, Y+62	; 0x3e
  90:	ff ad       	ldd	r31, Y+63	; 0x3f
  92:	11 82       	std	Z+1, r1	; 0x01
    digitalWrite(initPin, LOW);                     // stop sending the pulse
  94:	10 82       	st	Z, r1
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	a0 e0       	ldi	r26, 0x00	; 0
    pulseTime = pulseIn(echoPin, HIGH);             // Look for a return pulse, it should be high as the pulse goes low-high-low
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	8f ab       	std	Y+55, r24	; 0x37
  a0:	98 af       	std	Y+56, r25	; 0x38
  a2:	a9 af       	std	Y+57, r26	; 0x39
  a4:	ba af       	std	Y+58, r27	; 0x3a
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	1f 91       	pop	r17
    if (pulseTime > 0 || i+1 >= numOfReadings) {                // only the last reading is taken as valid if 0
  ac:	0f 91       	pop	r16
  ae:	08 95       	ret

Disassembly of section .text._ZN11SonarSensorC2EP6SDCONF:

00000000 <_ZN11SonarSensorC2EP6SDCONF>:
  boolean retcode = (this->sensor->value = this->read_sonar());
  this->fvalue = this->sensor->value;
  return retcode;
}

float SonarSensor::read_sonar() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC2EP6SDCONF>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	99 83       	std	Y+1, r25	; 0x01
  16:	88 83       	st	Y, r24
  18:	ce 01       	movw	r24, r28
  1a:	b8 01       	movw	r22, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC2EP6SDCONF>
  20:	86 e0       	ldi	r24, 0x06	; 6
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC2EP6SDCONF>
  28:	9c 01       	movw	r18, r24
  2a:	9f af       	std	Y+63, r25	; 0x3f
  2c:	8e af       	std	Y+62, r24	; 0x3e
  2e:	00 d0       	rcall	.+0      	; 0x30 <_ZN11SonarSensorC2EP6SDCONF+0x30>
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN11SonarSensorC2EP6SDCONF+0x32>
  32:	ed b7       	in	r30, 0x3d	; 61
  34:	fe b7       	in	r31, 0x3e	; 62
  SerPrintP("SRF05 READING");
  36:	31 96       	adiw	r30, 0x01	; 1
  38:	6d 96       	adiw	r28, 0x1d	; 29
  3a:	ad b7       	in	r26, 0x3d	; 61
  3c:	be b7       	in	r27, 0x3e	; 62
  int arrayIndex = 0;                             // arrayIndex of the current item in the array
  int total = 0;                                  // stores the cumlative total
  float averageDistance = 0;                        // stores the average value

  // setup pins and variables for SRF05 sonar device
  int echoPin = this->config.sensor_pin;                    // SRF05 echo pin - we read
  3e:	12 96       	adiw	r26, 0x02	; 2
  40:	dc 93       	st	X, r29
  42:	ce 93       	st	-X, r28
  44:	11 97       	sbiw	r26, 0x01	; 1
  int initPin = this->config.sensor_secondary_pin;          // SRF05 trigger pin - we write
  unsigned long pulseTime = 0;                    // stores the pulse in Micro Seconds
  unsigned long distance = 0;                     // variable for storing the distance (cm)

  pinMode(initPin, OUTPUT);                     // set init pin as output
  46:	6d 97       	sbiw	r28, 0x1d	; 29
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	93 83       	std	Z+3, r25	; 0x03
  4e:	82 83       	std	Z+2, r24	; 0x02
  50:	2e 5f       	subi	r18, 0xFE	; 254
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  pinMode(echoPin, INPUT);                      // set echo pin as input
  54:	35 83       	std	Z+5, r19	; 0x05
  56:	24 83       	std	Z+4, r18	; 0x04
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC2EP6SDCONF>
  5c:	2d b7       	in	r18, 0x3d	; 61
  5e:	3e b7       	in	r19, 0x3e	; 62

  // create array loop to iterate over every item in the array

  for (int thisReading = 0; thisReading < numOfReadings; thisReading++) {
  60:	2a 5f       	subi	r18, 0xFA	; 250
  62:	3f 4f       	sbci	r19, 0xFF	; 255
    readings[thisReading] = 0;
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	f8 94       	cli
  pinMode(initPin, OUTPUT);                     // set init pin as output
  pinMode(echoPin, INPUT);                      // set echo pin as input

  // create array loop to iterate over every item in the array

  for (int thisReading = 0; thisReading < numOfReadings; thisReading++) {
  68:	3e bf       	out	0x3e, r19	; 62
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	2d bf       	out	0x3d, r18	; 61
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	01 f0       	breq	.+0      	; 0x72 <_ZN11SonarSensorC2EP6SDCONF+0x72>
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN11SonarSensorC2EP6SDCONF>
  7a:	ee ad       	ldd	r30, Y+62	; 0x3e
  7c:	ff ad       	ldd	r31, Y+63	; 0x3f
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	a0 e0       	ldi	r26, 0x00	; 0
  int numValidReadings = 0;
   for (int i=0; i < numOfReadings; i++) {
#ifdef DEBUG
    SerPrintP("TRIGGER AND WAIT ECHO...");
#endif
    digitalWrite(initPin, HIGH);                    // send 10 microsecond pulse
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	82 83       	std	Z+2, r24	; 0x02
  88:	93 83       	std	Z+3, r25	; 0x03
  8a:	a4 83       	std	Z+4, r26	; 0x04
    delayMicroseconds(10);                  // wait 10 microseconds before turning off
  8c:	b5 83       	std	Z+5, r27	; 0x05
  8e:	ee ad       	ldd	r30, Y+62	; 0x3e
  90:	ff ad       	ldd	r31, Y+63	; 0x3f
  92:	11 82       	std	Z+1, r1	; 0x01
    digitalWrite(initPin, LOW);                     // stop sending the pulse
  94:	10 82       	st	Z, r1
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	a0 e0       	ldi	r26, 0x00	; 0
    pulseTime = pulseIn(echoPin, HIGH);             // Look for a return pulse, it should be high as the pulse goes low-high-low
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	8f ab       	std	Y+55, r24	; 0x37
  a0:	98 af       	std	Y+56, r25	; 0x38
  a2:	a9 af       	std	Y+57, r26	; 0x39
  a4:	ba af       	std	Y+58, r27	; 0x3a
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	1f 91       	pop	r17
    if (pulseTime > 0 || i+1 >= numOfReadings) {                // only the last reading is taken as valid if 0
  ac:	0f 91       	pop	r16
  ae:	08 95       	ret

VibrationSensor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000003  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000037  2**0
                  ALLOC
  3 .stab         00001380  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003f99  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN15VibrationSensor11read_sensorEv 0000016a  00000000  00000000  00005351  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN15VibrationSensor13perform_checkEv 00000066  00000000  00000000  000054bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN15VibrationSensorD0Ev 00000062  00000000  00000000  00005521  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN15VibrationSensorD1Ev 0000005c  00000000  00000000  00005583  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN15VibrationSensorD2Ev 0000005c  00000000  00000000  000055df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN15VibrationSensorC1EP6SDCONF 000000e6  00000000  00000000  0000563b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN15VibrationSensorC2EP6SDCONF 000000e6  00000000  00000000  00005721  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .rodata._ZTV15VibrationSensor 0000000e  00000000  00000000  00005807  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 13 .progmem.data 0000002f  00000000  00000000  00005815  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN15VibrationSensor11read_sensorEv:

00000000 <_ZN15VibrationSensor11read_sensorEv>:
  boolean retcode = (this->sensor->value = this->read_sensor());
  this->fvalue = this->sensor->value;
  return retcode;
}

float VibrationSensor::read_sensor() {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	ec 01       	movw	r28, r24
  SerPrintP("VIBRATION SENSOR READING");
#endif
  //delay(10);
  float avg_val = 0;                        // stores the average value

  if (this->history != NULL) {
  1a:	20 e4       	ldi	r18, 0x40	; 64
  1c:	82 2e       	mov	r8, r18
  1e:	91 2c       	mov	r9, r1
  20:	88 0e       	add	r8, r24
  22:	99 1e       	adc	r9, r25
  24:	d4 01       	movw	r26, r8
  26:	2d 91       	ld	r18, X+
  28:	3c 91       	ld	r19, X
  2a:	21 15       	cp	r18, r1
  2c:	31 05       	cpc	r19, r1
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN15VibrationSensor11read_sensorEv+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN15VibrationSensor11read_sensorEv+0x32>
      int i = this->lastreading % this->sensor->readings;
#ifdef DEBUG
      SerPrintP("reading"); Serial.print(i,DEC);
#endif
      this->ltotal -= this->history[i];
  32:	92 e4       	ldi	r25, 0x42	; 66
  34:	c9 2e       	mov	r12, r25
  36:	d1 2c       	mov	r13, r1
  38:	cc 0e       	add	r12, r28
  3a:	dd 1e       	adc	r13, r29
  3c:	ee ad       	ldd	r30, Y+62	; 0x3e
  3e:	ff ad       	ldd	r31, Y+63	; 0x3f
  40:	62 81       	ldd	r22, Z+2	; 0x02
  42:	73 81       	ldd	r23, Z+3	; 0x03
  44:	f6 01       	movw	r30, r12
  46:	80 81       	ld	r24, Z
  48:	91 81       	ldd	r25, Z+1	; 0x01
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensor11read_sensorEv>
  4e:	5c 01       	movw	r10, r24
  50:	aa 0c       	add	r10, r10
  52:	bb 1c       	adc	r11, r11
  54:	8e 01       	movw	r16, r28
  56:	0b 5b       	subi	r16, 0xBB	; 187
  58:	1f 4f       	sbci	r17, 0xFF	; 255
  5a:	79 01       	movw	r14, r18
  5c:	ea 0c       	add	r14, r10
  5e:	fb 1c       	adc	r15, r11
  60:	d7 01       	movw	r26, r14
  62:	2d 91       	ld	r18, X+
  64:	3c 91       	ld	r19, X
  66:	44 27       	eor	r20, r20
  68:	37 fd       	sbrc	r19, 7
  6a:	40 95       	com	r20
  6c:	54 2f       	mov	r21, r20
  6e:	f8 01       	movw	r30, r16
  70:	80 81       	ld	r24, Z
  72:	91 81       	ldd	r25, Z+1	; 0x01
  74:	a2 81       	ldd	r26, Z+2	; 0x02
  76:	b3 81       	ldd	r27, Z+3	; 0x03
  78:	82 1b       	sub	r24, r18
  7a:	93 0b       	sbc	r25, r19
  7c:	a4 0b       	sbc	r26, r20
  7e:	b5 0b       	sbc	r27, r21
  80:	80 83       	st	Z, r24
  82:	91 83       	std	Z+1, r25	; 0x01
  84:	a2 83       	std	Z+2, r26	; 0x02
  86:	b3 83       	std	Z+3, r27	; 0x03
      this->history[i] = analogRead(this->config.sensor_pin);
  88:	8d 89       	ldd	r24, Y+21	; 0x15
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensor11read_sensorEv>
  8e:	d7 01       	movw	r26, r14
  90:	8d 93       	st	X+, r24
  92:	9c 93       	st	X, r25
      this->ltotal += this->history[i];
  94:	d4 01       	movw	r26, r8
  96:	ed 91       	ld	r30, X+
  98:	fc 91       	ld	r31, X
  9a:	ea 0d       	add	r30, r10
  9c:	fb 1d       	adc	r31, r11
  9e:	80 81       	ld	r24, Z
  a0:	91 81       	ldd	r25, Z+1	; 0x01
  a2:	aa 27       	eor	r26, r26
  a4:	97 fd       	sbrc	r25, 7
  a6:	a0 95       	com	r26
  a8:	ba 2f       	mov	r27, r26
  aa:	f8 01       	movw	r30, r16
  ac:	20 81       	ld	r18, Z
  ae:	31 81       	ldd	r19, Z+1	; 0x01
  b0:	42 81       	ldd	r20, Z+2	; 0x02
  b2:	53 81       	ldd	r21, Z+3	; 0x03
  b4:	82 0f       	add	r24, r18
  b6:	93 1f       	adc	r25, r19
  b8:	a4 1f       	adc	r26, r20
  ba:	b5 1f       	adc	r27, r21
  bc:	80 83       	st	Z, r24
  be:	91 83       	std	Z+1, r25	; 0x01
  c0:	a2 83       	std	Z+2, r26	; 0x02
  c2:	b3 83       	std	Z+3, r27	; 0x03
      this->lastreading++;
  c4:	d6 01       	movw	r26, r12
  c6:	2d 91       	ld	r18, X+
  c8:	3c 91       	ld	r19, X
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	2d 93       	st	X+, r18
  d2:	3c 93       	st	X, r19
      int j =  this->boverflow ? this->sensor->readings : this->lastreading;
  d4:	cc 5b       	subi	r28, 0xBC	; 188
  d6:	df 4f       	sbci	r29, 0xFF	; 255
  d8:	88 81       	ld	r24, Y
  da:	c4 54       	subi	r28, 0x44	; 68
  dc:	d0 40       	sbci	r29, 0x00	; 0
  de:	88 23       	and	r24, r24
  e0:	01 f4       	brne	.+0      	; 0xe2 <_ZN15VibrationSensor11read_sensorEv+0xe2>
  e2:	b9 01       	movw	r22, r18
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_ZN15VibrationSensor11read_sensorEv+0xe6>
  e6:	ee ad       	ldd	r30, Y+62	; 0x3e
  e8:	ff ad       	ldd	r31, Y+63	; 0x3f
  ea:	62 81       	ldd	r22, Z+2	; 0x02
  ec:	73 81       	ldd	r23, Z+3	; 0x03
      if (this->lastreading >= this->sensor->readings) {
  ee:	ee ad       	ldd	r30, Y+62	; 0x3e
  f0:	ff ad       	ldd	r31, Y+63	; 0x3f
  f2:	82 81       	ldd	r24, Z+2	; 0x02
  f4:	93 81       	ldd	r25, Z+3	; 0x03
  f6:	28 17       	cp	r18, r24
  f8:	39 07       	cpc	r19, r25
  fa:	04 f0       	brlt	.+0      	; 0xfc <_ZN15VibrationSensor11read_sensorEv+0xfc>
          this->lastreading = 0;
  fc:	ce 5b       	subi	r28, 0xBE	; 190
  fe:	df 4f       	sbci	r29, 0xFF	; 255
 100:	19 92       	st	Y+, r1
 102:	19 92       	st	Y+, r1
          this->boverflow = true;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	88 83       	st	Y, r24
 108:	c4 54       	subi	r28, 0x44	; 68
 10a:	d0 40       	sbci	r29, 0x00	; 0
      }
#ifdef DEBUG
      SerPrintP("MOD"); Serial.print(j); SerPrintP(" - TOT: "); Serial.println(this->ltotal,DEC);
#endif
      avg_val =  this->ltotal / j;
 10c:	cb 5b       	subi	r28, 0xBB	; 187
 10e:	df 4f       	sbci	r29, 0xFF	; 255
 110:	9b 01       	movw	r18, r22
 112:	44 27       	eor	r20, r20
 114:	37 fd       	sbrc	r19, 7
 116:	40 95       	com	r20
 118:	54 2f       	mov	r21, r20
 11a:	68 81       	ld	r22, Y
 11c:	79 81       	ldd	r23, Y+1	; 0x01
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	9b 81       	ldd	r25, Y+3	; 0x03
 122:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensor11read_sensorEv>
 126:	ca 01       	movw	r24, r20
 128:	b9 01       	movw	r22, r18
 12a:	00 c0       	rjmp	.+0      	; 0x12c <_ZN15VibrationSensor11read_sensorEv+0x12c>

  } else {
#ifdef DEBUG
      SerPrintP("SINGLE-READ");
#endif
      avg_val = analogRead(this->config.sensor_pin);
 12c:	8d 89       	ldd	r24, Y+21	; 0x15
 12e:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensor11read_sensorEv>
 132:	aa 27       	eor	r26, r26
 134:	97 fd       	sbrc	r25, 7
 136:	a0 95       	com	r26
 138:	ba 2f       	mov	r27, r26
 13a:	bc 01       	movw	r22, r24
 13c:	cd 01       	movw	r24, r26
 13e:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensor11read_sensorEv>
 142:	e6 2f       	mov	r30, r22
  }
#ifdef DEBUG
  SerPrintP("Average vibration voltage: "); Serial.println(avg_val, DEC);         // print out the average distance to the debugger
#endif
  return avg_val;
}
 144:	2e 2f       	mov	r18, r30
 146:	37 2f       	mov	r19, r23
 148:	48 2f       	mov	r20, r24
 14a:	59 2f       	mov	r21, r25
 14c:	b9 01       	movw	r22, r18
 14e:	ca 01       	movw	r24, r20
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	df 90       	pop	r13
 15e:	cf 90       	pop	r12
 160:	bf 90       	pop	r11
 162:	af 90       	pop	r10
 164:	9f 90       	pop	r9
 166:	8f 90       	pop	r8
 168:	08 95       	ret

Disassembly of section .text._ZN15VibrationSensor13perform_checkEv:

00000000 <_ZN15VibrationSensor13perform_checkEv>:
  boolean retcode = (this->sensor->value = this->read_sensor());
  this->fvalue = this->sensor->value;
  return retcode;
}

float VibrationSensor::read_sensor() {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	6c 01       	movw	r12, r24
  12:	dc 01       	movw	r26, r24
  14:	de 96       	adiw	r26, 0x3e	; 62
  16:	ad 90       	ld	r10, X+
  18:	bc 90       	ld	r11, X
  SerPrintP("VIBRATION SENSOR READING");
#endif
  //delay(10);
  float avg_val = 0;                        // stores the average value

  if (this->history != NULL) {
  1a:	df 97       	sbiw	r26, 0x3f	; 63
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensor13perform_checkEv>
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensor13perform_checkEv>
  24:	7b 01       	movw	r14, r22
  26:	8c 01       	movw	r16, r24
  28:	f5 01       	movw	r30, r10
  2a:	60 83       	st	Z, r22
  2c:	f1 82       	std	Z+1, r15	; 0x01
  2e:	d6 01       	movw	r26, r12
  30:	de 96       	adiw	r26, 0x3e	; 62
      int i = this->lastreading % this->sensor->readings;
#ifdef DEBUG
      SerPrintP("reading"); Serial.print(i,DEC);
#endif
      this->ltotal -= this->history[i];
  32:	ed 91       	ld	r30, X+
  34:	fc 91       	ld	r31, X
  36:	df 97       	sbiw	r26, 0x3f	; 63
  38:	60 81       	ld	r22, Z
  3a:	71 81       	ldd	r23, Z+1	; 0x01
  3c:	88 27       	eor	r24, r24
  3e:	77 fd       	sbrc	r23, 7
  40:	80 95       	com	r24
  42:	98 2f       	mov	r25, r24
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensor13perform_checkEv>
  48:	f6 01       	movw	r30, r12
  4a:	67 ab       	std	Z+55, r22	; 0x37
  4c:	70 af       	std	Z+56, r23	; 0x38
  4e:	81 af       	std	Z+57, r24	; 0x39
  50:	92 af       	std	Z+58, r25	; 0x3a
  52:	8e 2d       	mov	r24, r14
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	ef 90       	pop	r14
  5c:	df 90       	pop	r13
  5e:	cf 90       	pop	r12
  60:	bf 90       	pop	r11
  62:	af 90       	pop	r10
  64:	08 95       	ret

Disassembly of section .text._ZN15VibrationSensorD0Ev:

00000000 <_ZN15VibrationSensorD0Ev>:
  boolean retcode = (this->sensor->value = this->read_sensor());
  this->fvalue = this->sensor->value;
  return retcode;
}

float VibrationSensor::read_sensor() {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	f8 01       	movw	r30, r16
  10:	91 83       	std	Z+1, r25	; 0x01
  12:	80 83       	st	Z, r24
  14:	30 e4       	ldi	r19, 0x40	; 64
  16:	e3 2e       	mov	r14, r19
  18:	f1 2c       	mov	r15, r1
  SerPrintP("VIBRATION SENSOR READING");
#endif
  //delay(10);
  float avg_val = 0;                        // stores the average value

  if (this->history != NULL) {
  1a:	e0 0e       	add	r14, r16
  1c:	f1 1e       	adc	r15, r17
  1e:	f7 01       	movw	r30, r14
  20:	80 81       	ld	r24, Z
  22:	91 81       	ldd	r25, Z+1	; 0x01
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD0Ev>
  28:	f7 01       	movw	r30, r14
  2a:	11 82       	std	Z+1, r1	; 0x01
  2c:	10 82       	st	Z, r1
  2e:	f8 01       	movw	r30, r16
  30:	86 ad       	ldd	r24, Z+62	; 0x3e
      int i = this->lastreading % this->sensor->readings;
#ifdef DEBUG
      SerPrintP("reading"); Serial.print(i,DEC);
#endif
      this->ltotal -= this->history[i];
  32:	97 ad       	ldd	r25, Z+63	; 0x3f
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD0Ev>
  38:	f8 01       	movw	r30, r16
  3a:	17 ae       	std	Z+63, r1	; 0x3f
  3c:	16 ae       	std	Z+62, r1	; 0x3e
  3e:	83 ad       	ldd	r24, Z+59	; 0x3b
  40:	94 ad       	ldd	r25, Z+60	; 0x3c
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD0Ev>
  46:	f8 01       	movw	r30, r16
  48:	14 ae       	std	Z+60, r1	; 0x3c
  4a:	13 ae       	std	Z+59, r1	; 0x3b
  4c:	c8 01       	movw	r24, r16
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD0Ev>
  52:	c8 01       	movw	r24, r16
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD0Ev>
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN15VibrationSensorD1Ev:

00000000 <_ZN15VibrationSensorD1Ev>:
  boolean retcode = (this->sensor->value = this->read_sensor());
  this->fvalue = this->sensor->value;
  return retcode;
}

float VibrationSensor::read_sensor() {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	f8 01       	movw	r30, r16
  10:	91 83       	std	Z+1, r25	; 0x01
  12:	80 83       	st	Z, r24
  14:	40 e4       	ldi	r20, 0x40	; 64
  16:	e4 2e       	mov	r14, r20
  18:	f1 2c       	mov	r15, r1
  SerPrintP("VIBRATION SENSOR READING");
#endif
  //delay(10);
  float avg_val = 0;                        // stores the average value

  if (this->history != NULL) {
  1a:	e0 0e       	add	r14, r16
  1c:	f1 1e       	adc	r15, r17
  1e:	f7 01       	movw	r30, r14
  20:	80 81       	ld	r24, Z
  22:	91 81       	ldd	r25, Z+1	; 0x01
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD1Ev>
  28:	f7 01       	movw	r30, r14
  2a:	11 82       	std	Z+1, r1	; 0x01
  2c:	10 82       	st	Z, r1
  2e:	f8 01       	movw	r30, r16
  30:	86 ad       	ldd	r24, Z+62	; 0x3e
      int i = this->lastreading % this->sensor->readings;
#ifdef DEBUG
      SerPrintP("reading"); Serial.print(i,DEC);
#endif
      this->ltotal -= this->history[i];
  32:	97 ad       	ldd	r25, Z+63	; 0x3f
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD1Ev>
  38:	f8 01       	movw	r30, r16
  3a:	17 ae       	std	Z+63, r1	; 0x3f
  3c:	16 ae       	std	Z+62, r1	; 0x3e
  3e:	83 ad       	ldd	r24, Z+59	; 0x3b
  40:	94 ad       	ldd	r25, Z+60	; 0x3c
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD1Ev>
  46:	f8 01       	movw	r30, r16
  48:	14 ae       	std	Z+60, r1	; 0x3c
  4a:	13 ae       	std	Z+59, r1	; 0x3b
  4c:	c8 01       	movw	r24, r16
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD1Ev>
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	08 95       	ret

Disassembly of section .text._ZN15VibrationSensorD2Ev:

00000000 <_ZN15VibrationSensorD2Ev>:
  boolean retcode = (this->sensor->value = this->read_sensor());
  this->fvalue = this->sensor->value;
  return retcode;
}

float VibrationSensor::read_sensor() {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	f8 01       	movw	r30, r16
  10:	91 83       	std	Z+1, r25	; 0x01
  12:	80 83       	st	Z, r24
  14:	50 e4       	ldi	r21, 0x40	; 64
  16:	e5 2e       	mov	r14, r21
  18:	f1 2c       	mov	r15, r1
  SerPrintP("VIBRATION SENSOR READING");
#endif
  //delay(10);
  float avg_val = 0;                        // stores the average value

  if (this->history != NULL) {
  1a:	e0 0e       	add	r14, r16
  1c:	f1 1e       	adc	r15, r17
  1e:	f7 01       	movw	r30, r14
  20:	80 81       	ld	r24, Z
  22:	91 81       	ldd	r25, Z+1	; 0x01
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD2Ev>
  28:	f7 01       	movw	r30, r14
  2a:	11 82       	std	Z+1, r1	; 0x01
  2c:	10 82       	st	Z, r1
  2e:	f8 01       	movw	r30, r16
  30:	86 ad       	ldd	r24, Z+62	; 0x3e
      int i = this->lastreading % this->sensor->readings;
#ifdef DEBUG
      SerPrintP("reading"); Serial.print(i,DEC);
#endif
      this->ltotal -= this->history[i];
  32:	97 ad       	ldd	r25, Z+63	; 0x3f
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD2Ev>
  38:	f8 01       	movw	r30, r16
  3a:	17 ae       	std	Z+63, r1	; 0x3f
  3c:	16 ae       	std	Z+62, r1	; 0x3e
  3e:	83 ad       	ldd	r24, Z+59	; 0x3b
  40:	94 ad       	ldd	r25, Z+60	; 0x3c
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD2Ev>
  46:	f8 01       	movw	r30, r16
  48:	14 ae       	std	Z+60, r1	; 0x3c
  4a:	13 ae       	std	Z+59, r1	; 0x3b
  4c:	c8 01       	movw	r24, r16
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorD2Ev>
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	08 95       	ret

Disassembly of section .text._ZN15VibrationSensorC1EP6SDCONF:

00000000 <_ZN15VibrationSensorC1EP6SDCONF>:
  boolean retcode = (this->sensor->value = this->read_sensor());
  this->fvalue = this->sensor->value;
  return retcode;
}

float VibrationSensor::read_sensor() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC1EP6SDCONF>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	99 83       	std	Y+1, r25	; 0x01
  16:	88 83       	st	Y, r24
  18:	ce 01       	movw	r24, r28
  SerPrintP("VIBRATION SENSOR READING");
#endif
  //delay(10);
  float avg_val = 0;                        // stores the average value

  if (this->history != NULL) {
  1a:	b8 01       	movw	r22, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC1EP6SDCONF>
  20:	84 e0       	ldi	r24, 0x04	; 4
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC1EP6SDCONF>
  28:	9c 01       	movw	r18, r24
  2a:	9f af       	std	Y+63, r25	; 0x3f
  2c:	8e af       	std	Y+62, r24	; 0x3e
  2e:	00 d0       	rcall	.+0      	; 0x30 <_ZN15VibrationSensorC1EP6SDCONF+0x30>
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN15VibrationSensorC1EP6SDCONF+0x32>
      int i = this->lastreading % this->sensor->readings;
#ifdef DEBUG
      SerPrintP("reading"); Serial.print(i,DEC);
#endif
      this->ltotal -= this->history[i];
  32:	ed b7       	in	r30, 0x3d	; 61
  34:	fe b7       	in	r31, 0x3e	; 62
  36:	31 96       	adiw	r30, 0x01	; 1
  38:	6d 96       	adiw	r28, 0x1d	; 29
  3a:	ad b7       	in	r26, 0x3d	; 61
  3c:	be b7       	in	r27, 0x3e	; 62
  3e:	12 96       	adiw	r26, 0x02	; 2
  40:	dc 93       	st	X, r29
  42:	ce 93       	st	-X, r28
  44:	11 97       	sbiw	r26, 0x01	; 1
  46:	6d 97       	sbiw	r28, 0x1d	; 29
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	93 83       	std	Z+3, r25	; 0x03
  4e:	82 83       	std	Z+2, r24	; 0x02
  50:	2e 5f       	subi	r18, 0xFE	; 254
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	35 83       	std	Z+5, r19	; 0x05
  56:	24 83       	std	Z+4, r18	; 0x04
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC1EP6SDCONF>
  5c:	2d b7       	in	r18, 0x3d	; 61
  5e:	3e b7       	in	r19, 0x3e	; 62
  60:	2a 5f       	subi	r18, 0xFA	; 250
  62:	3f 4f       	sbci	r19, 0xFF	; 255
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	f8 94       	cli
  68:	3e bf       	out	0x3e, r19	; 62
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	2d bf       	out	0x3d, r18	; 61
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	01 f0       	breq	.+0      	; 0x72 <_ZN15VibrationSensorC1EP6SDCONF+0x72>
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC1EP6SDCONF>
  7a:	ee ad       	ldd	r30, Y+62	; 0x3e
  7c:	ff ad       	ldd	r31, Y+63	; 0x3f
  7e:	8a e0       	ldi	r24, 0x0A	; 10
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	93 83       	std	Z+3, r25	; 0x03
  84:	82 83       	std	Z+2, r24	; 0x02
  86:	ee ad       	ldd	r30, Y+62	; 0x3e
      this->history[i] = analogRead(this->config.sensor_pin);
  88:	ff ad       	ldd	r31, Y+63	; 0x3f
  8a:	82 81       	ldd	r24, Z+2	; 0x02
  8c:	93 81       	ldd	r25, Z+3	; 0x03
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC1EP6SDCONF>
      this->ltotal += this->history[i];
  96:	c0 5c       	subi	r28, 0xC0	; 192
  98:	df 4f       	sbci	r29, 0xFF	; 255
  9a:	99 83       	std	Y+1, r25	; 0x01
  9c:	88 83       	st	Y, r24
  9e:	c0 54       	subi	r28, 0x40	; 64
  a0:	d0 40       	sbci	r29, 0x00	; 0
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	01 f0       	breq	.+0      	; 0xa6 <_ZN15VibrationSensorC1EP6SDCONF+0xa6>
  a6:	ee ad       	ldd	r30, Y+62	; 0x3e
  a8:	ff ad       	ldd	r31, Y+63	; 0x3f
  aa:	22 81       	ldd	r18, Z+2	; 0x02
  ac:	33 81       	ldd	r19, Z+3	; 0x03
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	a9 01       	movw	r20, r18
  b8:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC1EP6SDCONF>
  bc:	ce 5b       	subi	r28, 0xBE	; 190
  be:	df 4f       	sbci	r29, 0xFF	; 255
  c0:	19 82       	std	Y+1, r1	; 0x01
  c2:	18 82       	st	Y, r1
      this->lastreading++;
  c4:	23 96       	adiw	r28, 0x03	; 3
  c6:	18 82       	st	Y, r1
  c8:	19 82       	std	Y+1, r1	; 0x01
  ca:	1a 82       	std	Y+2, r1	; 0x02
  cc:	1b 82       	std	Y+3, r1	; 0x03
  ce:	1a 92       	st	-Y, r1
  d0:	c4 54       	subi	r28, 0x44	; 68
  d2:	d0 40       	sbci	r29, 0x00	; 0
      int j =  this->boverflow ? this->sensor->readings : this->lastreading;
  d4:	ee ad       	ldd	r30, Y+62	; 0x3e
  d6:	ff ad       	ldd	r31, Y+63	; 0x3f
  d8:	11 82       	std	Z+1, r1	; 0x01
  da:	10 82       	st	Z, r1
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	08 95       	ret

Disassembly of section .text._ZN15VibrationSensorC2EP6SDCONF:

00000000 <_ZN15VibrationSensorC2EP6SDCONF>:
  boolean retcode = (this->sensor->value = this->read_sensor());
  this->fvalue = this->sensor->value;
  return retcode;
}

float VibrationSensor::read_sensor() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC2EP6SDCONF>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	99 83       	std	Y+1, r25	; 0x01
  16:	88 83       	st	Y, r24
  18:	ce 01       	movw	r24, r28
  SerPrintP("VIBRATION SENSOR READING");
#endif
  //delay(10);
  float avg_val = 0;                        // stores the average value

  if (this->history != NULL) {
  1a:	b8 01       	movw	r22, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC2EP6SDCONF>
  20:	84 e0       	ldi	r24, 0x04	; 4
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC2EP6SDCONF>
  28:	9c 01       	movw	r18, r24
  2a:	9f af       	std	Y+63, r25	; 0x3f
  2c:	8e af       	std	Y+62, r24	; 0x3e
  2e:	00 d0       	rcall	.+0      	; 0x30 <_ZN15VibrationSensorC2EP6SDCONF+0x30>
  30:	00 d0       	rcall	.+0      	; 0x32 <_ZN15VibrationSensorC2EP6SDCONF+0x32>
      int i = this->lastreading % this->sensor->readings;
#ifdef DEBUG
      SerPrintP("reading"); Serial.print(i,DEC);
#endif
      this->ltotal -= this->history[i];
  32:	ed b7       	in	r30, 0x3d	; 61
  34:	fe b7       	in	r31, 0x3e	; 62
  36:	31 96       	adiw	r30, 0x01	; 1
  38:	6d 96       	adiw	r28, 0x1d	; 29
  3a:	ad b7       	in	r26, 0x3d	; 61
  3c:	be b7       	in	r27, 0x3e	; 62
  3e:	12 96       	adiw	r26, 0x02	; 2
  40:	dc 93       	st	X, r29
  42:	ce 93       	st	-X, r28
  44:	11 97       	sbiw	r26, 0x01	; 1
  46:	6d 97       	sbiw	r28, 0x1d	; 29
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	93 83       	std	Z+3, r25	; 0x03
  4e:	82 83       	std	Z+2, r24	; 0x02
  50:	2e 5f       	subi	r18, 0xFE	; 254
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	35 83       	std	Z+5, r19	; 0x05
  56:	24 83       	std	Z+4, r18	; 0x04
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC2EP6SDCONF>
  5c:	2d b7       	in	r18, 0x3d	; 61
  5e:	3e b7       	in	r19, 0x3e	; 62
  60:	2a 5f       	subi	r18, 0xFA	; 250
  62:	3f 4f       	sbci	r19, 0xFF	; 255
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	f8 94       	cli
  68:	3e bf       	out	0x3e, r19	; 62
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	2d bf       	out	0x3d, r18	; 61
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	01 f0       	breq	.+0      	; 0x72 <_ZN15VibrationSensorC2EP6SDCONF+0x72>
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC2EP6SDCONF>
  7a:	ee ad       	ldd	r30, Y+62	; 0x3e
  7c:	ff ad       	ldd	r31, Y+63	; 0x3f
  7e:	8a e0       	ldi	r24, 0x0A	; 10
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	93 83       	std	Z+3, r25	; 0x03
  84:	82 83       	std	Z+2, r24	; 0x02
  86:	ee ad       	ldd	r30, Y+62	; 0x3e
      this->history[i] = analogRead(this->config.sensor_pin);
  88:	ff ad       	ldd	r31, Y+63	; 0x3f
  8a:	82 81       	ldd	r24, Z+2	; 0x02
  8c:	93 81       	ldd	r25, Z+3	; 0x03
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC2EP6SDCONF>
      this->ltotal += this->history[i];
  96:	c0 5c       	subi	r28, 0xC0	; 192
  98:	df 4f       	sbci	r29, 0xFF	; 255
  9a:	99 83       	std	Y+1, r25	; 0x01
  9c:	88 83       	st	Y, r24
  9e:	c0 54       	subi	r28, 0x40	; 64
  a0:	d0 40       	sbci	r29, 0x00	; 0
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	01 f0       	breq	.+0      	; 0xa6 <_ZN15VibrationSensorC2EP6SDCONF+0xa6>
  a6:	ee ad       	ldd	r30, Y+62	; 0x3e
  a8:	ff ad       	ldd	r31, Y+63	; 0x3f
  aa:	22 81       	ldd	r18, Z+2	; 0x02
  ac:	33 81       	ldd	r19, Z+3	; 0x03
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	a9 01       	movw	r20, r18
  b8:	0e 94 00 00 	call	0	; 0x0 <_ZN15VibrationSensorC2EP6SDCONF>
  bc:	ce 5b       	subi	r28, 0xBE	; 190
  be:	df 4f       	sbci	r29, 0xFF	; 255
  c0:	19 82       	std	Y+1, r1	; 0x01
  c2:	18 82       	st	Y, r1
      this->lastreading++;
  c4:	23 96       	adiw	r28, 0x03	; 3
  c6:	18 82       	st	Y, r1
  c8:	19 82       	std	Y+1, r1	; 0x01
  ca:	1a 82       	std	Y+2, r1	; 0x02
  cc:	1b 82       	std	Y+3, r1	; 0x03
  ce:	1a 92       	st	-Y, r1
  d0:	c4 54       	subi	r28, 0x44	; 68
  d2:	d0 40       	sbci	r29, 0x00	; 0
      int j =  this->boverflow ? this->sensor->readings : this->lastreading;
  d4:	ee ad       	ldd	r30, Y+62	; 0x3e
  d6:	ff ad       	ldd	r31, Y+63	; 0x3f
  d8:	11 82       	std	Z+1, r1	; 0x01
  da:	10 82       	st	Z, r1
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	08 95       	ret

APDControl.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000003  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000037  2**0
                  ALLOC
  3 .stab         00001bd8  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000479d  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN10APDControl25apd_action_request_layoutEPS_i 00000002  00000000  00000000  000063ad  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN10APDControl22apd_action_next_screenEPS_i 00000002  00000000  00000000  000063af  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text._ZN10APDControl19apd_action_sync_ntpEPS_i 00000002  00000000  00000000  000063b1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._ZN10APDControl15apd_action_noopEPS_i 00000002  00000000  00000000  000063b3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN10APDControl26apd_action_custom_functionEPS_i 00000020  00000000  00000000  000063b5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN10APDControl28apd_action_rc_plug_set_valueEPS_i 0000015c  00000000  00000000  000063d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN10APDControl22apd_action_rc_plug_offEPS_i 0000000a  00000000  00000000  00006531  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN10APDControl21apd_action_rc_plug_onEPS_i 0000000a  00000000  00000000  0000653b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN10APDControl24apd_action_rc_switch_offEPS_i 00000088  00000000  00000000  00006545  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN10APDControl23apd_action_rc_switch_onEPS_i 00000088  00000000  00000000  000065cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN10APDControl21apd_write_control_pinEPS_i 00000086  00000000  00000000  00006655  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN10APDControl20apd_action_set_valueEPS_i 00000006  00000000  00000000  000066db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN10APDControl17apd_action_switchEPS_i 0000001c  00000000  00000000  000066e1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN10APDControl18apd_action_set_offEPS_i 0000000a  00000000  00000000  000066fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN10APDControl17apd_action_set_onEPS_i 0000000a  00000000  00000000  00006707  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN10APDControl9getValueSEPc 00000020  00000000  00000000  00006711  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN10APDControl9initBlankEv 00000042  00000000  00000000  00006731  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN10APDControlC1Ev 00000012  00000000  00000000  00006773  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN10APDControlC2Ev 00000012  00000000  00000000  00006785  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN10APDControlD0Ev 00000052  00000000  00000000  00006797  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN10APDControlD1Ev 0000004c  00000000  00000000  000067e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN10APDControlD2Ev 0000004c  00000000  00000000  00006835  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN10APDControlC1EP6CDCONFPS_ 0000010e  00000000  00000000  00006881  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN10APDControlC2EP6CDCONFPS_ 0000010e  00000000  00000000  0000698f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .rodata._ZTV10APDControl 00000008  00000000  00000000  00006a9d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 30 .progmem.data 00000191  00000000  00000000  00006aa5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN10APDControl25apd_action_request_layoutEPS_i:

00000000 <_ZN10APDControl25apd_action_request_layoutEPS_i>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	08 95       	ret

Disassembly of section .text._ZN10APDControl22apd_action_next_screenEPS_i:

00000000 <_ZN10APDControl22apd_action_next_screenEPS_i>:
   0:	08 95       	ret

Disassembly of section .text._ZN10APDControl19apd_action_sync_ntpEPS_i:

00000000 <_ZN10APDControl19apd_action_sync_ntpEPS_i>:
   0:	08 95       	ret

Disassembly of section .text._ZN10APDControl15apd_action_noopEPS_i:

00000000 <_ZN10APDControl15apd_action_noopEPS_i>:
   0:	08 95       	ret

Disassembly of section .text._ZN10APDControl26apd_action_custom_functionEPS_i:

00000000 <_ZN10APDControl26apd_action_custom_functionEPS_i>:
   0:	fc 01       	movw	r30, r24
   2:	00 97       	sbiw	r24, 0x00	; 0
   4:	01 f0       	breq	.+0      	; 0x6 <_ZN10APDControl26apd_action_custom_functionEPS_i+0x6>
   6:	25 a9       	ldd	r18, Z+53	; 0x35
   8:	36 a9       	ldd	r19, Z+54	; 0x36
   a:	21 15       	cp	r18, r1
   c:	31 05       	cpc	r19, r1
   e:	01 f0       	breq	.+0      	; 0x10 <_ZN10APDControl26apd_action_custom_functionEPS_i+0x10>
  10:	87 85       	ldd	r24, Z+15	; 0x0f
  12:	90 89       	ldd	r25, Z+16	; 0x10
  14:	8f 37       	cpi	r24, 0x7F	; 127
  16:	91 05       	cpc	r25, r1
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN10APDControl26apd_action_custom_functionEPS_i+0x1a>
  1a:	f9 01       	movw	r30, r18
  initBlank();
  1c:	19 95       	eicall
  1e:	08 95       	ret

Disassembly of section .text._ZN10APDControl28apd_action_rc_plug_set_valueEPS_i:

00000000 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	df 93       	push	r29
  1a:	cf 93       	push	r28
  initBlank();
  1c:	0f 92       	push	r0
  1e:	0f 92       	push	r0
  20:	cd b7       	in	r28, 0x3d	; 61
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	de b7       	in	r29, 0x3e	; 62
  24:	6c 01       	movw	r12, r24
  26:	4b 01       	movw	r8, r22
  28:	dc 01       	movw	r26, r24
  2a:	1f 96       	adiw	r26, 0x0f	; 15
  2c:	8d 91       	ld	r24, X+
  2e:	9c 91       	ld	r25, X
  30:	50 97       	sbiw	r26, 0x10	; 16
  32:	03 97       	sbiw	r24, 0x03	; 3
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0x38>

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	d7 96       	adiw	r26, 0x37	; 55
  3a:	fc 90       	ld	r15, X
  3c:	d7 97       	sbiw	r26, 0x37	; 55
  3e:	d8 96       	adiw	r26, 0x38	; 56
  40:	ec 90       	ld	r14, X
  42:	1a 82       	std	Y+2, r1	; 0x02
  44:	19 82       	std	Y+1, r1	; 0x01
  46:	00 d0       	rcall	.+0      	; 0x48 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0x48>
  48:	00 d0       	rcall	.+0      	; 0x4a <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0x4a>
  4a:	ed b7       	in	r30, 0x3d	; 61
  4c:	fe b7       	in	r31, 0x3e	; 62
  4e:	31 96       	adiw	r30, 0x01	; 1
  50:	27 e1       	ldi	r18, 0x17	; 23
  52:	30 e0       	ldi	r19, 0x00	; 0
  54:	c2 0e       	add	r12, r18
  56:	d3 1e       	adc	r13, r19
  58:	ad b7       	in	r26, 0x3d	; 61
  5a:	be b7       	in	r27, 0x3e	; 62
  5c:	12 96       	adiw	r26, 0x02	; 2
  5e:	dc 92       	st	X, r13
  60:	ce 92       	st	-X, r12
  62:	11 97       	sbiw	r26, 0x01	; 1
    case ANALOG_CONTROL:
      SerPrintP("ANALOG CONTROL");
  64:	29 ee       	ldi	r18, 0xE9	; 233
  66:	3f ef       	ldi	r19, 0xFF	; 255
  68:	c2 0e       	add	r12, r18
      apd_action_set_value(this,this->config.initial_value);
      break;
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
  6a:	d3 1e       	adc	r13, r19
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	93 83       	std	Z+3, r25	; 0x03

void APDControl::apd_action_set_value(APDControl *pAPDControl, int iValue) {
#ifdef DEBUG
  SerPrintP("EXEC SET VAL");
#endif
  apd_write_control_pin(pAPDControl, iValue);
  72:	82 83       	std	Z+2, r24	; 0x02
  74:	ce 01       	movw	r24, r28
  76:	01 96       	adiw	r24, 0x01	; 1
  78:	95 83       	std	Z+5, r25	; 0x05
  7a:	84 83       	std	Z+4, r24	; 0x04
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
      apd_action_set_value(this,this->config.initial_value);
      break;
    case RCSWITCH_CONTROL:
    	SerPrintP("RCSWITCH CONTROL");
  80:	ad b7       	in	r26, 0x3d	; 61
  82:	be b7       	in	r27, 0x3e	; 62
  84:	16 96       	adiw	r26, 0x06	; 6
      {
				this->psharedclass = (void *)(new RCSwitch());
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	be bf       	out	0x3e, r27	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	ad bf       	out	0x3d, r26	; 61
  90:	89 2b       	or	r24, r25
  92:	01 f4       	brne	.+0      	; 0x94 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0x94>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0x96>
  96:	0f 2d       	mov	r16, r15
  98:	1e 2d       	mov	r17, r14
				RCSwitch *pswitch = (RCSwitch *)this->psharedclass;
				pswitch->enableTransmit(this->config.control_pin);
  9a:	a9 80       	ldd	r10, Y+1	; 0x01
  9c:	ba 80       	ldd	r11, Y+2	; 0x02
  9e:	01 15       	cp	r16, r1
  a0:	11 05       	cpc	r17, r1
  a2:	01 f4       	brne	.+0      	; 0xa4 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0xa4>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0xa6>
				SerPrintP("Enabled transmission.\n");
  a6:	eb 2c       	mov	r14, r11
  a8:	ff 24       	eor	r15, r15
  aa:	e7 fc       	sbrc	r14, 7
			// Optional set number of transmission repetitions.
			// pswitch->setRepeatTransmit(15);
			}
      break;
    case RCPLUG_CONTROL:
    	SerPrintP("RCPLUG CONTROL");
  ac:	fa 94       	dec	r15
  ae:	7e 2c       	mov	r7, r14
  b0:	6a 2c       	mov	r6, r10
  b2:	81 14       	cp	r8, r1
      {
    		if (preusablecontrol != NULL) {	// reuse existing RCSwitch
  b4:	91 04       	cpc	r9, r1
  b6:	01 f4       	brne	.+0      	; 0xb8 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0xb8>
  b8:	80 e0       	ldi	r24, 0x00	; 0
    			this->primary = false;
  ba:	90 e0       	ldi	r25, 0x00	; 0
    			this->psharedclass = preusablecontrol->psharedclass;
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>
  c0:	c8 01       	movw	r24, r16
  c2:	6e 2d       	mov	r22, r14
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	4a 2d       	mov	r20, r10
    		} else {
    			this->primary = true;
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>
    			this->psharedclass = (void *)(new RCSwitch());
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0xd0>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>
  d8:	c8 01       	movw	r24, r16
  da:	6e 2d       	mov	r22, r14
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	4a 2d       	mov	r20, r10
					RCSwitch *pswitch = (RCSwitch *)this->psharedclass;
					pswitch->enableTransmit(this->config.control_pin);
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>
  e6:	f6 01       	movw	r30, r12
  e8:	12 aa       	std	Z+50, r1	; 0x32
  ea:	11 aa       	std	Z+49, r1	; 0x31
					SerPrintP("Enabled transmission.\n");
  ec:	89 28       	or	r8, r9
  ee:	01 f0       	breq	.+0      	; 0xf0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0xf0>
  f0:	81 e0       	ldi	r24, 0x01	; 1
				// pswitch->setRepeatTransmit(15);
    		}
			}
      break;
    case SOFTWARE_CONTROL:
      SerPrintP("SOFTWARE CONTROL");
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	92 ab       	std	Z+50, r25	; 0x32
  f6:	81 ab       	std	Z+49, r24	; 0x31
      //TODO implement
      //apd_action_set_value(this,this->config.initial_value);
      break;
    default:
      SerPrintP("Invalid control type.");
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	67 2d       	mov	r22, r7
  fe:	70 e0       	ldi	r23, 0x00	; 0
  }
  // we should have now a pointer to the APDSensor
}
 100:	4a e0       	ldi	r20, 0x0A	; 10
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	66 2d       	mov	r22, r6
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	4a e0       	ldi	r20, 0x0A	; 10
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0x126>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	00 c0       	rjmp	.+0      	; 0x12c <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0x12c>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	00 c0       	rjmp	.+0      	; 0x132 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i+0x132>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl28apd_action_rc_plug_set_valueEPS_i>
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	ff 90       	pop	r15
 148:	ef 90       	pop	r14
 14a:	df 90       	pop	r13
 14c:	cf 90       	pop	r12
 14e:	bf 90       	pop	r11
 150:	af 90       	pop	r10
 152:	9f 90       	pop	r9
 154:	8f 90       	pop	r8
 156:	7f 90       	pop	r7
 158:	6f 90       	pop	r6
 15a:	08 95       	ret

Disassembly of section .text._ZN10APDControl22apd_action_rc_plug_offEPS_i:

00000000 <_ZN10APDControl22apd_action_rc_plug_offEPS_i>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	60 e0       	ldi	r22, 0x00	; 0
   2:	70 e0       	ldi	r23, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl22apd_action_rc_plug_offEPS_i>
   8:	08 95       	ret

Disassembly of section .text._ZN10APDControl21apd_action_rc_plug_onEPS_i:

00000000 <_ZN10APDControl21apd_action_rc_plug_onEPS_i>:
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	70 e0       	ldi	r23, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl21apd_action_rc_plug_onEPS_i>
   8:	08 95       	ret

Disassembly of section .text._ZN10APDControl24apd_action_rc_switch_offEPS_i:

00000000 <_ZN10APDControl24apd_action_rc_switch_offEPS_i>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	fc 01       	movw	r30, r24
   e:	7b 01       	movw	r14, r22
  10:	87 85       	ldd	r24, Z+15	; 0x0f
  12:	90 89       	ldd	r25, Z+16	; 0x10
  14:	02 97       	sbiw	r24, 0x02	; 2
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN10APDControl24apd_action_rc_switch_offEPS_i+0x18>
  18:	c7 a9       	ldd	r28, Z+55	; 0x37
  1a:	d0 ad       	ldd	r29, Z+56	; 0x38
  initBlank();
  1c:	20 97       	sbiw	r28, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN10APDControl24apd_action_rc_switch_offEPS_i+0x20>
  20:	80 e0       	ldi	r24, 0x00	; 0
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl24apd_action_rc_switch_offEPS_i>
  28:	0f 2d       	mov	r16, r15
  2a:	11 27       	eor	r17, r17
  2c:	07 fd       	sbrc	r16, 7
  2e:	1a 95       	dec	r17
  30:	ce 01       	movw	r24, r28
  32:	60 2f       	mov	r22, r16
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	4e 2d       	mov	r20, r14

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl24apd_action_rc_switch_offEPS_i>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	60 2f       	mov	r22, r16
  44:	70 e0       	ldi	r23, 0x00	; 0
  46:	4a e0       	ldi	r20, 0x0A	; 10
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl24apd_action_rc_switch_offEPS_i>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl24apd_action_rc_switch_offEPS_i>
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	6e 2d       	mov	r22, r14
  5c:	70 e0       	ldi	r23, 0x00	; 0
  5e:	4a e0       	ldi	r20, 0x0A	; 10
  60:	50 e0       	ldi	r21, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl24apd_action_rc_switch_offEPS_i>
    case ANALOG_CONTROL:
      SerPrintP("ANALOG CONTROL");
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	90 e0       	ldi	r25, 0x00	; 0
      apd_action_set_value(this,this->config.initial_value);
      break;
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN10APDControl24apd_action_rc_switch_offEPS_i+0x6c>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZN10APDControl24apd_action_rc_switch_offEPS_i+0x72>

void APDControl::apd_action_set_value(APDControl *pAPDControl, int iValue) {
#ifdef DEBUG
  SerPrintP("EXEC SET VAL");
#endif
  apd_write_control_pin(pAPDControl, iValue);
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl24apd_action_rc_switch_offEPS_i>
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
      apd_action_set_value(this,this->config.initial_value);
      break;
    case RCSWITCH_CONTROL:
    	SerPrintP("RCSWITCH CONTROL");
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	ff 90       	pop	r15
  84:	ef 90       	pop	r14
      {
				this->psharedclass = (void *)(new RCSwitch());
  86:	08 95       	ret

Disassembly of section .text._ZN10APDControl23apd_action_rc_switch_onEPS_i:

00000000 <_ZN10APDControl23apd_action_rc_switch_onEPS_i>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	fc 01       	movw	r30, r24
   e:	7b 01       	movw	r14, r22
  10:	87 85       	ldd	r24, Z+15	; 0x0f
  12:	90 89       	ldd	r25, Z+16	; 0x10
  14:	02 97       	sbiw	r24, 0x02	; 2
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN10APDControl23apd_action_rc_switch_onEPS_i+0x18>
  18:	c7 a9       	ldd	r28, Z+55	; 0x37
  1a:	d0 ad       	ldd	r29, Z+56	; 0x38
  initBlank();
  1c:	20 97       	sbiw	r28, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN10APDControl23apd_action_rc_switch_onEPS_i+0x20>
  20:	80 e0       	ldi	r24, 0x00	; 0
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl23apd_action_rc_switch_onEPS_i>
  28:	0f 2d       	mov	r16, r15
  2a:	11 27       	eor	r17, r17
  2c:	07 fd       	sbrc	r16, 7
  2e:	1a 95       	dec	r17
  30:	ce 01       	movw	r24, r28
  32:	60 2f       	mov	r22, r16
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	4e 2d       	mov	r20, r14

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl23apd_action_rc_switch_onEPS_i>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	60 2f       	mov	r22, r16
  44:	70 e0       	ldi	r23, 0x00	; 0
  46:	4a e0       	ldi	r20, 0x0A	; 10
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl23apd_action_rc_switch_onEPS_i>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl23apd_action_rc_switch_onEPS_i>
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	6e 2d       	mov	r22, r14
  5c:	70 e0       	ldi	r23, 0x00	; 0
  5e:	4a e0       	ldi	r20, 0x0A	; 10
  60:	50 e0       	ldi	r21, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl23apd_action_rc_switch_onEPS_i>
    case ANALOG_CONTROL:
      SerPrintP("ANALOG CONTROL");
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	90 e0       	ldi	r25, 0x00	; 0
      apd_action_set_value(this,this->config.initial_value);
      break;
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN10APDControl23apd_action_rc_switch_onEPS_i+0x6c>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZN10APDControl23apd_action_rc_switch_onEPS_i+0x72>

void APDControl::apd_action_set_value(APDControl *pAPDControl, int iValue) {
#ifdef DEBUG
  SerPrintP("EXEC SET VAL");
#endif
  apd_write_control_pin(pAPDControl, iValue);
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl23apd_action_rc_switch_onEPS_i>
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
      apd_action_set_value(this,this->config.initial_value);
      break;
    case RCSWITCH_CONTROL:
    	SerPrintP("RCSWITCH CONTROL");
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	ff 90       	pop	r15
  84:	ef 90       	pop	r14
      {
				this->psharedclass = (void *)(new RCSwitch());
  86:	08 95       	ret

Disassembly of section .text._ZN10APDControl21apd_write_control_pinEPS_i:

00000000 <_ZN10APDControl21apd_write_control_pinEPS_i>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	cf 93       	push	r28
   8:	df 93       	push	r29
   a:	8c 01       	movw	r16, r24
   c:	fc 01       	movw	r30, r24
   e:	f1 88       	ldd	r15, Z+17	; 0x11
  10:	87 85       	ldd	r24, Z+15	; 0x0f
  12:	90 89       	ldd	r25, Z+16	; 0x10
  14:	00 97       	sbiw	r24, 0x00	; 0
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN10APDControl21apd_write_control_pinEPS_i+0x18>
  18:	01 97       	sbiw	r24, 0x01	; 1
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN10APDControl21apd_write_control_pinEPS_i+0x1c>
  initBlank();
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN10APDControl21apd_write_control_pinEPS_i+0x1e>
  1e:	6f 3f       	cpi	r22, 0xFF	; 255
  20:	71 05       	cpc	r23, r1
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN10APDControl21apd_write_control_pinEPS_i+0x24>
  24:	04 f0       	brlt	.+0      	; 0x26 <_ZN10APDControl21apd_write_control_pinEPS_i+0x26>
  26:	6f ef       	ldi	r22, 0xFF	; 255
  28:	70 e0       	ldi	r23, 0x00	; 0
  2a:	eb 01       	movw	r28, r22
  2c:	77 ff       	sbrs	r23, 7
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN10APDControl21apd_write_control_pinEPS_i+0x30>
  30:	c0 e0       	ldi	r28, 0x00	; 0
  32:	d0 e0       	ldi	r29, 0x00	; 0
  34:	f8 01       	movw	r30, r16
  36:	81 a9       	ldd	r24, Z+49	; 0x31

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	92 a9       	ldd	r25, Z+50	; 0x32
  3a:	c8 17       	cp	r28, r24
  3c:	d9 07       	cpc	r29, r25
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN10APDControl21apd_write_control_pinEPS_i+0x40>
  40:	8f 2d       	mov	r24, r15
  42:	be 01       	movw	r22, r28
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl21apd_write_control_pinEPS_i>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN10APDControl21apd_write_control_pinEPS_i+0x4a>
  4a:	c0 e0       	ldi	r28, 0x00	; 0
  4c:	d0 e0       	ldi	r29, 0x00	; 0
  4e:	16 16       	cp	r1, r22
  50:	17 06       	cpc	r1, r23
  52:	04 f4       	brge	.+0      	; 0x54 <_ZN10APDControl21apd_write_control_pinEPS_i+0x54>
  54:	c1 e0       	ldi	r28, 0x01	; 1
  56:	d0 e0       	ldi	r29, 0x00	; 0
  58:	f8 01       	movw	r30, r16
  5a:	81 a9       	ldd	r24, Z+49	; 0x31
  5c:	92 a9       	ldd	r25, Z+50	; 0x32
  5e:	c8 17       	cp	r28, r24
  60:	d9 07       	cpc	r29, r25
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN10APDControl21apd_write_control_pinEPS_i+0x64>
    case ANALOG_CONTROL:
      SerPrintP("ANALOG CONTROL");
  64:	8f 2d       	mov	r24, r15
  66:	61 e0       	ldi	r22, 0x01	; 1
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl21apd_write_control_pinEPS_i>
      apd_action_set_value(this,this->config.initial_value);
      break;
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
  6c:	8f 2d       	mov	r24, r15
  6e:	6c 2f       	mov	r22, r28
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl21apd_write_control_pinEPS_i>

void APDControl::apd_action_set_value(APDControl *pAPDControl, int iValue) {
#ifdef DEBUG
  SerPrintP("EXEC SET VAL");
#endif
  apd_write_control_pin(pAPDControl, iValue);
  74:	f8 01       	movw	r30, r16
  76:	d2 ab       	std	Z+50, r29	; 0x32
  78:	c1 ab       	std	Z+49, r28	; 0x31
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
      apd_action_set_value(this,this->config.initial_value);
      break;
    case RCSWITCH_CONTROL:
    	SerPrintP("RCSWITCH CONTROL");
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	ff 90       	pop	r15
  84:	08 95       	ret

Disassembly of section .text._ZN10APDControl20apd_action_set_valueEPS_i:

00000000 <_ZN10APDControl20apd_action_set_valueEPS_i>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl20apd_action_set_valueEPS_i>
   4:	08 95       	ret

Disassembly of section .text._ZN10APDControl17apd_action_switchEPS_i:

00000000 <_ZN10APDControl17apd_action_switchEPS_i>:
   0:	fc 01       	movw	r30, r24
   2:	81 a9       	ldd	r24, Z+49	; 0x31
   4:	92 a9       	ldd	r25, Z+50	; 0x32
   6:	89 2b       	or	r24, r25
   8:	01 f0       	breq	.+0      	; 0xa <_ZN10APDControl17apd_action_switchEPS_i+0xa>
   a:	60 e0       	ldi	r22, 0x00	; 0
   c:	70 e0       	ldi	r23, 0x00	; 0
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN10APDControl17apd_action_switchEPS_i+0x10>
  10:	6f ef       	ldi	r22, 0xFF	; 255
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	cf 01       	movw	r24, r30
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl17apd_action_switchEPS_i>
  1a:	08 95       	ret

Disassembly of section .text._ZN10APDControl18apd_action_set_offEPS_i:

00000000 <_ZN10APDControl18apd_action_set_offEPS_i>:
   0:	60 e0       	ldi	r22, 0x00	; 0
   2:	70 e0       	ldi	r23, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl18apd_action_set_offEPS_i>
   8:	08 95       	ret

Disassembly of section .text._ZN10APDControl17apd_action_set_onEPS_i:

00000000 <_ZN10APDControl17apd_action_set_onEPS_i>:
   0:	6f ef       	ldi	r22, 0xFF	; 255
   2:	70 e0       	ldi	r23, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl17apd_action_set_onEPS_i>
   8:	08 95       	ret

Disassembly of section .text._ZN10APDControl9getValueSEPc:

00000000 <_ZN10APDControl9getValueSEPc>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	16 2f       	mov	r17, r22
   6:	07 2f       	mov	r16, r23
   8:	fc 01       	movw	r30, r24
   a:	81 a9       	ldd	r24, Z+49	; 0x31
   c:	92 a9       	ldd	r25, Z+50	; 0x32
   e:	4a e0       	ldi	r20, 0x0A	; 10
  10:	50 e0       	ldi	r21, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControl9getValueSEPc>
  16:	81 2f       	mov	r24, r17
  18:	90 2f       	mov	r25, r16
  1a:	1f 91       	pop	r17
  initBlank();
  1c:	0f 91       	pop	r16
  1e:	08 95       	ret

Disassembly of section .text._ZN10APDControl9initBlankEv:

00000000 <_ZN10APDControl9initBlankEv>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
   6:	02 96       	adiw	r24, 0x02	; 2
   8:	fc 01       	movw	r30, r24
   a:	8d e2       	ldi	r24, 0x2D	; 45
   c:	ef 01       	movw	r28, r30
   e:	19 92       	st	Y+, r1
  10:	8a 95       	dec	r24
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN10APDControl9initBlankEv+0x14>
  14:	d0 96       	adiw	r26, 0x30	; 48
  16:	1c 92       	st	X, r1
  18:	1e 92       	st	-X, r1
  1a:	9f 97       	sbiw	r26, 0x2f	; 47
  initBlank();
  1c:	d2 96       	adiw	r26, 0x32	; 50
  1e:	1c 92       	st	X, r1
  20:	1e 92       	st	-X, r1
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	d1 97       	sbiw	r26, 0x31	; 49
  24:	d4 96       	adiw	r26, 0x34	; 52
  26:	1c 92       	st	X, r1
  28:	1e 92       	st	-X, r1
  2a:	d3 97       	sbiw	r26, 0x33	; 51
  2c:	d6 96       	adiw	r26, 0x36	; 54
  2e:	1c 92       	st	X, r1
  30:	1e 92       	st	-X, r1
  32:	d5 97       	sbiw	r26, 0x35	; 53
  34:	d8 96       	adiw	r26, 0x38	; 56
  36:	1c 92       	st	X, r1

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	1e 92       	st	-X, r1
  3a:	d7 97       	sbiw	r26, 0x37	; 55
  3c:	df 91       	pop	r29
  3e:	cf 91       	pop	r28
  40:	08 95       	ret

Disassembly of section .text._ZN10APDControlC1Ev:

00000000 <_ZN10APDControlC1Ev>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1Ev>
  10:	08 95       	ret

Disassembly of section .text._ZN10APDControlC2Ev:

00000000 <_ZN10APDControlC2Ev>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2Ev>
  10:	08 95       	ret

Disassembly of section .text._ZN10APDControlD0Ev:

00000000 <_ZN10APDControlD0Ev>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	2f a9       	ldd	r18, Y+55	; 0x37
  10:	38 ad       	ldd	r19, Y+56	; 0x38
  12:	21 15       	cp	r18, r1
  14:	31 05       	cpc	r19, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN10APDControlD0Ev+0x18>
  18:	8f 85       	ldd	r24, Y+15	; 0x0f
  1a:	98 89       	ldd	r25, Y+16	; 0x10
  initBlank();
  1c:	02 97       	sbiw	r24, 0x02	; 2
  1e:	02 97       	sbiw	r24, 0x02	; 2
  20:	00 f4       	brcc	.+0      	; 0x22 <_ZN10APDControlD0Ev+0x22>
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	89 ad       	ldd	r24, Y+57	; 0x39
  24:	88 23       	and	r24, r24
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN10APDControlD0Ev+0x28>
  28:	c9 01       	movw	r24, r18
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD0Ev>
  2e:	8f a9       	ldd	r24, Y+55	; 0x37
  30:	98 ad       	ldd	r25, Y+56	; 0x38
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD0Ev>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN10APDControlD0Ev+0x38>

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	18 ae       	std	Y+56, r1	; 0x38
  3a:	1f aa       	std	Y+55, r1	; 0x37
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN10APDControlD0Ev+0x3e>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD0Ev>
  46:	ce 01       	movw	r24, r28
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD0Ev>
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	08 95       	ret

Disassembly of section .text._ZN10APDControlD1Ev:

00000000 <_ZN10APDControlD1Ev>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	2f a9       	ldd	r18, Y+55	; 0x37
  10:	38 ad       	ldd	r19, Y+56	; 0x38
  12:	21 15       	cp	r18, r1
  14:	31 05       	cpc	r19, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN10APDControlD1Ev+0x18>
  18:	8f 85       	ldd	r24, Y+15	; 0x0f
  1a:	98 89       	ldd	r25, Y+16	; 0x10
  initBlank();
  1c:	02 97       	sbiw	r24, 0x02	; 2
  1e:	02 97       	sbiw	r24, 0x02	; 2
  20:	00 f4       	brcc	.+0      	; 0x22 <_ZN10APDControlD1Ev+0x22>
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	89 ad       	ldd	r24, Y+57	; 0x39
  24:	88 23       	and	r24, r24
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN10APDControlD1Ev+0x28>
  28:	c9 01       	movw	r24, r18
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD1Ev>
  2e:	8f a9       	ldd	r24, Y+55	; 0x37
  30:	98 ad       	ldd	r25, Y+56	; 0x38
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD1Ev>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN10APDControlD1Ev+0x38>

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	18 ae       	std	Y+56, r1	; 0x38
  3a:	1f aa       	std	Y+55, r1	; 0x37
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN10APDControlD1Ev+0x3e>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD1Ev>
  46:	df 91       	pop	r29
  48:	cf 91       	pop	r28
  4a:	08 95       	ret

Disassembly of section .text._ZN10APDControlD2Ev:

00000000 <_ZN10APDControlD2Ev>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	2f a9       	ldd	r18, Y+55	; 0x37
  10:	38 ad       	ldd	r19, Y+56	; 0x38
  12:	21 15       	cp	r18, r1
  14:	31 05       	cpc	r19, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN10APDControlD2Ev+0x18>
  18:	8f 85       	ldd	r24, Y+15	; 0x0f
  1a:	98 89       	ldd	r25, Y+16	; 0x10
  initBlank();
  1c:	02 97       	sbiw	r24, 0x02	; 2
  1e:	02 97       	sbiw	r24, 0x02	; 2
  20:	00 f4       	brcc	.+0      	; 0x22 <_ZN10APDControlD2Ev+0x22>
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	89 ad       	ldd	r24, Y+57	; 0x39
  24:	88 23       	and	r24, r24
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN10APDControlD2Ev+0x28>
  28:	c9 01       	movw	r24, r18
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD2Ev>
  2e:	8f a9       	ldd	r24, Y+55	; 0x37
  30:	98 ad       	ldd	r25, Y+56	; 0x38
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD2Ev>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN10APDControlD2Ev+0x38>

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	18 ae       	std	Y+56, r1	; 0x38
  3a:	1f aa       	std	Y+55, r1	; 0x37
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN10APDControlD2Ev+0x3e>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlD2Ev>
  46:	df 91       	pop	r29
  48:	cf 91       	pop	r28
  4a:	08 95       	ret

Disassembly of section .text._ZN10APDControlC1EP6CDCONFPS_:

00000000 <_ZN10APDControlC1EP6CDCONFPS_>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	16 2f       	mov	r17, r22
  10:	07 2f       	mov	r16, r23
  12:	7a 01       	movw	r14, r20
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	99 83       	std	Y+1, r25	; 0x01
  1a:	88 83       	st	Y, r24
  initBlank();
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	de 01       	movw	r26, r28
  24:	12 96       	adiw	r26, 0x02	; 2
  26:	21 2f       	mov	r18, r17
  28:	30 2f       	mov	r19, r16
  2a:	c9 01       	movw	r24, r18
  2c:	fc 01       	movw	r30, r24
  2e:	8d e2       	ldi	r24, 0x2D	; 45
  30:	01 90       	ld	r0, Z+
  32:	0d 92       	st	X+, r0
  34:	81 50       	subi	r24, 0x01	; 1
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN10APDControlC1EP6CDCONFPS_+0x38>

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	8f 85       	ldd	r24, Y+15	; 0x0f
  3a:	98 89       	ldd	r25, Y+16	; 0x10
  3c:	82 30       	cpi	r24, 0x02	; 2
  3e:	91 05       	cpc	r25, r1
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN10APDControlC1EP6CDCONFPS_+0x42>
  42:	83 30       	cpi	r24, 0x03	; 3
  44:	91 05       	cpc	r25, r1
  46:	04 f4       	brge	.+0      	; 0x48 <_ZN10APDControlC1EP6CDCONFPS_+0x48>
  48:	00 97       	sbiw	r24, 0x00	; 0
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN10APDControlC1EP6CDCONFPS_+0x4c>
  4c:	01 97       	sbiw	r24, 0x01	; 1
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZN10APDControlC1EP6CDCONFPS_+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN10APDControlC1EP6CDCONFPS_+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN10APDControlC1EP6CDCONFPS_+0x54>
  54:	83 30       	cpi	r24, 0x03	; 3
  56:	91 05       	cpc	r25, r1
  58:	01 f0       	breq	.+0      	; 0x5a <_ZN10APDControlC1EP6CDCONFPS_+0x5a>
  5a:	8f 37       	cpi	r24, 0x7F	; 127
  5c:	91 05       	cpc	r25, r1
  5e:	01 f0       	breq	.+0      	; 0x60 <_ZN10APDControlC1EP6CDCONFPS_+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN10APDControlC1EP6CDCONFPS_+0x62>
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN10APDControlC1EP6CDCONFPS_+0x64>
    case ANALOG_CONTROL:
      SerPrintP("ANALOG CONTROL");
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN10APDControlC1EP6CDCONFPS_+0x6a>
      apd_action_set_value(this,this->config.initial_value);
      break;
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>

void APDControl::apd_action_set_value(APDControl *pAPDControl, int iValue) {
#ifdef DEBUG
  SerPrintP("EXEC SET VAL");
#endif
  apd_write_control_pin(pAPDControl, iValue);
  72:	6b 89       	ldd	r22, Y+19	; 0x13
  74:	7c 89       	ldd	r23, Y+20	; 0x14
  76:	ce 01       	movw	r24, r28
  78:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_ZN10APDControlC1EP6CDCONFPS_+0x7e>
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
      apd_action_set_value(this,this->config.initial_value);
      break;
    case RCSWITCH_CONTROL:
    	SerPrintP("RCSWITCH CONTROL");
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
      {
				this->psharedclass = (void *)(new RCSwitch());
  86:	89 e0       	ldi	r24, 0x09	; 9
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
  8e:	18 2f       	mov	r17, r24
  90:	09 2f       	mov	r16, r25
  92:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
  96:	1f ab       	std	Y+55, r17	; 0x37
  98:	08 af       	std	Y+56, r16	; 0x38
				RCSwitch *pswitch = (RCSwitch *)this->psharedclass;
				pswitch->enableTransmit(this->config.control_pin);
  9a:	69 89       	ldd	r22, Y+17	; 0x11
  9c:	7a 89       	ldd	r23, Y+18	; 0x12
  9e:	81 2f       	mov	r24, r17
  a0:	90 2f       	mov	r25, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
				SerPrintP("Enabled transmission.\n");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	00 c0       	rjmp	.+0      	; 0xac <_ZN10APDControlC1EP6CDCONFPS_+0xac>
			// Optional set number of transmission repetitions.
			// pswitch->setRepeatTransmit(15);
			}
      break;
    case RCPLUG_CONTROL:
    	SerPrintP("RCPLUG CONTROL");
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
      {
    		if (preusablecontrol != NULL) {	// reuse existing RCSwitch
  b4:	e1 14       	cp	r14, r1
  b6:	f1 04       	cpc	r15, r1
  b8:	01 f0       	breq	.+0      	; 0xba <_ZN10APDControlC1EP6CDCONFPS_+0xba>
    			this->primary = false;
  ba:	19 ae       	std	Y+57, r1	; 0x39
    			this->psharedclass = preusablecontrol->psharedclass;
  bc:	f7 01       	movw	r30, r14
  be:	87 a9       	ldd	r24, Z+55	; 0x37
  c0:	90 ad       	ldd	r25, Z+56	; 0x38
  c2:	98 af       	std	Y+56, r25	; 0x38
  c4:	8f ab       	std	Y+55, r24	; 0x37
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN10APDControlC1EP6CDCONFPS_+0xc8>
    		} else {
    			this->primary = true;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 af       	std	Y+57, r24	; 0x39
    			this->psharedclass = (void *)(new RCSwitch());
  cc:	89 e0       	ldi	r24, 0x09	; 9
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
  d4:	18 2f       	mov	r17, r24
  d6:	09 2f       	mov	r16, r25
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
  dc:	1f ab       	std	Y+55, r17	; 0x37
  de:	08 af       	std	Y+56, r16	; 0x38
					RCSwitch *pswitch = (RCSwitch *)this->psharedclass;
					pswitch->enableTransmit(this->config.control_pin);
  e0:	69 89       	ldd	r22, Y+17	; 0x11
  e2:	7a 89       	ldd	r23, Y+18	; 0x12
  e4:	81 2f       	mov	r24, r17
  e6:	90 2f       	mov	r25, r16
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
					SerPrintP("Enabled transmission.\n");
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN10APDControlC1EP6CDCONFPS_+0xf2>
				// pswitch->setRepeatTransmit(15);
    		}
			}
      break;
    case SOFTWARE_CONTROL:
      SerPrintP("SOFTWARE CONTROL");
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_ZN10APDControlC1EP6CDCONFPS_+0xf8>
      //TODO implement
      //apd_action_set_value(this,this->config.initial_value);
      break;
    default:
      SerPrintP("Invalid control type.");
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC1EP6CDCONFPS_>
  }
  // we should have now a pointer to the APDSensor
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	0f 91       	pop	r16
 108:	ff 90       	pop	r15
 10a:	ef 90       	pop	r14
 10c:	08 95       	ret

Disassembly of section .text._ZN10APDControlC2EP6CDCONFPS_:

00000000 <_ZN10APDControlC2EP6CDCONFPS_>:
 *
 * \param[in] cdc pointer to the Control Definition Configuration
 * \param[in] preusablecontrol pointer to an APDControl that has a reusable control to be used by this new control (eg. RC-Plugs sharing an underlying RC-Switch object)
 *
 */
APDControl::APDControl(CDCONF *cdc, APDControl *preusablecontrol) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	16 2f       	mov	r17, r22
  10:	07 2f       	mov	r16, r23
  12:	7a 01       	movw	r14, r20
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	99 83       	std	Y+1, r25	; 0x01
  1a:	88 83       	st	Y, r24
  initBlank();
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
  memcpy((void*)&(this->config),(void*)cdc,sizeof(CDCONF));       // copy the structure to config
  22:	de 01       	movw	r26, r28
  24:	12 96       	adiw	r26, 0x02	; 2
  26:	21 2f       	mov	r18, r17
  28:	30 2f       	mov	r19, r16
  2a:	c9 01       	movw	r24, r18
  2c:	fc 01       	movw	r30, r24
  2e:	8d e2       	ldi	r24, 0x2D	; 45
  30:	01 90       	ld	r0, Z+
  32:	0d 92       	st	X+, r0
  34:	81 50       	subi	r24, 0x01	; 1
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN10APDControlC2EP6CDCONFPS_+0x38>

  // allocate ram for the control object/struct, as needed - depending on the type
  switch (this->config.control_type) {
  38:	8f 85       	ldd	r24, Y+15	; 0x0f
  3a:	98 89       	ldd	r25, Y+16	; 0x10
  3c:	82 30       	cpi	r24, 0x02	; 2
  3e:	91 05       	cpc	r25, r1
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN10APDControlC2EP6CDCONFPS_+0x42>
  42:	83 30       	cpi	r24, 0x03	; 3
  44:	91 05       	cpc	r25, r1
  46:	04 f4       	brge	.+0      	; 0x48 <_ZN10APDControlC2EP6CDCONFPS_+0x48>
  48:	00 97       	sbiw	r24, 0x00	; 0
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN10APDControlC2EP6CDCONFPS_+0x4c>
  4c:	01 97       	sbiw	r24, 0x01	; 1
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZN10APDControlC2EP6CDCONFPS_+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN10APDControlC2EP6CDCONFPS_+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN10APDControlC2EP6CDCONFPS_+0x54>
  54:	83 30       	cpi	r24, 0x03	; 3
  56:	91 05       	cpc	r25, r1
  58:	01 f0       	breq	.+0      	; 0x5a <_ZN10APDControlC2EP6CDCONFPS_+0x5a>
  5a:	8f 37       	cpi	r24, 0x7F	; 127
  5c:	91 05       	cpc	r25, r1
  5e:	01 f0       	breq	.+0      	; 0x60 <_ZN10APDControlC2EP6CDCONFPS_+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN10APDControlC2EP6CDCONFPS_+0x62>
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN10APDControlC2EP6CDCONFPS_+0x64>
    case ANALOG_CONTROL:
      SerPrintP("ANALOG CONTROL");
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN10APDControlC2EP6CDCONFPS_+0x6a>
      apd_action_set_value(this,this->config.initial_value);
      break;
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>

void APDControl::apd_action_set_value(APDControl *pAPDControl, int iValue) {
#ifdef DEBUG
  SerPrintP("EXEC SET VAL");
#endif
  apd_write_control_pin(pAPDControl, iValue);
  72:	6b 89       	ldd	r22, Y+19	; 0x13
  74:	7c 89       	ldd	r23, Y+20	; 0x14
  76:	ce 01       	movw	r24, r28
  78:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_ZN10APDControlC2EP6CDCONFPS_+0x7e>
    case DIGITAL_CONTROL:
      SerPrintP("DIGITAL CONTROL");
      apd_action_set_value(this,this->config.initial_value);
      break;
    case RCSWITCH_CONTROL:
    	SerPrintP("RCSWITCH CONTROL");
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
      {
				this->psharedclass = (void *)(new RCSwitch());
  86:	89 e0       	ldi	r24, 0x09	; 9
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
  8e:	18 2f       	mov	r17, r24
  90:	09 2f       	mov	r16, r25
  92:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
  96:	1f ab       	std	Y+55, r17	; 0x37
  98:	08 af       	std	Y+56, r16	; 0x38
				RCSwitch *pswitch = (RCSwitch *)this->psharedclass;
				pswitch->enableTransmit(this->config.control_pin);
  9a:	69 89       	ldd	r22, Y+17	; 0x11
  9c:	7a 89       	ldd	r23, Y+18	; 0x12
  9e:	81 2f       	mov	r24, r17
  a0:	90 2f       	mov	r25, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
				SerPrintP("Enabled transmission.\n");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	00 c0       	rjmp	.+0      	; 0xac <_ZN10APDControlC2EP6CDCONFPS_+0xac>
			// Optional set number of transmission repetitions.
			// pswitch->setRepeatTransmit(15);
			}
      break;
    case RCPLUG_CONTROL:
    	SerPrintP("RCPLUG CONTROL");
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
      {
    		if (preusablecontrol != NULL) {	// reuse existing RCSwitch
  b4:	e1 14       	cp	r14, r1
  b6:	f1 04       	cpc	r15, r1
  b8:	01 f0       	breq	.+0      	; 0xba <_ZN10APDControlC2EP6CDCONFPS_+0xba>
    			this->primary = false;
  ba:	19 ae       	std	Y+57, r1	; 0x39
    			this->psharedclass = preusablecontrol->psharedclass;
  bc:	f7 01       	movw	r30, r14
  be:	87 a9       	ldd	r24, Z+55	; 0x37
  c0:	90 ad       	ldd	r25, Z+56	; 0x38
  c2:	98 af       	std	Y+56, r25	; 0x38
  c4:	8f ab       	std	Y+55, r24	; 0x37
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN10APDControlC2EP6CDCONFPS_+0xc8>
    		} else {
    			this->primary = true;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 af       	std	Y+57, r24	; 0x39
    			this->psharedclass = (void *)(new RCSwitch());
  cc:	89 e0       	ldi	r24, 0x09	; 9
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
  d4:	18 2f       	mov	r17, r24
  d6:	09 2f       	mov	r16, r25
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
  dc:	1f ab       	std	Y+55, r17	; 0x37
  de:	08 af       	std	Y+56, r16	; 0x38
					RCSwitch *pswitch = (RCSwitch *)this->psharedclass;
					pswitch->enableTransmit(this->config.control_pin);
  e0:	69 89       	ldd	r22, Y+17	; 0x11
  e2:	7a 89       	ldd	r23, Y+18	; 0x12
  e4:	81 2f       	mov	r24, r17
  e6:	90 2f       	mov	r25, r16
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
					SerPrintP("Enabled transmission.\n");
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN10APDControlC2EP6CDCONFPS_+0xf2>
				// pswitch->setRepeatTransmit(15);
    		}
			}
      break;
    case SOFTWARE_CONTROL:
      SerPrintP("SOFTWARE CONTROL");
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_ZN10APDControlC2EP6CDCONFPS_+0xf8>
      //TODO implement
      //apd_action_set_value(this,this->config.initial_value);
      break;
    default:
      SerPrintP("Invalid control type.");
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDControlC2EP6CDCONFPS_>
  }
  // we should have now a pointer to the APDSensor
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	0f 91       	pop	r16
 108:	ff 90       	pop	r15
 10a:	ef 90       	pop	r14
 10c:	08 95       	ret

APDControlArray.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000006e  2**0
                  ALLOC
  3 .stab         00001800  00000000  00000000  00000070  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000443f  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN15APDControlArrayC2Ev 00000018  00000000  00000000  00005caf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN15APDControlArrayC1Ev 00000018  00000000  00000000  00005cc7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN15APDControlArrayC2EPv 00000018  00000000  00000000  00005cdf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN15APDControlArrayC1EPv 00000018  00000000  00000000  00005cf7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN15APDControlArray17firstControlByPinEii 00000060  00000000  00000000  00005d0f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN15APDControlArray7byIndexEi 0000002e  00000000  00000000  00005d6f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN15APDControlArray19findReusableControlEP6CDCONF 00000058  00000000  00000000  00005d9d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN15APDControlArray10dumpToFileEP10APDStoragePc 000001ba  00000000  00000000  00005df5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN15APDControlArray12loadControlsEP10APDStorage 000000f0  00000000  00000000  00005faf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN15APDControlArray18new_control_parserEPviPc 0000014a  00000000  00000000  0000609f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN15APDControlArrayD1Ev 00000080  00000000  00000000  000061e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN15APDControlArrayD2Ev 00000080  00000000  00000000  00006269  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN15APDControlArrayD0Ev 00000086  00000000  00000000  000062e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .rodata._ZTV15APDControlArray 00000008  00000000  00000000  0000636f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 19 .progmem.data 00000058  00000000  00000000  00006377  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN15APDControlArrayC2Ev:

00000000 <_ZN15APDControlArrayC2Ev>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	17 82       	std	Z+7, r1	; 0x07
  14:	16 82       	std	Z+6, r1	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	08 95       	ret

Disassembly of section .text._ZN15APDControlArrayC1Ev:

00000000 <_ZN15APDControlArrayC1Ev>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	17 82       	std	Z+7, r1	; 0x07
  14:	16 82       	std	Z+6, r1	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	08 95       	ret

Disassembly of section .text._ZN15APDControlArrayC2EPv:

00000000 <_ZN15APDControlArrayC2EPv>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	77 83       	std	Z+7, r23	; 0x07
  14:	66 83       	std	Z+6, r22	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	08 95       	ret

Disassembly of section .text._ZN15APDControlArrayC1EPv:

00000000 <_ZN15APDControlArrayC1EPv>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	77 83       	std	Z+7, r23	; 0x07
  14:	66 83       	std	Z+6, r22	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	08 95       	ret

Disassembly of section .text._ZN15APDControlArray17firstControlByPinEii:

00000000 <_ZN15APDControlArray17firstControlByPinEii>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
   6:	eb 01       	movw	r28, r22
   8:	ba 01       	movw	r22, r20
   a:	14 96       	adiw	r26, 0x04	; 4
   c:	4d 91       	ld	r20, X+
   e:	5c 91       	ld	r21, X
  10:	15 97       	sbiw	r26, 0x05	; 5
  12:	20 e0       	ldi	r18, 0x00	; 0
  14:	30 e0       	ldi	r19, 0x00	; 0
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN15APDControlArray17firstControlByPinEii+0x18>
  18:	87 85       	ldd	r24, Z+15	; 0x0f
  1a:	90 89       	ldd	r25, Z+16	; 0x10
  1c:	86 17       	cp	r24, r22
  1e:	97 07       	cpc	r25, r23
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN15APDControlArray17firstControlByPinEii+0x22>
  22:	81 89       	ldd	r24, Z+17	; 0x11
  24:	92 89       	ldd	r25, Z+18	; 0x12
  26:	8c 17       	cp	r24, r28
  28:	9d 07       	cpc	r25, r29
      for (int i=0; i<this->iControlCount; i++) {
          if (this->pAPDControls[i] != NULL) {
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN15APDControlArray17firstControlByPinEii+0x2c>
  2c:	2f 5f       	subi	r18, 0xFF	; 255
  2e:	3f 4f       	sbci	r19, 0xFF	; 255
  30:	24 17       	cp	r18, r20
  32:	35 07       	cpc	r19, r21
  34:	04 f0       	brlt	.+0      	; 0x36 <_ZN15APDControlArray17firstControlByPinEii+0x36>
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
  36:	e0 e0       	ldi	r30, 0x00	; 0
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN15APDControlArray17firstControlByPinEii+0x3c>
  3c:	c9 01       	movw	r24, r18
  3e:	88 0f       	add	r24, r24
  40:	99 1f       	adc	r25, r25
  42:	12 96       	adiw	r26, 0x02	; 2
  44:	ed 91       	ld	r30, X+
              this->pAPDControls[i] = NULL;
  46:	fc 91       	ld	r31, X
  48:	13 97       	sbiw	r26, 0x03	; 3
  4a:	e8 0f       	add	r30, r24
  4c:	f9 1f       	adc	r31, r25
  4e:	01 90       	ld	r0, Z+
  50:	f0 81       	ld	r31, Z

APDControlArray::~APDControlArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
      for (int i=0; i<this->iControlCount; i++) {
  52:	e0 2d       	mov	r30, r0
  54:	30 97       	sbiw	r30, 0x00	; 0
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN15APDControlArray17firstControlByPinEii+0x58>
  58:	cf 01       	movw	r24, r30
  5a:	df 91       	pop	r29
  5c:	cf 91       	pop	r28
  5e:	08 95       	ret

Disassembly of section .text._ZN15APDControlArray7byIndexEi:

00000000 <_ZN15APDControlArray7byIndexEi>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	fc 01       	movw	r30, r24
   2:	77 fd       	sbrc	r23, 7
   4:	00 c0       	rjmp	.+0      	; 0x6 <_ZN15APDControlArray7byIndexEi+0x6>
   6:	84 81       	ldd	r24, Z+4	; 0x04
   8:	95 81       	ldd	r25, Z+5	; 0x05
   a:	86 17       	cp	r24, r22
   c:	97 07       	cpc	r25, r23
   e:	04 f0       	brlt	.+0      	; 0x10 <_ZN15APDControlArray7byIndexEi+0x10>
  10:	66 0f       	add	r22, r22
  12:	77 1f       	adc	r23, r23
  14:	02 80       	ldd	r0, Z+2	; 0x02
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	f3 81       	ldd	r31, Z+3	; 0x03
  18:	e0 2d       	mov	r30, r0
  1a:	e6 0f       	add	r30, r22
  1c:	f7 1f       	adc	r31, r23
  1e:	01 90       	ld	r0, Z+
  20:	f0 81       	ld	r31, Z
  22:	e0 2d       	mov	r30, r0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN15APDControlArray7byIndexEi+0x26>
  26:	e0 e0       	ldi	r30, 0x00	; 0
  28:	f0 e0       	ldi	r31, 0x00	; 0
      for (int i=0; i<this->iControlCount; i++) {
          if (this->pAPDControls[i] != NULL) {
  2a:	cf 01       	movw	r24, r30
  2c:	08 95       	ret

Disassembly of section .text._ZN15APDControlArray19findReusableControlEP6CDCONF:

00000000 <_ZN15APDControlArray19findReusableControlEP6CDCONF>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	9c 01       	movw	r18, r24
   6:	fb 01       	movw	r30, r22
   8:	85 85       	ldd	r24, Z+13	; 0x0d
   a:	96 85       	ldd	r25, Z+14	; 0x0e
   c:	03 97       	sbiw	r24, 0x03	; 3
   e:	01 f4       	brne	.+0      	; 0x10 <_ZN15APDControlArray19findReusableControlEP6CDCONF+0x10>
  10:	67 85       	ldd	r22, Z+15	; 0x0f
  12:	70 89       	ldd	r23, Z+16	; 0x10
  14:	c9 01       	movw	r24, r18
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	43 e0       	ldi	r20, 0x03	; 3
  18:	50 e0       	ldi	r21, 0x00	; 0
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray19findReusableControlEP6CDCONF>
  1e:	ec 01       	movw	r28, r24
  20:	00 97       	sbiw	r24, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN15APDControlArray19findReusableControlEP6CDCONF+0x24>
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray19findReusableControlEP6CDCONF>
      for (int i=0; i<this->iControlCount; i++) {
          if (this->pAPDControls[i] != NULL) {
  2c:	80 e0       	ldi	r24, 0x00	; 0
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	be 01       	movw	r22, r28
  32:	40 e1       	ldi	r20, 0x10	; 16
  34:	50 e0       	ldi	r21, 0x00	; 0
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray19findReusableControlEP6CDCONF>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN15APDControlArray19findReusableControlEP6CDCONF+0x3c>
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray19findReusableControlEP6CDCONF>
  44:	c0 e0       	ldi	r28, 0x00	; 0
              this->pAPDControls[i] = NULL;
  46:	d0 e0       	ldi	r29, 0x00	; 0
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray19findReusableControlEP6CDCONF>
  50:	ce 01       	movw	r24, r28

APDControlArray::~APDControlArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
      for (int i=0; i<this->iControlCount; i++) {
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text._ZN15APDControlArray10dumpToFileEP10APDStoragePc:

00000000 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	5f 92       	push	r5
   2:	6f 92       	push	r6
   4:	7f 92       	push	r7
   6:	8f 92       	push	r8
   8:	9f 92       	push	r9
   a:	af 92       	push	r10
   c:	bf 92       	push	r11
   e:	cf 92       	push	r12
  10:	df 92       	push	r13
  12:	ef 92       	push	r14
  14:	ff 92       	push	r15
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	0f 93       	push	r16
  18:	1f 93       	push	r17
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	c3 58       	subi	r28, 0x83	; 131
  24:	d0 40       	sbci	r29, 0x00	; 0
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	f8 94       	cli
      for (int i=0; i<this->iControlCount; i++) {
          if (this->pAPDControls[i] != NULL) {
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	0f be       	out	0x3f, r0	; 63
  2e:	cd bf       	out	0x3d, r28	; 61
  30:	6c 01       	movw	r12, r24
  32:	7b 01       	movw	r14, r22
  34:	8a 01       	movw	r16, r20
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
  36:	db 01       	movw	r26, r22
  38:	18 96       	adiw	r26, 0x08	; 8
  3a:	8d 91       	ld	r24, X+
  3c:	9c 91       	ld	r25, X
  3e:	19 97       	sbiw	r26, 0x09	; 9
  40:	ba 01       	movw	r22, r20
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
              this->pAPDControls[i] = NULL;
  46:	88 23       	and	r24, r24
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN15APDControlArray10dumpToFileEP10APDStoragePc+0x4a>
  4a:	f7 01       	movw	r30, r14
  4c:	80 85       	ldd	r24, Z+8	; 0x08
  4e:	91 85       	ldd	r25, Z+9	; 0x09
  50:	b8 01       	movw	r22, r16

APDControlArray::~APDControlArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
      for (int i=0; i<this->iControlCount; i++) {
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
  56:	7e 01       	movw	r14, r28
  58:	08 94       	sec
  5a:	e1 1c       	adc	r14, r1
  5c:	f1 1c       	adc	r15, r1
  5e:	c7 01       	movw	r24, r14
  60:	b8 01       	movw	r22, r16
  62:	42 e4       	ldi	r20, 0x42	; 66
          if (this->pAPDControls[i] != NULL) {
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
              this->pAPDControls[i] = NULL;
          }
      }
      free(this->pAPDControls);								// pAPDControls was malloc'd
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
  68:	88 85       	ldd	r24, Y+8	; 0x08
      this->pAPDControls = NULL;
  6a:	88 23       	and	r24, r24
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN15APDControlArray10dumpToFileEP10APDStoragePc+0x6e>
      this->iControlCount=0;
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc+0x70>
  70:	00 e0       	ldi	r16, 0x00	; 0
  }
}
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	30 e6       	ldi	r19, 0x60	; 96
  76:	53 2e       	mov	r5, r19
  78:	24 e2       	ldi	r18, 0x24	; 36
  7a:	62 2e       	mov	r6, r18
  7c:	71 2c       	mov	r7, r1
  7e:	6c 0e       	add	r6, r28
  80:	7d 1e       	adc	r7, r29
  82:	90 e2       	ldi	r25, 0x20	; 32
  84:	a9 2e       	mov	r10, r25
  86:	b1 2c       	mov	r11, r1
  88:	ac 0e       	add	r10, r28
  8a:	bd 1e       	adc	r11, r29
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	88 2e       	mov	r8, r24
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	98 2e       	mov	r9, r24
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc+0x96>
  96:	18 a2       	std	Y+32, r1	; 0x20
  98:	19 a2       	std	Y+33, r1	; 0x21
  9a:	1a a2       	std	Y+34, r1	; 0x22
  9c:	1b a2       	std	Y+35, r1	; 0x23
  9e:	d3 01       	movw	r26, r6
  a0:	e5 2d       	mov	r30, r5
  a2:	1d 92       	st	X+, r1
  a4:	ea 95       	dec	r30
  a6:	01 f4       	brne	.+0      	; 0xa8 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc+0xa8>
  a8:	c8 01       	movw	r24, r16
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	d6 01       	movw	r26, r12
  b0:	12 96       	adiw	r26, 0x02	; 2
  b2:	ed 91       	ld	r30, X+
  b4:	fc 91       	ld	r31, X
  b6:	13 97       	sbiw	r26, 0x03	; 3
  b8:	e8 0f       	add	r30, r24
  ba:	f9 1f       	adc	r31, r25
  bc:	01 90       	ld	r0, Z+
  be:	f0 81       	ld	r31, Z
  c0:	e0 2d       	mov	r30, r0
  c2:	8d b7       	in	r24, 0x3d	; 61
  c4:	9e b7       	in	r25, 0x3e	; 62
  c6:	0c 97       	sbiw	r24, 0x0c	; 12
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	9e bf       	out	0x3e, r25	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	8d bf       	out	0x3d, r24	; 61
  d2:	2d b7       	in	r18, 0x3d	; 61
  d4:	3e b7       	in	r19, 0x3e	; 62
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	ad b7       	in	r26, 0x3d	; 61
  dc:	be b7       	in	r27, 0x3e	; 62
  de:	12 96       	adiw	r26, 0x02	; 2
  e0:	bc 92       	st	X, r11
  e2:	ae 92       	st	-X, r10
  e4:	11 97       	sbiw	r26, 0x01	; 1
  e6:	d9 01       	movw	r26, r18
  e8:	13 96       	adiw	r26, 0x03	; 3
  ea:	9c 92       	st	X, r9
  ec:	8e 92       	st	-X, r8
  ee:	12 97       	sbiw	r26, 0x02	; 2
  f0:	32 96       	adiw	r30, 0x02	; 2
  f2:	15 96       	adiw	r26, 0x05	; 5
  f4:	fc 93       	st	X, r31
  f6:	ee 93       	st	-X, r30
  f8:	14 97       	sbiw	r26, 0x04	; 4
  fa:	32 97       	sbiw	r30, 0x02	; 2
  fc:	87 85       	ldd	r24, Z+15	; 0x0f
  fe:	90 89       	ldd	r25, Z+16	; 0x10
 100:	17 96       	adiw	r26, 0x07	; 7
 102:	9c 93       	st	X, r25
 104:	8e 93       	st	-X, r24
 106:	16 97       	sbiw	r26, 0x06	; 6
 108:	81 89       	ldd	r24, Z+17	; 0x11
 10a:	92 89       	ldd	r25, Z+18	; 0x12
 10c:	19 96       	adiw	r26, 0x09	; 9
 10e:	9c 93       	st	X, r25
 110:	8e 93       	st	-X, r24
 112:	18 97       	sbiw	r26, 0x08	; 8
 114:	83 89       	ldd	r24, Z+19	; 0x13
 116:	94 89       	ldd	r25, Z+20	; 0x14
 118:	1b 96       	adiw	r26, 0x0b	; 11
 11a:	9c 93       	st	X, r25
 11c:	8e 93       	st	-X, r24
 11e:	1a 97       	sbiw	r26, 0x0a	; 10
 120:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
 124:	ed b7       	in	r30, 0x3d	; 61
 126:	fe b7       	in	r31, 0x3e	; 62
 128:	3c 96       	adiw	r30, 0x0c	; 12
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	fe bf       	out	0x3e, r31	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	ed bf       	out	0x3d, r30	; 61
 134:	c7 01       	movw	r24, r14
 136:	b5 01       	movw	r22, r10
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
 13c:	0f 5f       	subi	r16, 0xFF	; 255
 13e:	1f 4f       	sbci	r17, 0xFF	; 255
 140:	d6 01       	movw	r26, r12
 142:	14 96       	adiw	r26, 0x04	; 4
 144:	8d 91       	ld	r24, X+
 146:	9c 91       	ld	r25, X
 148:	15 97       	sbiw	r26, 0x05	; 5
 14a:	08 17       	cp	r16, r24
 14c:	19 07       	cpc	r17, r25
 14e:	04 f4       	brge	.+0      	; 0x150 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc+0x150>
 150:	00 c0       	rjmp	.+0      	; 0x152 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc+0x152>
 152:	ce 01       	movw	r24, r28
 154:	05 96       	adiw	r24, 0x05	; 5
 156:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <_ZN15APDControlArray10dumpToFileEP10APDStoragePc+0x15c>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	b8 01       	movw	r22, r16
 16a:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
 176:	88 85       	ldd	r24, Y+8	; 0x08
 178:	88 23       	and	r24, r24
 17a:	01 f0       	breq	.+0      	; 0x17c <_ZN15APDControlArray10dumpToFileEP10APDStoragePc+0x17c>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	9a 83       	std	Y+2, r25	; 0x02
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	ce 01       	movw	r24, r28
 186:	05 96       	adiw	r24, 0x05	; 5
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray10dumpToFileEP10APDStoragePc>
 18c:	cd 57       	subi	r28, 0x7D	; 125
 18e:	df 4f       	sbci	r29, 0xFF	; 255
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	cf 91       	pop	r28
 19c:	df 91       	pop	r29
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	bf 90       	pop	r11
 1ac:	af 90       	pop	r10
 1ae:	9f 90       	pop	r9
 1b0:	8f 90       	pop	r8
 1b2:	7f 90       	pop	r7
 1b4:	6f 90       	pop	r6
 1b6:	5f 90       	pop	r5
 1b8:	08 95       	ret

Disassembly of section .text._ZN15APDControlArray12loadControlsEP10APDStorage:

00000000 <_ZN15APDControlArray12loadControlsEP10APDStorage>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	8a 81       	ldd	r24, Y+2	; 0x02
   e:	9b 81       	ldd	r25, Y+3	; 0x03
  10:	89 2b       	or	r24, r25
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN15APDControlArray12loadControlsEP10APDStorage+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN15APDControlArray12loadControlsEP10APDStorage+0x16>
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray12loadControlsEP10APDStorage>
  1e:	9d 83       	std	Y+5, r25	; 0x05
  20:	8c 83       	std	Y+4, r24	; 0x04
  22:	97 fd       	sbrc	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN15APDControlArray12loadControlsEP10APDStorage+0x26>
  26:	88 0f       	add	r24, r24
  28:	99 1f       	adc	r25, r25
      for (int i=0; i<this->iControlCount; i++) {
          if (this->pAPDControls[i] != NULL) {
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray12loadControlsEP10APDStorage>
  2e:	9b 83       	std	Y+3, r25	; 0x03
  30:	8a 83       	std	Y+2, r24	; 0x02
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN15APDControlArray12loadControlsEP10APDStorage+0x36>
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN15APDControlArray12loadControlsEP10APDStorage+0x38>
  38:	2c 81       	ldd	r18, Y+4	; 0x04
  3a:	3d 81       	ldd	r19, Y+5	; 0x05
  3c:	22 0f       	add	r18, r18
  3e:	33 1f       	adc	r19, r19
  40:	60 e0       	ldi	r22, 0x00	; 0
  42:	70 e0       	ldi	r23, 0x00	; 0
  44:	a9 01       	movw	r20, r18
              this->pAPDControls[i] = NULL;
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray12loadControlsEP10APDStorage>
  4a:	c8 01       	movw	r24, r16
  4c:	60 e0       	ldi	r22, 0x00	; 0
  4e:	70 e0       	ldi	r23, 0x00	; 0
  50:	40 e0       	ldi	r20, 0x00	; 0

APDControlArray::~APDControlArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
      for (int i=0; i<this->iControlCount; i++) {
  52:	50 e0       	ldi	r21, 0x00	; 0
  54:	9e 01       	movw	r18, r28
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray12loadControlsEP10APDStorage>
  5a:	00 e0       	ldi	r16, 0x00	; 0
  5c:	10 e0       	ldi	r17, 0x00	; 0
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZN15APDControlArray12loadControlsEP10APDStorage+0x60>
  60:	c8 01       	movw	r24, r16
  62:	88 0f       	add	r24, r24
          if (this->pAPDControls[i] != NULL) {
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
              this->pAPDControls[i] = NULL;
          }
      }
      free(this->pAPDControls);								// pAPDControls was malloc'd
  64:	99 1f       	adc	r25, r25
  66:	ea 81       	ldd	r30, Y+2	; 0x02
  68:	fb 81       	ldd	r31, Y+3	; 0x03
      this->pAPDControls = NULL;
  6a:	e8 0f       	add	r30, r24
  6c:	f9 1f       	adc	r31, r25
      this->iControlCount=0;
  6e:	a0 81       	ld	r26, Z
  70:	b1 81       	ldd	r27, Z+1	; 0x01
  }
}
  72:	10 97       	sbiw	r26, 0x00	; 0
  74:	01 f0       	breq	.+0      	; 0x76 <_ZN15APDControlArray12loadControlsEP10APDStorage+0x76>
  76:	1f 96       	adiw	r26, 0x0f	; 15
  78:	8d 91       	ld	r24, X+
  7a:	9c 91       	ld	r25, X
  7c:	50 97       	sbiw	r26, 0x10	; 16
  7e:	8f 37       	cpi	r24, 0x7F	; 127
  80:	91 05       	cpc	r25, r1
  82:	01 f4       	brne	.+0      	; 0x84 <_ZN15APDControlArray12loadControlsEP10APDStorage+0x84>
  84:	51 96       	adiw	r26, 0x11	; 17
  86:	2d 91       	ld	r18, X+
  88:	3c 91       	ld	r19, X
  8a:	52 97       	sbiw	r26, 0x12	; 18
  8c:	c9 01       	movw	r24, r18
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	09 97       	sbiw	r24, 0x09	; 9
  92:	00 f4       	brcc	.+0      	; 0x94 <_ZN15APDControlArray12loadControlsEP10APDStorage+0x94>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	ee 81       	ldd	r30, Y+6	; 0x06
  9a:	ff 81       	ldd	r31, Y+7	; 0x07
  9c:	e2 0f       	add	r30, r18
  9e:	f3 1f       	adc	r31, r19
  a0:	01 90       	ld	r0, Z+
  a2:	f0 81       	ld	r31, Z
  a4:	e0 2d       	mov	r30, r0
  a6:	30 97       	sbiw	r30, 0x00	; 0
  a8:	01 f0       	breq	.+0      	; 0xaa <_ZN15APDControlArray12loadControlsEP10APDStorage+0xaa>
  aa:	d6 96       	adiw	r26, 0x36	; 54
  ac:	fc 93       	st	X, r31
  ae:	ee 93       	st	-X, r30
  b0:	d5 97       	sbiw	r26, 0x35	; 53
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN15APDControlArray12loadControlsEP10APDStorage+0xb4>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	00 c0       	rjmp	.+0      	; 0xba <_ZN15APDControlArray12loadControlsEP10APDStorage+0xba>
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray12loadControlsEP10APDStorage>
  c2:	0f 5f       	subi	r16, 0xFF	; 255
  c4:	1f 4f       	sbci	r17, 0xFF	; 255
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	9d 81       	ldd	r25, Y+5	; 0x05
  ca:	08 17       	cp	r16, r24
  cc:	19 07       	cpc	r17, r25
  ce:	04 f0       	brlt	.+0      	; 0xd0 <_ZN15APDControlArray12loadControlsEP10APDStorage+0xd0>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_ZN15APDControlArray12loadControlsEP10APDStorage+0xd2>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <_ZN15APDControlArray12loadControlsEP10APDStorage+0xd8>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	00 c0       	rjmp	.+0      	; 0xde <_ZN15APDControlArray12loadControlsEP10APDStorage+0xde>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray12loadControlsEP10APDStorage>
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	08 95       	ret

Disassembly of section .text._ZN15APDControlArray18new_control_parserEPviPc:

00000000 <_ZN15APDControlArray18new_control_parserEPviPc>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	ad 97       	sbiw	r28, 0x2d	; 45
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	e8 2e       	mov	r14, r24
      for (int i=0; i<this->iControlCount; i++) {
          if (this->pAPDControls[i] != NULL) {
  2a:	c9 2e       	mov	r12, r25
  2c:	4b 01       	movw	r8, r22
  2e:	8a 01       	movw	r16, r20
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	60 e0       	ldi	r22, 0x00	; 0
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
  36:	70 e0       	ldi	r23, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray18new_control_parserEPviPc>
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	b8 01       	movw	r22, r16
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray18new_control_parserEPviPc>
              this->pAPDControls[i] = NULL;
  46:	8d b7       	in	r24, 0x3d	; 61
  48:	9e b7       	in	r25, 0x3e	; 62
  4a:	40 97       	sbiw	r24, 0x10	; 16
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	9e bf       	out	0x3e, r25	; 62

APDControlArray::~APDControlArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
      for (int i=0; i<this->iControlCount; i++) {
  52:	0f be       	out	0x3f, r0	; 63
  54:	8d bf       	out	0x3d, r24	; 61
  56:	ed b7       	in	r30, 0x3d	; 61
  58:	fe b7       	in	r31, 0x3e	; 62
  5a:	31 96       	adiw	r30, 0x01	; 1
  5c:	ad b7       	in	r26, 0x3d	; 61
  5e:	be b7       	in	r27, 0x3e	; 62
  60:	12 96       	adiw	r26, 0x02	; 2
  62:	1c 93       	st	X, r17
          if (this->pAPDControls[i] != NULL) {
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
              this->pAPDControls[i] = NULL;
          }
      }
      free(this->pAPDControls);								// pAPDControls was malloc'd
  64:	0e 93       	st	-X, r16
  66:	11 97       	sbiw	r26, 0x01	; 1
  68:	80 e0       	ldi	r24, 0x00	; 0
      this->pAPDControls = NULL;
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	93 83       	std	Z+3, r25	; 0x03
      this->iControlCount=0;
  6e:	82 83       	std	Z+2, r24	; 0x02
  70:	ce 01       	movw	r24, r28
  }
}
  72:	01 96       	adiw	r24, 0x01	; 1
  74:	95 83       	std	Z+5, r25	; 0x05
  76:	84 83       	std	Z+4, r24	; 0x04
  78:	ce 01       	movw	r24, r28
  7a:	0e 96       	adiw	r24, 0x0e	; 14
  7c:	97 83       	std	Z+7, r25	; 0x07
  7e:	86 83       	std	Z+6, r24	; 0x06
  80:	ce 01       	movw	r24, r28
  82:	40 96       	adiw	r24, 0x10	; 16
  84:	91 87       	std	Z+9, r25	; 0x09
  86:	80 87       	std	Z+8, r24	; 0x08
  88:	ce 01       	movw	r24, r28
  8a:	42 96       	adiw	r24, 0x12	; 18
  8c:	93 87       	std	Z+11, r25	; 0x0b
  8e:	82 87       	std	Z+10, r24	; 0x0a
  90:	ce 01       	movw	r24, r28
  92:	44 96       	adiw	r24, 0x14	; 20
  94:	95 87       	std	Z+13, r25	; 0x0d
  96:	84 87       	std	Z+12, r24	; 0x0c
  98:	8e 01       	movw	r16, r28
  9a:	0a 5e       	subi	r16, 0xEA	; 234
  9c:	1f 4f       	sbci	r17, 0xFF	; 255
  9e:	17 87       	std	Z+15, r17	; 0x0f
  a0:	06 87       	std	Z+14, r16	; 0x0e
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray18new_control_parserEPviPc>
  a6:	5c 01       	movw	r10, r24
  a8:	ed b7       	in	r30, 0x3d	; 61
  aa:	fe b7       	in	r31, 0x3e	; 62
  ac:	70 96       	adiw	r30, 0x10	; 16
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	fe bf       	out	0x3e, r31	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	ed bf       	out	0x3d, r30	; 61
  b8:	86 30       	cpi	r24, 0x06	; 6
  ba:	91 05       	cpc	r25, r1
  bc:	04 f4       	brge	.+0      	; 0xbe <_ZN15APDControlArray18new_control_parserEPviPc+0xbe>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray18new_control_parserEPviPc>
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	d8 01       	movw	r26, r16
  ca:	1d 92       	st	X+, r1
  cc:	8a 95       	dec	r24
  ce:	01 f4       	brne	.+0      	; 0xd0 <_ZN15APDControlArray18new_control_parserEPviPc+0xd0>
  d0:	b5 e0       	ldi	r27, 0x05	; 5
  d2:	ab 16       	cp	r10, r27
  d4:	b1 04       	cpc	r11, r1
  d6:	01 f0       	breq	.+0      	; 0xd8 <_ZN15APDControlArray18new_control_parserEPviPc+0xd8>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray18new_control_parserEPviPc>
  e0:	1d 8a       	std	Y+21, r1	; 0x15
  e2:	1c 8a       	std	Y+20, r1	; 0x14
  e4:	0e 2d       	mov	r16, r14
  e6:	1c 2d       	mov	r17, r12
  e8:	c8 01       	movw	r24, r16
  ea:	7e 01       	movw	r14, r28
  ec:	08 94       	sec
  ee:	e1 1c       	adc	r14, r1
  f0:	f1 1c       	adc	r15, r1
  f2:	b7 01       	movw	r22, r14
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray18new_control_parserEPviPc>
  f8:	6c 01       	movw	r12, r24
  fa:	8a e3       	ldi	r24, 0x3A	; 58
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray18new_control_parserEPviPc>
 102:	b8 2e       	mov	r11, r24
 104:	a9 2e       	mov	r10, r25
 106:	b7 01       	movw	r22, r14
 108:	a6 01       	movw	r20, r12
 10a:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArray18new_control_parserEPviPc>
 10e:	88 0c       	add	r8, r8
 110:	99 1c       	adc	r9, r9
 112:	d8 01       	movw	r26, r16
 114:	12 96       	adiw	r26, 0x02	; 2
 116:	ed 91       	ld	r30, X+
 118:	fc 91       	ld	r31, X
 11a:	13 97       	sbiw	r26, 0x03	; 3
 11c:	e8 0d       	add	r30, r8
 11e:	f9 1d       	adc	r31, r9
 120:	b0 82       	st	Z, r11
 122:	a1 82       	std	Z+1, r10	; 0x01
 124:	ad 96       	adiw	r28, 0x2d	; 45
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	cf 91       	pop	r28
 132:	df 91       	pop	r29
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	ef 90       	pop	r14
 13c:	df 90       	pop	r13
 13e:	cf 90       	pop	r12
 140:	bf 90       	pop	r11
 142:	af 90       	pop	r10
 144:	9f 90       	pop	r9
 146:	8f 90       	pop	r8
 148:	08 95       	ret

Disassembly of section .text._ZN15APDControlArrayD1Ev:

00000000 <_ZN15APDControlArrayD1Ev>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	8a 81       	ldd	r24, Y+2	; 0x02
  18:	9b 81       	ldd	r25, Y+3	; 0x03
  1a:	89 2b       	or	r24, r25
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN15APDControlArrayD1Ev+0x1e>
  1e:	00 e0       	ldi	r16, 0x00	; 0
  20:	10 e0       	ldi	r17, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN15APDControlArrayD1Ev+0x24>
  24:	78 01       	movw	r14, r16
  26:	ee 0c       	add	r14, r14
  28:	ff 1c       	adc	r15, r15
      for (int i=0; i<this->iControlCount; i++) {
          if (this->pAPDControls[i] != NULL) {
  2a:	ee 0d       	add	r30, r14
  2c:	ff 1d       	adc	r31, r15
  2e:	a0 81       	ld	r26, Z
  30:	b1 81       	ldd	r27, Z+1	; 0x01
  32:	10 97       	sbiw	r26, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN15APDControlArrayD1Ev+0x36>
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
  36:	ed 91       	ld	r30, X+
  38:	fc 91       	ld	r31, X
  3a:	11 97       	sbiw	r26, 0x01	; 1
  3c:	02 80       	ldd	r0, Z+2	; 0x02
  3e:	f3 81       	ldd	r31, Z+3	; 0x03
  40:	e0 2d       	mov	r30, r0
  42:	cd 01       	movw	r24, r26
  44:	19 95       	eicall
              this->pAPDControls[i] = NULL;
  46:	ea 81       	ldd	r30, Y+2	; 0x02
  48:	fb 81       	ldd	r31, Y+3	; 0x03
  4a:	ee 0d       	add	r30, r14
  4c:	ff 1d       	adc	r31, r15
  4e:	11 82       	std	Z+1, r1	; 0x01
  50:	10 82       	st	Z, r1

APDControlArray::~APDControlArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
      for (int i=0; i<this->iControlCount; i++) {
  52:	0f 5f       	subi	r16, 0xFF	; 255
  54:	1f 4f       	sbci	r17, 0xFF	; 255
  56:	8c 81       	ldd	r24, Y+4	; 0x04
  58:	9d 81       	ldd	r25, Y+5	; 0x05
  5a:	ea 81       	ldd	r30, Y+2	; 0x02
  5c:	fb 81       	ldd	r31, Y+3	; 0x03
  5e:	08 17       	cp	r16, r24
  60:	19 07       	cpc	r17, r25
  62:	04 f0       	brlt	.+0      	; 0x64 <_ZN15APDControlArrayD1Ev+0x64>
          if (this->pAPDControls[i] != NULL) {
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
              this->pAPDControls[i] = NULL;
          }
      }
      free(this->pAPDControls);								// pAPDControls was malloc'd
  64:	cf 01       	movw	r24, r30
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArrayD1Ev>
      this->pAPDControls = NULL;
  6a:	1b 82       	std	Y+3, r1	; 0x03
  6c:	1a 82       	std	Y+2, r1	; 0x02
      this->iControlCount=0;
  6e:	1d 82       	std	Y+5, r1	; 0x05
  70:	1c 82       	std	Y+4, r1	; 0x04
  }
}
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	08 95       	ret

Disassembly of section .text._ZN15APDControlArrayD2Ev:

00000000 <_ZN15APDControlArrayD2Ev>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	8a 81       	ldd	r24, Y+2	; 0x02
  18:	9b 81       	ldd	r25, Y+3	; 0x03
  1a:	89 2b       	or	r24, r25
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN15APDControlArrayD2Ev+0x1e>
  1e:	00 e0       	ldi	r16, 0x00	; 0
  20:	10 e0       	ldi	r17, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN15APDControlArrayD2Ev+0x24>
  24:	78 01       	movw	r14, r16
  26:	ee 0c       	add	r14, r14
  28:	ff 1c       	adc	r15, r15
      for (int i=0; i<this->iControlCount; i++) {
          if (this->pAPDControls[i] != NULL) {
  2a:	ee 0d       	add	r30, r14
  2c:	ff 1d       	adc	r31, r15
  2e:	a0 81       	ld	r26, Z
  30:	b1 81       	ldd	r27, Z+1	; 0x01
  32:	10 97       	sbiw	r26, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN15APDControlArrayD2Ev+0x36>
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
  36:	ed 91       	ld	r30, X+
  38:	fc 91       	ld	r31, X
  3a:	11 97       	sbiw	r26, 0x01	; 1
  3c:	02 80       	ldd	r0, Z+2	; 0x02
  3e:	f3 81       	ldd	r31, Z+3	; 0x03
  40:	e0 2d       	mov	r30, r0
  42:	cd 01       	movw	r24, r26
  44:	19 95       	eicall
              this->pAPDControls[i] = NULL;
  46:	ea 81       	ldd	r30, Y+2	; 0x02
  48:	fb 81       	ldd	r31, Y+3	; 0x03
  4a:	ee 0d       	add	r30, r14
  4c:	ff 1d       	adc	r31, r15
  4e:	11 82       	std	Z+1, r1	; 0x01
  50:	10 82       	st	Z, r1

APDControlArray::~APDControlArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
      for (int i=0; i<this->iControlCount; i++) {
  52:	0f 5f       	subi	r16, 0xFF	; 255
  54:	1f 4f       	sbci	r17, 0xFF	; 255
  56:	8c 81       	ldd	r24, Y+4	; 0x04
  58:	9d 81       	ldd	r25, Y+5	; 0x05
  5a:	ea 81       	ldd	r30, Y+2	; 0x02
  5c:	fb 81       	ldd	r31, Y+3	; 0x03
  5e:	08 17       	cp	r16, r24
  60:	19 07       	cpc	r17, r25
  62:	04 f0       	brlt	.+0      	; 0x64 <_ZN15APDControlArrayD2Ev+0x64>
          if (this->pAPDControls[i] != NULL) {
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
              this->pAPDControls[i] = NULL;
          }
      }
      free(this->pAPDControls);								// pAPDControls was malloc'd
  64:	cf 01       	movw	r24, r30
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArrayD2Ev>
      this->pAPDControls = NULL;
  6a:	1b 82       	std	Y+3, r1	; 0x03
  6c:	1a 82       	std	Y+2, r1	; 0x02
      this->iControlCount=0;
  6e:	1d 82       	std	Y+5, r1	; 0x05
  70:	1c 82       	std	Y+4, r1	; 0x04
  }
}
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	08 95       	ret

Disassembly of section .text._ZN15APDControlArrayD0Ev:

00000000 <_ZN15APDControlArrayD0Ev>:
  this->pAPDControls = NULL;
  this->iControlCount = 0;
  this->pcustfuncs = (void **)pcustomfunctions;
}

APDControlArray::~APDControlArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
  16:	8a 81       	ldd	r24, Y+2	; 0x02
  18:	9b 81       	ldd	r25, Y+3	; 0x03
  1a:	89 2b       	or	r24, r25
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN15APDControlArrayD0Ev+0x1e>
  1e:	00 e0       	ldi	r16, 0x00	; 0
  20:	10 e0       	ldi	r17, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN15APDControlArrayD0Ev+0x24>
  24:	78 01       	movw	r14, r16
  26:	ee 0c       	add	r14, r14
  28:	ff 1c       	adc	r15, r15
      for (int i=0; i<this->iControlCount; i++) {
          if (this->pAPDControls[i] != NULL) {
  2a:	ee 0d       	add	r30, r14
  2c:	ff 1d       	adc	r31, r15
  2e:	a0 81       	ld	r26, Z
  30:	b1 81       	ldd	r27, Z+1	; 0x01
  32:	10 97       	sbiw	r26, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN15APDControlArrayD0Ev+0x36>
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
  36:	ed 91       	ld	r30, X+
  38:	fc 91       	ld	r31, X
  3a:	11 97       	sbiw	r26, 0x01	; 1
  3c:	02 80       	ldd	r0, Z+2	; 0x02
  3e:	f3 81       	ldd	r31, Z+3	; 0x03
  40:	e0 2d       	mov	r30, r0
  42:	cd 01       	movw	r24, r26
  44:	19 95       	eicall
              this->pAPDControls[i] = NULL;
  46:	ea 81       	ldd	r30, Y+2	; 0x02
  48:	fb 81       	ldd	r31, Y+3	; 0x03
  4a:	ee 0d       	add	r30, r14
  4c:	ff 1d       	adc	r31, r15
  4e:	11 82       	std	Z+1, r1	; 0x01
  50:	10 82       	st	Z, r1

APDControlArray::~APDControlArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDControls != NULL) {
      for (int i=0; i<this->iControlCount; i++) {
  52:	0f 5f       	subi	r16, 0xFF	; 255
  54:	1f 4f       	sbci	r17, 0xFF	; 255
  56:	8c 81       	ldd	r24, Y+4	; 0x04
  58:	9d 81       	ldd	r25, Y+5	; 0x05
  5a:	ea 81       	ldd	r30, Y+2	; 0x02
  5c:	fb 81       	ldd	r31, Y+3	; 0x03
  5e:	08 17       	cp	r16, r24
  60:	19 07       	cpc	r17, r25
  62:	04 f0       	brlt	.+0      	; 0x64 <_ZN15APDControlArrayD0Ev+0x64>
          if (this->pAPDControls[i] != NULL) {
              delete(this->pAPDControls[i]);		// each Control was new by 'new_control_parser'
              this->pAPDControls[i] = NULL;
          }
      }
      free(this->pAPDControls);								// pAPDControls was malloc'd
  64:	cf 01       	movw	r24, r30
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArrayD0Ev>
      this->pAPDControls = NULL;
  6a:	1b 82       	std	Y+3, r1	; 0x03
  6c:	1a 82       	std	Y+2, r1	; 0x02
      this->iControlCount=0;
  6e:	1d 82       	std	Y+5, r1	; 0x05
  70:	1c 82       	std	Y+4, r1	; 0x04
  }
}
  72:	ce 01       	movw	r24, r28
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN15APDControlArrayD0Ev>
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	1f 91       	pop	r17
  7e:	0f 91       	pop	r16
  80:	ff 90       	pop	r15
  82:	ef 90       	pop	r14
  84:	08 95       	ret

APDEvaluator.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000078  2**0
                  ALLOC
  3 .stab         00001a58  00000000  00000000  00000078  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00004bd1  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN12APDEvaluatorC2EP14APDSensorArrayP15APDControlArray 00000018  00000000  00000000  000066a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN12APDEvaluatorC1EP14APDSensorArrayP15APDControlArray 00000018  00000000  00000000  000066b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN12APDEvaluatorD2Ev 0000000c  00000000  00000000  000066d1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN12APDEvaluatorD1Ev 0000000c  00000000  00000000  000066dd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN12APDEvaluator8evaluateEP10expression 00000330  00000000  00000000  000066e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN12APDEvaluator11parse_errorEPKc 00000118  00000000  00000000  00006a19  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN12APDEvaluator6proc_fEPKc 000000d4  00000000  00000000  00006b31  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN12APDEvaluator6proc_iEPKc 00000064  00000000  00000000  00006c05  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN12APDEvaluator6proc_cEPKcc 00000032  00000000  00000000  00006c69  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN12APDEvaluator10expressionEPKc 0000006a  00000000  00000000  00006c9b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN12APDEvaluator6factorEPKcP10expression 000000fe  00000000  00000000  00006d05  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN12APDEvaluator12factor_rightEPKcP10expression 0000010e  00000000  00000000  00006e03  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN12APDEvaluator4termEPKcP10expression 00000054  00000000  00000000  00006f11  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN12APDEvaluator10term_rightEPKcP10expression 000000f4  00000000  00000000  00006f65  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN12APDEvaluator5fevalEPc 00000056  00000000  00000000  00007059  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN12APDEvaluator11dothatstuffEPc 00000066  00000000  00000000  000070af  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN12APDEvaluatorD0Ev 00000012  00000000  00000000  00007115  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .rodata._ZTV12APDEvaluator 00000008  00000000  00000000  00007127  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 23 .progmem.data 00000009  00000000  00000000  0000712f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN12APDEvaluatorC2EP14APDSensorArrayP15APDControlArray:

00000000 <_ZN12APDEvaluatorC2EP14APDSensorArrayP15APDControlArray>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub

}
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	75 83       	std	Z+5, r23	; 0x05
  10:	64 83       	std	Z+4, r22	; 0x04
  12:	57 83       	std	Z+7, r21	; 0x07
  14:	46 83       	std	Z+6, r20	; 0x06
  16:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluatorC1EP14APDSensorArrayP15APDControlArray:

00000000 <_ZN12APDEvaluatorC1EP14APDSensorArrayP15APDControlArray>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub

}
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	75 83       	std	Z+5, r23	; 0x05
  10:	64 83       	std	Z+4, r22	; 0x04
  12:	57 83       	std	Z+7, r21	; 0x07
  14:	46 83       	std	Z+6, r20	; 0x06
  16:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluatorD2Ev:

00000000 <_ZN12APDEvaluatorD2Ev>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub

}
   a:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluatorD1Ev:

00000000 <_ZN12APDEvaluatorD1Ev>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub

}
   a:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator8evaluateEP10expression:

00000000 <_ZN12APDEvaluator8evaluateEP10expression>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
	// TODO Auto-generated destructor stub

}
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	ec 01       	movw	r28, r24
  1a:	6b 01       	movw	r12, r22
  1c:	fb 01       	movw	r30, r22
  1e:	80 81       	ld	r24, Z
  20:	8c 33       	cpi	r24, 0x3C	; 60
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN12APDEvaluator8evaluateEP10expression+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN12APDEvaluator8evaluateEP10expression+0x26>
  26:	8d 33       	cpi	r24, 0x3D	; 61
  28:	04 f4       	brge	.+0      	; 0x2a <_ZN12APDEvaluator8evaluateEP10expression+0x2a>
  2a:	8a 32       	cpi	r24, 0x2A	; 42
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN12APDEvaluator8evaluateEP10expression+0x2e>
  2e:	8b 32       	cpi	r24, 0x2B	; 43
  30:	04 f4       	brge	.+0      	; 0x32 <_ZN12APDEvaluator8evaluateEP10expression+0x32>
  32:	86 32       	cpi	r24, 0x26	; 38
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN12APDEvaluator8evaluateEP10expression+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN12APDEvaluator8evaluateEP10expression+0x38>
  38:	88 32       	cpi	r24, 0x28	; 40
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN12APDEvaluator8evaluateEP10expression+0x3c>
  3c:	85 32       	cpi	r24, 0x25	; 37
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN12APDEvaluator8evaluateEP10expression+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN12APDEvaluator8evaluateEP10expression+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN12APDEvaluator8evaluateEP10expression+0x44>
  44:	8d 32       	cpi	r24, 0x2D	; 45
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN12APDEvaluator8evaluateEP10expression+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN12APDEvaluator8evaluateEP10expression+0x4a>
  4a:	8f 32       	cpi	r24, 0x2F	; 47
  4c:	01 f0       	breq	.+0      	; 0x4e <_ZN12APDEvaluator8evaluateEP10expression+0x4e>
  4e:	8b 32       	cpi	r24, 0x2B	; 43
  50:	01 f0       	breq	.+0      	; 0x52 <_ZN12APDEvaluator8evaluateEP10expression+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN12APDEvaluator8evaluateEP10expression+0x54>
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZN12APDEvaluator8evaluateEP10expression+0x56>
  56:	8d 35       	cpi	r24, 0x5D	; 93
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN12APDEvaluator8evaluateEP10expression+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN12APDEvaluator8evaluateEP10expression+0x5c>
  5c:	8e 35       	cpi	r24, 0x5E	; 94
  5e:	04 f4       	brge	.+0      	; 0x60 <_ZN12APDEvaluator8evaluateEP10expression+0x60>
  60:	8e 33       	cpi	r24, 0x3E	; 62
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN12APDEvaluator8evaluateEP10expression+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN12APDEvaluator8evaluateEP10expression+0x66>
  66:	8e 33       	cpi	r24, 0x3E	; 62
  68:	04 f4       	brge	.+0      	; 0x6a <_ZN12APDEvaluator8evaluateEP10expression+0x6a>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN12APDEvaluator8evaluateEP10expression+0x6c>
  6c:	8b 35       	cpi	r24, 0x5B	; 91
  6e:	01 f0       	breq	.+0      	; 0x70 <_ZN12APDEvaluator8evaluateEP10expression+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZN12APDEvaluator8evaluateEP10expression+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZN12APDEvaluator8evaluateEP10expression+0x74>
  74:	84 36       	cpi	r24, 0x64	; 100
  76:	01 f4       	brne	.+0      	; 0x78 <_ZN12APDEvaluator8evaluateEP10expression+0x78>
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZN12APDEvaluator8evaluateEP10expression+0x7a>
  7a:	8c 37       	cpi	r24, 0x7C	; 124
  7c:	01 f0       	breq	.+0      	; 0x7e <_ZN12APDEvaluator8evaluateEP10expression+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN12APDEvaluator8evaluateEP10expression+0x80>
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN12APDEvaluator8evaluateEP10expression+0x82>
  82:	fb 01       	movw	r30, r22
  84:	61 81       	ldd	r22, Z+1	; 0x01
  86:	72 81       	ldd	r23, Z+2	; 0x02
  88:	ce 01       	movw	r24, r28
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
  8e:	b6 2e       	mov	r11, r22
  90:	e7 2e       	mov	r14, r23
  92:	8c 01       	movw	r16, r24
  94:	f6 01       	movw	r30, r12
  96:	81 81       	ldd	r24, Z+1	; 0x01
  98:	92 81       	ldd	r25, Z+2	; 0x02
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_ZN12APDEvaluator8evaluateEP10expression+0x9c>
  9c:	fb 01       	movw	r30, r22
  9e:	61 81       	ldd	r22, Z+1	; 0x01
  a0:	72 81       	ldd	r23, Z+2	; 0x02
  a2:	ce 01       	movw	r24, r28
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
  a8:	7b 01       	movw	r14, r22
  aa:	8c 01       	movw	r16, r24
  ac:	f6 01       	movw	r30, r12
  ae:	63 81       	ldd	r22, Z+3	; 0x03
  b0:	74 81       	ldd	r23, Z+4	; 0x04
  b2:	ce 01       	movw	r24, r28
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
  b8:	9b 01       	movw	r18, r22
  ba:	ac 01       	movw	r20, r24
  bc:	c8 01       	movw	r24, r16
  be:	b7 01       	movw	r22, r14
  c0:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZN12APDEvaluator8evaluateEP10expression+0xc6>
  c6:	fb 01       	movw	r30, r22
  c8:	61 81       	ldd	r22, Z+1	; 0x01
  ca:	72 81       	ldd	r23, Z+2	; 0x02
  cc:	ce 01       	movw	r24, r28
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
  d2:	7b 01       	movw	r14, r22
  d4:	8c 01       	movw	r16, r24
  d6:	f6 01       	movw	r30, r12
  d8:	63 81       	ldd	r22, Z+3	; 0x03
  da:	74 81       	ldd	r23, Z+4	; 0x04
  dc:	ce 01       	movw	r24, r28
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
  e2:	9b 01       	movw	r18, r22
  e4:	ac 01       	movw	r20, r24
  e6:	c8 01       	movw	r24, r16
  e8:	b7 01       	movw	r22, r14
  ea:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
  ee:	b6 2e       	mov	r11, r22
  f0:	e7 2e       	mov	r14, r23
  f2:	8c 01       	movw	r16, r24
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_ZN12APDEvaluator8evaluateEP10expression+0xf6>
  f6:	fb 01       	movw	r30, r22
  f8:	61 81       	ldd	r22, Z+1	; 0x01
  fa:	72 81       	ldd	r23, Z+2	; 0x02
  fc:	ce 01       	movw	r24, r28
  fe:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 102:	7b 01       	movw	r14, r22
 104:	8c 01       	movw	r16, r24
 106:	f6 01       	movw	r30, r12
 108:	63 81       	ldd	r22, Z+3	; 0x03
 10a:	74 81       	ldd	r23, Z+4	; 0x04
 10c:	ce 01       	movw	r24, r28
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 112:	9b 01       	movw	r18, r22
 114:	ac 01       	movw	r20, r24
 116:	c8 01       	movw	r24, r16
 118:	b7 01       	movw	r22, r14
 11a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <_ZN12APDEvaluator8evaluateEP10expression+0x120>
 120:	fb 01       	movw	r30, r22
 122:	61 81       	ldd	r22, Z+1	; 0x01
 124:	72 81       	ldd	r23, Z+2	; 0x02
 126:	ce 01       	movw	r24, r28
 128:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 12c:	7b 01       	movw	r14, r22
 12e:	8c 01       	movw	r16, r24
 130:	f6 01       	movw	r30, r12
 132:	63 81       	ldd	r22, Z+3	; 0x03
 134:	74 81       	ldd	r23, Z+4	; 0x04
 136:	ce 01       	movw	r24, r28
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 13c:	9b 01       	movw	r18, r22
 13e:	ac 01       	movw	r20, r24
 140:	c8 01       	movw	r24, r16
 142:	b7 01       	movw	r22, r14
 144:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 148:	00 c0       	rjmp	.+0      	; 0x14a <_ZN12APDEvaluator8evaluateEP10expression+0x14a>
 14a:	fb 01       	movw	r30, r22
 14c:	61 81       	ldd	r22, Z+1	; 0x01
 14e:	72 81       	ldd	r23, Z+2	; 0x02
 150:	ce 01       	movw	r24, r28
 152:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 156:	7b 01       	movw	r14, r22
 158:	8c 01       	movw	r16, r24
 15a:	f6 01       	movw	r30, r12
 15c:	63 81       	ldd	r22, Z+3	; 0x03
 15e:	74 81       	ldd	r23, Z+4	; 0x04
 160:	ce 01       	movw	r24, r28
 162:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 166:	9b 01       	movw	r18, r22
 168:	ac 01       	movw	r20, r24
 16a:	c8 01       	movw	r24, r16
 16c:	b7 01       	movw	r22, r14
 16e:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 172:	00 c0       	rjmp	.+0      	; 0x174 <_ZN12APDEvaluator8evaluateEP10expression+0x174>
 174:	fb 01       	movw	r30, r22
 176:	61 81       	ldd	r22, Z+1	; 0x01
 178:	72 81       	ldd	r23, Z+2	; 0x02
 17a:	ce 01       	movw	r24, r28
 17c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 180:	7b 01       	movw	r14, r22
 182:	8c 01       	movw	r16, r24
 184:	f6 01       	movw	r30, r12
 186:	63 81       	ldd	r22, Z+3	; 0x03
 188:	74 81       	ldd	r23, Z+4	; 0x04
 18a:	ce 01       	movw	r24, r28
 18c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 190:	4b 01       	movw	r8, r22
 192:	5c 01       	movw	r10, r24
 194:	c8 01       	movw	r24, r16
 196:	b7 01       	movw	r22, r14
 198:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 19c:	66 23       	and	r22, r22
 19e:	01 f4       	brne	.+0      	; 0x1a0 <_ZN12APDEvaluator8evaluateEP10expression+0x1a0>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <_ZN12APDEvaluator8evaluateEP10expression+0x1a4>
 1a4:	fb 01       	movw	r30, r22
 1a6:	61 81       	ldd	r22, Z+1	; 0x01
 1a8:	72 81       	ldd	r23, Z+2	; 0x02
 1aa:	ce 01       	movw	r24, r28
 1ac:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 1b0:	7b 01       	movw	r14, r22
 1b2:	8c 01       	movw	r16, r24
 1b4:	f6 01       	movw	r30, r12
 1b6:	63 81       	ldd	r22, Z+3	; 0x03
 1b8:	74 81       	ldd	r23, Z+4	; 0x04
 1ba:	ce 01       	movw	r24, r28
 1bc:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 1c0:	4b 01       	movw	r8, r22
 1c2:	5c 01       	movw	r10, r24
 1c4:	c8 01       	movw	r24, r16
 1c6:	b7 01       	movw	r22, r14
 1c8:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 1cc:	66 23       	and	r22, r22
 1ce:	01 f4       	brne	.+0      	; 0x1d0 <_ZN12APDEvaluator8evaluateEP10expression+0x1d0>
 1d0:	c5 01       	movw	r24, r10
 1d2:	b4 01       	movw	r22, r8
 1d4:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 1d8:	86 2f       	mov	r24, r22
 1da:	61 11       	cpse	r22, r1
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	68 2f       	mov	r22, r24
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_ZN12APDEvaluator8evaluateEP10expression+0x1ec>
 1ec:	fb 01       	movw	r30, r22
 1ee:	61 81       	ldd	r22, Z+1	; 0x01
 1f0:	72 81       	ldd	r23, Z+2	; 0x02
 1f2:	ce 01       	movw	r24, r28
 1f4:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 1f8:	7b 01       	movw	r14, r22
 1fa:	8c 01       	movw	r16, r24
 1fc:	f6 01       	movw	r30, r12
 1fe:	63 81       	ldd	r22, Z+3	; 0x03
 200:	74 81       	ldd	r23, Z+4	; 0x04
 202:	ce 01       	movw	r24, r28
 204:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 208:	9b 01       	movw	r18, r22
 20a:	ac 01       	movw	r20, r24
 20c:	c8 01       	movw	r24, r16
 20e:	b7 01       	movw	r22, r14
 210:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 214:	88 23       	and	r24, r24
 216:	01 f0       	breq	.+0      	; 0x218 <_ZN12APDEvaluator8evaluateEP10expression+0x218>
 218:	00 c0       	rjmp	.+0      	; 0x21a <_ZN12APDEvaluator8evaluateEP10expression+0x21a>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <_ZN12APDEvaluator8evaluateEP10expression+0x21c>
 21c:	fb 01       	movw	r30, r22
 21e:	61 81       	ldd	r22, Z+1	; 0x01
 220:	72 81       	ldd	r23, Z+2	; 0x02
 222:	ce 01       	movw	r24, r28
 224:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 228:	7b 01       	movw	r14, r22
 22a:	8c 01       	movw	r16, r24
 22c:	f6 01       	movw	r30, r12
 22e:	63 81       	ldd	r22, Z+3	; 0x03
 230:	74 81       	ldd	r23, Z+4	; 0x04
 232:	ce 01       	movw	r24, r28
 234:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 238:	9b 01       	movw	r18, r22
 23a:	ac 01       	movw	r20, r24
 23c:	c8 01       	movw	r24, r16
 23e:	b7 01       	movw	r22, r14
 240:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 244:	87 fd       	sbrc	r24, 7
 246:	00 c0       	rjmp	.+0      	; 0x248 <_ZN12APDEvaluator8evaluateEP10expression+0x248>
 248:	00 c0       	rjmp	.+0      	; 0x24a <_ZN12APDEvaluator8evaluateEP10expression+0x24a>
 24a:	fb 01       	movw	r30, r22
 24c:	61 81       	ldd	r22, Z+1	; 0x01
 24e:	72 81       	ldd	r23, Z+2	; 0x02
 250:	ce 01       	movw	r24, r28
 252:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 256:	7b 01       	movw	r14, r22
 258:	8c 01       	movw	r16, r24
 25a:	f6 01       	movw	r30, r12
 25c:	63 81       	ldd	r22, Z+3	; 0x03
 25e:	74 81       	ldd	r23, Z+4	; 0x04
 260:	ce 01       	movw	r24, r28
 262:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 266:	9b 01       	movw	r18, r22
 268:	ac 01       	movw	r20, r24
 26a:	c8 01       	movw	r24, r16
 26c:	b7 01       	movw	r22, r14
 26e:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 272:	18 16       	cp	r1, r24
 274:	04 f4       	brge	.+0      	; 0x276 <_ZN12APDEvaluator8evaluateEP10expression+0x276>
 276:	00 c0       	rjmp	.+0      	; 0x278 <_ZN12APDEvaluator8evaluateEP10expression+0x278>
 278:	fb 01       	movw	r30, r22
 27a:	61 81       	ldd	r22, Z+1	; 0x01
 27c:	72 81       	ldd	r23, Z+2	; 0x02
 27e:	ce 01       	movw	r24, r28
 280:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 284:	7b 01       	movw	r14, r22
 286:	8c 01       	movw	r16, r24
 288:	f6 01       	movw	r30, r12
 28a:	63 81       	ldd	r22, Z+3	; 0x03
 28c:	74 81       	ldd	r23, Z+4	; 0x04
 28e:	ce 01       	movw	r24, r28
 290:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
 298:	c8 01       	movw	r24, r16
 29a:	b7 01       	movw	r22, r14
 29c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 2a0:	18 16       	cp	r1, r24
 2a2:	04 f0       	brlt	.+0      	; 0x2a4 <_ZN12APDEvaluator8evaluateEP10expression+0x2a4>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <_ZN12APDEvaluator8evaluateEP10expression+0x2a6>
 2a6:	fb 01       	movw	r30, r22
 2a8:	61 81       	ldd	r22, Z+1	; 0x01
 2aa:	72 81       	ldd	r23, Z+2	; 0x02
 2ac:	ce 01       	movw	r24, r28
 2ae:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 2b2:	7b 01       	movw	r14, r22
 2b4:	8c 01       	movw	r16, r24
 2b6:	f6 01       	movw	r30, r12
 2b8:	63 81       	ldd	r22, Z+3	; 0x03
 2ba:	74 81       	ldd	r23, Z+4	; 0x04
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 2c2:	9b 01       	movw	r18, r22
 2c4:	ac 01       	movw	r20, r24
 2c6:	c8 01       	movw	r24, r16
 2c8:	b7 01       	movw	r22, r14
 2ca:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 2ce:	87 ff       	sbrs	r24, 7
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <_ZN12APDEvaluator8evaluateEP10expression+0x2d2>
 2d2:	bb 24       	eor	r11, r11
 2d4:	ee 24       	eor	r14, r14
 2d6:	00 e0       	ldi	r16, 0x00	; 0
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <_ZN12APDEvaluator8evaluateEP10expression+0x2dc>
 2dc:	bb 24       	eor	r11, r11
 2de:	ee 24       	eor	r14, r14
 2e0:	00 e8       	ldi	r16, 0x80	; 128
 2e2:	1f e3       	ldi	r17, 0x3F	; 63
 2e4:	f6 01       	movw	r30, r12
 2e6:	81 81       	ldd	r24, Z+1	; 0x01
 2e8:	92 81       	ldd	r25, Z+2	; 0x02
 2ea:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 2ee:	f6 01       	movw	r30, r12
 2f0:	83 81       	ldd	r24, Z+3	; 0x03
 2f2:	94 81       	ldd	r25, Z+4	; 0x04
 2f4:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <_ZN12APDEvaluator8evaluateEP10expression+0x2fa>
 2fa:	fb 01       	movw	r30, r22
 2fc:	b1 80       	ldd	r11, Z+1	; 0x01
 2fe:	e2 80       	ldd	r14, Z+2	; 0x02
 300:	03 81       	ldd	r16, Z+3	; 0x03
 302:	14 81       	ldd	r17, Z+4	; 0x04
 304:	00 c0       	rjmp	.+0      	; 0x306 <_ZN12APDEvaluator8evaluateEP10expression+0x306>
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator8evaluateEP10expression>
 30e:	2b 2d       	mov	r18, r11
 310:	3e 2d       	mov	r19, r14
 312:	b9 01       	movw	r22, r18
 314:	c8 01       	movw	r24, r16
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	ef 90       	pop	r14
 322:	df 90       	pop	r13
 324:	cf 90       	pop	r12
 326:	bf 90       	pop	r11
 328:	af 90       	pop	r10
 32a:	9f 90       	pop	r9
 32c:	8f 90       	pop	r8
 32e:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator11parse_errorEPKc:

00000000 <_ZN12APDEvaluator11parse_errorEPKc>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
	// TODO Auto-generated destructor stub

}
   a:	1f 93       	push	r17
   c:	df 93       	push	r29
   e:	cf 93       	push	r28
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	c0 58       	subi	r28, 0x80	; 128
  16:	d0 40       	sbci	r29, 0x00	; 0
  18:	0f b6       	in	r0, 0x3f	; 63
  1a:	f8 94       	cli
  1c:	de bf       	out	0x3e, r29	; 62
  1e:	0f be       	out	0x3f, r0	; 63
  20:	cd bf       	out	0x3d, r28	; 61
  22:	6c 01       	movw	r12, r24
  24:	7b 01       	movw	r14, r22
  26:	dc 01       	movw	r26, r24
  28:	12 96       	adiw	r26, 0x02	; 2
  2a:	2d 91       	ld	r18, X+
  2c:	3c 91       	ld	r19, X
  2e:	13 97       	sbiw	r26, 0x03	; 3
  30:	ed b7       	in	r30, 0x3d	; 61
  32:	fe b7       	in	r31, 0x3e	; 62
  34:	38 97       	sbiw	r30, 0x08	; 8
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	f8 94       	cli
  3a:	fe bf       	out	0x3e, r31	; 62
  3c:	0f be       	out	0x3f, r0	; 63
  3e:	ed bf       	out	0x3d, r30	; 61
  40:	ad b7       	in	r26, 0x3d	; 61
  42:	be b7       	in	r27, 0x3e	; 62
  44:	11 96       	adiw	r26, 0x01	; 1
  46:	8e 01       	movw	r16, r28
  48:	0f 5f       	subi	r16, 0xFF	; 255
  4a:	1f 4f       	sbci	r17, 0xFF	; 255
  4c:	12 83       	std	Z+2, r17	; 0x02
  4e:	01 83       	std	Z+1, r16	; 0x01
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	13 96       	adiw	r26, 0x03	; 3
  56:	9c 93       	st	X, r25
  58:	8e 93       	st	-X, r24
  5a:	12 97       	sbiw	r26, 0x02	; 2
  5c:	fb 01       	movw	r30, r22
  5e:	e2 0f       	add	r30, r18
  60:	f3 1f       	adc	r31, r19
  62:	80 81       	ld	r24, Z
  64:	99 27       	eor	r25, r25
  66:	87 fd       	sbrc	r24, 7
  68:	90 95       	com	r25
  6a:	15 96       	adiw	r26, 0x05	; 5
  6c:	9c 93       	st	X, r25
  6e:	8e 93       	st	-X, r24
  70:	14 97       	sbiw	r26, 0x04	; 4
  72:	17 96       	adiw	r26, 0x07	; 7
  74:	3c 93       	st	X, r19
  76:	2e 93       	st	-X, r18
  78:	16 97       	sbiw	r26, 0x06	; 6
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11parse_errorEPKc>
  7e:	8d b7       	in	r24, 0x3d	; 61
  80:	9e b7       	in	r25, 0x3e	; 62
  82:	08 96       	adiw	r24, 0x08	; 8
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	f8 94       	cli
  88:	9e bf       	out	0x3e, r25	; 62
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	8d bf       	out	0x3d, r24	; 61
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	b8 01       	movw	r22, r16
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11parse_errorEPKc>
  98:	00 d0       	rcall	.+0      	; 0x9a <_ZN12APDEvaluator11parse_errorEPKc+0x9a>
  9a:	00 d0       	rcall	.+0      	; 0x9c <_ZN12APDEvaluator11parse_errorEPKc+0x9c>
  9c:	ed b7       	in	r30, 0x3d	; 61
  9e:	fe b7       	in	r31, 0x3e	; 62
  a0:	31 96       	adiw	r30, 0x01	; 1
  a2:	ad b7       	in	r26, 0x3d	; 61
  a4:	be b7       	in	r27, 0x3e	; 62
  a6:	12 96       	adiw	r26, 0x02	; 2
  a8:	1c 93       	st	X, r17
  aa:	0e 93       	st	-X, r16
  ac:	11 97       	sbiw	r26, 0x01	; 1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	93 83       	std	Z+3, r25	; 0x03
  b4:	82 83       	std	Z+2, r24	; 0x02
  b6:	f5 82       	std	Z+5, r15	; 0x05
  b8:	e4 82       	std	Z+4, r14	; 0x04
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11parse_errorEPKc>
  be:	ed b7       	in	r30, 0x3d	; 61
  c0:	fe b7       	in	r31, 0x3e	; 62
  c2:	36 96       	adiw	r30, 0x06	; 6
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	fe bf       	out	0x3e, r31	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	ed bf       	out	0x3d, r30	; 61
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	b8 01       	movw	r22, r16
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11parse_errorEPKc>
  d8:	c8 01       	movw	r24, r16
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11parse_errorEPKc>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	b8 01       	movw	r22, r16
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11parse_errorEPKc>
  ec:	00 e0       	ldi	r16, 0x00	; 0
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN12APDEvaluator11parse_errorEPKc+0xf2>
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11parse_errorEPKc>
  fa:	0f 5f       	subi	r16, 0xFF	; 255
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
  fe:	d6 01       	movw	r26, r12
 100:	12 96       	adiw	r26, 0x02	; 2
 102:	8d 91       	ld	r24, X+
 104:	9c 91       	ld	r25, X
 106:	13 97       	sbiw	r26, 0x03	; 3
 108:	08 17       	cp	r16, r24
 10a:	19 07       	cpc	r17, r25
 10c:	00 f0       	brcs	.+0      	; 0x10e <_ZN12APDEvaluator11parse_errorEPKc+0x10e>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11parse_errorEPKc>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__SREG__+0xd9>

Disassembly of section .text._ZN12APDEvaluator6proc_fEPKc:

00000000 <_ZN12APDEvaluator6proc_fEPKc>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
	// TODO Auto-generated destructor stub

}
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN12APDEvaluator6proc_fEPKc+0xe>
   e:	0f 92       	push	r0
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	8c 01       	movw	r16, r24
  16:	7b 01       	movw	r14, r22
  18:	dc 01       	movw	r26, r24
  1a:	12 96       	adiw	r26, 0x02	; 2
  1c:	ed 91       	ld	r30, X+
  1e:	fc 91       	ld	r31, X
  20:	13 97       	sbiw	r26, 0x03	; 3
  22:	e6 0f       	add	r30, r22
  24:	f7 1f       	adc	r31, r23
  26:	80 81       	ld	r24, Z
  28:	99 27       	eor	r25, r25
  2a:	87 fd       	sbrc	r24, 7
  2c:	90 95       	com	r25
  2e:	c0 97       	sbiw	r24, 0x30	; 48
  30:	0a 97       	sbiw	r24, 0x0a	; 10
  32:	00 f0       	brcs	.+0      	; 0x34 <_ZN12APDEvaluator6proc_fEPKc+0x34>
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6proc_fEPKc>
  3a:	00 d0       	rcall	.+0      	; 0x3c <_ZN12APDEvaluator6proc_fEPKc+0x3c>
  3c:	00 d0       	rcall	.+0      	; 0x3e <_ZN12APDEvaluator6proc_fEPKc+0x3e>
  3e:	ed b7       	in	r30, 0x3d	; 61
  40:	fe b7       	in	r31, 0x3e	; 62
  42:	31 96       	adiw	r30, 0x01	; 1
  44:	d8 01       	movw	r26, r16
  46:	12 96       	adiw	r26, 0x02	; 2
  48:	8d 91       	ld	r24, X+
  4a:	9c 91       	ld	r25, X
  4c:	13 97       	sbiw	r26, 0x03	; 3
  4e:	8e 0d       	add	r24, r14
  50:	9f 1d       	adc	r25, r15
  52:	ad b7       	in	r26, 0x3d	; 61
  54:	be b7       	in	r27, 0x3e	; 62
  56:	12 96       	adiw	r26, 0x02	; 2
  58:	9c 93       	st	X, r25
  5a:	8e 93       	st	-X, r24
  5c:	11 97       	sbiw	r26, 0x01	; 1
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	93 83       	std	Z+3, r25	; 0x03
  64:	82 83       	std	Z+2, r24	; 0x02
  66:	ce 01       	movw	r24, r28
  68:	01 96       	adiw	r24, 0x01	; 1
  6a:	95 83       	std	Z+5, r25	; 0x05
  6c:	84 83       	std	Z+4, r24	; 0x04
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6proc_fEPKc>
  72:	ed b7       	in	r30, 0x3d	; 61
  74:	fe b7       	in	r31, 0x3e	; 62
  76:	36 96       	adiw	r30, 0x06	; 6
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	f8 94       	cli
  7c:	fe bf       	out	0x3e, r31	; 62
  7e:	0f be       	out	0x3f, r0	; 63
  80:	ed bf       	out	0x3d, r30	; 61
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN12APDEvaluator6proc_fEPKc+0x84>
  84:	2f 5f       	subi	r18, 0xFF	; 255
  86:	3f 4f       	sbci	r19, 0xFF	; 255
  88:	d8 01       	movw	r26, r16
  8a:	13 96       	adiw	r26, 0x03	; 3
  8c:	3c 93       	st	X, r19
  8e:	2e 93       	st	-X, r18
  90:	12 97       	sbiw	r26, 0x02	; 2
  92:	f8 01       	movw	r30, r16
  94:	22 81       	ldd	r18, Z+2	; 0x02
  96:	33 81       	ldd	r19, Z+3	; 0x03
  98:	f7 01       	movw	r30, r14
  9a:	e2 0f       	add	r30, r18
  9c:	f3 1f       	adc	r31, r19
  9e:	e0 81       	ld	r30, Z
  a0:	8e 2f       	mov	r24, r30
  a2:	99 27       	eor	r25, r25
  a4:	87 fd       	sbrc	r24, 7
  a6:	90 95       	com	r25
  a8:	c0 97       	sbiw	r24, 0x30	; 48
  aa:	0a 97       	sbiw	r24, 0x0a	; 10
  ac:	00 f0       	brcs	.+0      	; 0xae <_ZN12APDEvaluator6proc_fEPKc+0xae>
  ae:	ee 32       	cpi	r30, 0x2E	; 46
  b0:	01 f0       	breq	.+0      	; 0xb2 <_ZN12APDEvaluator6proc_fEPKc+0xb2>
  b2:	29 81       	ldd	r18, Y+1	; 0x01
  b4:	3a 81       	ldd	r19, Y+2	; 0x02
  b6:	4b 81       	ldd	r20, Y+3	; 0x03
  b8:	5c 81       	ldd	r21, Y+4	; 0x04
  ba:	b9 01       	movw	r22, r18
  bc:	ca 01       	movw	r24, r20
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	1f 91       	pop	r17
  cc:	0f 91       	pop	r16
  ce:	ff 90       	pop	r15
  d0:	ef 90       	pop	r14
  d2:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator6proc_iEPKc:

00000000 <_ZN12APDEvaluator6proc_iEPKc>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
	// TODO Auto-generated destructor stub

}
   a:	8b 01       	movw	r16, r22
   c:	ea 81       	ldd	r30, Y+2	; 0x02
   e:	fb 81       	ldd	r31, Y+3	; 0x03
  10:	e6 0f       	add	r30, r22
  12:	f7 1f       	adc	r31, r23
  14:	80 81       	ld	r24, Z
  16:	99 27       	eor	r25, r25
  18:	87 fd       	sbrc	r24, 7
  1a:	90 95       	com	r25
  1c:	c0 97       	sbiw	r24, 0x30	; 48
  1e:	0a 97       	sbiw	r24, 0x0a	; 10
  20:	00 f0       	brcs	.+0      	; 0x22 <_ZN12APDEvaluator6proc_iEPKc+0x22>
  22:	ce 01       	movw	r24, r28
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6proc_iEPKc>
  28:	8a 81       	ldd	r24, Y+2	; 0x02
  2a:	9b 81       	ldd	r25, Y+3	; 0x03
  2c:	80 0f       	add	r24, r16
  2e:	91 1f       	adc	r25, r17
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6proc_iEPKc>
  34:	ac 01       	movw	r20, r24
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN12APDEvaluator6proc_iEPKc+0x38>
  38:	2f 5f       	subi	r18, 0xFF	; 255
  3a:	3f 4f       	sbci	r19, 0xFF	; 255
  3c:	3b 83       	std	Y+3, r19	; 0x03
  3e:	2a 83       	std	Y+2, r18	; 0x02
  40:	2a 81       	ldd	r18, Y+2	; 0x02
  42:	3b 81       	ldd	r19, Y+3	; 0x03
  44:	f8 01       	movw	r30, r16
  46:	e2 0f       	add	r30, r18
  48:	f3 1f       	adc	r31, r19
  4a:	80 81       	ld	r24, Z
  4c:	99 27       	eor	r25, r25
  4e:	87 fd       	sbrc	r24, 7
  50:	90 95       	com	r25
  52:	c0 97       	sbiw	r24, 0x30	; 48
  54:	0a 97       	sbiw	r24, 0x0a	; 10
  56:	00 f0       	brcs	.+0      	; 0x58 <_ZN12APDEvaluator6proc_iEPKc+0x58>
  58:	ca 01       	movw	r24, r20
  5a:	df 91       	pop	r29
  5c:	cf 91       	pop	r28
  5e:	1f 91       	pop	r17
  60:	0f 91       	pop	r16
  62:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator6proc_cEPKcc:

00000000 <_ZN12APDEvaluator6proc_cEPKcc>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	14 2f       	mov	r17, r20
	// TODO Auto-generated destructor stub

}
   a:	ea 81       	ldd	r30, Y+2	; 0x02
   c:	fb 81       	ldd	r31, Y+3	; 0x03
   e:	e6 0f       	add	r30, r22
  10:	f7 1f       	adc	r31, r23
  12:	80 81       	ld	r24, Z
  14:	84 17       	cp	r24, r20
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN12APDEvaluator6proc_cEPKcc+0x18>
  18:	ce 01       	movw	r24, r28
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6proc_cEPKcc>
  1e:	8a 81       	ldd	r24, Y+2	; 0x02
  20:	9b 81       	ldd	r25, Y+3	; 0x03
  22:	01 96       	adiw	r24, 0x01	; 1
  24:	9b 83       	std	Y+3, r25	; 0x03
  26:	8a 83       	std	Y+2, r24	; 0x02
  28:	81 2f       	mov	r24, r17
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator10expressionEPKc:

00000000 <_ZN12APDEvaluator10expressionEPKc>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
	// TODO Auto-generated destructor stub

}
   a:	8b 01       	movw	r16, r22
   c:	ea 81       	ldd	r30, Y+2	; 0x02
   e:	fb 81       	ldd	r31, Y+3	; 0x03
  10:	e6 0f       	add	r30, r22
  12:	f7 1f       	adc	r31, r23
  14:	e0 81       	ld	r30, Z
  16:	e8 32       	cpi	r30, 0x28	; 40
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN12APDEvaluator10expressionEPKc+0x1a>
  1a:	8e 2f       	mov	r24, r30
  1c:	99 27       	eor	r25, r25
  1e:	87 fd       	sbrc	r24, 7
  20:	90 95       	com	r25
  22:	c0 97       	sbiw	r24, 0x30	; 48
  24:	0a 97       	sbiw	r24, 0x0a	; 10
  26:	00 f0       	brcs	.+0      	; 0x28 <_ZN12APDEvaluator10expressionEPKc+0x28>
  28:	e3 36       	cpi	r30, 0x63	; 99
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN12APDEvaluator10expressionEPKc+0x2c>
  2c:	e3 37       	cpi	r30, 0x73	; 115
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN12APDEvaluator10expressionEPKc+0x30>
  30:	85 e0       	ldi	r24, 0x05	; 5
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10expressionEPKc>
  38:	ac 01       	movw	r20, r24
  3a:	00 97       	sbiw	r24, 0x00	; 0
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN12APDEvaluator10expressionEPKc+0x3e>
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10expressionEPKc>
  46:	ce 01       	movw	r24, r28
  48:	b8 01       	movw	r22, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10expressionEPKc>
  4e:	ac 01       	movw	r20, r24
  50:	ce 01       	movw	r24, r28
  52:	b8 01       	movw	r22, r16
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10expressionEPKc>
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN12APDEvaluator10expressionEPKc+0x5a>
  5a:	ce 01       	movw	r24, r28
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10expressionEPKc>
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	1f 91       	pop	r17
  66:	0f 91       	pop	r16
  68:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator6factorEPKcP10expression:

00000000 <_ZN12APDEvaluator6factorEPKcP10expression>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
	// TODO Auto-generated destructor stub

}
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	8b 01       	movw	r16, r22
  10:	7a 01       	movw	r14, r20
  12:	ea 81       	ldd	r30, Y+2	; 0x02
  14:	fb 81       	ldd	r31, Y+3	; 0x03
  16:	e6 0f       	add	r30, r22
  18:	f7 1f       	adc	r31, r23
  1a:	80 81       	ld	r24, Z
  1c:	88 32       	cpi	r24, 0x28	; 40
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN12APDEvaluator6factorEPKcP10expression+0x20>
  20:	ce 01       	movw	r24, r28
  22:	48 e2       	ldi	r20, 0x28	; 40
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  28:	f7 01       	movw	r30, r14
  2a:	80 83       	st	Z, r24
  2c:	ce 01       	movw	r24, r28
  2e:	b8 01       	movw	r22, r16
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  34:	f7 01       	movw	r30, r14
  36:	92 83       	std	Z+2, r25	; 0x02
  38:	81 83       	std	Z+1, r24	; 0x01
  3a:	ce 01       	movw	r24, r28
  3c:	b8 01       	movw	r22, r16
  3e:	49 e2       	ldi	r20, 0x29	; 41
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN12APDEvaluator6factorEPKcP10expression+0x46>
  46:	83 36       	cpi	r24, 0x63	; 99
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN12APDEvaluator6factorEPKcP10expression+0x4a>
  4a:	ce 01       	movw	r24, r28
  4c:	43 e6       	ldi	r20, 0x63	; 99
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  52:	84 e6       	ldi	r24, 0x64	; 100
  54:	f7 01       	movw	r30, r14
  56:	80 83       	st	Z, r24
  58:	ce 01       	movw	r24, r28
  5a:	b8 01       	movw	r22, r16
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  60:	bc 01       	movw	r22, r24
  62:	8e 81       	ldd	r24, Y+6	; 0x06
  64:	9f 81       	ldd	r25, Y+7	; 0x07
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  6a:	fc 01       	movw	r30, r24
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	01 f0       	breq	.+0      	; 0x70 <_ZN12APDEvaluator6factorEPKcP10expression+0x70>
  70:	61 a9       	ldd	r22, Z+49	; 0x31
  72:	72 a9       	ldd	r23, Z+50	; 0x32
  74:	88 27       	eor	r24, r24
  76:	77 fd       	sbrc	r23, 7
  78:	80 95       	com	r24
  7a:	98 2f       	mov	r25, r24
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN12APDEvaluator6factorEPKcP10expression+0x82>
  82:	83 37       	cpi	r24, 0x73	; 115
  84:	01 f4       	brne	.+0      	; 0x86 <_ZN12APDEvaluator6factorEPKcP10expression+0x86>
  86:	ce 01       	movw	r24, r28
  88:	43 e7       	ldi	r20, 0x73	; 115
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  8e:	84 e6       	ldi	r24, 0x64	; 100
  90:	f7 01       	movw	r30, r14
  92:	80 83       	st	Z, r24
  94:	ce 01       	movw	r24, r28
  96:	b8 01       	movw	r22, r16
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  9c:	bc 01       	movw	r22, r24
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	9d 81       	ldd	r25, Y+5	; 0x05
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	01 f0       	breq	.+0      	; 0xaa <_ZN12APDEvaluator6factorEPKcP10expression+0xaa>
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN12APDEvaluator6factorEPKcP10expression+0xb0>
  b0:	ce 01       	movw	r24, r28
  b2:	b8 01       	movw	r22, r16
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	f7 01       	movw	r30, r14
  c2:	81 83       	std	Z+1, r24	; 0x01
  c4:	92 83       	std	Z+2, r25	; 0x02
  c6:	a3 83       	std	Z+3, r26	; 0x03
  c8:	b4 83       	std	Z+4, r27	; 0x04
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN12APDEvaluator6factorEPKcP10expression+0xcc>
  cc:	99 27       	eor	r25, r25
  ce:	87 fd       	sbrc	r24, 7
  d0:	90 95       	com	r25
  d2:	c0 97       	sbiw	r24, 0x30	; 48
  d4:	0a 97       	sbiw	r24, 0x0a	; 10
  d6:	00 f4       	brcc	.+0      	; 0xd8 <_ZN12APDEvaluator6factorEPKcP10expression+0xd8>
  d8:	84 e6       	ldi	r24, 0x64	; 100
  da:	fa 01       	movw	r30, r20
  dc:	80 83       	st	Z, r24
  de:	ce 01       	movw	r24, r28
  e0:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator6factorEPKcP10expression>
  e4:	f7 01       	movw	r30, r14
  e6:	61 83       	std	Z+1, r22	; 0x01
  e8:	72 83       	std	Z+2, r23	; 0x02
  ea:	83 83       	std	Z+3, r24	; 0x03
  ec:	94 83       	std	Z+4, r25	; 0x04
  ee:	c7 01       	movw	r24, r14
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator12factor_rightEPKcP10expression:

00000000 <_ZN12APDEvaluator12factor_rightEPKcP10expression>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
	// TODO Auto-generated destructor stub

}
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	7b 01       	movw	r14, r22
  16:	d4 2e       	mov	r13, r20
  18:	c5 2e       	mov	r12, r21
  1a:	d8 01       	movw	r26, r16
  1c:	12 96       	adiw	r26, 0x02	; 2
  1e:	ed 91       	ld	r30, X+
  20:	fc 91       	ld	r31, X
  22:	13 97       	sbiw	r26, 0x03	; 3
  24:	ee 0d       	add	r30, r14
  26:	ff 1d       	adc	r31, r15
  28:	e0 81       	ld	r30, Z
  2a:	ef 33       	cpi	r30, 0x3F	; 63
  2c:	04 f4       	brge	.+0      	; 0x2e <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x2e>
  2e:	ec 33       	cpi	r30, 0x3C	; 60
  30:	04 f0       	brlt	.+0      	; 0x32 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x32>
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x34>
  34:	ea 32       	cpi	r30, 0x2A	; 42
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x38>
  38:	eb 32       	cpi	r30, 0x2B	; 43
  3a:	04 f4       	brge	.+0      	; 0x3c <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x3c>
  3c:	e6 32       	cpi	r30, 0x26	; 38
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x42>
  42:	e7 32       	cpi	r30, 0x27	; 39
  44:	04 f4       	brge	.+0      	; 0x46 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x46>
  46:	ee 23       	and	r30, r30
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x4c>
  4c:	e5 32       	cpi	r30, 0x25	; 37
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x54>
  54:	e9 32       	cpi	r30, 0x29	; 41
  56:	01 f0       	breq	.+0      	; 0x58 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x5c>
  5c:	ed 32       	cpi	r30, 0x2D	; 45
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x62>
  62:	ef 32       	cpi	r30, 0x2F	; 47
  64:	01 f0       	breq	.+0      	; 0x66 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x66>
  66:	eb 32       	cpi	r30, 0x2B	; 43
  68:	01 f0       	breq	.+0      	; 0x6a <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x6a>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x6e>
  6e:	e3 36       	cpi	r30, 0x63	; 99
  70:	01 f4       	brne	.+0      	; 0x72 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x74>
  74:	e4 36       	cpi	r30, 0x64	; 100
  76:	04 f4       	brge	.+0      	; 0x78 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x78>
  78:	eb 35       	cpi	r30, 0x5B	; 91
  7a:	01 f0       	breq	.+0      	; 0x7c <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x7c>
  7c:	ed 35       	cpi	r30, 0x5D	; 93
  7e:	01 f4       	brne	.+0      	; 0x80 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x80>
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x82>
  82:	e3 37       	cpi	r30, 0x73	; 115
  84:	01 f0       	breq	.+0      	; 0x86 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x86>
  86:	ec 37       	cpi	r30, 0x7C	; 124
  88:	01 f4       	brne	.+0      	; 0x8a <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x8a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x8c>
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator12factor_rightEPKcP10expression>
  94:	b9 2e       	mov	r11, r25
  96:	c8 2f       	mov	r28, r24
  98:	d9 2f       	mov	r29, r25
  9a:	20 97       	sbiw	r28, 0x00	; 0
  9c:	01 f0       	breq	.+0      	; 0x9e <_ZN12APDEvaluator12factor_rightEPKcP10expression+0x9e>
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator12factor_rightEPKcP10expression>
  a6:	9c 83       	std	Y+4, r25	; 0x04
  a8:	8b 83       	std	Y+3, r24	; 0x03
  aa:	00 97       	sbiw	r24, 0x00	; 0
  ac:	01 f4       	brne	.+0      	; 0xae <_ZN12APDEvaluator12factor_rightEPKcP10expression+0xae>
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator12factor_rightEPKcP10expression>
  b6:	d8 01       	movw	r26, r16
  b8:	12 96       	adiw	r26, 0x02	; 2
  ba:	ed 91       	ld	r30, X+
  bc:	fc 91       	ld	r31, X
  be:	13 97       	sbiw	r26, 0x03	; 3
  c0:	ee 0d       	add	r30, r14
  c2:	ff 1d       	adc	r31, r15
  c4:	c8 01       	movw	r24, r16
  c6:	b7 01       	movw	r22, r14
  c8:	40 81       	ld	r20, Z
  ca:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator12factor_rightEPKcP10expression>
  ce:	88 83       	st	Y, r24
  d0:	d9 82       	std	Y+1, r13	; 0x01
  d2:	ca 82       	std	Y+2, r12	; 0x02
  d4:	4b 81       	ldd	r20, Y+3	; 0x03
  d6:	5c 81       	ldd	r21, Y+4	; 0x04
  d8:	c8 01       	movw	r24, r16
  da:	b7 01       	movw	r22, r14
  dc:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator12factor_rightEPKcP10expression>
  e0:	9c 83       	std	Y+4, r25	; 0x04
  e2:	8b 83       	std	Y+3, r24	; 0x03
  e4:	dc 2e       	mov	r13, r28
  e6:	cb 2c       	mov	r12, r11
  e8:	00 c0       	rjmp	.+0      	; 0xea <_ZN12APDEvaluator12factor_rightEPKcP10expression+0xea>
  ea:	c8 01       	movw	r24, r16
  ec:	b7 01       	movw	r22, r14
  ee:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator12factor_rightEPKcP10expression>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN12APDEvaluator12factor_rightEPKcP10expression+0xf4>
  f4:	4d 2d       	mov	r20, r13
  f6:	5c 2d       	mov	r21, r12
  f8:	ca 01       	movw	r24, r20
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	df 90       	pop	r13
 108:	cf 90       	pop	r12
 10a:	bf 90       	pop	r11
 10c:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator4termEPKcP10expression:

00000000 <_ZN12APDEvaluator4termEPKcP10expression>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
	// TODO Auto-generated destructor stub

}
   a:	8b 01       	movw	r16, r22
   c:	ea 81       	ldd	r30, Y+2	; 0x02
   e:	fb 81       	ldd	r31, Y+3	; 0x03
  10:	e6 0f       	add	r30, r22
  12:	f7 1f       	adc	r31, r23
  14:	e0 81       	ld	r30, Z
  16:	e8 32       	cpi	r30, 0x28	; 40
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN12APDEvaluator4termEPKcP10expression+0x1a>
  1a:	8e 2f       	mov	r24, r30
  1c:	99 27       	eor	r25, r25
  1e:	87 fd       	sbrc	r24, 7
  20:	90 95       	com	r25
  22:	c0 97       	sbiw	r24, 0x30	; 48
  24:	0a 97       	sbiw	r24, 0x0a	; 10
  26:	00 f0       	brcs	.+0      	; 0x28 <_ZN12APDEvaluator4termEPKcP10expression+0x28>
  28:	e3 36       	cpi	r30, 0x63	; 99
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN12APDEvaluator4termEPKcP10expression+0x2c>
  2c:	e3 37       	cpi	r30, 0x73	; 115
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN12APDEvaluator4termEPKcP10expression+0x30>
  30:	ce 01       	movw	r24, r28
  32:	b8 01       	movw	r22, r16
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator4termEPKcP10expression>
  38:	ac 01       	movw	r20, r24
  3a:	ce 01       	movw	r24, r28
  3c:	b8 01       	movw	r22, r16
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator4termEPKcP10expression>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN12APDEvaluator4termEPKcP10expression+0x44>
  44:	ce 01       	movw	r24, r28
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator4termEPKcP10expression>
  4a:	df 91       	pop	r29
  4c:	cf 91       	pop	r28
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator10term_rightEPKcP10expression:

00000000 <_ZN12APDEvaluator10term_rightEPKcP10expression>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
	// TODO Auto-generated destructor stub

}
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	7b 01       	movw	r14, r22
  16:	d4 2e       	mov	r13, r20
  18:	c5 2e       	mov	r12, r21
  1a:	d8 01       	movw	r26, r16
  1c:	12 96       	adiw	r26, 0x02	; 2
  1e:	ed 91       	ld	r30, X+
  20:	fc 91       	ld	r31, X
  22:	13 97       	sbiw	r26, 0x03	; 3
  24:	ee 0d       	add	r30, r14
  26:	ff 1d       	adc	r31, r15
  28:	e0 81       	ld	r30, Z
  2a:	eb 35       	cpi	r30, 0x5B	; 91
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN12APDEvaluator10term_rightEPKcP10expression+0x2e>
  2e:	ec 35       	cpi	r30, 0x5C	; 92
  30:	04 f4       	brge	.+0      	; 0x32 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x32>
  32:	eb 32       	cpi	r30, 0x2B	; 43
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x36>
  36:	ec 32       	cpi	r30, 0x2C	; 44
  38:	04 f4       	brge	.+0      	; 0x3a <_ZN12APDEvaluator10term_rightEPKcP10expression+0x3a>
  3a:	e6 32       	cpi	r30, 0x26	; 38
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN12APDEvaluator10term_rightEPKcP10expression+0x3e>
  3e:	e9 32       	cpi	r30, 0x29	; 41
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x44>
  44:	ee 23       	and	r30, r30
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN12APDEvaluator10term_rightEPKcP10expression+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN12APDEvaluator10term_rightEPKcP10expression+0x4c>
  4c:	ed 32       	cpi	r30, 0x2D	; 45
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x50>
  50:	ed 32       	cpi	r30, 0x2D	; 45
  52:	04 f0       	brlt	.+0      	; 0x54 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x54>
  54:	ec 53       	subi	r30, 0x3C	; 60
  56:	e3 30       	cpi	r30, 0x03	; 3
  58:	00 f4       	brcc	.+0      	; 0x5a <_ZN12APDEvaluator10term_rightEPKcP10expression+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN12APDEvaluator10term_rightEPKcP10expression+0x5c>
  5c:	e3 36       	cpi	r30, 0x63	; 99
  5e:	01 f0       	breq	.+0      	; 0x60 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x60>
  60:	e4 36       	cpi	r30, 0x64	; 100
  62:	04 f4       	brge	.+0      	; 0x64 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x64>
  64:	ed 35       	cpi	r30, 0x5D	; 93
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN12APDEvaluator10term_rightEPKcP10expression+0x6a>
  6a:	e3 37       	cpi	r30, 0x73	; 115
  6c:	01 f0       	breq	.+0      	; 0x6e <_ZN12APDEvaluator10term_rightEPKcP10expression+0x6e>
  6e:	ec 37       	cpi	r30, 0x7C	; 124
  70:	01 f4       	brne	.+0      	; 0x72 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x72>
  72:	85 e0       	ldi	r24, 0x05	; 5
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10term_rightEPKcP10expression>
  7a:	b9 2e       	mov	r11, r25
  7c:	c8 2f       	mov	r28, r24
  7e:	d9 2f       	mov	r29, r25
  80:	20 97       	sbiw	r28, 0x00	; 0
  82:	01 f0       	breq	.+0      	; 0x84 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x84>
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10term_rightEPKcP10expression>
  8c:	9c 83       	std	Y+4, r25	; 0x04
  8e:	8b 83       	std	Y+3, r24	; 0x03
  90:	00 97       	sbiw	r24, 0x00	; 0
  92:	01 f4       	brne	.+0      	; 0x94 <_ZN12APDEvaluator10term_rightEPKcP10expression+0x94>
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10term_rightEPKcP10expression>
  9c:	d8 01       	movw	r26, r16
  9e:	12 96       	adiw	r26, 0x02	; 2
  a0:	ed 91       	ld	r30, X+
  a2:	fc 91       	ld	r31, X
  a4:	13 97       	sbiw	r26, 0x03	; 3
  a6:	ee 0d       	add	r30, r14
  a8:	ff 1d       	adc	r31, r15
  aa:	c8 01       	movw	r24, r16
  ac:	b7 01       	movw	r22, r14
  ae:	40 81       	ld	r20, Z
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10term_rightEPKcP10expression>
  b4:	88 83       	st	Y, r24
  b6:	d9 82       	std	Y+1, r13	; 0x01
  b8:	ca 82       	std	Y+2, r12	; 0x02
  ba:	4b 81       	ldd	r20, Y+3	; 0x03
  bc:	5c 81       	ldd	r21, Y+4	; 0x04
  be:	c8 01       	movw	r24, r16
  c0:	b7 01       	movw	r22, r14
  c2:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10term_rightEPKcP10expression>
  c6:	9c 83       	std	Y+4, r25	; 0x04
  c8:	8b 83       	std	Y+3, r24	; 0x03
  ca:	dc 2e       	mov	r13, r28
  cc:	cb 2c       	mov	r12, r11
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN12APDEvaluator10term_rightEPKcP10expression+0xd0>
  d0:	c8 01       	movw	r24, r16
  d2:	b7 01       	movw	r22, r14
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator10term_rightEPKcP10expression>
  d8:	00 c0       	rjmp	.+0      	; 0xda <_ZN12APDEvaluator10term_rightEPKcP10expression+0xda>
  da:	4d 2d       	mov	r20, r13
  dc:	5c 2d       	mov	r21, r12
  de:	ca 01       	movw	r24, r20
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	0f 91       	pop	r16
  e8:	ff 90       	pop	r15
  ea:	ef 90       	pop	r14
  ec:	df 90       	pop	r13
  ee:	cf 90       	pop	r12
  f0:	bf 90       	pop	r11
  f2:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator5fevalEPc:

00000000 <_ZN12APDEvaluator5fevalEPc>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
	// TODO Auto-generated destructor stub

}
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN12APDEvaluator5fevalEPc+0x18>
  18:	1b 82       	std	Y+3, r1	; 0x03
  1a:	1a 82       	std	Y+2, r1	; 0x02
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator5fevalEPc>
  20:	8c 01       	movw	r16, r24
  22:	ce 01       	movw	r24, r28
  24:	b8 01       	movw	r22, r16
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator5fevalEPc>
  2a:	f6 2e       	mov	r15, r22
  2c:	e7 2e       	mov	r14, r23
  2e:	d8 2e       	mov	r13, r24
  30:	c9 2e       	mov	r12, r25
  32:	c8 01       	movw	r24, r16
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator5fevalEPc>
  38:	2f 2d       	mov	r18, r15
  3a:	3e 2d       	mov	r19, r14
  3c:	4d 2d       	mov	r20, r13
  3e:	5c 2d       	mov	r21, r12
  40:	b9 01       	movw	r22, r18
  42:	ca 01       	movw	r24, r20
  44:	df 91       	pop	r29
  46:	cf 91       	pop	r28
  48:	1f 91       	pop	r17
  4a:	0f 91       	pop	r16
  4c:	ff 90       	pop	r15
  4e:	ef 90       	pop	r14
  50:	df 90       	pop	r13
  52:	cf 90       	pop	r12
  54:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluator11dothatstuffEPc:

00000000 <_ZN12APDEvaluator11dothatstuffEPc>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
	// TODO Auto-generated destructor stub

}
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
   e:	eb 01       	movw	r28, r22
  10:	61 15       	cp	r22, r1
  12:	71 05       	cpc	r23, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN12APDEvaluator11dothatstuffEPc+0x16>
  16:	fc 01       	movw	r30, r24
  18:	13 82       	std	Z+3, r1	; 0x03
  1a:	12 82       	std	Z+2, r1	; 0x02
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11dothatstuffEPc>
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11dothatstuffEPc>
  2c:	c7 01       	movw	r24, r14
  2e:	be 01       	movw	r22, r28
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11dothatstuffEPc>
  34:	8c 01       	movw	r16, r24
  36:	c7 01       	movw	r24, r14
  38:	b8 01       	movw	r22, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11dothatstuffEPc>
  3e:	ab 01       	movw	r20, r22
  40:	bc 01       	movw	r22, r24
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	22 e0       	ldi	r18, 0x02	; 2
  48:	30 e0       	ldi	r19, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11dothatstuffEPc>
  4e:	c8 01       	movw	r24, r16
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluator11dothatstuffEPc>
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	08 95       	ret

Disassembly of section .text._ZN12APDEvaluatorD0Ev:

00000000 <_ZN12APDEvaluatorD0Ev>:
	this->pControls = pCA;
	// TODO Auto-generated constructor stub

}

APDEvaluator::~APDEvaluator() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub

}
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDEvaluatorD0Ev>
  10:	08 95       	ret

APDRule.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000003  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000037  2**0
                  ALLOC
  3 .stab         000020dc  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00005232  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN7APDRule6bStateEv 00000002  00000000  00000000  00007346  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN7APDRule19apd_rule_idle_checkEPS_ 00000030  00000000  00000000  00007348  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN7APDRule19apd_rule_rtc_passedEPS_ 00000004  00000000  00000000  00007378  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._ZN7APDRule13apd_rule_trueEPS_ 00000004  00000000  00000000  0000737c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN7APDRule14apd_rule_falseEPS_ 00000004  00000000  00000000  00007380  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._ZN7APDRule19apd_rule_sensor_equEPS_ 0000005c  00000000  00000000  00007384  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN7APDRule18apd_rule_sensor_ltEPS_ 0000005c  00000000  00000000  000073e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN7APDRule18apd_rule_sensor_gtEPS_ 0000005c  00000000  00000000  0000743c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN7APDRule24apd_rule_eval_conditionsEPS_ 00000072  00000000  00000000  00007498  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN7APDRule18apd_rule_ram_checkEPS_ 00000024  00000000  00000000  0000750a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN7APDRule14apd_rule_metroEPS_ 00000034  00000000  00000000  0000752e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN7APDRule19get_rule_action_ptrEi 0000015e  00000000  00000000  00007562  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN7APDRule9getValueSEPc 0000005a  00000000  00000000  000076c0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN7APDRule12evaluateRuleEv 0000015e  00000000  00000000  0000771a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN7APDRule9initBlankEv 0000005c  00000000  00000000  00007878  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN7APDRuleC1EPc 00000012  00000000  00000000  000078d4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN7APDRuleC2EPc 00000012  00000000  00000000  000078e6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN7APDRuleC1Ev 00000012  00000000  00000000  000078f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN7APDRuleC2Ev 00000012  00000000  00000000  0000790a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN7APDRuleD0Ev 00000034  00000000  00000000  0000791c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN7APDRuleD1Ev 0000002e  00000000  00000000  00007950  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN7APDRuleD2Ev 0000002e  00000000  00000000  0000797e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray 0000035a  00000000  00000000  000079ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray 0000035a  00000000  00000000  00007d06  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .rodata._ZTV7APDRule 00000008  00000000  00000000  00008060  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 30 .progmem.data 00000293  00000000  00000000  00008068  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN7APDRule6bStateEv:

00000000 <_ZN7APDRule6bStateEv>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	00 c0       	rjmp	.+0      	; 0x2 <__zero_reg__+0x1>

Disassembly of section .text._ZN7APDRule19apd_rule_idle_checkEPS_:

00000000 <_ZN7APDRule19apd_rule_idle_checkEPS_>:
   0:	1f 93       	push	r17
   2:	10 e0       	ldi	r17, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	e8 5a       	subi	r30, 0xA8	; 168
   8:	ff 4f       	sbci	r31, 0xFF	; 255
   a:	01 90       	ld	r0, Z+
   c:	f0 81       	ld	r31, Z
   e:	e0 2d       	mov	r30, r0
  10:	60 81       	ld	r22, Z
  12:	71 81       	ldd	r23, Z+1	; 0x01
  14:	82 81       	ldd	r24, Z+2	; 0x02
  16:	93 81       	ldd	r25, Z+3	; 0x03
  18:	20 e0       	ldi	r18, 0x00	; 0
  1a:	30 e0       	ldi	r19, 0x00	; 0
  1c:	40 e8       	ldi	r20, 0x80	; 128
  1e:	5f e3       	ldi	r21, 0x3F	; 63
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19apd_rule_idle_checkEPS_>
  initBlank();
  24:	88 23       	and	r24, r24
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN7APDRule19apd_rule_idle_checkEPS_+0x28>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	11 e0       	ldi	r17, 0x01	; 1
  2a:	81 2f       	mov	r24, r17
  2c:	1f 91       	pop	r17
  2e:	08 95       	ret

Disassembly of section .text._ZN7APDRule19apd_rule_rtc_passedEPS_:

00000000 <_ZN7APDRule19apd_rule_rtc_passedEPS_>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	08 95       	ret

Disassembly of section .text._ZN7APDRule13apd_rule_trueEPS_:

00000000 <_ZN7APDRule13apd_rule_trueEPS_>:
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

Disassembly of section .text._ZN7APDRule14apd_rule_falseEPS_:

00000000 <_ZN7APDRule14apd_rule_falseEPS_>:
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	08 95       	ret

Disassembly of section .text._ZN7APDRule19apd_rule_sensor_equEPS_:

00000000 <_ZN7APDRule19apd_rule_sensor_equEPS_>:
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	8c 01       	movw	r16, r24
  10:	bb 24       	eor	r11, r11
  12:	04 5b       	subi	r16, 0xB4	; 180
  14:	1f 4f       	sbci	r17, 0xFF	; 255
  16:	d8 01       	movw	r26, r16
  18:	ed 91       	ld	r30, X+
  1a:	fd 91       	ld	r31, X+
  1c:	8d 01       	movw	r16, r26
  1e:	67 a9       	ldd	r22, Z+55	; 0x37
  20:	70 ad       	ldd	r23, Z+56	; 0x38
  initBlank();
  22:	81 ad       	ldd	r24, Z+57	; 0x39
  24:	92 ad       	ldd	r25, Z+58	; 0x3a
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19apd_rule_sensor_equEPS_>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  2a:	6b 01       	movw	r12, r22
  2c:	7c 01       	movw	r14, r24
  2e:	d8 01       	movw	r26, r16
  30:	ed 91       	ld	r30, X+
  32:	fc 91       	ld	r31, X
  34:	60 81       	ld	r22, Z
  36:	71 81       	ldd	r23, Z+1	; 0x01
  38:	82 81       	ldd	r24, Z+2	; 0x02
  3a:	93 81       	ldd	r25, Z+3	; 0x03
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19apd_rule_sensor_equEPS_>

  this->psa = pSA;
  40:	c6 16       	cp	r12, r22
  42:	d7 06       	cpc	r13, r23
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN7APDRule19apd_rule_sensor_equEPS_+0x46>
  this->pca = pCA;
  46:	bb 24       	eor	r11, r11
  48:	b3 94       	inc	r11
  4a:	8b 2d       	mov	r24, r11
  4c:	1f 91       	pop	r17
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	0f 91       	pop	r16
  50:	ff 90       	pop	r15
  52:	ef 90       	pop	r14
  54:	df 90       	pop	r13
  56:	cf 90       	pop	r12
  58:	bf 90       	pop	r11
  5a:	08 95       	ret

Disassembly of section .text._ZN7APDRule18apd_rule_sensor_ltEPS_:

00000000 <_ZN7APDRule18apd_rule_sensor_ltEPS_>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	8c 01       	movw	r16, r24
  10:	bb 24       	eor	r11, r11
  12:	04 5b       	subi	r16, 0xB4	; 180
  14:	1f 4f       	sbci	r17, 0xFF	; 255
  16:	d8 01       	movw	r26, r16
  18:	ed 91       	ld	r30, X+
  1a:	fd 91       	ld	r31, X+
  1c:	8d 01       	movw	r16, r26
  1e:	67 a9       	ldd	r22, Z+55	; 0x37
  20:	70 ad       	ldd	r23, Z+56	; 0x38
  initBlank();
  22:	81 ad       	ldd	r24, Z+57	; 0x39
  24:	92 ad       	ldd	r25, Z+58	; 0x3a
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule18apd_rule_sensor_ltEPS_>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  2a:	6b 01       	movw	r12, r22
  2c:	7c 01       	movw	r14, r24
  2e:	d8 01       	movw	r26, r16
  30:	ed 91       	ld	r30, X+
  32:	fc 91       	ld	r31, X
  34:	60 81       	ld	r22, Z
  36:	71 81       	ldd	r23, Z+1	; 0x01
  38:	82 81       	ldd	r24, Z+2	; 0x02
  3a:	93 81       	ldd	r25, Z+3	; 0x03
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule18apd_rule_sensor_ltEPS_>

  this->psa = pSA;
  40:	c6 16       	cp	r12, r22
  42:	d7 06       	cpc	r13, r23
  44:	04 f4       	brge	.+0      	; 0x46 <_ZN7APDRule18apd_rule_sensor_ltEPS_+0x46>
  this->pca = pCA;
  46:	bb 24       	eor	r11, r11
  48:	b3 94       	inc	r11
  4a:	8b 2d       	mov	r24, r11
  4c:	1f 91       	pop	r17
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	0f 91       	pop	r16
  50:	ff 90       	pop	r15
  52:	ef 90       	pop	r14
  54:	df 90       	pop	r13
  56:	cf 90       	pop	r12
  58:	bf 90       	pop	r11
  5a:	08 95       	ret

Disassembly of section .text._ZN7APDRule18apd_rule_sensor_gtEPS_:

00000000 <_ZN7APDRule18apd_rule_sensor_gtEPS_>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	8c 01       	movw	r16, r24
  10:	bb 24       	eor	r11, r11
  12:	04 5b       	subi	r16, 0xB4	; 180
  14:	1f 4f       	sbci	r17, 0xFF	; 255
  16:	d8 01       	movw	r26, r16
  18:	ed 91       	ld	r30, X+
  1a:	fd 91       	ld	r31, X+
  1c:	8d 01       	movw	r16, r26
  1e:	67 a9       	ldd	r22, Z+55	; 0x37
  20:	70 ad       	ldd	r23, Z+56	; 0x38
  initBlank();
  22:	81 ad       	ldd	r24, Z+57	; 0x39
  24:	92 ad       	ldd	r25, Z+58	; 0x3a
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule18apd_rule_sensor_gtEPS_>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  2a:	6b 01       	movw	r12, r22
  2c:	7c 01       	movw	r14, r24
  2e:	d8 01       	movw	r26, r16
  30:	ed 91       	ld	r30, X+
  32:	fc 91       	ld	r31, X
  34:	60 81       	ld	r22, Z
  36:	71 81       	ldd	r23, Z+1	; 0x01
  38:	82 81       	ldd	r24, Z+2	; 0x02
  3a:	93 81       	ldd	r25, Z+3	; 0x03
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule18apd_rule_sensor_gtEPS_>

  this->psa = pSA;
  40:	6c 15       	cp	r22, r12
  42:	7d 05       	cpc	r23, r13
  44:	04 f4       	brge	.+0      	; 0x46 <_ZN7APDRule18apd_rule_sensor_gtEPS_+0x46>
  this->pca = pCA;
  46:	bb 24       	eor	r11, r11
  48:	b3 94       	inc	r11
  4a:	8b 2d       	mov	r24, r11
  4c:	1f 91       	pop	r17
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	0f 91       	pop	r16
  50:	ff 90       	pop	r15
  52:	ef 90       	pop	r14
  54:	df 90       	pop	r13
  56:	cf 90       	pop	r12
  58:	bf 90       	pop	r11
  5a:	08 95       	ret

Disassembly of section .text._ZN7APDRule24apd_rule_eval_conditionsEPS_:

00000000 <_ZN7APDRule24apd_rule_eval_conditionsEPS_>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	8c 01       	movw	r16, r24
   e:	88 e0       	ldi	r24, 0x08	; 8
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule24apd_rule_eval_conditionsEPS_>
  16:	d8 2e       	mov	r13, r24
  18:	c9 2e       	mov	r12, r25
  1a:	03 5a       	subi	r16, 0xA3	; 163
  1c:	1f 4f       	sbci	r17, 0xFF	; 255
  1e:	f8 01       	movw	r30, r16
  20:	61 91       	ld	r22, Z+
  initBlank();
  22:	71 91       	ld	r23, Z+
  24:	8f 01       	movw	r16, r30
  26:	40 81       	ld	r20, Z

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	51 81       	ldd	r21, Z+1	; 0x01
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule24apd_rule_eval_conditionsEPS_>
  2e:	0a 53       	subi	r16, 0x3A	; 58
  30:	10 40       	sbci	r17, 0x00	; 0
  32:	8d 2d       	mov	r24, r13
  34:	9c 2d       	mov	r25, r12
  36:	b8 01       	movw	r22, r16
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule24apd_rule_eval_conditionsEPS_>
  3c:	7b 01       	movw	r14, r22

  this->psa = pSA;
  3e:	8c 01       	movw	r16, r24
  40:	8d 2d       	mov	r24, r13
  42:	9c 2d       	mov	r25, r12
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule24apd_rule_eval_conditionsEPS_>
  this->pca = pCA;
  48:	dd 24       	eor	r13, r13
  4a:	c8 01       	movw	r24, r16
  4c:	b7 01       	movw	r22, r14
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	20 e0       	ldi	r18, 0x00	; 0
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	40 e0       	ldi	r20, 0x00	; 0
  54:	50 e0       	ldi	r21, 0x00	; 0
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule24apd_rule_eval_conditionsEPS_>
  5a:	88 23       	and	r24, r24
  5c:	01 f0       	breq	.+0      	; 0x5e <_ZN7APDRule24apd_rule_eval_conditionsEPS_+0x5e>
  5e:	dd 24       	eor	r13, r13
  60:	d3 94       	inc	r13
      SerPrintP("RULE: '"); Serial.print( this->config.label); SerPrintP("'");
  62:	8d 2d       	mov	r24, r13
  64:	1f 91       	pop	r17
  66:	0f 91       	pop	r16
  68:	ff 90       	pop	r15
  6a:	ef 90       	pop	r14
  6c:	df 90       	pop	r13
  6e:	cf 90       	pop	r12
  70:	08 95       	ret

Disassembly of section .text._ZN7APDRule18apd_rule_ram_checkEPS_:

00000000 <_ZN7APDRule18apd_rule_ram_checkEPS_>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	fc 01       	movw	r30, r24
   6:	ea 5a       	subi	r30, 0xAA	; 170
   8:	ff 4f       	sbci	r31, 0xFF	; 255
   a:	00 81       	ld	r16, Z
   c:	11 81       	ldd	r17, Z+1	; 0x01
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule18apd_rule_ram_checkEPS_>
  12:	20 e0       	ldi	r18, 0x00	; 0
  14:	80 17       	cp	r24, r16
  16:	91 07       	cpc	r25, r17
  18:	04 f4       	brge	.+0      	; 0x1a <_ZN7APDRule18apd_rule_ram_checkEPS_+0x1a>
  1a:	21 e0       	ldi	r18, 0x01	; 1
  1c:	82 2f       	mov	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  initBlank();
  22:	08 95       	ret

Disassembly of section .text._ZN7APDRule14apd_rule_metroEPS_:

00000000 <_ZN7APDRule14apd_rule_metroEPS_>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	c6 5a       	subi	r28, 0xA6	; 166
   a:	df 4f       	sbci	r29, 0xFF	; 255
   c:	88 81       	ld	r24, Y
   e:	99 81       	ldd	r25, Y+1	; 0x01
  10:	00 97       	sbiw	r24, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN7APDRule14apd_rule_metroEPS_+0x14>
  14:	10 e0       	ldi	r17, 0x00	; 0
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN7APDRule14apd_rule_metroEPS_+0x18>
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule14apd_rule_metroEPS_>
  1c:	18 2f       	mov	r17, r24
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN7APDRule14apd_rule_metroEPS_+0x22>
  initBlank();
  22:	88 81       	ld	r24, Y
  24:	99 81       	ldd	r25, Y+1	; 0x01
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule14apd_rule_metroEPS_>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  2a:	81 2f       	mov	r24, r17
  2c:	df 91       	pop	r29
  2e:	cf 91       	pop	r28
  30:	1f 91       	pop	r17
  32:	08 95       	ret

Disassembly of section .text._ZN7APDRule19get_rule_action_ptrEi:

00000000 <_ZN7APDRule19get_rule_action_ptrEi>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	eb 01       	movw	r28, r22
   6:	62 31       	cpi	r22, 0x12	; 18
   8:	71 05       	cpc	r23, r1
   a:	01 f4       	brne	.+0      	; 0xc <_ZN7APDRule19get_rule_action_ptrEi+0xc>
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZN7APDRule19get_rule_action_ptrEi+0xe>
   e:	63 31       	cpi	r22, 0x13	; 19
  10:	71 05       	cpc	r23, r1
  12:	04 f4       	brge	.+0      	; 0x14 <_ZN7APDRule19get_rule_action_ptrEi+0x14>
  14:	62 30       	cpi	r22, 0x02	; 2
  16:	71 05       	cpc	r23, r1
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN7APDRule19get_rule_action_ptrEi+0x1a>
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN7APDRule19get_rule_action_ptrEi+0x1c>
  1c:	63 30       	cpi	r22, 0x03	; 3
  1e:	71 05       	cpc	r23, r1
  20:	04 f4       	brge	.+0      	; 0x22 <_ZN7APDRule19get_rule_action_ptrEi+0x22>
  initBlank();
  22:	61 15       	cp	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN7APDRule19get_rule_action_ptrEi+0x28>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	61 30       	cpi	r22, 0x01	; 1
  2a:	71 05       	cpc	r23, r1
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN7APDRule19get_rule_action_ptrEi+0x2e>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN7APDRule19get_rule_action_ptrEi+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN7APDRule19get_rule_action_ptrEi+0x32>
  32:	60 31       	cpi	r22, 0x10	; 16
  34:	71 05       	cpc	r23, r1
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN7APDRule19get_rule_action_ptrEi+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN7APDRule19get_rule_action_ptrEi+0x3a>
  3a:	61 31       	cpi	r22, 0x11	; 17
  3c:	71 05       	cpc	r23, r1

  this->psa = pSA;
  3e:	04 f0       	brlt	.+0      	; 0x40 <_ZN7APDRule19get_rule_action_ptrEi+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN7APDRule19get_rule_action_ptrEi+0x42>
  42:	63 30       	cpi	r22, 0x03	; 3
  44:	71 05       	cpc	r23, r1
  this->pca = pCA;
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN7APDRule19get_rule_action_ptrEi+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN7APDRule19get_rule_action_ptrEi+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN7APDRule19get_rule_action_ptrEi+0x4c>
  4c:	60 38       	cpi	r22, 0x80	; 128
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	71 05       	cpc	r23, r1
  50:	01 f4       	brne	.+0      	; 0x52 <_ZN7APDRule19get_rule_action_ptrEi+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN7APDRule19get_rule_action_ptrEi+0x54>
  54:	61 38       	cpi	r22, 0x81	; 129
  56:	71 05       	cpc	r23, r1
  58:	04 f4       	brge	.+0      	; 0x5a <_ZN7APDRule19get_rule_action_ptrEi+0x5a>
  5a:	63 31       	cpi	r22, 0x13	; 19
  5c:	71 05       	cpc	r23, r1
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN7APDRule19get_rule_action_ptrEi+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN7APDRule19get_rule_action_ptrEi+0x62>
      SerPrintP("RULE: '"); Serial.print( this->config.label); SerPrintP("'");
  62:	64 31       	cpi	r22, 0x14	; 20
  64:	71 05       	cpc	r23, r1
  66:	01 f0       	breq	.+0      	; 0x68 <_ZN7APDRule19get_rule_action_ptrEi+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN7APDRule19get_rule_action_ptrEi+0x6a>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN7APDRule19get_rule_action_ptrEi+0x6c>
  6c:	62 38       	cpi	r22, 0x82	; 130
  6e:	71 05       	cpc	r23, r1
  70:	01 f4       	brne	.+0      	; 0x72 <_ZN7APDRule19get_rule_action_ptrEi+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZN7APDRule19get_rule_action_ptrEi+0x74>
  74:	62 38       	cpi	r22, 0x82	; 130
  76:	71 05       	cpc	r23, r1
  78:	04 f4       	brge	.+0      	; 0x7a <_ZN7APDRule19get_rule_action_ptrEi+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZN7APDRule19get_rule_action_ptrEi+0x7c>
  7c:	6f 3f       	cpi	r22, 0xFF	; 255
  7e:	71 05       	cpc	r23, r1
      this->pcsensorvalue = NULL;               // done in init
  80:	01 f0       	breq	.+0      	; 0x82 <_ZN7APDRule19get_rule_action_ptrEi+0x82>
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN7APDRule19get_rule_action_ptrEi+0x84>
  84:	00 c0       	rjmp	.+0      	; 0x86 <_ZN7APDRule19get_rule_action_ptrEi+0x86>
  86:	80 e0       	ldi	r24, 0x00	; 0
      this->pmetro = NULL;                      // done in init
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
  8e:	20 e0       	ldi	r18, 0x00	; 0
      // set rule evaluation sensor / value
      if (this->config.rf_sensor_idx > -1 ) {              // TODO reimplement sensor indexing : && this->config.rf_sensor_idx < iSensorCount) {
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN7APDRule19get_rule_action_ptrEi+0x94>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
          //this->psensor = &(pAPDSensors[this->config.rf_sensor_idx]);



//            this->pvalue = &(pAPDSensors[this->config.rf_sensor_idx].fvalue);
        SerPrintP(" IN SENSOR(id");Serial.print(this->config.rf_sensor_idx);
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_ZN7APDRule19get_rule_action_ptrEi+0xa2>
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN7APDRule19get_rule_action_ptrEi+0xb0>
        SerPrintP(" - ");
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>

        // TODO THIS PART IS CRUCIAL - outside
        //Serial.print(pAPDSensors[this->config.rf_sensor_idx].config.label);
        SerPrintP(") ");
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_ZN7APDRule19get_rule_action_ptrEi+0xbe>
      } else {
        this->psensor = NULL;
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
//            this->pvalue = &(this->finternal);      // use the provided static value
//            SerPrintP(" evals Static Value=");Serial.print(this->finternal); SerPrintP(" ");
        SerPrintP(" IS VIRTUAL");
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN7APDRule19get_rule_action_ptrEi+0xcc>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
      }

      // test value is always the internal number, for now
      this->pvalue = &(this->finternal);      // use the provided static value
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	00 c0       	rjmp	.+0      	; 0xda <_ZN7APDRule19get_rule_action_ptrEi+0xda>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
  e2:	20 e0       	ldi	r18, 0x00	; 0

      // set rule execution control / value
      // TODO - reimplement the following check somehow (ArrayWrapper?)
      if (this->config.rule_control_idx > -1 ) {//&& this->config.rule_control_idx < pAPD->iControlCount) {
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_ZN7APDRule19get_rule_action_ptrEi+0xe8>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
          // TODO THIS HAS TO BE SET ON APDUINO LEVEL
        //this->pcontrol = &(pAPDControls[this->config.rule_control_idx]);

          //TODO REIMPLEMENT CHECK
        if (this->config.ra_sensor_idx >= 0) {// && this->config.ra_sensor_idx < pAPD->iSensorCount) {
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
            // THIS HAS TO BE SET ON THE APDUINO LEVEL
          //this->pcsensorvalue = &(pAPDSensors[this->config.ra_sensor_idx].fvalue);
          SerPrintP(" SENSORVAL "); //Serial.print(pAPDSensors[this->config.ra_sensor_idx].config.label);
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_ZN7APDRule19get_rule_action_ptrEi+0xf6>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
          Serial.print(this->config.ra_sensor_idx,DEC);
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	00 c0       	rjmp	.+0      	; 0x104 <_ZN7APDRule19get_rule_action_ptrEi+0x104>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
 10c:	20 e0       	ldi	r18, 0x00	; 0
        } else {
          // TODO check the config.value_mapping
          SerPrintP(" STATIC VALUE ");
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZN7APDRule19get_rule_action_ptrEi+0x112>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
          this->cvalue = this->config.ra_value;      // use the provided static value
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	00 c0       	rjmp	.+0      	; 0x120 <_ZN7APDRule19get_rule_action_ptrEi+0x120>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>

          //TODO reimplement outside
          //this->cvalue = (pAPDControls[this->config.rule_control_idx].iValue);
        }
        SerPrintP(" CONTROL "); Serial.print(this->config.rule_control_idx); SerPrintP(" -\" name can't be known yet. postproc needed...");
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	00 c0       	rjmp	.+0      	; 0x12e <_ZN7APDRule19get_rule_action_ptrEi+0x12e>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_ZN7APDRule19get_rule_action_ptrEi+0x13c>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
        //; Serial.print(this->pcontrol->config.label);SerPrintP("\" ");                // TODO dont access pcontrol, ptr not set!
      } else {
        SerPrintP(" NULL/INVALID CONTROL.");
 148:	be 01       	movw	r22, r28
 14a:	4a e0       	ldi	r20, 0x0A	; 10
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule19get_rule_action_ptrEi>
        this->pcontrol = NULL;
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	c9 01       	movw	r24, r18
        // todo revise this
        //this->cvalue = &(this->finternal);      // use the provided static value
        this->cvalue = 0;      // use the provided static value
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

Disassembly of section .text._ZN7APDRule9getValueSEPc:

00000000 <_ZN7APDRule9getValueSEPc>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	16 2f       	mov	r17, r22
   6:	07 2f       	mov	r16, r23
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN7APDRule9getValueSEPc+0xa>
   a:	00 d0       	rcall	.+0      	; 0xc <_ZN7APDRule9getValueSEPc+0xc>
   c:	ad b7       	in	r26, 0x3d	; 61
   e:	be b7       	in	r27, 0x3e	; 62
  10:	11 96       	adiw	r26, 0x01	; 1
  12:	ed b7       	in	r30, 0x3d	; 61
  14:	fe b7       	in	r31, 0x3e	; 62
  16:	61 83       	std	Z+1, r22	; 0x01
  18:	11 96       	adiw	r26, 0x01	; 1
  1a:	7c 93       	st	X, r23
  1c:	11 97       	sbiw	r26, 0x01	; 1
  1e:	20 e0       	ldi	r18, 0x00	; 0
  20:	30 e0       	ldi	r19, 0x00	; 0
  initBlank();
  22:	13 96       	adiw	r26, 0x03	; 3
  24:	3c 93       	st	X, r19
  26:	2e 93       	st	-X, r18

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	12 97       	sbiw	r26, 0x02	; 2
  2a:	fc 01       	movw	r30, r24
  2c:	e4 5a       	subi	r30, 0xA4	; 164
  2e:	ff 4f       	sbci	r31, 0xFF	; 255
  30:	80 81       	ld	r24, Z
  32:	14 96       	adiw	r26, 0x04	; 4
  34:	8c 93       	st	X, r24
  36:	14 97       	sbiw	r26, 0x04	; 4
  38:	15 96       	adiw	r26, 0x05	; 5
  3a:	1c 92       	st	X, r1
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule9getValueSEPc>

  this->psa = pSA;
  40:	8d b7       	in	r24, 0x3d	; 61
  42:	9e b7       	in	r25, 0x3e	; 62
  44:	06 96       	adiw	r24, 0x06	; 6
  this->pca = pCA;
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	9e bf       	out	0x3e, r25	; 62
  4c:	0f be       	out	0x3f, r0	; 63
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	8d bf       	out	0x3d, r24	; 61
  50:	81 2f       	mov	r24, r17
  52:	90 2f       	mov	r25, r16
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZN7APDRule12evaluateRuleEv:

00000000 <_ZN7APDRule12evaluateRuleEv>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	ec 01       	movw	r28, r24
  16:	ca 5b       	subi	r28, 0xBA	; 186
  18:	df 4f       	sbci	r29, 0xFF	; 255
  1a:	e8 81       	ld	r30, Y
  1c:	f9 81       	ldd	r31, Y+1	; 0x01
  1e:	c6 54       	subi	r28, 0x46	; 70
  20:	d0 40       	sbci	r29, 0x00	; 0
  initBlank();
  22:	ce 01       	movw	r24, r28
  24:	19 95       	eicall
  26:	98 2f       	mov	r25, r24

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	c4 5a       	subi	r28, 0xA4	; 164
  2a:	df 4f       	sbci	r29, 0xFF	; 255
  2c:	88 81       	ld	r24, Y
  2e:	cc 55       	subi	r28, 0x5C	; 92
  30:	d0 40       	sbci	r29, 0x00	; 0
  32:	98 17       	cp	r25, r24
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN7APDRule12evaluateRuleEv+0x36>
  36:	8b a1       	ldd	r24, Y+35	; 0x23
  38:	99 23       	and	r25, r25
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN7APDRule12evaluateRuleEv+0x3c>
  3c:	80 fd       	sbrc	r24, 0

  this->psa = pSA;
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN7APDRule12evaluateRuleEv+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN7APDRule12evaluateRuleEv+0x42>
  42:	81 ff       	sbrs	r24, 1
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN7APDRule12evaluateRuleEv+0x46>
  this->pca = pCA;
  46:	c4 5a       	subi	r28, 0xA4	; 164
  48:	df 4f       	sbci	r29, 0xFF	; 255
  4a:	98 83       	st	Y, r25
  4c:	cc 55       	subi	r28, 0x5C	; 92
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	d0 40       	sbci	r29, 0x00	; 0
  50:	fe 01       	movw	r30, r28
  52:	e8 5a       	subi	r30, 0xA8	; 168
  54:	ff 4f       	sbci	r31, 0xFF	; 255
  56:	99 23       	and	r25, r25
  58:	01 f0       	breq	.+0      	; 0x5a <_ZN7APDRule12evaluateRuleEv+0x5a>
  5a:	01 90       	ld	r0, Z+
  5c:	f0 81       	ld	r31, Z
  5e:	e0 2d       	mov	r30, r0
  60:	30 97       	sbiw	r30, 0x00	; 0
      SerPrintP("RULE: '"); Serial.print( this->config.label); SerPrintP("'");
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN7APDRule12evaluateRuleEv+0x64>
  64:	00 d0       	rcall	.+0      	; 0x66 <_ZN7APDRule12evaluateRuleEv+0x66>
  66:	0f 92       	push	r0
  68:	0d b7       	in	r16, 0x3d	; 61
  6a:	1e b7       	in	r17, 0x3e	; 62
  6c:	0f 5f       	subi	r16, 0xFF	; 255
  6e:	1f 4f       	sbci	r17, 0xFF	; 255
  70:	60 81       	ld	r22, Z
  72:	71 81       	ldd	r23, Z+1	; 0x01
  74:	82 81       	ldd	r24, Z+2	; 0x02
  76:	93 81       	ldd	r25, Z+3	; 0x03
  78:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule12evaluateRuleEv>
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	30 e0       	ldi	r19, 0x00	; 0
      this->pcsensorvalue = NULL;               // done in init
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	f8 01       	movw	r30, r16
  86:	20 83       	st	Z, r18
      this->pmetro = NULL;                      // done in init
  88:	31 83       	std	Z+1, r19	; 0x01
  8a:	42 83       	std	Z+2, r20	; 0x02
  8c:	53 83       	std	Z+3, r21	; 0x03
  8e:	20 e0       	ldi	r18, 0x00	; 0
      // set rule evaluation sensor / value
      if (this->config.rf_sensor_idx > -1 ) {              // TODO reimplement sensor indexing : && this->config.rf_sensor_idx < iSensorCount) {
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	e1 2c       	mov	r14, r1
          //this->psensor = &(pAPDSensors[this->config.rf_sensor_idx]);



//            this->pvalue = &(pAPDSensors[this->config.rf_sensor_idx].fvalue);
        SerPrintP(" IN SENSOR(id");Serial.print(this->config.rf_sensor_idx);
  98:	f4 e0       	ldi	r31, 0x04	; 4
  9a:	ff 2e       	mov	r15, r31
  9c:	01 2d       	mov	r16, r1
  9e:	11 2d       	mov	r17, r1
  a0:	aa 24       	eor	r10, r10
  a2:	bb 24       	eor	r11, r11
  a4:	65 01       	movw	r12, r10
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule12evaluateRuleEv>
  aa:	0f 90       	pop	r0
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
        SerPrintP(" - ");
  b0:	0f 90       	pop	r0
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN7APDRule12evaluateRuleEv+0xb4>
  b4:	ca 5a       	subi	r28, 0xAA	; 170
  b6:	df 4f       	sbci	r29, 0xFF	; 255

        // TODO THIS PART IS CRUCIAL - outside
        //Serial.print(pAPDSensors[this->config.rf_sensor_idx].config.label);
        SerPrintP(") ");
  b8:	68 81       	ld	r22, Y
  ba:	79 81       	ldd	r23, Y+1	; 0x01
  bc:	c6 55       	subi	r28, 0x56	; 86
      } else {
        this->psensor = NULL;
  be:	d0 40       	sbci	r29, 0x00	; 0
  c0:	fe 01       	movw	r30, r28
  c2:	ec 5a       	subi	r30, 0xAC	; 172
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	c8 5b       	subi	r28, 0xB8	; 184
  c8:	df 4f       	sbci	r29, 0xFF	; 255
//            this->pvalue = &(this->finternal);      // use the provided static value
//            SerPrintP(" evals Static Value=");Serial.print(this->finternal); SerPrintP(" ");
        SerPrintP(" IS VIRTUAL");
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN7APDRule12evaluateRuleEv+0xcc>
  cc:	01 90       	ld	r0, Z+
  ce:	f0 81       	ld	r31, Z
  d0:	e0 2d       	mov	r30, r0
      }

      // test value is always the internal number, for now
      this->pvalue = &(this->finternal);      // use the provided static value
  d2:	30 97       	sbiw	r30, 0x00	; 0
  d4:	01 f0       	breq	.+0      	; 0xd6 <_ZN7APDRule12evaluateRuleEv+0xd6>
  d6:	00 d0       	rcall	.+0      	; 0xd8 <_ZN7APDRule12evaluateRuleEv+0xd8>
  d8:	0f 92       	push	r0
  da:	0d b7       	in	r16, 0x3d	; 61
  dc:	1e b7       	in	r17, 0x3e	; 62
  de:	0f 5f       	subi	r16, 0xFF	; 255
  e0:	1f 4f       	sbci	r17, 0xFF	; 255
  e2:	60 81       	ld	r22, Z

      // set rule execution control / value
      // TODO - reimplement the following check somehow (ArrayWrapper?)
      if (this->config.rule_control_idx > -1 ) {//&& this->config.rule_control_idx < pAPD->iControlCount) {
  e4:	71 81       	ldd	r23, Z+1	; 0x01
  e6:	82 81       	ldd	r24, Z+2	; 0x02
  e8:	93 81       	ldd	r25, Z+3	; 0x03
  ea:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule12evaluateRuleEv>
          // TODO THIS HAS TO BE SET ON APDUINO LEVEL
        //this->pcontrol = &(pAPDControls[this->config.rule_control_idx]);

          //TODO REIMPLEMENT CHECK
        if (this->config.ra_sensor_idx >= 0) {// && this->config.ra_sensor_idx < pAPD->iSensorCount) {
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	40 e0       	ldi	r20, 0x00	; 0
            // THIS HAS TO BE SET ON THE APDUINO LEVEL
          //this->pcsensorvalue = &(pAPDSensors[this->config.ra_sensor_idx].fvalue);
          SerPrintP(" SENSORVAL "); //Serial.print(pAPDSensors[this->config.ra_sensor_idx].config.label);
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	f8 01       	movw	r30, r16
  f8:	20 83       	st	Z, r18
  fa:	31 83       	std	Z+1, r19	; 0x01
          Serial.print(this->config.ra_sensor_idx,DEC);
  fc:	42 83       	std	Z+2, r20	; 0x02
  fe:	53 83       	std	Z+3, r21	; 0x03
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	e1 2c       	mov	r14, r1
 10a:	e4 e0       	ldi	r30, 0x04	; 4
 10c:	fe 2e       	mov	r15, r30
        } else {
          // TODO check the config.value_mapping
          SerPrintP(" STATIC VALUE ");
 10e:	01 2d       	mov	r16, r1
 110:	11 2d       	mov	r17, r1
 112:	aa 24       	eor	r10, r10
 114:	bb 24       	eor	r11, r11
          this->cvalue = this->config.ra_value;      // use the provided static value
 116:	65 01       	movw	r12, r10
 118:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRule12evaluateRuleEv>
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN7APDRule12evaluateRuleEv+0x126>

          //TODO reimplement outside
          //this->cvalue = (pAPDControls[this->config.rule_control_idx].iValue);
        }
        SerPrintP(" CONTROL "); Serial.print(this->config.rule_control_idx); SerPrintP(" -\" name can't be known yet. postproc needed...");
 126:	ca 5a       	subi	r28, 0xAA	; 170
 128:	df 4f       	sbci	r29, 0xFF	; 255
 12a:	68 81       	ld	r22, Y
 12c:	79 81       	ldd	r23, Y+1	; 0x01
 12e:	c6 55       	subi	r28, 0x56	; 86
 130:	d0 40       	sbci	r29, 0x00	; 0
 132:	fe 01       	movw	r30, r28
 134:	ec 5a       	subi	r30, 0xAC	; 172
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	c6 5b       	subi	r28, 0xB6	; 182
 13a:	df 4f       	sbci	r29, 0xFF	; 255
 13c:	28 81       	ld	r18, Y
 13e:	39 81       	ldd	r19, Y+1	; 0x01
 140:	80 81       	ld	r24, Z
 142:	91 81       	ldd	r25, Z+1	; 0x01
 144:	f9 01       	movw	r30, r18
 146:	19 95       	eicall
        //; Serial.print(this->pcontrol->config.label);SerPrintP("\" ");                // TODO dont access pcontrol, ptr not set!
      } else {
        SerPrintP(" NULL/INVALID CONTROL.");
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
        this->pcontrol = NULL;
 150:	ff 90       	pop	r15
 152:	ef 90       	pop	r14
 154:	df 90       	pop	r13
 156:	cf 90       	pop	r12
        // todo revise this
        //this->cvalue = &(this->finternal);      // use the provided static value
        this->cvalue = 0;      // use the provided static value
 158:	bf 90       	pop	r11
 15a:	af 90       	pop	r10
 15c:	08 95       	ret

Disassembly of section .text._ZN7APDRule9initBlankEv:

00000000 <_ZN7APDRule9initBlankEv>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	02 96       	adiw	r24, 0x02	; 2
   8:	dc 01       	movw	r26, r24
   a:	84 e4       	ldi	r24, 0x44	; 68
   c:	ed 01       	movw	r28, r26
   e:	19 92       	st	Y+, r1
  10:	8a 95       	dec	r24
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN7APDRule9initBlankEv+0x14>
  14:	ea 5b       	subi	r30, 0xBA	; 186
  16:	ff 4f       	sbci	r31, 0xFF	; 255
  18:	11 92       	st	Z+, r1
  1a:	11 92       	st	Z+, r1
  1c:	11 92       	st	Z+, r1
  1e:	11 92       	st	Z+, r1
  20:	11 92       	st	Z+, r1
  initBlank();
  22:	11 92       	st	Z+, r1
  24:	11 92       	st	Z+, r1
  26:	11 92       	st	Z+, r1

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	11 92       	st	Z+, r1
  2a:	11 92       	st	Z+, r1
  2c:	80 e0       	ldi	r24, 0x00	; 0
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	a0 e0       	ldi	r26, 0x00	; 0
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	81 93       	st	Z+, r24
  36:	91 93       	st	Z+, r25
  38:	a1 93       	st	Z+, r26
  3a:	b1 93       	st	Z+, r27
  3c:	11 92       	st	Z+, r1

  this->psa = pSA;
  3e:	11 92       	st	Z+, r1
  40:	11 92       	st	Z+, r1
  42:	11 92       	st	Z+, r1
  44:	11 92       	st	Z+, r1
  this->pca = pCA;
  46:	11 92       	st	Z+, r1
  48:	11 92       	st	Z+, r1
  4a:	11 92       	st	Z+, r1
  4c:	11 92       	st	Z+, r1
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	11 92       	st	Z+, r1
  50:	11 92       	st	Z+, r1
  52:	11 82       	std	Z+1, r1	; 0x01
  54:	10 82       	st	Z, r1
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	08 95       	ret

Disassembly of section .text._ZN7APDRuleC1EPc:

00000000 <_ZN7APDRuleC1EPc>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EPc>
  10:	08 95       	ret

Disassembly of section .text._ZN7APDRuleC2EPc:

00000000 <_ZN7APDRuleC2EPc>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EPc>
  10:	08 95       	ret

Disassembly of section .text._ZN7APDRuleC1Ev:

00000000 <_ZN7APDRuleC1Ev>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1Ev>
  10:	08 95       	ret

Disassembly of section .text._ZN7APDRuleC2Ev:

00000000 <_ZN7APDRuleC2Ev>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2Ev>
  10:	08 95       	ret

Disassembly of section .text._ZN7APDRuleD0Ev:

00000000 <_ZN7APDRuleD0Ev>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	c6 5a       	subi	r28, 0xA6	; 166
  10:	df 4f       	sbci	r29, 0xFF	; 255
  12:	88 81       	ld	r24, Y
  14:	99 81       	ldd	r25, Y+1	; 0x01
  16:	ca 55       	subi	r28, 0x5A	; 90
  18:	d0 40       	sbci	r29, 0x00	; 0
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN7APDRuleD0Ev+0x1e>
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleD0Ev>
  initBlank();
  22:	ce 01       	movw	r24, r28
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleD0Ev>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	ce 01       	movw	r24, r28
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleD0Ev>
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

Disassembly of section .text._ZN7APDRuleD1Ev:

00000000 <_ZN7APDRuleD1Ev>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	c6 5a       	subi	r28, 0xA6	; 166
  10:	df 4f       	sbci	r29, 0xFF	; 255
  12:	88 81       	ld	r24, Y
  14:	99 81       	ldd	r25, Y+1	; 0x01
  16:	ca 55       	subi	r28, 0x5A	; 90
  18:	d0 40       	sbci	r29, 0x00	; 0
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN7APDRuleD1Ev+0x1e>
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleD1Ev>
  initBlank();
  22:	ce 01       	movw	r24, r28
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleD1Ev>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret

Disassembly of section .text._ZN7APDRuleD2Ev:

00000000 <_ZN7APDRuleD2Ev>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	c6 5a       	subi	r28, 0xA6	; 166
  10:	df 4f       	sbci	r29, 0xFF	; 255
  12:	88 81       	ld	r24, Y
  14:	99 81       	ldd	r25, Y+1	; 0x01
  16:	ca 55       	subi	r28, 0x5A	; 90
  18:	d0 40       	sbci	r29, 0x00	; 0
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN7APDRuleD2Ev+0x1e>
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleD2Ev>
  initBlank();
  22:	ce 01       	movw	r24, r28
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleD2Ev>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret

Disassembly of section .text._ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray:

00000000 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  12:	16 2f       	mov	r17, r22
  14:	07 2f       	mov	r16, r23
  16:	7a 01       	movw	r14, r20
  18:	69 01       	movw	r12, r18
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	99 83       	std	Y+1, r25	; 0x01
  20:	88 83       	st	Y, r24
  initBlank();
  22:	ce 01       	movw	r24, r28
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	de 01       	movw	r26, r28
  2a:	12 96       	adiw	r26, 0x02	; 2
  2c:	21 2f       	mov	r18, r17
  2e:	30 2f       	mov	r19, r16
  30:	c9 01       	movw	r24, r18
  32:	fc 01       	movw	r30, r24
  34:	84 e4       	ldi	r24, 0x44	; 68
  36:	01 90       	ld	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	81 50       	subi	r24, 0x01	; 1
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x3e>

  this->psa = pSA;
  3e:	c3 5a       	subi	r28, 0xA3	; 163
  40:	df 4f       	sbci	r29, 0xFF	; 255
  42:	e9 92       	st	Y+, r14
  44:	f9 92       	st	Y+, r15
  this->pca = pCA;
  46:	d9 82       	std	Y+1, r13	; 0x01
  48:	c8 82       	st	Y, r12
  4a:	cf 55       	subi	r28, 0x5F	; 95
  4c:	d0 40       	sbci	r29, 0x00	; 0
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	8b 89       	ldd	r24, Y+19	; 0x13
  50:	9c 89       	ldd	r25, Y+20	; 0x14
  52:	ad 89       	ldd	r26, Y+21	; 0x15
  54:	be 89       	ldd	r27, Y+22	; 0x16
  56:	c0 5b       	subi	r28, 0xB0	; 176
  58:	df 4f       	sbci	r29, 0xFF	; 255
  5a:	88 83       	st	Y, r24
  5c:	99 83       	std	Y+1, r25	; 0x01
  5e:	aa 83       	std	Y+2, r26	; 0x02
  60:	bb 83       	std	Y+3, r27	; 0x03
      SerPrintP("RULE: '"); Serial.print( this->config.label); SerPrintP("'");
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
  6a:	ce 54       	subi	r28, 0x4E	; 78
  6c:	d0 40       	sbci	r29, 0x00	; 0
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	be 01       	movw	r22, r28
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
      this->pcsensorvalue = NULL;               // done in init
  80:	ca 5a       	subi	r28, 0xAA	; 170
  82:	df 4f       	sbci	r29, 0xFF	; 255
  84:	19 92       	st	Y+, r1
  86:	19 92       	st	Y+, r1
      this->pmetro = NULL;                      // done in init
  88:	19 82       	std	Y+1, r1	; 0x01
  8a:	18 82       	st	Y, r1
  8c:	ca 55       	subi	r28, 0x5A	; 90
  8e:	d0 40       	sbci	r29, 0x00	; 0
      // set rule evaluation sensor / value
      if (this->config.rf_sensor_idx > -1 ) {              // TODO reimplement sensor indexing : && this->config.rf_sensor_idx < iSensorCount) {
  90:	89 89       	ldd	r24, Y+17	; 0x11
  92:	9a 89       	ldd	r25, Y+18	; 0x12
  94:	97 fd       	sbrc	r25, 7
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x98>
          //this->psensor = &(pAPDSensors[this->config.rf_sensor_idx]);



//            this->pvalue = &(pAPDSensors[this->config.rf_sensor_idx].fvalue);
        SerPrintP(" IN SENSOR(id");Serial.print(this->config.rf_sensor_idx);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
  a0:	69 89       	ldd	r22, Y+17	; 0x11
  a2:	7a 89       	ldd	r23, Y+18	; 0x12
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	4a e0       	ldi	r20, 0x0A	; 10
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
        SerPrintP(" - ");
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>

        // TODO THIS PART IS CRUCIAL - outside
        //Serial.print(pAPDSensors[this->config.rf_sensor_idx].config.label);
        SerPrintP(") ");
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0xbe>
      } else {
        this->psensor = NULL;
  be:	c4 5b       	subi	r28, 0xB4	; 180
  c0:	df 4f       	sbci	r29, 0xFF	; 255
  c2:	19 82       	std	Y+1, r1	; 0x01
  c4:	18 82       	st	Y, r1
  c6:	cc 54       	subi	r28, 0x4C	; 76
  c8:	d0 40       	sbci	r29, 0x00	; 0
//            this->pvalue = &(this->finternal);      // use the provided static value
//            SerPrintP(" evals Static Value=");Serial.print(this->finternal); SerPrintP(" ");
        SerPrintP(" IS VIRTUAL");
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
      }

      // test value is always the internal number, for now
      this->pvalue = &(this->finternal);      // use the provided static value
  d2:	fe 01       	movw	r30, r28
  d4:	e2 5b       	subi	r30, 0xB2	; 178
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	c0 5b       	subi	r28, 0xB0	; 176
  da:	df 4f       	sbci	r29, 0xFF	; 255
  dc:	d1 83       	std	Z+1, r29	; 0x01
  de:	c0 83       	st	Z, r28
  e0:	c0 55       	subi	r28, 0x50	; 80
  e2:	d0 40       	sbci	r29, 0x00	; 0

      // set rule execution control / value
      // TODO - reimplement the following check somehow (ArrayWrapper?)
      if (this->config.rule_control_idx > -1 ) {//&& this->config.rule_control_idx < pAPD->iControlCount) {
  e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
  e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
  e8:	97 fd       	sbrc	r25, 7
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0xec>
          // TODO THIS HAS TO BE SET ON APDUINO LEVEL
        //this->pcontrol = &(pAPDControls[this->config.rule_control_idx]);

          //TODO REIMPLEMENT CHECK
        if (this->config.ra_sensor_idx >= 0) {// && this->config.ra_sensor_idx < pAPD->iSensorCount) {
  ec:	89 a1       	ldd	r24, Y+33	; 0x21
  ee:	9a a1       	ldd	r25, Y+34	; 0x22
  f0:	97 fd       	sbrc	r25, 7
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0xf4>
            // THIS HAS TO BE SET ON THE APDUINO LEVEL
          //this->pcsensorvalue = &(pAPDSensors[this->config.ra_sensor_idx].fvalue);
          SerPrintP(" SENSORVAL "); //Serial.print(pAPDSensors[this->config.ra_sensor_idx].config.label);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
          Serial.print(this->config.ra_sensor_idx,DEC);
  fc:	69 a1       	ldd	r22, Y+33	; 0x21
  fe:	7a a1       	ldd	r23, Y+34	; 0x22
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	4a e0       	ldi	r20, 0x0A	; 10
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x10e>
        } else {
          // TODO check the config.value_mapping
          SerPrintP(" STATIC VALUE ");
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->cvalue = this->config.ra_value;      // use the provided static value
 116:	8f 8d       	ldd	r24, Y+31	; 0x1f
 118:	98 a1       	ldd	r25, Y+32	; 0x20
 11a:	ca 5a       	subi	r28, 0xAA	; 170
 11c:	df 4f       	sbci	r29, 0xFF	; 255
 11e:	99 83       	std	Y+1, r25	; 0x01
 120:	88 83       	st	Y, r24
 122:	c6 55       	subi	r28, 0x56	; 86
 124:	d0 40       	sbci	r29, 0x00	; 0

          //TODO reimplement outside
          //this->cvalue = (pAPDControls[this->config.rule_control_idx].iValue);
        }
        SerPrintP(" CONTROL "); Serial.print(this->config.rule_control_idx); SerPrintP(" -\" name can't be known yet. postproc needed...");
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 12e:	6b 8d       	ldd	r22, Y+27	; 0x1b
 130:	7c 8d       	ldd	r23, Y+28	; 0x1c
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	4a e0       	ldi	r20, 0x0A	; 10
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 146:	00 c0       	rjmp	.+0      	; 0x148 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x148>
        //; Serial.print(this->pcontrol->config.label);SerPrintP("\" ");                // TODO dont access pcontrol, ptr not set!
      } else {
        SerPrintP(" NULL/INVALID CONTROL.");
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
        this->pcontrol = NULL;
 150:	cc 5a       	subi	r28, 0xAC	; 172
 152:	df 4f       	sbci	r29, 0xFF	; 255
 154:	19 92       	st	Y+, r1
 156:	19 92       	st	Y+, r1
        // todo revise this
        //this->cvalue = &(this->finternal);      // use the provided static value
        this->cvalue = 0;      // use the provided static value
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	18 82       	st	Y, r1
 15c:	c6 55       	subi	r28, 0x56	; 86
 15e:	d0 40       	sbci	r29, 0x00	; 0
        //this->cvalue = this->config.ra_value;      // use the provided static value
      }
      if (this->config.conditions[0]!=0) {
 160:	8d a1       	ldd	r24, Y+37	; 0x25
 162:	88 23       	and	r24, r24
 164:	01 f0       	breq	.+0      	; 0x166 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x166>
      	SerPrintP(" EVALS: \"");Serial.print(this->config.conditions);SerPrintP("\" --");
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 16e:	be 01       	movw	r22, r28
 170:	6b 5d       	subi	r22, 0xDB	; 219
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
      }

      // select control functions
      SerPrintP(" T: ");
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
      this->ptcontrolfunc= get_rule_action_ptr(this->config.rule_true_action);
 18c:	6f 89       	ldd	r22, Y+23	; 0x17
 18e:	78 8d       	ldd	r23, Y+24	; 0x18
 190:	ce 01       	movw	r24, r28
 192:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 196:	c8 5b       	subi	r28, 0xB8	; 184
 198:	df 4f       	sbci	r29, 0xFF	; 255
 19a:	99 83       	std	Y+1, r25	; 0x01
 19c:	88 83       	st	Y, r24
 19e:	c8 54       	subi	r28, 0x48	; 72
 1a0:	d0 40       	sbci	r29, 0x00	; 0

      SerPrintP(" F: ");
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
      this->pfcontrolfunc= get_rule_action_ptr(this->config.rule_false_action);
 1aa:	69 8d       	ldd	r22, Y+25	; 0x19
 1ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 1b4:	c6 5b       	subi	r28, 0xB6	; 182
 1b6:	df 4f       	sbci	r29, 0xFF	; 255
 1b8:	99 83       	std	Y+1, r25	; 0x01
 1ba:	88 83       	st	Y, r24
 1bc:	ca 54       	subi	r28, 0x4A	; 74
 1be:	d0 40       	sbci	r29, 0x00	; 0

      // choose the evaluation function

      SerPrintP(" depending on -");
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
      /* link in the rule evaluation funtion */
      this->prulefunc = NULL;    // initialize as nullptr
 1c8:	8e 01       	movw	r16, r28
 1ca:	0a 5b       	subi	r16, 0xBA	; 186
 1cc:	1f 4f       	sbci	r17, 0xFF	; 255
 1ce:	f8 01       	movw	r30, r16
 1d0:	11 82       	std	Z+1, r1	; 0x01
 1d2:	10 82       	st	Z, r1
      switch (this->config.rule_definition) {
 1d4:	8f 85       	ldd	r24, Y+15	; 0x0f
 1d6:	98 89       	ldd	r25, Y+16	; 0x10
 1d8:	80 34       	cpi	r24, 0x40	; 64
 1da:	91 05       	cpc	r25, r1
 1dc:	01 f4       	brne	.+0      	; 0x1de <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1de>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1e0>
 1e0:	81 34       	cpi	r24, 0x41	; 65
 1e2:	91 05       	cpc	r25, r1
 1e4:	04 f4       	brge	.+0      	; 0x1e6 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1e6>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	91 05       	cpc	r25, r1
 1ea:	01 f4       	brne	.+0      	; 0x1ec <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1ec>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1ee>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	91 05       	cpc	r25, r1
 1f2:	04 f4       	brge	.+0      	; 0x1f4 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1f4>
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	01 f0       	breq	.+0      	; 0x1f8 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1f8>
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	01 f0       	breq	.+0      	; 0x1fc <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1fc>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1fe>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x200>
 200:	85 30       	cpi	r24, 0x05	; 5
 202:	91 05       	cpc	r25, r1
 204:	01 f4       	brne	.+0      	; 0x206 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x206>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x208>
 208:	85 30       	cpi	r24, 0x05	; 5
 20a:	91 05       	cpc	r25, r1
 20c:	04 f4       	brge	.+0      	; 0x20e <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x20e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x210>
 210:	06 97       	sbiw	r24, 0x06	; 6
 212:	01 f0       	breq	.+0      	; 0x214 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x214>
 214:	00 c0       	rjmp	.+0      	; 0x216 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x216>
 216:	00 c0       	rjmp	.+0      	; 0x218 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x218>
 218:	84 34       	cpi	r24, 0x44	; 68
 21a:	91 05       	cpc	r25, r1
 21c:	01 f4       	brne	.+0      	; 0x21e <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x21e>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x220>
 220:	85 34       	cpi	r24, 0x45	; 69
 222:	91 05       	cpc	r25, r1
 224:	04 f4       	brge	.+0      	; 0x226 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x226>
 226:	82 34       	cpi	r24, 0x42	; 66
 228:	91 05       	cpc	r25, r1
 22a:	01 f4       	brne	.+0      	; 0x22c <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x22c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x22e>
 22e:	83 34       	cpi	r24, 0x43	; 67
 230:	91 05       	cpc	r25, r1
 232:	04 f0       	brlt	.+0      	; 0x234 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x234>
 234:	00 c0       	rjmp	.+0      	; 0x236 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x236>
 236:	00 c0       	rjmp	.+0      	; 0x238 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x238>
 238:	8f 37       	cpi	r24, 0x7F	; 127
 23a:	91 05       	cpc	r25, r1
 23c:	01 f4       	brne	.+0      	; 0x23e <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x23e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x240>
 240:	8f 37       	cpi	r24, 0x7F	; 127
 242:	91 05       	cpc	r25, r1
 244:	04 f4       	brge	.+0      	; 0x246 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x246>
 246:	00 c0       	rjmp	.+0      	; 0x248 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x248>
 248:	85 38       	cpi	r24, 0x85	; 133
 24a:	91 05       	cpc	r25, r1
 24c:	04 f0       	brlt	.+0      	; 0x24e <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x24e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x250>
 250:	00 c0       	rjmp	.+0      	; 0x252 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x252>
        case RF_FALSE:
          SerPrintP("FALSE Rule");
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_false);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	00 c0       	rjmp	.+0      	; 0x260 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x260>
          break;
        case RF_TRUE:
          SerPrintP("TRUE Rule");
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_true);
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	f8 01       	movw	r30, r16
 26e:	91 83       	std	Z+1, r25	; 0x01
 270:	80 83       	st	Z, r24
 272:	00 c0       	rjmp	.+0      	; 0x274 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x274>
          break;
        case RF_METRO:
          SerPrintP("METRO Rule");
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_metro);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	f8 01       	movw	r30, r16
 282:	91 83       	std	Z+1, r25	; 0x01
 284:	80 83       	st	Z, r24
          if (this->pmetro = new Metro(this->config.rf_value)) {      // the correct metro value is the sensor's test val
 286:	89 e0       	ldi	r24, 0x09	; 9
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 28e:	8c 01       	movw	r16, r24
 290:	6b 89       	ldd	r22, Y+19	; 0x13
 292:	7c 89       	ldd	r23, Y+20	; 0x14
 294:	8d 89       	ldd	r24, Y+21	; 0x15
 296:	9e 89       	ldd	r25, Y+22	; 0x16
 298:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 29c:	ab 01       	movw	r20, r22
 29e:	bc 01       	movw	r22, r24
 2a0:	c8 01       	movw	r24, r16
 2a2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 2a6:	c6 5a       	subi	r28, 0xA6	; 166
 2a8:	df 4f       	sbci	r29, 0xFF	; 255
 2aa:	19 83       	std	Y+1, r17	; 0x01
 2ac:	08 83       	st	Y, r16
 2ae:	01 2b       	or	r16, r17
 2b0:	01 f0       	breq	.+0      	; 0x2b2 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2b2>
          	SerPrintP("Rule Metro allocated");
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2b8>
          } else {
          	SerPrintP("Failed to allocate rule metro.");
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2be>
          }
          break;
        case RF_RTC_PASSED:
          SerPrintP("RTC Rule");
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_rtc_passed);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2cc>
          break;
        case RF_IDLE_CHECK:
          SerPrintP("IDLE Rule");
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_idle_check);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2da>
          break;
        case RF_RAM_CHECK:
          SerPrintP("RAM Rule");
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_ram_check);
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2e8>
          break;
        case RF_SENSOR_GT:
			SerPrintP("SENSOR GT VAL Rule");
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
			this->prulefunc = (&apd_rule_sensor_gt);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2f6>
			break;
        case RF_SENSOR_GTE:
        	break;
        case RF_SENSOR_LT:
            SerPrintP("SENSOR LT VAL Rule");
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
            this->prulefunc = (&apd_rule_sensor_lt);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	00 c0       	rjmp	.+0      	; 0x304 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x304>
            break;
        case RF_SENSOR_LTE:
          SerPrintP("NOT SUPPORTED");
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	00 c0       	rjmp	.+0      	; 0x30a <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x30a>
          break;
        case RF_SENSOR_EQ:
            SerPrintP("SENSOR EQ VAL Rule");
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
            this->prulefunc = (&apd_rule_sensor_equ);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	00 c0       	rjmp	.+0      	; 0x318 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x318>
        case RF_SENSOR_GT_SENSOR:
        case RF_SENSOR_GTE_SENSOR:
        case RF_SENSOR_LT_SENSOR:
        case RF_SENSOR_LTE_SENSOR:
        case RF_SENSOR_EQ_SENSOR:
          SerPrintP("NOT SUPPORTED");
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 320:	00 c0       	rjmp	.+0      	; 0x322 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x322>
          break;
        case RF_EVALUATE:
					SerPrintP("EVALUATE CONDITIONS");
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
					this->prulefunc = (&apd_rule_eval_conditions);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	00 c0       	rjmp	.+0      	; 0x330 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray+0x330>
					break;
        default:
          SerPrintP("Invalid rule definition."); Serial.print(this->config.rule_definition);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
 338:	6f 85       	ldd	r22, Y+15	; 0x0f
 33a:	78 89       	ldd	r23, Y+16	; 0x10
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC1EP6RDCONFP14APDSensorArrayP15APDControlArray>
      }
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
 358:	08 95       	ret

Disassembly of section .text._ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray:

00000000 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>:
  // TODO Auto-generated constructor stub
  initBlank();
}

// initialize with RDCONF
APDRule::APDRule(RDCONF *rdc, APDSensorArray *pSA, APDControlArray *pCA) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  12:	16 2f       	mov	r17, r22
  14:	07 2f       	mov	r16, r23
  16:	7a 01       	movw	r14, r20
  18:	69 01       	movw	r12, r18
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	99 83       	std	Y+1, r25	; 0x01
  20:	88 83       	st	Y, r24
  initBlank();
  22:	ce 01       	movw	r24, r28
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>

  memcpy((void*)&(this->config),(void*)rdc,sizeof(RDCONF));       // copy the structure to config
  28:	de 01       	movw	r26, r28
  2a:	12 96       	adiw	r26, 0x02	; 2
  2c:	21 2f       	mov	r18, r17
  2e:	30 2f       	mov	r19, r16
  30:	c9 01       	movw	r24, r18
  32:	fc 01       	movw	r30, r24
  34:	84 e4       	ldi	r24, 0x44	; 68
  36:	01 90       	ld	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	81 50       	subi	r24, 0x01	; 1
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x3e>

  this->psa = pSA;
  3e:	c3 5a       	subi	r28, 0xA3	; 163
  40:	df 4f       	sbci	r29, 0xFF	; 255
  42:	e9 92       	st	Y+, r14
  44:	f9 92       	st	Y+, r15
  this->pca = pCA;
  46:	d9 82       	std	Y+1, r13	; 0x01
  48:	c8 82       	st	Y, r12
  4a:	cf 55       	subi	r28, 0x5F	; 95
  4c:	d0 40       	sbci	r29, 0x00	; 0
//            float finternal;                              // if value testing, pvalue should point to finternal, or to a sensor's float value, otherwise
//            APD_CONTROL *pcontrol;                        // outcome - pointer to a control
//            int cvalue;                                   // integer control value
//            float *pcsensorvalue;                         // pointer to a sensor to take control value from
//            void *pmetro;                                 // we might put a metro, or something else on it...
      this->finternal = this->config.rf_value;                                  // fill the internal float with the provided static test value
  4e:	8b 89       	ldd	r24, Y+19	; 0x13
  50:	9c 89       	ldd	r25, Y+20	; 0x14
  52:	ad 89       	ldd	r26, Y+21	; 0x15
  54:	be 89       	ldd	r27, Y+22	; 0x16
  56:	c0 5b       	subi	r28, 0xB0	; 176
  58:	df 4f       	sbci	r29, 0xFF	; 255
  5a:	88 83       	st	Y, r24
  5c:	99 83       	std	Y+1, r25	; 0x01
  5e:	aa 83       	std	Y+2, r26	; 0x02
  60:	bb 83       	std	Y+3, r27	; 0x03
      SerPrintP("RULE: '"); Serial.print( this->config.label); SerPrintP("'");
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
  6a:	ce 54       	subi	r28, 0x4E	; 78
  6c:	d0 40       	sbci	r29, 0x00	; 0
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	be 01       	movw	r22, r28
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
      this->pcsensorvalue = NULL;               // done in init
  80:	ca 5a       	subi	r28, 0xAA	; 170
  82:	df 4f       	sbci	r29, 0xFF	; 255
  84:	19 92       	st	Y+, r1
  86:	19 92       	st	Y+, r1
      this->pmetro = NULL;                      // done in init
  88:	19 82       	std	Y+1, r1	; 0x01
  8a:	18 82       	st	Y, r1
  8c:	ca 55       	subi	r28, 0x5A	; 90
  8e:	d0 40       	sbci	r29, 0x00	; 0
      // set rule evaluation sensor / value
      if (this->config.rf_sensor_idx > -1 ) {              // TODO reimplement sensor indexing : && this->config.rf_sensor_idx < iSensorCount) {
  90:	89 89       	ldd	r24, Y+17	; 0x11
  92:	9a 89       	ldd	r25, Y+18	; 0x12
  94:	97 fd       	sbrc	r25, 7
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x98>
          //this->psensor = &(pAPDSensors[this->config.rf_sensor_idx]);



//            this->pvalue = &(pAPDSensors[this->config.rf_sensor_idx].fvalue);
        SerPrintP(" IN SENSOR(id");Serial.print(this->config.rf_sensor_idx);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
  a0:	69 89       	ldd	r22, Y+17	; 0x11
  a2:	7a 89       	ldd	r23, Y+18	; 0x12
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	4a e0       	ldi	r20, 0x0A	; 10
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
        SerPrintP(" - ");
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>

        // TODO THIS PART IS CRUCIAL - outside
        //Serial.print(pAPDSensors[this->config.rf_sensor_idx].config.label);
        SerPrintP(") ");
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0xbe>
      } else {
        this->psensor = NULL;
  be:	c4 5b       	subi	r28, 0xB4	; 180
  c0:	df 4f       	sbci	r29, 0xFF	; 255
  c2:	19 82       	std	Y+1, r1	; 0x01
  c4:	18 82       	st	Y, r1
  c6:	cc 54       	subi	r28, 0x4C	; 76
  c8:	d0 40       	sbci	r29, 0x00	; 0
//            this->pvalue = &(this->finternal);      // use the provided static value
//            SerPrintP(" evals Static Value=");Serial.print(this->finternal); SerPrintP(" ");
        SerPrintP(" IS VIRTUAL");
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
      }

      // test value is always the internal number, for now
      this->pvalue = &(this->finternal);      // use the provided static value
  d2:	fe 01       	movw	r30, r28
  d4:	e2 5b       	subi	r30, 0xB2	; 178
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	c0 5b       	subi	r28, 0xB0	; 176
  da:	df 4f       	sbci	r29, 0xFF	; 255
  dc:	d1 83       	std	Z+1, r29	; 0x01
  de:	c0 83       	st	Z, r28
  e0:	c0 55       	subi	r28, 0x50	; 80
  e2:	d0 40       	sbci	r29, 0x00	; 0

      // set rule execution control / value
      // TODO - reimplement the following check somehow (ArrayWrapper?)
      if (this->config.rule_control_idx > -1 ) {//&& this->config.rule_control_idx < pAPD->iControlCount) {
  e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
  e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
  e8:	97 fd       	sbrc	r25, 7
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0xec>
          // TODO THIS HAS TO BE SET ON APDUINO LEVEL
        //this->pcontrol = &(pAPDControls[this->config.rule_control_idx]);

          //TODO REIMPLEMENT CHECK
        if (this->config.ra_sensor_idx >= 0) {// && this->config.ra_sensor_idx < pAPD->iSensorCount) {
  ec:	89 a1       	ldd	r24, Y+33	; 0x21
  ee:	9a a1       	ldd	r25, Y+34	; 0x22
  f0:	97 fd       	sbrc	r25, 7
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0xf4>
            // THIS HAS TO BE SET ON THE APDUINO LEVEL
          //this->pcsensorvalue = &(pAPDSensors[this->config.ra_sensor_idx].fvalue);
          SerPrintP(" SENSORVAL "); //Serial.print(pAPDSensors[this->config.ra_sensor_idx].config.label);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
          Serial.print(this->config.ra_sensor_idx,DEC);
  fc:	69 a1       	ldd	r22, Y+33	; 0x21
  fe:	7a a1       	ldd	r23, Y+34	; 0x22
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	4a e0       	ldi	r20, 0x0A	; 10
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x10e>
        } else {
          // TODO check the config.value_mapping
          SerPrintP(" STATIC VALUE ");
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->cvalue = this->config.ra_value;      // use the provided static value
 116:	8f 8d       	ldd	r24, Y+31	; 0x1f
 118:	98 a1       	ldd	r25, Y+32	; 0x20
 11a:	ca 5a       	subi	r28, 0xAA	; 170
 11c:	df 4f       	sbci	r29, 0xFF	; 255
 11e:	99 83       	std	Y+1, r25	; 0x01
 120:	88 83       	st	Y, r24
 122:	c6 55       	subi	r28, 0x56	; 86
 124:	d0 40       	sbci	r29, 0x00	; 0

          //TODO reimplement outside
          //this->cvalue = (pAPDControls[this->config.rule_control_idx].iValue);
        }
        SerPrintP(" CONTROL "); Serial.print(this->config.rule_control_idx); SerPrintP(" -\" name can't be known yet. postproc needed...");
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 12e:	6b 8d       	ldd	r22, Y+27	; 0x1b
 130:	7c 8d       	ldd	r23, Y+28	; 0x1c
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	4a e0       	ldi	r20, 0x0A	; 10
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 146:	00 c0       	rjmp	.+0      	; 0x148 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x148>
        //; Serial.print(this->pcontrol->config.label);SerPrintP("\" ");                // TODO dont access pcontrol, ptr not set!
      } else {
        SerPrintP(" NULL/INVALID CONTROL.");
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
        this->pcontrol = NULL;
 150:	cc 5a       	subi	r28, 0xAC	; 172
 152:	df 4f       	sbci	r29, 0xFF	; 255
 154:	19 92       	st	Y+, r1
 156:	19 92       	st	Y+, r1
        // todo revise this
        //this->cvalue = &(this->finternal);      // use the provided static value
        this->cvalue = 0;      // use the provided static value
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	18 82       	st	Y, r1
 15c:	c6 55       	subi	r28, 0x56	; 86
 15e:	d0 40       	sbci	r29, 0x00	; 0
        //this->cvalue = this->config.ra_value;      // use the provided static value
      }
      if (this->config.conditions[0]!=0) {
 160:	8d a1       	ldd	r24, Y+37	; 0x25
 162:	88 23       	and	r24, r24
 164:	01 f0       	breq	.+0      	; 0x166 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x166>
      	SerPrintP(" EVALS: \"");Serial.print(this->config.conditions);SerPrintP("\" --");
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 16e:	be 01       	movw	r22, r28
 170:	6b 5d       	subi	r22, 0xDB	; 219
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
      }

      // select control functions
      SerPrintP(" T: ");
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
      this->ptcontrolfunc= get_rule_action_ptr(this->config.rule_true_action);
 18c:	6f 89       	ldd	r22, Y+23	; 0x17
 18e:	78 8d       	ldd	r23, Y+24	; 0x18
 190:	ce 01       	movw	r24, r28
 192:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 196:	c8 5b       	subi	r28, 0xB8	; 184
 198:	df 4f       	sbci	r29, 0xFF	; 255
 19a:	99 83       	std	Y+1, r25	; 0x01
 19c:	88 83       	st	Y, r24
 19e:	c8 54       	subi	r28, 0x48	; 72
 1a0:	d0 40       	sbci	r29, 0x00	; 0

      SerPrintP(" F: ");
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
      this->pfcontrolfunc= get_rule_action_ptr(this->config.rule_false_action);
 1aa:	69 8d       	ldd	r22, Y+25	; 0x19
 1ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 1b4:	c6 5b       	subi	r28, 0xB6	; 182
 1b6:	df 4f       	sbci	r29, 0xFF	; 255
 1b8:	99 83       	std	Y+1, r25	; 0x01
 1ba:	88 83       	st	Y, r24
 1bc:	ca 54       	subi	r28, 0x4A	; 74
 1be:	d0 40       	sbci	r29, 0x00	; 0

      // choose the evaluation function

      SerPrintP(" depending on -");
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
      /* link in the rule evaluation funtion */
      this->prulefunc = NULL;    // initialize as nullptr
 1c8:	8e 01       	movw	r16, r28
 1ca:	0a 5b       	subi	r16, 0xBA	; 186
 1cc:	1f 4f       	sbci	r17, 0xFF	; 255
 1ce:	f8 01       	movw	r30, r16
 1d0:	11 82       	std	Z+1, r1	; 0x01
 1d2:	10 82       	st	Z, r1
      switch (this->config.rule_definition) {
 1d4:	8f 85       	ldd	r24, Y+15	; 0x0f
 1d6:	98 89       	ldd	r25, Y+16	; 0x10
 1d8:	80 34       	cpi	r24, 0x40	; 64
 1da:	91 05       	cpc	r25, r1
 1dc:	01 f4       	brne	.+0      	; 0x1de <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1de>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1e0>
 1e0:	81 34       	cpi	r24, 0x41	; 65
 1e2:	91 05       	cpc	r25, r1
 1e4:	04 f4       	brge	.+0      	; 0x1e6 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1e6>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	91 05       	cpc	r25, r1
 1ea:	01 f4       	brne	.+0      	; 0x1ec <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1ec>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1ee>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	91 05       	cpc	r25, r1
 1f2:	04 f4       	brge	.+0      	; 0x1f4 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1f4>
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	01 f0       	breq	.+0      	; 0x1f8 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1f8>
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	01 f0       	breq	.+0      	; 0x1fc <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1fc>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x1fe>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x200>
 200:	85 30       	cpi	r24, 0x05	; 5
 202:	91 05       	cpc	r25, r1
 204:	01 f4       	brne	.+0      	; 0x206 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x206>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x208>
 208:	85 30       	cpi	r24, 0x05	; 5
 20a:	91 05       	cpc	r25, r1
 20c:	04 f4       	brge	.+0      	; 0x20e <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x20e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x210>
 210:	06 97       	sbiw	r24, 0x06	; 6
 212:	01 f0       	breq	.+0      	; 0x214 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x214>
 214:	00 c0       	rjmp	.+0      	; 0x216 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x216>
 216:	00 c0       	rjmp	.+0      	; 0x218 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x218>
 218:	84 34       	cpi	r24, 0x44	; 68
 21a:	91 05       	cpc	r25, r1
 21c:	01 f4       	brne	.+0      	; 0x21e <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x21e>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x220>
 220:	85 34       	cpi	r24, 0x45	; 69
 222:	91 05       	cpc	r25, r1
 224:	04 f4       	brge	.+0      	; 0x226 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x226>
 226:	82 34       	cpi	r24, 0x42	; 66
 228:	91 05       	cpc	r25, r1
 22a:	01 f4       	brne	.+0      	; 0x22c <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x22c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x22e>
 22e:	83 34       	cpi	r24, 0x43	; 67
 230:	91 05       	cpc	r25, r1
 232:	04 f0       	brlt	.+0      	; 0x234 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x234>
 234:	00 c0       	rjmp	.+0      	; 0x236 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x236>
 236:	00 c0       	rjmp	.+0      	; 0x238 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x238>
 238:	8f 37       	cpi	r24, 0x7F	; 127
 23a:	91 05       	cpc	r25, r1
 23c:	01 f4       	brne	.+0      	; 0x23e <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x23e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x240>
 240:	8f 37       	cpi	r24, 0x7F	; 127
 242:	91 05       	cpc	r25, r1
 244:	04 f4       	brge	.+0      	; 0x246 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x246>
 246:	00 c0       	rjmp	.+0      	; 0x248 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x248>
 248:	85 38       	cpi	r24, 0x85	; 133
 24a:	91 05       	cpc	r25, r1
 24c:	04 f0       	brlt	.+0      	; 0x24e <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x24e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x250>
 250:	00 c0       	rjmp	.+0      	; 0x252 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x252>
        case RF_FALSE:
          SerPrintP("FALSE Rule");
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_false);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	00 c0       	rjmp	.+0      	; 0x260 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x260>
          break;
        case RF_TRUE:
          SerPrintP("TRUE Rule");
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_true);
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	f8 01       	movw	r30, r16
 26e:	91 83       	std	Z+1, r25	; 0x01
 270:	80 83       	st	Z, r24
 272:	00 c0       	rjmp	.+0      	; 0x274 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x274>
          break;
        case RF_METRO:
          SerPrintP("METRO Rule");
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_metro);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	f8 01       	movw	r30, r16
 282:	91 83       	std	Z+1, r25	; 0x01
 284:	80 83       	st	Z, r24
          if (this->pmetro = new Metro(this->config.rf_value)) {      // the correct metro value is the sensor's test val
 286:	89 e0       	ldi	r24, 0x09	; 9
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 28e:	8c 01       	movw	r16, r24
 290:	6b 89       	ldd	r22, Y+19	; 0x13
 292:	7c 89       	ldd	r23, Y+20	; 0x14
 294:	8d 89       	ldd	r24, Y+21	; 0x15
 296:	9e 89       	ldd	r25, Y+22	; 0x16
 298:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 29c:	ab 01       	movw	r20, r22
 29e:	bc 01       	movw	r22, r24
 2a0:	c8 01       	movw	r24, r16
 2a2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 2a6:	c6 5a       	subi	r28, 0xA6	; 166
 2a8:	df 4f       	sbci	r29, 0xFF	; 255
 2aa:	19 83       	std	Y+1, r17	; 0x01
 2ac:	08 83       	st	Y, r16
 2ae:	01 2b       	or	r16, r17
 2b0:	01 f0       	breq	.+0      	; 0x2b2 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2b2>
          	SerPrintP("Rule Metro allocated");
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2b8>
          } else {
          	SerPrintP("Failed to allocate rule metro.");
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2be>
          }
          break;
        case RF_RTC_PASSED:
          SerPrintP("RTC Rule");
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_rtc_passed);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2cc>
          break;
        case RF_IDLE_CHECK:
          SerPrintP("IDLE Rule");
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_idle_check);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2da>
          break;
        case RF_RAM_CHECK:
          SerPrintP("RAM Rule");
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
          this->prulefunc = (&apd_rule_ram_check);
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2e8>
          break;
        case RF_SENSOR_GT:
			SerPrintP("SENSOR GT VAL Rule");
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
			this->prulefunc = (&apd_rule_sensor_gt);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x2f6>
			break;
        case RF_SENSOR_GTE:
        	break;
        case RF_SENSOR_LT:
            SerPrintP("SENSOR LT VAL Rule");
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
            this->prulefunc = (&apd_rule_sensor_lt);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	00 c0       	rjmp	.+0      	; 0x304 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x304>
            break;
        case RF_SENSOR_LTE:
          SerPrintP("NOT SUPPORTED");
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	00 c0       	rjmp	.+0      	; 0x30a <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x30a>
          break;
        case RF_SENSOR_EQ:
            SerPrintP("SENSOR EQ VAL Rule");
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
            this->prulefunc = (&apd_rule_sensor_equ);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	00 c0       	rjmp	.+0      	; 0x318 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x318>
        case RF_SENSOR_GT_SENSOR:
        case RF_SENSOR_GTE_SENSOR:
        case RF_SENSOR_LT_SENSOR:
        case RF_SENSOR_LTE_SENSOR:
        case RF_SENSOR_EQ_SENSOR:
          SerPrintP("NOT SUPPORTED");
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 320:	00 c0       	rjmp	.+0      	; 0x322 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x322>
          break;
        case RF_EVALUATE:
					SerPrintP("EVALUATE CONDITIONS");
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
					this->prulefunc = (&apd_rule_eval_conditions);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	00 c0       	rjmp	.+0      	; 0x330 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray+0x330>
					break;
        default:
          SerPrintP("Invalid rule definition."); Serial.print(this->config.rule_definition);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
 338:	6f 85       	ldd	r22, Y+15	; 0x0f
 33a:	78 89       	ldd	r23, Y+16	; 0x10
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDRuleC2EP6RDCONFP14APDSensorArrayP15APDControlArray>
      }
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
 358:	08 95       	ret

APDRuleArray.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000080  2**0
                  ALLOC
  3 .stab         00001a10  00000000  00000000  00000080  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00004e51  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN12APDRuleArrayC2Ev 00000020  00000000  00000000  000068e1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN12APDRuleArrayC1Ev 00000020  00000000  00000000  00006901  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN12APDRuleArrayC2EP14APDSensorArrayP15APDControlArrayPf 00000020  00000000  00000000  00006921  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN12APDRuleArrayC1EP14APDSensorArrayP15APDControlArrayPf 00000020  00000000  00000000  00006941  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN12APDRuleArray20firstRuleBySensorIdxEi 00000002  00000000  00000000  00006961  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._ZN12APDRuleArray21firstRuleByControlIdxEi 00000002  00000000  00000000  00006963  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._ZN12APDRuleArray9loopRulesEv 00000044  00000000  00000000  00006965  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN12APDRuleArray24evaluateSensorRulesByIdxEi 00000066  00000000  00000000  000069a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor 0000007c  00000000  00000000  00006a0f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN12APDRuleArray10dumpToFileEP10APDStoragePc 0000020a  00000000  00000000  00006a8b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN12APDRuleArray9loadRulesEP10APDStorage 00000178  00000000  00000000  00006c95  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN12APDRuleArray15new_rule_parserEPviPc 0000012e  00000000  00000000  00006e0d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN12APDRuleArrayD1Ev 00000080  00000000  00000000  00006f3b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN12APDRuleArrayD2Ev 00000080  00000000  00000000  00006fbb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN12APDRuleArrayD0Ev 00000086  00000000  00000000  0000703b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .rodata._ZTV12APDRuleArray 00000008  00000000  00000000  000070c1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 21 .progmem.data 00000028  00000000  00000000  000070c9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN12APDRuleArrayC2Ev:

00000000 <_ZN12APDRuleArrayC2Ev>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	17 82       	std	Z+7, r1	; 0x07
  14:	16 82       	std	Z+6, r1	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	11 86       	std	Z+9, r1	; 0x09
  18:	10 86       	std	Z+8, r1	; 0x08
  1a:	13 86       	std	Z+11, r1	; 0x0b
  1c:	12 86       	std	Z+10, r1	; 0x0a
  1e:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArrayC1Ev:

00000000 <_ZN12APDRuleArrayC1Ev>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	17 82       	std	Z+7, r1	; 0x07
  14:	16 82       	std	Z+6, r1	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	11 86       	std	Z+9, r1	; 0x09
  18:	10 86       	std	Z+8, r1	; 0x08
  1a:	13 86       	std	Z+11, r1	; 0x0b
  1c:	12 86       	std	Z+10, r1	; 0x0a
  1e:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArrayC2EP14APDSensorArrayP15APDControlArrayPf:

00000000 <_ZN12APDRuleArrayC2EP14APDSensorArrayP15APDControlArrayPf>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	73 83       	std	Z+3, r23	; 0x03
   c:	62 83       	std	Z+2, r22	; 0x02
   e:	55 83       	std	Z+5, r21	; 0x05
  10:	44 83       	std	Z+4, r20	; 0x04
  12:	17 82       	std	Z+7, r1	; 0x07
  14:	16 82       	std	Z+6, r1	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	11 86       	std	Z+9, r1	; 0x09
  18:	10 86       	std	Z+8, r1	; 0x08
  1a:	33 87       	std	Z+11, r19	; 0x0b
  1c:	22 87       	std	Z+10, r18	; 0x0a
  1e:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArrayC1EP14APDSensorArrayP15APDControlArrayPf:

00000000 <_ZN12APDRuleArrayC1EP14APDSensorArrayP15APDControlArrayPf>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	73 83       	std	Z+3, r23	; 0x03
   c:	62 83       	std	Z+2, r22	; 0x02
   e:	55 83       	std	Z+5, r21	; 0x05
  10:	44 83       	std	Z+4, r20	; 0x04
  12:	17 82       	std	Z+7, r1	; 0x07
  14:	16 82       	std	Z+6, r1	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	11 86       	std	Z+9, r1	; 0x09
  18:	10 86       	std	Z+8, r1	; 0x08
  1a:	33 87       	std	Z+11, r19	; 0x0b
  1c:	22 87       	std	Z+10, r18	; 0x0a
  1e:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArray20firstRuleBySensorIdxEi:

00000000 <_ZN12APDRuleArray20firstRuleBySensorIdxEi>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArray21firstRuleByControlIdxEi:

00000000 <_ZN12APDRuleArray21firstRuleByControlIdxEi>:
   0:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArray9loopRulesEv:

00000000 <_ZN12APDRuleArray9loopRulesEv>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	c0 e0       	ldi	r28, 0x00	; 0
   c:	d0 e0       	ldi	r29, 0x00	; 0
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN12APDRuleArray9loopRulesEv+0x10>
  10:	ce 01       	movw	r24, r28
  12:	88 0f       	add	r24, r24
  14:	99 1f       	adc	r25, r25
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	d8 01       	movw	r26, r16
  18:	16 96       	adiw	r26, 0x06	; 6
  1a:	ed 91       	ld	r30, X+
  1c:	fc 91       	ld	r31, X
  1e:	17 97       	sbiw	r26, 0x07	; 7
  20:	e8 0f       	add	r30, r24
  22:	f9 1f       	adc	r31, r25
  24:	80 81       	ld	r24, Z
  26:	91 81       	ldd	r25, Z+1	; 0x01
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray9loopRulesEv>
      for (int i=0; i<this->iRuleCount; i++) {
          if (this->pAPDRules[i] != NULL) {
  2c:	21 96       	adiw	r28, 0x01	; 1
  2e:	f8 01       	movw	r30, r16
  30:	80 85       	ldd	r24, Z+8	; 0x08
  32:	91 85       	ldd	r25, Z+9	; 0x09
  34:	c8 17       	cp	r28, r24
              delete(this->pAPDRules[i]);		// each rule was new
  36:	d9 07       	cpc	r29, r25
  38:	04 f0       	brlt	.+0      	; 0x3a <_ZN12APDRuleArray9loopRulesEv+0x3a>
  3a:	df 91       	pop	r29
  3c:	cf 91       	pop	r28
  3e:	1f 91       	pop	r17
  40:	0f 91       	pop	r16
  42:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArray24evaluateSensorRulesByIdxEi:

00000000 <_ZN12APDRuleArray24evaluateSensorRulesByIdxEi>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
   e:	8b 01       	movw	r16, r22
  10:	c0 e0       	ldi	r28, 0x00	; 0
  12:	d0 e0       	ldi	r29, 0x00	; 0
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN12APDRuleArray24evaluateSensorRulesByIdxEi+0x16>
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	ce 01       	movw	r24, r28
  18:	88 0f       	add	r24, r24
  1a:	99 1f       	adc	r25, r25
  1c:	d7 01       	movw	r26, r14
  1e:	16 96       	adiw	r26, 0x06	; 6
  20:	ed 91       	ld	r30, X+
  22:	fc 91       	ld	r31, X
  24:	17 97       	sbiw	r26, 0x07	; 7
  26:	e8 0f       	add	r30, r24
  28:	f9 1f       	adc	r31, r25
      for (int i=0; i<this->iRuleCount; i++) {
          if (this->pAPDRules[i] != NULL) {
  2a:	01 90       	ld	r0, Z+
  2c:	f0 81       	ld	r31, Z
  2e:	e0 2d       	mov	r30, r0
  30:	81 89       	ldd	r24, Z+17	; 0x11
  32:	92 89       	ldd	r25, Z+18	; 0x12
  34:	80 17       	cp	r24, r16
              delete(this->pAPDRules[i]);		// each rule was new
  36:	91 07       	cpc	r25, r17
  38:	01 f0       	breq	.+0      	; 0x3a <_ZN12APDRuleArray24evaluateSensorRulesByIdxEi+0x3a>
  3a:	81 a1       	ldd	r24, Z+33	; 0x21
  3c:	92 a1       	ldd	r25, Z+34	; 0x22
  3e:	80 17       	cp	r24, r16
  40:	91 07       	cpc	r25, r17
  42:	01 f4       	brne	.+0      	; 0x44 <_ZN12APDRuleArray24evaluateSensorRulesByIdxEi+0x44>
  44:	cf 01       	movw	r24, r30
              this->pAPDRules[i] = NULL;
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray24evaluateSensorRulesByIdxEi>
  4a:	21 96       	adiw	r28, 0x01	; 1
  4c:	f7 01       	movw	r30, r14
  4e:	80 85       	ldd	r24, Z+8	; 0x08
  50:	91 85       	ldd	r25, Z+9	; 0x09

APDRuleArray::~APDRuleArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
      for (int i=0; i<this->iRuleCount; i++) {
  52:	c8 17       	cp	r28, r24
  54:	d9 07       	cpc	r29, r25
  56:	04 f0       	brlt	.+0      	; 0x58 <_ZN12APDRuleArray24evaluateSensorRulesByIdxEi+0x58>
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
          if (this->pAPDRules[i] != NULL) {
              delete(this->pAPDRules[i]);		// each rule was new
              this->pAPDRules[i] = NULL;
          }
      }
      free(this->pAPDRules);								// pAPDRules was malloc
  64:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor:

00000000 <_ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
   e:	00 97       	sbiw	r24, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor+0x12>
  12:	dc 01       	movw	r26, r24
  14:	12 96       	adiw	r26, 0x02	; 2
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	8d 91       	ld	r24, X+
  18:	9c 91       	ld	r25, X
  1a:	13 97       	sbiw	r26, 0x03	; 3
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor>
  20:	8c 01       	movw	r16, r24
  22:	97 fd       	sbrc	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor+0x26>
  26:	c0 e0       	ldi	r28, 0x00	; 0
  28:	d0 e0       	ldi	r29, 0x00	; 0
      for (int i=0; i<this->iRuleCount; i++) {
          if (this->pAPDRules[i] != NULL) {
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor+0x2c>
  2c:	ce 01       	movw	r24, r28
  2e:	88 0f       	add	r24, r24
  30:	99 1f       	adc	r25, r25
  32:	d7 01       	movw	r26, r14
  34:	16 96       	adiw	r26, 0x06	; 6
              delete(this->pAPDRules[i]);		// each rule was new
  36:	ed 91       	ld	r30, X+
  38:	fc 91       	ld	r31, X
  3a:	17 97       	sbiw	r26, 0x07	; 7
  3c:	e8 0f       	add	r30, r24
  3e:	f9 1f       	adc	r31, r25
  40:	01 90       	ld	r0, Z+
  42:	f0 81       	ld	r31, Z
  44:	e0 2d       	mov	r30, r0
              this->pAPDRules[i] = NULL;
  46:	81 89       	ldd	r24, Z+17	; 0x11
  48:	92 89       	ldd	r25, Z+18	; 0x12
  4a:	80 17       	cp	r24, r16
  4c:	91 07       	cpc	r25, r17
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor+0x50>
  50:	81 a1       	ldd	r24, Z+33	; 0x21

APDRuleArray::~APDRuleArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
      for (int i=0; i<this->iRuleCount; i++) {
  52:	92 a1       	ldd	r25, Z+34	; 0x22
  54:	80 17       	cp	r24, r16
  56:	91 07       	cpc	r25, r17
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor+0x5a>
  5a:	cf 01       	movw	r24, r30
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor>
  60:	21 96       	adiw	r28, 0x01	; 1
  62:	f7 01       	movw	r30, r14
          if (this->pAPDRules[i] != NULL) {
              delete(this->pAPDRules[i]);		// each rule was new
              this->pAPDRules[i] = NULL;
          }
      }
      free(this->pAPDRules);								// pAPDRules was malloc
  64:	80 85       	ldd	r24, Z+8	; 0x08
  66:	91 85       	ldd	r25, Z+9	; 0x09
  68:	c8 17       	cp	r28, r24
      this->pAPDRules = NULL;
  6a:	d9 07       	cpc	r29, r25
  6c:	04 f0       	brlt	.+0      	; 0x6e <_ZN12APDRuleArray19evaluateSensorRulesEPvP9APDSensor+0x6e>
      this->iRuleCount=0;
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  }
}
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArray10dumpToFileEP10APDStoragePc:

00000000 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	5f 92       	push	r5
   2:	6f 92       	push	r6
   4:	7f 92       	push	r7
   6:	8f 92       	push	r8
   8:	9f 92       	push	r9
   a:	af 92       	push	r10
   c:	bf 92       	push	r11
   e:	cf 92       	push	r12
  10:	df 92       	push	r13
  12:	ef 92       	push	r14
  14:	ff 92       	push	r15
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	0f 93       	push	r16
  18:	1f 93       	push	r17
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	c3 58       	subi	r28, 0x83	; 131
  24:	d0 40       	sbci	r29, 0x00	; 0
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	f8 94       	cli
      for (int i=0; i<this->iRuleCount; i++) {
          if (this->pAPDRules[i] != NULL) {
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	0f be       	out	0x3f, r0	; 63
  2e:	cd bf       	out	0x3d, r28	; 61
  30:	6c 01       	movw	r12, r24
  32:	7b 01       	movw	r14, r22
  34:	8a 01       	movw	r16, r20
              delete(this->pAPDRules[i]);		// each rule was new
  36:	db 01       	movw	r26, r22
  38:	18 96       	adiw	r26, 0x08	; 8
  3a:	8d 91       	ld	r24, X+
  3c:	9c 91       	ld	r25, X
  3e:	19 97       	sbiw	r26, 0x09	; 9
  40:	ba 01       	movw	r22, r20
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
              this->pAPDRules[i] = NULL;
  46:	88 23       	and	r24, r24
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc+0x4a>
  4a:	f7 01       	movw	r30, r14
  4c:	80 85       	ldd	r24, Z+8	; 0x08
  4e:	91 85       	ldd	r25, Z+9	; 0x09
  50:	b8 01       	movw	r22, r16

APDRuleArray::~APDRuleArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
      for (int i=0; i<this->iRuleCount; i++) {
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
  56:	7e 01       	movw	r14, r28
  58:	08 94       	sec
  5a:	e1 1c       	adc	r14, r1
  5c:	f1 1c       	adc	r15, r1
  5e:	c7 01       	movw	r24, r14
  60:	b8 01       	movw	r22, r16
  62:	42 e4       	ldi	r20, 0x42	; 66
          if (this->pAPDRules[i] != NULL) {
              delete(this->pAPDRules[i]);		// each rule was new
              this->pAPDRules[i] = NULL;
          }
      }
      free(this->pAPDRules);								// pAPDRules was malloc
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
  68:	88 85       	ldd	r24, Y+8	; 0x08
      this->pAPDRules = NULL;
  6a:	88 23       	and	r24, r24
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc+0x6e>
      this->iRuleCount=0;
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc+0x70>
  70:	00 e0       	ldi	r16, 0x00	; 0
  }
}
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	f0 e6       	ldi	r31, 0x60	; 96
  76:	5f 2e       	mov	r5, r31
  78:	e4 e2       	ldi	r30, 0x24	; 36
  7a:	6e 2e       	mov	r6, r30
  7c:	71 2c       	mov	r7, r1
  7e:	6c 0e       	add	r6, r28
  80:	7d 1e       	adc	r7, r29
  82:	70 e2       	ldi	r23, 0x20	; 32
  84:	a7 2e       	mov	r10, r23
  86:	b1 2c       	mov	r11, r1
  88:	ac 0e       	add	r10, r28
  8a:	bd 1e       	adc	r11, r29
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	86 2e       	mov	r8, r22
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	96 2e       	mov	r9, r22
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc+0x96>
  96:	18 a2       	std	Y+32, r1	; 0x20
  98:	19 a2       	std	Y+33, r1	; 0x21
  9a:	1a a2       	std	Y+34, r1	; 0x22
  9c:	1b a2       	std	Y+35, r1	; 0x23
  9e:	d3 01       	movw	r26, r6
  a0:	e5 2d       	mov	r30, r5
  a2:	1d 92       	st	X+, r1
  a4:	ea 95       	dec	r30
  a6:	01 f4       	brne	.+0      	; 0xa8 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc+0xa8>
  a8:	c8 01       	movw	r24, r16
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	d6 01       	movw	r26, r12
  b0:	16 96       	adiw	r26, 0x06	; 6
  b2:	ed 91       	ld	r30, X+
  b4:	fc 91       	ld	r31, X
  b6:	17 97       	sbiw	r26, 0x07	; 7
  b8:	e8 0f       	add	r30, r24
  ba:	f9 1f       	adc	r31, r25
  bc:	01 90       	ld	r0, Z+
  be:	f0 81       	ld	r31, Z
  c0:	e0 2d       	mov	r30, r0
  c2:	8d b7       	in	r24, 0x3d	; 61
  c4:	9e b7       	in	r25, 0x3e	; 62
  c6:	4a 97       	sbiw	r24, 0x1a	; 26
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	9e bf       	out	0x3e, r25	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	8d bf       	out	0x3d, r24	; 61
  d2:	2d b7       	in	r18, 0x3d	; 61
  d4:	3e b7       	in	r19, 0x3e	; 62
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	ad b7       	in	r26, 0x3d	; 61
  dc:	be b7       	in	r27, 0x3e	; 62
  de:	12 96       	adiw	r26, 0x02	; 2
  e0:	bc 92       	st	X, r11
  e2:	ae 92       	st	-X, r10
  e4:	11 97       	sbiw	r26, 0x01	; 1
  e6:	d9 01       	movw	r26, r18
  e8:	13 96       	adiw	r26, 0x03	; 3
  ea:	9c 92       	st	X, r9
  ec:	8e 92       	st	-X, r8
  ee:	12 97       	sbiw	r26, 0x02	; 2
  f0:	32 96       	adiw	r30, 0x02	; 2
  f2:	15 96       	adiw	r26, 0x05	; 5
  f4:	fc 93       	st	X, r31
  f6:	ee 93       	st	-X, r30
  f8:	14 97       	sbiw	r26, 0x04	; 4
  fa:	32 97       	sbiw	r30, 0x02	; 2
  fc:	87 85       	ldd	r24, Z+15	; 0x0f
  fe:	90 89       	ldd	r25, Z+16	; 0x10
 100:	17 96       	adiw	r26, 0x07	; 7
 102:	9c 93       	st	X, r25
 104:	8e 93       	st	-X, r24
 106:	16 97       	sbiw	r26, 0x06	; 6
 108:	81 89       	ldd	r24, Z+17	; 0x11
 10a:	92 89       	ldd	r25, Z+18	; 0x12
 10c:	19 96       	adiw	r26, 0x09	; 9
 10e:	9c 93       	st	X, r25
 110:	8e 93       	st	-X, r24
 112:	18 97       	sbiw	r26, 0x08	; 8
 114:	43 89       	ldd	r20, Z+19	; 0x13
 116:	54 89       	ldd	r21, Z+20	; 0x14
 118:	65 89       	ldd	r22, Z+21	; 0x15
 11a:	76 89       	ldd	r23, Z+22	; 0x16
 11c:	1a 96       	adiw	r26, 0x0a	; 10
 11e:	4d 93       	st	X+, r20
 120:	5d 93       	st	X+, r21
 122:	6d 93       	st	X+, r22
 124:	7c 93       	st	X, r23
 126:	1d 97       	sbiw	r26, 0x0d	; 13
 128:	87 89       	ldd	r24, Z+23	; 0x17
 12a:	90 8d       	ldd	r25, Z+24	; 0x18
 12c:	1f 96       	adiw	r26, 0x0f	; 15
 12e:	9c 93       	st	X, r25
 130:	8e 93       	st	-X, r24
 132:	1e 97       	sbiw	r26, 0x0e	; 14
 134:	81 8d       	ldd	r24, Z+25	; 0x19
 136:	92 8d       	ldd	r25, Z+26	; 0x1a
 138:	51 96       	adiw	r26, 0x11	; 17
 13a:	9c 93       	st	X, r25
 13c:	8e 93       	st	-X, r24
 13e:	50 97       	sbiw	r26, 0x10	; 16
 140:	83 8d       	ldd	r24, Z+27	; 0x1b
 142:	94 8d       	ldd	r25, Z+28	; 0x1c
 144:	53 96       	adiw	r26, 0x13	; 19
 146:	9c 93       	st	X, r25
 148:	8e 93       	st	-X, r24
 14a:	52 97       	sbiw	r26, 0x12	; 18
 14c:	85 8d       	ldd	r24, Z+29	; 0x1d
 14e:	96 8d       	ldd	r25, Z+30	; 0x1e
 150:	55 96       	adiw	r26, 0x15	; 21
 152:	9c 93       	st	X, r25
 154:	8e 93       	st	-X, r24
 156:	54 97       	sbiw	r26, 0x14	; 20
 158:	87 8d       	ldd	r24, Z+31	; 0x1f
 15a:	90 a1       	ldd	r25, Z+32	; 0x20
 15c:	57 96       	adiw	r26, 0x17	; 23
 15e:	9c 93       	st	X, r25
 160:	8e 93       	st	-X, r24
 162:	56 97       	sbiw	r26, 0x16	; 22
 164:	81 a1       	ldd	r24, Z+33	; 0x21
 166:	92 a1       	ldd	r25, Z+34	; 0x22
 168:	59 96       	adiw	r26, 0x19	; 25
 16a:	9c 93       	st	X, r25
 16c:	8e 93       	st	-X, r24
 16e:	58 97       	sbiw	r26, 0x18	; 24
 170:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
 174:	ed b7       	in	r30, 0x3d	; 61
 176:	fe b7       	in	r31, 0x3e	; 62
 178:	7a 96       	adiw	r30, 0x1a	; 26
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	fe bf       	out	0x3e, r31	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	ed bf       	out	0x3d, r30	; 61
 184:	c7 01       	movw	r24, r14
 186:	b5 01       	movw	r22, r10
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
 18c:	0f 5f       	subi	r16, 0xFF	; 255
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	d6 01       	movw	r26, r12
 192:	18 96       	adiw	r26, 0x08	; 8
 194:	8d 91       	ld	r24, X+
 196:	9c 91       	ld	r25, X
 198:	19 97       	sbiw	r26, 0x09	; 9
 19a:	08 17       	cp	r16, r24
 19c:	19 07       	cpc	r17, r25
 19e:	04 f4       	brge	.+0      	; 0x1a0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc+0x1a0>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc+0x1a2>
 1a2:	ce 01       	movw	r24, r28
 1a4:	05 96       	adiw	r24, 0x05	; 5
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc+0x1ac>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	b8 01       	movw	r22, r16
 1ba:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
 1c6:	88 85       	ldd	r24, Y+8	; 0x08
 1c8:	88 23       	and	r24, r24
 1ca:	01 f0       	breq	.+0      	; 0x1cc <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc+0x1cc>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9a 83       	std	Y+2, r25	; 0x02
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	ce 01       	movw	r24, r28
 1d6:	05 96       	adiw	r24, 0x05	; 5
 1d8:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray10dumpToFileEP10APDStoragePc>
 1dc:	cd 57       	subi	r28, 0x7D	; 125
 1de:	df 4f       	sbci	r29, 0xFF	; 255
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
 1ea:	cf 91       	pop	r28
 1ec:	df 91       	pop	r29
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	bf 90       	pop	r11
 1fc:	af 90       	pop	r10
 1fe:	9f 90       	pop	r9
 200:	8f 90       	pop	r8
 202:	7f 90       	pop	r7
 204:	6f 90       	pop	r6
 206:	5f 90       	pop	r5
 208:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArray9loadRulesEP10APDStorage:

00000000 <_ZN12APDRuleArray9loadRulesEP10APDStorage>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	8e 81       	ldd	r24, Y+6	; 0x06
   e:	9f 81       	ldd	r25, Y+7	; 0x07
  10:	89 2b       	or	r24, r25
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x16>
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray9loadRulesEP10APDStorage>
  1e:	99 87       	std	Y+9, r25	; 0x09
  20:	88 87       	std	Y+8, r24	; 0x08
  22:	18 16       	cp	r1, r24
  24:	19 06       	cpc	r1, r25
  26:	04 f0       	brlt	.+0      	; 0x28 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x28>
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x2a>
      for (int i=0; i<this->iRuleCount; i++) {
          if (this->pAPDRules[i] != NULL) {
  2a:	88 0f       	add	r24, r24
  2c:	99 1f       	adc	r25, r25
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray9loadRulesEP10APDStorage>
  32:	ac 01       	movw	r20, r24
  34:	9f 83       	std	Y+7, r25	; 0x07
              delete(this->pAPDRules[i]);		// each rule was new
  36:	8e 83       	std	Y+6, r24	; 0x06
  38:	00 97       	sbiw	r24, 0x00	; 0
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x3e>
  3e:	28 85       	ldd	r18, Y+8	; 0x08
  40:	39 85       	ldd	r19, Y+9	; 0x09
  42:	22 0f       	add	r18, r18
  44:	33 1f       	adc	r19, r19
              this->pAPDRules[i] = NULL;
  46:	84 2f       	mov	r24, r20
  48:	60 e0       	ldi	r22, 0x00	; 0
  4a:	70 e0       	ldi	r23, 0x00	; 0
  4c:	a9 01       	movw	r20, r18
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray9loadRulesEP10APDStorage>

APDRuleArray::~APDRuleArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
      for (int i=0; i<this->iRuleCount; i++) {
  52:	c8 01       	movw	r24, r16
  54:	60 e0       	ldi	r22, 0x00	; 0
  56:	70 e0       	ldi	r23, 0x00	; 0
  58:	40 e0       	ldi	r20, 0x00	; 0
  5a:	50 e0       	ldi	r21, 0x00	; 0
  5c:	9e 01       	movw	r18, r28
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray9loadRulesEP10APDStorage>
  62:	60 e0       	ldi	r22, 0x00	; 0
          if (this->pAPDRules[i] != NULL) {
              delete(this->pAPDRules[i]);		// each rule was new
              this->pAPDRules[i] = NULL;
          }
      }
      free(this->pAPDRules);								// pAPDRules was malloc
  64:	70 e0       	ldi	r23, 0x00	; 0
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x68>
  68:	ab 01       	movw	r20, r22
      this->pAPDRules = NULL;
  6a:	44 0f       	add	r20, r20
  6c:	55 1f       	adc	r21, r21
      this->iRuleCount=0;
  6e:	ee 81       	ldd	r30, Y+6	; 0x06
  70:	ff 81       	ldd	r31, Y+7	; 0x07
  }
}
  72:	e4 0f       	add	r30, r20
  74:	f5 1f       	adc	r31, r21
  76:	a0 81       	ld	r26, Z
  78:	b1 81       	ldd	r27, Z+1	; 0x01
  7a:	51 96       	adiw	r26, 0x11	; 17
  7c:	2d 91       	ld	r18, X+
  7e:	3c 91       	ld	r19, X
  80:	52 97       	sbiw	r26, 0x12	; 18
  82:	37 fd       	sbrc	r19, 7
  84:	00 c0       	rjmp	.+0      	; 0x86 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x86>
  86:	ea 81       	ldd	r30, Y+2	; 0x02
  88:	fb 81       	ldd	r31, Y+3	; 0x03
  8a:	84 81       	ldd	r24, Z+4	; 0x04
  8c:	95 81       	ldd	r25, Z+5	; 0x05
  8e:	28 17       	cp	r18, r24
  90:	39 07       	cpc	r19, r25
  92:	04 f4       	brge	.+0      	; 0x94 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x94>
  94:	a4 5b       	subi	r26, 0xB4	; 180
  96:	bf 4f       	sbci	r27, 0xFF	; 255
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	02 80       	ldd	r0, Z+2	; 0x02
  9e:	f3 81       	ldd	r31, Z+3	; 0x03
  a0:	e0 2d       	mov	r30, r0
  a2:	e2 0f       	add	r30, r18
  a4:	f3 1f       	adc	r31, r19
  a6:	80 81       	ld	r24, Z
  a8:	91 81       	ldd	r25, Z+1	; 0x01
  aa:	8d 93       	st	X+, r24
  ac:	9c 93       	st	X, r25
  ae:	ee 81       	ldd	r30, Y+6	; 0x06
  b0:	ff 81       	ldd	r31, Y+7	; 0x07
  b2:	e4 0f       	add	r30, r20
  b4:	f5 1f       	adc	r31, r21
  b6:	a0 81       	ld	r26, Z
  b8:	b1 81       	ldd	r27, Z+1	; 0x01
  ba:	91 96       	adiw	r26, 0x21	; 33
  bc:	2d 91       	ld	r18, X+
  be:	3c 91       	ld	r19, X
  c0:	92 97       	sbiw	r26, 0x22	; 34
  c2:	37 fd       	sbrc	r19, 7
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0xc6>
  c6:	ea 81       	ldd	r30, Y+2	; 0x02
  c8:	fb 81       	ldd	r31, Y+3	; 0x03
  ca:	84 81       	ldd	r24, Z+4	; 0x04
  cc:	95 81       	ldd	r25, Z+5	; 0x05
  ce:	28 17       	cp	r18, r24
  d0:	39 07       	cpc	r19, r25
  d2:	04 f4       	brge	.+0      	; 0xd4 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0xd4>
  d4:	a8 5a       	subi	r26, 0xA8	; 168
  d6:	bf 4f       	sbci	r27, 0xFF	; 255
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	02 80       	ldd	r0, Z+2	; 0x02
  de:	f3 81       	ldd	r31, Z+3	; 0x03
  e0:	e0 2d       	mov	r30, r0
  e2:	e2 0f       	add	r30, r18
  e4:	f3 1f       	adc	r31, r19
  e6:	80 81       	ld	r24, Z
  e8:	91 81       	ldd	r25, Z+1	; 0x01
  ea:	c7 96       	adiw	r24, 0x37	; 55
  ec:	8d 93       	st	X+, r24
  ee:	9c 93       	st	X, r25
  f0:	ee 81       	ldd	r30, Y+6	; 0x06
  f2:	ff 81       	ldd	r31, Y+7	; 0x07
  f4:	e4 0f       	add	r30, r20
  f6:	f5 1f       	adc	r31, r21
  f8:	01 90       	ld	r0, Z+
  fa:	f0 81       	ld	r31, Z
  fc:	e0 2d       	mov	r30, r0
  fe:	87 85       	ldd	r24, Z+15	; 0x0f
 100:	90 89       	ldd	r25, Z+16	; 0x10
 102:	05 97       	sbiw	r24, 0x05	; 5
 104:	01 f4       	brne	.+0      	; 0x106 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x106>
 106:	e8 5a       	subi	r30, 0xA8	; 168
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	8a 85       	ldd	r24, Y+10	; 0x0a
 10c:	9b 85       	ldd	r25, Y+11	; 0x0b
 10e:	91 83       	std	Z+1, r25	; 0x01
 110:	80 83       	st	Z, r24
 112:	ee 81       	ldd	r30, Y+6	; 0x06
 114:	ff 81       	ldd	r31, Y+7	; 0x07
 116:	e4 0f       	add	r30, r20
 118:	f5 1f       	adc	r31, r21
 11a:	a0 81       	ld	r26, Z
 11c:	b1 81       	ldd	r27, Z+1	; 0x01
 11e:	ec 81       	ldd	r30, Y+4	; 0x04
 120:	fd 81       	ldd	r31, Y+5	; 0x05
 122:	5b 96       	adiw	r26, 0x1b	; 27
 124:	8d 91       	ld	r24, X+
 126:	9c 91       	ld	r25, X
 128:	5c 97       	sbiw	r26, 0x1c	; 28
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	02 80       	ldd	r0, Z+2	; 0x02
 130:	f3 81       	ldd	r31, Z+3	; 0x03
 132:	e0 2d       	mov	r30, r0
 134:	e8 0f       	add	r30, r24
 136:	f9 1f       	adc	r31, r25
 138:	80 81       	ld	r24, Z
 13a:	91 81       	ldd	r25, Z+1	; 0x01
 13c:	ac 5a       	subi	r26, 0xAC	; 172
 13e:	bf 4f       	sbci	r27, 0xFF	; 255
 140:	8d 93       	st	X+, r24
 142:	9c 93       	st	X, r25
 144:	6f 5f       	subi	r22, 0xFF	; 255
 146:	7f 4f       	sbci	r23, 0xFF	; 255
 148:	88 85       	ldd	r24, Y+8	; 0x08
 14a:	99 85       	ldd	r25, Y+9	; 0x09
 14c:	68 17       	cp	r22, r24
 14e:	79 07       	cpc	r23, r25
 150:	04 f4       	brge	.+0      	; 0x152 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x152>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x154>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	00 c0       	rjmp	.+0      	; 0x15a <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x15a>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x160>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	00 c0       	rjmp	.+0      	; 0x166 <_ZN12APDRuleArray9loadRulesEP10APDStorage+0x166>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray9loadRulesEP10APDStorage>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArray15new_rule_parserEPviPc:

00000000 <_ZN12APDRuleArray15new_rule_parserEPviPc>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	df 93       	push	r29
  12:	cf 93       	push	r28
  14:	cd b7       	in	r28, 0x3d	; 61
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	de b7       	in	r29, 0x3e	; 62
  18:	c4 54       	subi	r28, 0x44	; 68
  1a:	d0 40       	sbci	r29, 0x00	; 0
  1c:	0f b6       	in	r0, 0x3f	; 63
  1e:	f8 94       	cli
  20:	de bf       	out	0x3e, r29	; 62
  22:	0f be       	out	0x3f, r0	; 63
  24:	cd bf       	out	0x3d, r28	; 61
  26:	f8 2e       	mov	r15, r24
  28:	e9 2e       	mov	r14, r25
      for (int i=0; i<this->iRuleCount; i++) {
          if (this->pAPDRules[i] != NULL) {
  2a:	6b 01       	movw	r12, r22
  2c:	8d b7       	in	r24, 0x3d	; 61
  2e:	9e b7       	in	r25, 0x3e	; 62
  30:	4c 97       	sbiw	r24, 0x1c	; 28
  32:	0f b6       	in	r0, 0x3f	; 63
  34:	f8 94       	cli
              delete(this->pAPDRules[i]);		// each rule was new
  36:	9e bf       	out	0x3e, r25	; 62
  38:	0f be       	out	0x3f, r0	; 63
  3a:	8d bf       	out	0x3d, r24	; 61
  3c:	ed b7       	in	r30, 0x3d	; 61
  3e:	fe b7       	in	r31, 0x3e	; 62
  40:	31 96       	adiw	r30, 0x01	; 1
  42:	ad b7       	in	r26, 0x3d	; 61
  44:	be b7       	in	r27, 0x3e	; 62
              this->pAPDRules[i] = NULL;
  46:	12 96       	adiw	r26, 0x02	; 2
  48:	5c 93       	st	X, r21
  4a:	4e 93       	st	-X, r20
  4c:	11 97       	sbiw	r26, 0x01	; 1
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0

APDRuleArray::~APDRuleArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
      for (int i=0; i<this->iRuleCount; i++) {
  52:	93 83       	std	Z+3, r25	; 0x03
  54:	82 83       	std	Z+2, r24	; 0x02
  56:	5e 01       	movw	r10, r28
  58:	08 94       	sec
  5a:	a1 1c       	adc	r10, r1
  5c:	b1 1c       	adc	r11, r1
  5e:	b5 82       	std	Z+5, r11	; 0x05
  60:	a4 82       	std	Z+4, r10	; 0x04
  62:	ce 01       	movw	r24, r28
          if (this->pAPDRules[i] != NULL) {
              delete(this->pAPDRules[i]);		// each rule was new
              this->pAPDRules[i] = NULL;
          }
      }
      free(this->pAPDRules);								// pAPDRules was malloc
  64:	0e 96       	adiw	r24, 0x0e	; 14
  66:	97 83       	std	Z+7, r25	; 0x07
  68:	86 83       	std	Z+6, r24	; 0x06
      this->pAPDRules = NULL;
  6a:	ce 01       	movw	r24, r28
  6c:	40 96       	adiw	r24, 0x10	; 16
      this->iRuleCount=0;
  6e:	91 87       	std	Z+9, r25	; 0x09
  70:	80 87       	std	Z+8, r24	; 0x08
  }
}
  72:	ce 01       	movw	r24, r28
  74:	42 96       	adiw	r24, 0x12	; 18
  76:	93 87       	std	Z+11, r25	; 0x0b
  78:	82 87       	std	Z+10, r24	; 0x0a
  7a:	ce 01       	movw	r24, r28
  7c:	46 96       	adiw	r24, 0x16	; 22
  7e:	95 87       	std	Z+13, r25	; 0x0d
  80:	84 87       	std	Z+12, r24	; 0x0c
  82:	ce 01       	movw	r24, r28
  84:	48 96       	adiw	r24, 0x18	; 24
  86:	97 87       	std	Z+15, r25	; 0x0f
  88:	86 87       	std	Z+14, r24	; 0x0e
  8a:	ce 01       	movw	r24, r28
  8c:	4a 96       	adiw	r24, 0x1a	; 26
  8e:	91 8b       	std	Z+17, r25	; 0x11
  90:	80 8b       	std	Z+16, r24	; 0x10
  92:	ce 01       	movw	r24, r28
  94:	4c 96       	adiw	r24, 0x1c	; 28
  96:	93 8b       	std	Z+19, r25	; 0x13
  98:	82 8b       	std	Z+18, r24	; 0x12
  9a:	ce 01       	movw	r24, r28
  9c:	4e 96       	adiw	r24, 0x1e	; 30
  9e:	95 8b       	std	Z+21, r25	; 0x15
  a0:	84 8b       	std	Z+20, r24	; 0x14
  a2:	ce 01       	movw	r24, r28
  a4:	80 96       	adiw	r24, 0x20	; 32
  a6:	97 8b       	std	Z+23, r25	; 0x17
  a8:	86 8b       	std	Z+22, r24	; 0x16
  aa:	ce 01       	movw	r24, r28
  ac:	82 96       	adiw	r24, 0x22	; 34
  ae:	91 8f       	std	Z+25, r25	; 0x19
  b0:	80 8f       	std	Z+24, r24	; 0x18
  b2:	ce 01       	movw	r24, r28
  b4:	84 96       	adiw	r24, 0x24	; 36
  b6:	93 8f       	std	Z+27, r25	; 0x1b
  b8:	82 8f       	std	Z+26, r24	; 0x1a
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray15new_rule_parserEPviPc>
  be:	0f 2d       	mov	r16, r15
  c0:	1e 2d       	mov	r17, r14
  c2:	cc 0c       	add	r12, r12
  c4:	dd 1c       	adc	r13, r13
  c6:	f8 01       	movw	r30, r16
  c8:	e6 80       	ldd	r14, Z+6	; 0x06
  ca:	f7 80       	ldd	r15, Z+7	; 0x07
  cc:	ec 0c       	add	r14, r12
  ce:	fd 1c       	adc	r15, r13
  d0:	8d b7       	in	r24, 0x3d	; 61
  d2:	9e b7       	in	r25, 0x3e	; 62
  d4:	4c 96       	adiw	r24, 0x1c	; 28
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	9e bf       	out	0x3e, r25	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	8d bf       	out	0x3d, r24	; 61
  e0:	81 e6       	ldi	r24, 0x61	; 97
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray15new_rule_parserEPviPc>
  e8:	d8 2e       	mov	r13, r24
  ea:	c9 2e       	mov	r12, r25
  ec:	d8 01       	movw	r26, r16
  ee:	12 96       	adiw	r26, 0x02	; 2
  f0:	4d 91       	ld	r20, X+
  f2:	5c 91       	ld	r21, X
  f4:	13 97       	sbiw	r26, 0x03	; 3
  f6:	14 96       	adiw	r26, 0x04	; 4
  f8:	2d 91       	ld	r18, X+
  fa:	3c 91       	ld	r19, X
  fc:	15 97       	sbiw	r26, 0x05	; 5
  fe:	b5 01       	movw	r22, r10
 100:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArray15new_rule_parserEPviPc>
 104:	f7 01       	movw	r30, r14
 106:	d0 82       	st	Z, r13
 108:	c1 82       	std	Z+1, r12	; 0x01
 10a:	cc 5b       	subi	r28, 0xBC	; 188
 10c:	df 4f       	sbci	r29, 0xFF	; 255
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	ef 90       	pop	r14
 124:	df 90       	pop	r13
 126:	cf 90       	pop	r12
 128:	bf 90       	pop	r11
 12a:	af 90       	pop	r10
 12c:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArrayD1Ev:

00000000 <_ZN12APDRuleArrayD1Ev>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	8e 81       	ldd	r24, Y+6	; 0x06
  18:	9f 81       	ldd	r25, Y+7	; 0x07
  1a:	89 2b       	or	r24, r25
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN12APDRuleArrayD1Ev+0x1e>
  1e:	00 e0       	ldi	r16, 0x00	; 0
  20:	10 e0       	ldi	r17, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN12APDRuleArrayD1Ev+0x24>
  24:	78 01       	movw	r14, r16
  26:	ee 0c       	add	r14, r14
  28:	ff 1c       	adc	r15, r15
      for (int i=0; i<this->iRuleCount; i++) {
          if (this->pAPDRules[i] != NULL) {
  2a:	ee 0d       	add	r30, r14
  2c:	ff 1d       	adc	r31, r15
  2e:	a0 81       	ld	r26, Z
  30:	b1 81       	ldd	r27, Z+1	; 0x01
  32:	10 97       	sbiw	r26, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN12APDRuleArrayD1Ev+0x36>
              delete(this->pAPDRules[i]);		// each rule was new
  36:	ed 91       	ld	r30, X+
  38:	fc 91       	ld	r31, X
  3a:	11 97       	sbiw	r26, 0x01	; 1
  3c:	02 80       	ldd	r0, Z+2	; 0x02
  3e:	f3 81       	ldd	r31, Z+3	; 0x03
  40:	e0 2d       	mov	r30, r0
  42:	cd 01       	movw	r24, r26
  44:	19 95       	eicall
              this->pAPDRules[i] = NULL;
  46:	ee 81       	ldd	r30, Y+6	; 0x06
  48:	ff 81       	ldd	r31, Y+7	; 0x07
  4a:	ee 0d       	add	r30, r14
  4c:	ff 1d       	adc	r31, r15
  4e:	11 82       	std	Z+1, r1	; 0x01
  50:	10 82       	st	Z, r1

APDRuleArray::~APDRuleArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
      for (int i=0; i<this->iRuleCount; i++) {
  52:	0f 5f       	subi	r16, 0xFF	; 255
  54:	1f 4f       	sbci	r17, 0xFF	; 255
  56:	88 85       	ldd	r24, Y+8	; 0x08
  58:	99 85       	ldd	r25, Y+9	; 0x09
  5a:	ee 81       	ldd	r30, Y+6	; 0x06
  5c:	ff 81       	ldd	r31, Y+7	; 0x07
  5e:	08 17       	cp	r16, r24
  60:	19 07       	cpc	r17, r25
  62:	04 f0       	brlt	.+0      	; 0x64 <_ZN12APDRuleArrayD1Ev+0x64>
          if (this->pAPDRules[i] != NULL) {
              delete(this->pAPDRules[i]);		// each rule was new
              this->pAPDRules[i] = NULL;
          }
      }
      free(this->pAPDRules);								// pAPDRules was malloc
  64:	cf 01       	movw	r24, r30
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArrayD1Ev>
      this->pAPDRules = NULL;
  6a:	1f 82       	std	Y+7, r1	; 0x07
  6c:	1e 82       	std	Y+6, r1	; 0x06
      this->iRuleCount=0;
  6e:	19 86       	std	Y+9, r1	; 0x09
  70:	18 86       	std	Y+8, r1	; 0x08
  }
}
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArrayD2Ev:

00000000 <_ZN12APDRuleArrayD2Ev>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	8e 81       	ldd	r24, Y+6	; 0x06
  18:	9f 81       	ldd	r25, Y+7	; 0x07
  1a:	89 2b       	or	r24, r25
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN12APDRuleArrayD2Ev+0x1e>
  1e:	00 e0       	ldi	r16, 0x00	; 0
  20:	10 e0       	ldi	r17, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN12APDRuleArrayD2Ev+0x24>
  24:	78 01       	movw	r14, r16
  26:	ee 0c       	add	r14, r14
  28:	ff 1c       	adc	r15, r15
      for (int i=0; i<this->iRuleCount; i++) {
          if (this->pAPDRules[i] != NULL) {
  2a:	ee 0d       	add	r30, r14
  2c:	ff 1d       	adc	r31, r15
  2e:	a0 81       	ld	r26, Z
  30:	b1 81       	ldd	r27, Z+1	; 0x01
  32:	10 97       	sbiw	r26, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN12APDRuleArrayD2Ev+0x36>
              delete(this->pAPDRules[i]);		// each rule was new
  36:	ed 91       	ld	r30, X+
  38:	fc 91       	ld	r31, X
  3a:	11 97       	sbiw	r26, 0x01	; 1
  3c:	02 80       	ldd	r0, Z+2	; 0x02
  3e:	f3 81       	ldd	r31, Z+3	; 0x03
  40:	e0 2d       	mov	r30, r0
  42:	cd 01       	movw	r24, r26
  44:	19 95       	eicall
              this->pAPDRules[i] = NULL;
  46:	ee 81       	ldd	r30, Y+6	; 0x06
  48:	ff 81       	ldd	r31, Y+7	; 0x07
  4a:	ee 0d       	add	r30, r14
  4c:	ff 1d       	adc	r31, r15
  4e:	11 82       	std	Z+1, r1	; 0x01
  50:	10 82       	st	Z, r1

APDRuleArray::~APDRuleArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
      for (int i=0; i<this->iRuleCount; i++) {
  52:	0f 5f       	subi	r16, 0xFF	; 255
  54:	1f 4f       	sbci	r17, 0xFF	; 255
  56:	88 85       	ldd	r24, Y+8	; 0x08
  58:	99 85       	ldd	r25, Y+9	; 0x09
  5a:	ee 81       	ldd	r30, Y+6	; 0x06
  5c:	ff 81       	ldd	r31, Y+7	; 0x07
  5e:	08 17       	cp	r16, r24
  60:	19 07       	cpc	r17, r25
  62:	04 f0       	brlt	.+0      	; 0x64 <_ZN12APDRuleArrayD2Ev+0x64>
          if (this->pAPDRules[i] != NULL) {
              delete(this->pAPDRules[i]);		// each rule was new
              this->pAPDRules[i] = NULL;
          }
      }
      free(this->pAPDRules);								// pAPDRules was malloc
  64:	cf 01       	movw	r24, r30
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArrayD2Ev>
      this->pAPDRules = NULL;
  6a:	1f 82       	std	Y+7, r1	; 0x07
  6c:	1e 82       	std	Y+6, r1	; 0x06
      this->iRuleCount=0;
  6e:	19 86       	std	Y+9, r1	; 0x09
  70:	18 86       	std	Y+8, r1	; 0x08
  }
}
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	08 95       	ret

Disassembly of section .text._ZN12APDRuleArrayD0Ev:

00000000 <_ZN12APDRuleArrayD0Ev>:
  this->pAPDRules=NULL;
  this->iRuleCount=0;
  this->bfIdle = bfidle;
}

APDRuleArray::~APDRuleArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
  16:	8e 81       	ldd	r24, Y+6	; 0x06
  18:	9f 81       	ldd	r25, Y+7	; 0x07
  1a:	89 2b       	or	r24, r25
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN12APDRuleArrayD0Ev+0x1e>
  1e:	00 e0       	ldi	r16, 0x00	; 0
  20:	10 e0       	ldi	r17, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN12APDRuleArrayD0Ev+0x24>
  24:	78 01       	movw	r14, r16
  26:	ee 0c       	add	r14, r14
  28:	ff 1c       	adc	r15, r15
      for (int i=0; i<this->iRuleCount; i++) {
          if (this->pAPDRules[i] != NULL) {
  2a:	ee 0d       	add	r30, r14
  2c:	ff 1d       	adc	r31, r15
  2e:	a0 81       	ld	r26, Z
  30:	b1 81       	ldd	r27, Z+1	; 0x01
  32:	10 97       	sbiw	r26, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN12APDRuleArrayD0Ev+0x36>
              delete(this->pAPDRules[i]);		// each rule was new
  36:	ed 91       	ld	r30, X+
  38:	fc 91       	ld	r31, X
  3a:	11 97       	sbiw	r26, 0x01	; 1
  3c:	02 80       	ldd	r0, Z+2	; 0x02
  3e:	f3 81       	ldd	r31, Z+3	; 0x03
  40:	e0 2d       	mov	r30, r0
  42:	cd 01       	movw	r24, r26
  44:	19 95       	eicall
              this->pAPDRules[i] = NULL;
  46:	ee 81       	ldd	r30, Y+6	; 0x06
  48:	ff 81       	ldd	r31, Y+7	; 0x07
  4a:	ee 0d       	add	r30, r14
  4c:	ff 1d       	adc	r31, r15
  4e:	11 82       	std	Z+1, r1	; 0x01
  50:	10 82       	st	Z, r1

APDRuleArray::~APDRuleArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDRules != NULL) {
      for (int i=0; i<this->iRuleCount; i++) {
  52:	0f 5f       	subi	r16, 0xFF	; 255
  54:	1f 4f       	sbci	r17, 0xFF	; 255
  56:	88 85       	ldd	r24, Y+8	; 0x08
  58:	99 85       	ldd	r25, Y+9	; 0x09
  5a:	ee 81       	ldd	r30, Y+6	; 0x06
  5c:	ff 81       	ldd	r31, Y+7	; 0x07
  5e:	08 17       	cp	r16, r24
  60:	19 07       	cpc	r17, r25
  62:	04 f0       	brlt	.+0      	; 0x64 <_ZN12APDRuleArrayD0Ev+0x64>
          if (this->pAPDRules[i] != NULL) {
              delete(this->pAPDRules[i]);		// each rule was new
              this->pAPDRules[i] = NULL;
          }
      }
      free(this->pAPDRules);								// pAPDRules was malloc
  64:	cf 01       	movw	r24, r30
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArrayD0Ev>
      this->pAPDRules = NULL;
  6a:	1f 82       	std	Y+7, r1	; 0x07
  6c:	1e 82       	std	Y+6, r1	; 0x06
      this->iRuleCount=0;
  6e:	19 86       	std	Y+9, r1	; 0x09
  70:	18 86       	std	Y+8, r1	; 0x08
  }
}
  72:	ce 01       	movw	r24, r28
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN12APDRuleArrayD0Ev>
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	1f 91       	pop	r17
  7e:	0f 91       	pop	r16
  80:	ff 90       	pop	r15
  82:	ef 90       	pop	r14
  84:	08 95       	ret

APDSensor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000003a  2**0
                  ALLOC
  3 .stab         00001590  00000000  00000000  0000003c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000041b8  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN9APDSensor13perform_checkEv 00000002  00000000  00000000  00005784  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN9APDSensor11diagnosticsEv 00000002  00000000  00000000  00005786  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text._ZN9APDSensor6iValueEv 00000012  00000000  00000000  00005788  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9APDSensor6fValueEv 00000010  00000000  00000000  0000579a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN9APDSensor5checkEv 0000003e  00000000  00000000  000057aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9APDSensor9getValueSEPc 0000006c  00000000  00000000  000057e8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9APDSensor10initSensorEv 00000030  00000000  00000000  00005854  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9APDSensor10initSensorEP6SDCONF 00000070  00000000  00000000  00005884  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN9APDSensorC1Ev 00000026  00000000  00000000  000058f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN9APDSensorC2Ev 00000026  00000000  00000000  0000591a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN9APDSensorD0Ev 00000032  00000000  00000000  00005940  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN9APDSensorD1Ev 0000002c  00000000  00000000  00005972  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN9APDSensorD2Ev 0000002c  00000000  00000000  0000599e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN9APDSensorC1EP6SDCONF 0000014a  00000000  00000000  000059ca  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN9APDSensorC2EP6SDCONF 0000014a  00000000  00000000  00005b14  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .rodata._ZTV9APDSensor 0000000e  00000000  00000000  00005c5e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 21 .progmem.data 000000c8  00000000  00000000  00005c6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN9APDSensor13perform_checkEv:

00000000 <_ZN9APDSensor13perform_checkEv>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	08 95       	ret

Disassembly of section .text._ZN9APDSensor11diagnosticsEv:

00000000 <_ZN9APDSensor11diagnosticsEv>:
   0:	08 95       	ret

Disassembly of section .text._ZN9APDSensor6iValueEv:

00000000 <_ZN9APDSensor6iValueEv>:
   0:	fc 01       	movw	r30, r24
   2:	67 a9       	ldd	r22, Z+55	; 0x37
   4:	70 ad       	ldd	r23, Z+56	; 0x38
   6:	81 ad       	ldd	r24, Z+57	; 0x39
   8:	92 ad       	ldd	r25, Z+58	; 0x3a
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor6iValueEv>
   e:	cb 01       	movw	r24, r22
  10:	08 95       	ret

Disassembly of section .text._ZN9APDSensor6fValueEv:

00000000 <_ZN9APDSensor6fValueEv>:
   0:	fc 01       	movw	r30, r24
   2:	27 a9       	ldd	r18, Z+55	; 0x37
   4:	30 ad       	ldd	r19, Z+56	; 0x38
   6:	41 ad       	ldd	r20, Z+57	; 0x39
   8:	52 ad       	ldd	r21, Z+58	; 0x3a
   a:	b9 01       	movw	r22, r18
   c:	ca 01       	movw	r24, r20
   e:	08 95       	ret

Disassembly of section .text._ZN9APDSensor5checkEv:

00000000 <_ZN9APDSensor5checkEv>:
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	8b ad       	ldd	r24, Y+59	; 0x3b
   a:	9c ad       	ldd	r25, Y+60	; 0x3c
   c:	00 97       	sbiw	r24, 0x00	; 0
   e:	01 f0       	breq	.+0      	; 0x10 <_ZN9APDSensor5checkEv+0x10>
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor5checkEv>
  14:	88 23       	and	r24, r24
  initSensor();
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN9APDSensor5checkEv+0x18>
  18:	e8 81       	ld	r30, Y
  1a:	f9 81       	ldd	r31, Y+1	; 0x01
  SerPrintP("COPY SENSOR DEF\n");
  1c:	04 80       	ldd	r0, Z+4	; 0x04
  1e:	f5 81       	ldd	r31, Z+5	; 0x05
  20:	e0 2d       	mov	r30, r0
  22:	ce 01       	movw	r24, r28
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  24:	19 95       	eicall
  26:	18 2f       	mov	r17, r24
  28:	8b ad       	ldd	r24, Y+59	; 0x3b
  2a:	9c ad       	ldd	r25, Y+60	; 0x3c
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor5checkEv>
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN9APDSensor5checkEv+0x32>
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	81 2f       	mov	r24, r17
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
//#ifdef DEBUG
  SerPrintP("SENSOR DEFINITION:"); SerPrintP(" - "); Serial.print(this->config.label); SerPrintP("(label), ");
  3a:	1f 91       	pop	r17
  3c:	08 95       	ret

Disassembly of section .text._ZN9APDSensor9getValueSEPc:

00000000 <_ZN9APDSensor9getValueSEPc>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	16 2f       	mov	r17, r22
   a:	07 2f       	mov	r16, r23
   c:	2d b7       	in	r18, 0x3d	; 61
   e:	3e b7       	in	r19, 0x3e	; 62
  10:	28 50       	subi	r18, 0x08	; 8
  12:	30 40       	sbci	r19, 0x00	; 0
  14:	0f b6       	in	r0, 0x3f	; 63
  initSensor();
  16:	f8 94       	cli
  18:	3e bf       	out	0x3e, r19	; 62
  1a:	0f be       	out	0x3f, r0	; 63
  SerPrintP("COPY SENSOR DEF\n");
  1c:	2d bf       	out	0x3d, r18	; 61
  1e:	ed b7       	in	r30, 0x3d	; 61
  20:	fe b7       	in	r31, 0x3e	; 62
  22:	31 96       	adiw	r30, 0x01	; 1
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  24:	ad b7       	in	r26, 0x3d	; 61
  26:	be b7       	in	r27, 0x3e	; 62
  28:	11 96       	adiw	r26, 0x01	; 1
  2a:	6c 93       	st	X, r22
  2c:	71 83       	std	Z+1, r23	; 0x01
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	30 e0       	ldi	r19, 0x00	; 0
  32:	33 83       	std	Z+3, r19	; 0x03
  34:	22 83       	std	Z+2, r18	; 0x02
  36:	ec 01       	movw	r28, r24
  38:	8f a9       	ldd	r24, Y+55	; 0x37
//#ifdef DEBUG
  SerPrintP("SENSOR DEFINITION:"); SerPrintP(" - "); Serial.print(this->config.label); SerPrintP("(label), ");
  3a:	98 ad       	ldd	r25, Y+56	; 0x38
  3c:	a9 ad       	ldd	r26, Y+57	; 0x39
  3e:	ba ad       	ldd	r27, Y+58	; 0x3a
  40:	84 83       	std	Z+4, r24	; 0x04
  42:	95 83       	std	Z+5, r25	; 0x05
  44:	a6 83       	std	Z+6, r26	; 0x06
  46:	b7 83       	std	Z+7, r27	; 0x07
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor9getValueSEPc>
  4c:	2d b7       	in	r18, 0x3d	; 61
  4e:	3e b7       	in	r19, 0x3e	; 62
  50:	28 5f       	subi	r18, 0xF8	; 248
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	0f b6       	in	r0, 0x3f	; 63
  56:	f8 94       	cli
  58:	3e bf       	out	0x3e, r19	; 62
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	2d bf       	out	0x3d, r18	; 61
  5e:	81 2f       	mov	r24, r17
      Serial.print(this->config.sensor_type); SerPrintP(" (sensor_type),"); Serial.print(this->config.sensor_class);
  60:	90 2f       	mov	r25, r16
  62:	df 91       	pop	r29
  64:	cf 91       	pop	r28
  66:	1f 91       	pop	r17
  68:	0f 91       	pop	r16
  6a:	08 95       	ret

Disassembly of section .text._ZN9APDSensor10initSensorEv:

00000000 <_ZN9APDSensor10initSensorEv>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	9c 01       	movw	r18, r24
   2:	02 96       	adiw	r24, 0x02	; 2
   4:	fc 01       	movw	r30, r24
   6:	83 e3       	ldi	r24, 0x33	; 51
   8:	df 01       	movw	r26, r30
   a:	1d 92       	st	X+, r1
   c:	8a 95       	dec	r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZN9APDSensor10initSensorEv+0x10>
  10:	f9 01       	movw	r30, r18
  12:	16 aa       	std	Z+54, r1	; 0x36
  14:	15 aa       	std	Z+53, r1	; 0x35
  initSensor();
  16:	14 ae       	std	Z+60, r1	; 0x3c
  18:	13 ae       	std	Z+59, r1	; 0x3b
  1a:	80 e0       	ldi	r24, 0x00	; 0
  SerPrintP("COPY SENSOR DEF\n");
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	a0 e0       	ldi	r26, 0x00	; 0
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	87 ab       	std	Z+55, r24	; 0x37
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  24:	90 af       	std	Z+56, r25	; 0x38
  26:	a1 af       	std	Z+57, r26	; 0x39
  28:	b2 af       	std	Z+58, r27	; 0x3a
  2a:	81 e0       	ldi	r24, 0x01	; 1
  2c:	85 af       	std	Z+61, r24	; 0x3d
  2e:	08 95       	ret

Disassembly of section .text._ZN9APDSensor10initSensorEP6SDCONF:

00000000 <_ZN9APDSensor10initSensorEP6SDCONF>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	16 2f       	mov	r17, r22
   c:	07 2f       	mov	r16, r23
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor10initSensorEP6SDCONF>
  12:	de 01       	movw	r26, r28
  14:	12 96       	adiw	r26, 0x02	; 2
  initSensor();
  16:	21 2f       	mov	r18, r17
  18:	30 2f       	mov	r19, r16
  1a:	c9 01       	movw	r24, r18
  SerPrintP("COPY SENSOR DEF\n");
  1c:	fc 01       	movw	r30, r24
  1e:	83 e3       	ldi	r24, 0x33	; 51
  20:	01 90       	ld	r0, Z+
  22:	0d 92       	st	X+, r0
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  24:	81 50       	subi	r24, 0x01	; 1
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN9APDSensor10initSensorEP6SDCONF+0x28>
  28:	89 e0       	ldi	r24, 0x09	; 9
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor10initSensorEP6SDCONF>
  30:	18 2f       	mov	r17, r24
  32:	09 2f       	mov	r16, r25
  34:	49 8d       	ldd	r20, Y+25	; 0x19
  36:	5a 8d       	ldd	r21, Y+26	; 0x1a
  38:	66 27       	eor	r22, r22
//#ifdef DEBUG
  SerPrintP("SENSOR DEFINITION:"); SerPrintP(" - "); Serial.print(this->config.label); SerPrintP("(label), ");
  3a:	57 fd       	sbrc	r21, 7
  3c:	60 95       	com	r22
  3e:	76 2f       	mov	r23, r22
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor10initSensorEP6SDCONF>
  46:	1b af       	std	Y+59, r17	; 0x3b
  48:	0c af       	std	Y+60, r16	; 0x3c
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor10initSensorEP6SDCONF>
  52:	22 96       	adiw	r28, 0x02	; 2
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	be 01       	movw	r22, r28
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor10initSensorEP6SDCONF>
  5e:	80 e0       	ldi	r24, 0x00	; 0
      Serial.print(this->config.sensor_type); SerPrintP(" (sensor_type),"); Serial.print(this->config.sensor_class);
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensor10initSensorEP6SDCONF>
  66:	df 91       	pop	r29
  68:	cf 91       	pop	r28
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	08 95       	ret

Disassembly of section .text._ZN9APDSensorC1Ev:

00000000 <_ZN9APDSensorC1Ev>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1Ev>
  initSensor();
  16:	f8 01       	movw	r30, r16
  18:	14 ae       	std	Z+60, r1	; 0x3c
  1a:	13 ae       	std	Z+59, r1	; 0x3b
  SerPrintP("COPY SENSOR DEF\n");
  1c:	16 aa       	std	Z+54, r1	; 0x36
  1e:	15 aa       	std	Z+53, r1	; 0x35
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  24:	08 95       	ret

Disassembly of section .text._ZN9APDSensorC2Ev:

00000000 <_ZN9APDSensorC2Ev>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2Ev>
  initSensor();
  16:	f8 01       	movw	r30, r16
  18:	14 ae       	std	Z+60, r1	; 0x3c
  1a:	13 ae       	std	Z+59, r1	; 0x3b
  SerPrintP("COPY SENSOR DEF\n");
  1c:	16 aa       	std	Z+54, r1	; 0x36
  1e:	15 aa       	std	Z+53, r1	; 0x35
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  24:	08 95       	ret

Disassembly of section .text._ZN9APDSensorD0Ev:

00000000 <_ZN9APDSensorD0Ev>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	8b ad       	ldd	r24, Y+59	; 0x3b
  10:	9c ad       	ldd	r25, Y+60	; 0x3c
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9APDSensorD0Ev+0x16>
  initSensor();
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorD0Ev>
  1a:	8d a9       	ldd	r24, Y+53	; 0x35
  SerPrintP("COPY SENSOR DEF\n");
  1c:	9e a9       	ldd	r25, Y+54	; 0x36
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN9APDSensorD0Ev+0x22>
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorD0Ev>
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  26:	ce 01       	movw	r24, r28
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorD0Ev>
  2c:	df 91       	pop	r29
  2e:	cf 91       	pop	r28
  30:	08 95       	ret

Disassembly of section .text._ZN9APDSensorD1Ev:

00000000 <_ZN9APDSensorD1Ev>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	8b ad       	ldd	r24, Y+59	; 0x3b
  10:	9c ad       	ldd	r25, Y+60	; 0x3c
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9APDSensorD1Ev+0x16>
  initSensor();
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorD1Ev>
  1a:	8d a9       	ldd	r24, Y+53	; 0x35
  SerPrintP("COPY SENSOR DEF\n");
  1c:	9e a9       	ldd	r25, Y+54	; 0x36
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN9APDSensorD1Ev+0x22>
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorD1Ev>
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  26:	df 91       	pop	r29
  28:	cf 91       	pop	r28
  2a:	08 95       	ret

Disassembly of section .text._ZN9APDSensorD2Ev:

00000000 <_ZN9APDSensorD2Ev>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	8b ad       	ldd	r24, Y+59	; 0x3b
  10:	9c ad       	ldd	r25, Y+60	; 0x3c
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9APDSensorD2Ev+0x16>
  initSensor();
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorD2Ev>
  1a:	8d a9       	ldd	r24, Y+53	; 0x35
  SerPrintP("COPY SENSOR DEF\n");
  1c:	9e a9       	ldd	r25, Y+54	; 0x36
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN9APDSensorD2Ev+0x22>
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorD2Ev>
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  26:	df 91       	pop	r29
  28:	cf 91       	pop	r28
  2a:	08 95       	ret

Disassembly of section .text._ZN9APDSensorC1EP6SDCONF:

00000000 <_ZN9APDSensorC1EP6SDCONF>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	16 2f       	mov	r17, r22
   c:	07 2f       	mov	r16, r23
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
  initSensor();
  16:	ce 01       	movw	r24, r28
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  SerPrintP("COPY SENSOR DEF\n");
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  24:	de 01       	movw	r26, r28
  26:	12 96       	adiw	r26, 0x02	; 2
  28:	21 2f       	mov	r18, r17
  2a:	30 2f       	mov	r19, r16
  2c:	c9 01       	movw	r24, r18
  2e:	fc 01       	movw	r30, r24
  30:	83 e3       	ldi	r24, 0x33	; 51
  32:	01 90       	ld	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	81 50       	subi	r24, 0x01	; 1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN9APDSensorC1EP6SDCONF+0x3a>
//#ifdef DEBUG
  SerPrintP("SENSOR DEFINITION:"); SerPrintP(" - "); Serial.print(this->config.label); SerPrintP("(label), ");
  3a:	80 e0       	ldi	r24, 0x00	; 0
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  4a:	be 01       	movw	r22, r28
  4c:	6e 5f       	subi	r22, 0xFE	; 254
  4e:	7f 4f       	sbci	r23, 0xFF	; 255
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
      Serial.print(this->config.sensor_type); SerPrintP(" (sensor_type),"); Serial.print(this->config.sensor_class);
  60:	6f 85       	ldd	r22, Y+15	; 0x0f
  62:	78 89       	ldd	r23, Y+16	; 0x10
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	4a e0       	ldi	r20, 0x0A	; 10
  6a:	50 e0       	ldi	r21, 0x00	; 0
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  78:	69 89       	ldd	r22, Y+17	; 0x11
  7a:	7a 89       	ldd	r23, Y+18	; 0x12
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	4a e0       	ldi	r20, 0x0A	; 10
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
      SerPrintP(" (class),"); Serial.print(this->config.sensor_pin); SerPrintP("(pin),");
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  90:	6d 89       	ldd	r22, Y+21	; 0x15
  92:	7e 89       	ldd	r23, Y+22	; 0x16
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	4a e0       	ldi	r20, 0x0A	; 10
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
      Serial.print(this->config.sensor_secondary_pin); SerPrintP("(secondary_pin),");
  a8:	6f 89       	ldd	r22, Y+23	; 0x17
  aa:	78 8d       	ldd	r23, Y+24	; 0x18
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	4a e0       	ldi	r20, 0x0A	; 10
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
      Serial.print(this->config.sensor_subtype); SerPrintP(" (subtype),"); Serial.print(this->config.sensor_freq);
  c0:	6b 89       	ldd	r22, Y+19	; 0x13
  c2:	7c 89       	ldd	r23, Y+20	; 0x14
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	4a e0       	ldi	r20, 0x0A	; 10
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  d8:	69 8d       	ldd	r22, Y+25	; 0x19
  da:	7a 8d       	ldd	r23, Y+26	; 0x1a
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	4a e0       	ldi	r20, 0x0A	; 10
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
      SerPrintP("(freq),"); Serial.print(this->config.sensor_log); SerPrintP("(log),");
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
  f0:	6b 8d       	ldd	r22, Y+27	; 0x1b
  f2:	7c 8d       	ldd	r23, Y+28	; 0x1c
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
      Serial.print(this->config.extra_data); SerPrintP("(extra data),"); SerPrintP("|\n");
 108:	be 01       	movw	r22, r28
 10a:	63 5e       	subi	r22, 0xE3	; 227
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
//#endif
   boolean bInstantiated = false;      // set if instance was setup ok - type dependent
   if (this->config.sensor_type > 0) {
 126:	8f 85       	ldd	r24, Y+15	; 0x0f
 128:	98 89       	ldd	r25, Y+16	; 0x10
 12a:	18 16       	cp	r1, r24
 12c:	19 06       	cpc	r1, r25
 12e:	04 f4       	brge	.+0      	; 0x130 <_ZN9APDSensorC1EP6SDCONF+0x130>
       SerPrintP("This is a specific sensor type...");
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC1EP6SDCONF>
   }
   this->pmetro = NULL;
 138:	1c ae       	std	Y+60, r1	; 0x3c
 13a:	1b ae       	std	Y+59, r1	; 0x3b
   this->sensor = NULL;
 13c:	1e aa       	std	Y+54, r1	; 0x36
 13e:	1d aa       	std	Y+53, r1	; 0x35
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

Disassembly of section .text._ZN9APDSensorC2EP6SDCONF:

00000000 <_ZN9APDSensorC2EP6SDCONF>:
  this->sensor = NULL;
}



APDSensor::APDSensor(SDCONF *sdc) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	16 2f       	mov	r17, r22
   c:	07 2f       	mov	r16, r23
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
  initSensor();
  16:	ce 01       	movw	r24, r28
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  SerPrintP("COPY SENSOR DEF\n");
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  memcpy((void*)&(this->config),(void*)sdc,sizeof(SDCONF));       // copy the structure to config
  24:	de 01       	movw	r26, r28
  26:	12 96       	adiw	r26, 0x02	; 2
  28:	21 2f       	mov	r18, r17
  2a:	30 2f       	mov	r19, r16
  2c:	c9 01       	movw	r24, r18
  2e:	fc 01       	movw	r30, r24
  30:	83 e3       	ldi	r24, 0x33	; 51
  32:	01 90       	ld	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	81 50       	subi	r24, 0x01	; 1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN9APDSensorC2EP6SDCONF+0x3a>
//#ifdef DEBUG
  SerPrintP("SENSOR DEFINITION:"); SerPrintP(" - "); Serial.print(this->config.label); SerPrintP("(label), ");
  3a:	80 e0       	ldi	r24, 0x00	; 0
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  4a:	be 01       	movw	r22, r28
  4c:	6e 5f       	subi	r22, 0xFE	; 254
  4e:	7f 4f       	sbci	r23, 0xFF	; 255
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
      Serial.print(this->config.sensor_type); SerPrintP(" (sensor_type),"); Serial.print(this->config.sensor_class);
  60:	6f 85       	ldd	r22, Y+15	; 0x0f
  62:	78 89       	ldd	r23, Y+16	; 0x10
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	4a e0       	ldi	r20, 0x0A	; 10
  6a:	50 e0       	ldi	r21, 0x00	; 0
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  78:	69 89       	ldd	r22, Y+17	; 0x11
  7a:	7a 89       	ldd	r23, Y+18	; 0x12
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	4a e0       	ldi	r20, 0x0A	; 10
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
      SerPrintP(" (class),"); Serial.print(this->config.sensor_pin); SerPrintP("(pin),");
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  90:	6d 89       	ldd	r22, Y+21	; 0x15
  92:	7e 89       	ldd	r23, Y+22	; 0x16
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	4a e0       	ldi	r20, 0x0A	; 10
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
      Serial.print(this->config.sensor_secondary_pin); SerPrintP("(secondary_pin),");
  a8:	6f 89       	ldd	r22, Y+23	; 0x17
  aa:	78 8d       	ldd	r23, Y+24	; 0x18
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	4a e0       	ldi	r20, 0x0A	; 10
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
      Serial.print(this->config.sensor_subtype); SerPrintP(" (subtype),"); Serial.print(this->config.sensor_freq);
  c0:	6b 89       	ldd	r22, Y+19	; 0x13
  c2:	7c 89       	ldd	r23, Y+20	; 0x14
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	4a e0       	ldi	r20, 0x0A	; 10
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  d8:	69 8d       	ldd	r22, Y+25	; 0x19
  da:	7a 8d       	ldd	r23, Y+26	; 0x1a
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	4a e0       	ldi	r20, 0x0A	; 10
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
      SerPrintP("(freq),"); Serial.print(this->config.sensor_log); SerPrintP("(log),");
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
  f0:	6b 8d       	ldd	r22, Y+27	; 0x1b
  f2:	7c 8d       	ldd	r23, Y+28	; 0x1c
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
      Serial.print(this->config.extra_data); SerPrintP("(extra data),"); SerPrintP("|\n");
 108:	be 01       	movw	r22, r28
 10a:	63 5e       	subi	r22, 0xE3	; 227
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
//#endif
   boolean bInstantiated = false;      // set if instance was setup ok - type dependent
   if (this->config.sensor_type > 0) {
 126:	8f 85       	ldd	r24, Y+15	; 0x0f
 128:	98 89       	ldd	r25, Y+16	; 0x10
 12a:	18 16       	cp	r1, r24
 12c:	19 06       	cpc	r1, r25
 12e:	04 f4       	brge	.+0      	; 0x130 <_ZN9APDSensorC2EP6SDCONF+0x130>
       SerPrintP("This is a specific sensor type...");
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSensorC2EP6SDCONF>
   }
   this->pmetro = NULL;
 138:	1c ae       	std	Y+60, r1	; 0x3c
 13a:	1b ae       	std	Y+59, r1	; 0x3b
   this->sensor = NULL;
 13c:	1e aa       	std	Y+54, r1	; 0x36
 13e:	1d aa       	std	Y+53, r1	; 0x35
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

APDSensorArray.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000043  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000077  2**0
                  ALLOC
  3 .stab         00001c20  00000000  00000000  00000078  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00004b97  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN14APDSensorArrayC2Ev 00000020  00000000  00000000  0000682f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN14APDSensorArrayC1Ev 00000020  00000000  00000000  0000684f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN14APDSensorArray20enableRuleEvaluationEPFvPvP9APDSensorES0_ 0000000c  00000000  00000000  0000686f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._ZN14APDSensorArray16firstSensorByPinEii 00000060  00000000  00000000  0000687b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN14APDSensorArray13indexBySensorEP9APDSensor 00000050  00000000  00000000  000068db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN14APDSensorArray7byIndexEi 0000002e  00000000  00000000  0000692b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN14APDSensorArray5countEv 00000008  00000000  00000000  00006959  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text._ZN14APDSensorArray11diagnosticsEv 00000050  00000000  00000000  00006961  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN14APDSensorArray11pollSensorsEh 0000008c  00000000  00000000  000069b1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN14APDSensorArray6valueSEiPc 0000006e  00000000  00000000  00006a3d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN14APDSensorArray6labelSEiPc 0000006a  00000000  00000000  00006aab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN14APDSensorArray18findReusableSensorEP6SDCONF 0000006c  00000000  00000000  00006b15  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN14APDSensorArray11loadSensorsEP10APDStorage 000000c6  00000000  00000000  00006b81  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN14APDSensorArray17new_sensor_parserEPviPc 0000026e  00000000  00000000  00006c47  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN14APDSensorArray10dumpToFileEP10APDStoragePc 000001f4  00000000  00000000  00006eb5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN14APDSensorArrayD1Ev 000000ca  00000000  00000000  000070a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN14APDSensorArrayD2Ev 000000ca  00000000  00000000  00007173  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN14APDSensorArrayD0Ev 000000d0  00000000  00000000  0000723d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .rodata._ZTV14APDSensorArray 00000008  00000000  00000000  0000730d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 24 .progmem.data 000000ce  00000000  00000000  00007315  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN14APDSensorArrayC2Ev:

00000000 <_ZN14APDSensorArrayC2Ev>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	17 82       	std	Z+7, r1	; 0x07
  14:	16 82       	std	Z+6, r1	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	11 86       	std	Z+9, r1	; 0x09
  18:	10 86       	std	Z+8, r1	; 0x08
  1a:	13 86       	std	Z+11, r1	; 0x0b
  1c:	12 86       	std	Z+10, r1	; 0x0a
  1e:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArrayC1Ev:

00000000 <_ZN14APDSensorArrayC1Ev>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	17 82       	std	Z+7, r1	; 0x07
  14:	16 82       	std	Z+6, r1	; 0x06
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	11 86       	std	Z+9, r1	; 0x09
  18:	10 86       	std	Z+8, r1	; 0x08
  1a:	13 86       	std	Z+11, r1	; 0x0b
  1c:	12 86       	std	Z+10, r1	; 0x0a
  1e:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray20enableRuleEvaluationEPFvPvP9APDSensorES0_:

00000000 <_ZN14APDSensorArray20enableRuleEvaluationEPFvPvP9APDSensorES0_>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	fc 01       	movw	r30, r24
   2:	71 87       	std	Z+9, r23	; 0x09
   4:	60 87       	std	Z+8, r22	; 0x08
   6:	53 87       	std	Z+11, r21	; 0x0b
   8:	42 87       	std	Z+10, r20	; 0x0a
   a:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray16firstSensorByPinEii:

00000000 <_ZN14APDSensorArray16firstSensorByPinEii>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
   6:	eb 01       	movw	r28, r22
   8:	ba 01       	movw	r22, r20
   a:	14 96       	adiw	r26, 0x04	; 4
   c:	4d 91       	ld	r20, X+
   e:	5c 91       	ld	r21, X
  10:	15 97       	sbiw	r26, 0x05	; 5
  12:	20 e0       	ldi	r18, 0x00	; 0
  14:	30 e0       	ldi	r19, 0x00	; 0
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN14APDSensorArray16firstSensorByPinEii+0x18>
  18:	87 85       	ldd	r24, Z+15	; 0x0f
  1a:	90 89       	ldd	r25, Z+16	; 0x10
  1c:	86 17       	cp	r24, r22
  1e:	97 07       	cpc	r25, r23
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN14APDSensorArray16firstSensorByPinEii+0x22>
  22:	85 89       	ldd	r24, Z+21	; 0x15
  24:	96 89       	ldd	r25, Z+22	; 0x16
  26:	8c 17       	cp	r24, r28
  28:	9d 07       	cpc	r25, r29
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN14APDSensorArray16firstSensorByPinEii+0x2c>
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	2f 5f       	subi	r18, 0xFF	; 255
  2e:	3f 4f       	sbci	r19, 0xFF	; 255
  30:	24 17       	cp	r18, r20
  32:	35 07       	cpc	r19, r21
  34:	04 f0       	brlt	.+0      	; 0x36 <_ZN14APDSensorArray16firstSensorByPinEii+0x36>
  36:	e0 e0       	ldi	r30, 0x00	; 0
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN14APDSensorArray16firstSensorByPinEii+0x3c>
  3c:	c9 01       	movw	r24, r18
  3e:	88 0f       	add	r24, r24
  40:	99 1f       	adc	r25, r25
  42:	12 96       	adiw	r26, 0x02	; 2
  44:	ed 91       	ld	r30, X+
  46:	fc 91       	ld	r31, X
  48:	13 97       	sbiw	r26, 0x03	; 3
  4a:	e8 0f       	add	r30, r24
  4c:	f9 1f       	adc	r31, r25
  4e:	01 90       	ld	r0, Z+
  50:	f0 81       	ld	r31, Z
  52:	e0 2d       	mov	r30, r0
  54:	30 97       	sbiw	r30, 0x00	; 0
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN14APDSensorArray16firstSensorByPinEii+0x58>
  58:	cf 01       	movw	r24, r30
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	df 91       	pop	r29
  5c:	cf 91       	pop	r28
  5e:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray13indexBySensorEP9APDSensor:

00000000 <_ZN14APDSensorArray13indexBySensorEP9APDSensor>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	dc 01       	movw	r26, r24
   2:	61 15       	cp	r22, r1
   4:	71 05       	cpc	r23, r1
   6:	01 f4       	brne	.+0      	; 0x8 <_ZN14APDSensorArray13indexBySensorEP9APDSensor+0x8>
   8:	2e ef       	ldi	r18, 0xFE	; 254
   a:	3f ef       	ldi	r19, 0xFF	; 255
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZN14APDSensorArray13indexBySensorEP9APDSensor+0xe>
   e:	14 96       	adiw	r26, 0x04	; 4
  10:	4d 91       	ld	r20, X+
  12:	5c 91       	ld	r21, X
  14:	15 97       	sbiw	r26, 0x05	; 5
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	30 e0       	ldi	r19, 0x00	; 0
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN14APDSensorArray13indexBySensorEP9APDSensor+0x1c>
  1c:	e6 17       	cp	r30, r22
  1e:	f7 07       	cpc	r31, r23
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN14APDSensorArray13indexBySensorEP9APDSensor+0x22>
  22:	2f 5f       	subi	r18, 0xFF	; 255
  24:	3f 4f       	sbci	r19, 0xFF	; 255
  26:	24 17       	cp	r18, r20
  28:	35 07       	cpc	r19, r21
  2a:	04 f4       	brge	.+0      	; 0x2c <_ZN14APDSensorArray13indexBySensorEP9APDSensor+0x2c>
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	c9 01       	movw	r24, r18
  2e:	88 0f       	add	r24, r24
  30:	99 1f       	adc	r25, r25
  32:	12 96       	adiw	r26, 0x02	; 2
  34:	ed 91       	ld	r30, X+
  36:	fc 91       	ld	r31, X
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	13 97       	sbiw	r26, 0x03	; 3
  3a:	e8 0f       	add	r30, r24
  3c:	f9 1f       	adc	r31, r25
  3e:	01 90       	ld	r0, Z+
  40:	f0 81       	ld	r31, Z
  42:	e0 2d       	mov	r30, r0
  44:	30 97       	sbiw	r30, 0x00	; 0
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN14APDSensorArray13indexBySensorEP9APDSensor+0x48>
  48:	2f ef       	ldi	r18, 0xFF	; 255
  4a:	3f ef       	ldi	r19, 0xFF	; 255
  4c:	c9 01       	movw	r24, r18
  4e:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray7byIndexEi:

00000000 <_ZN14APDSensorArray7byIndexEi>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	fc 01       	movw	r30, r24
   2:	77 fd       	sbrc	r23, 7
   4:	00 c0       	rjmp	.+0      	; 0x6 <_ZN14APDSensorArray7byIndexEi+0x6>
   6:	84 81       	ldd	r24, Z+4	; 0x04
   8:	95 81       	ldd	r25, Z+5	; 0x05
   a:	86 17       	cp	r24, r22
   c:	97 07       	cpc	r25, r23
   e:	04 f0       	brlt	.+0      	; 0x10 <_ZN14APDSensorArray7byIndexEi+0x10>
  10:	66 0f       	add	r22, r22
  12:	77 1f       	adc	r23, r23
  14:	02 80       	ldd	r0, Z+2	; 0x02
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	f3 81       	ldd	r31, Z+3	; 0x03
  18:	e0 2d       	mov	r30, r0
  1a:	e6 0f       	add	r30, r22
  1c:	f7 1f       	adc	r31, r23
  1e:	01 90       	ld	r0, Z+
  20:	f0 81       	ld	r31, Z
  22:	e0 2d       	mov	r30, r0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN14APDSensorArray7byIndexEi+0x26>
  26:	e0 e0       	ldi	r30, 0x00	; 0
  28:	f0 e0       	ldi	r31, 0x00	; 0
  2a:	cf 01       	movw	r24, r30
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray5countEv:

00000000 <_ZN14APDSensorArray5countEv>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray11diagnosticsEv:

00000000 <_ZN14APDSensorArray11diagnosticsEv>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	c0 e0       	ldi	r28, 0x00	; 0
   c:	d0 e0       	ldi	r29, 0x00	; 0
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN14APDSensorArray11diagnosticsEv+0x10>
  10:	ce 01       	movw	r24, r28
  12:	88 0f       	add	r24, r24
  14:	99 1f       	adc	r25, r25
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	d8 01       	movw	r26, r16
  18:	12 96       	adiw	r26, 0x02	; 2
  1a:	ed 91       	ld	r30, X+
  1c:	fc 91       	ld	r31, X
  1e:	13 97       	sbiw	r26, 0x03	; 3
  20:	e8 0f       	add	r30, r24
  22:	f9 1f       	adc	r31, r25
  24:	a0 81       	ld	r26, Z
  26:	b1 81       	ldd	r27, Z+1	; 0x01
  28:	ed 91       	ld	r30, X+
  2a:	fc 91       	ld	r31, X
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	11 97       	sbiw	r26, 0x01	; 1
  2e:	00 84       	ldd	r0, Z+8	; 0x08
  30:	f1 85       	ldd	r31, Z+9	; 0x09
  32:	e0 2d       	mov	r30, r0
  34:	cd 01       	movw	r24, r26
  36:	19 95       	eicall
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	21 96       	adiw	r28, 0x01	; 1
  3a:	f8 01       	movw	r30, r16
  3c:	84 81       	ldd	r24, Z+4	; 0x04
  3e:	95 81       	ldd	r25, Z+5	; 0x05
  40:	c8 17       	cp	r28, r24
  42:	d9 07       	cpc	r29, r25
  44:	04 f0       	brlt	.+0      	; 0x46 <_ZN14APDSensorArray11diagnosticsEv+0x46>
  46:	df 91       	pop	r29
  48:	cf 91       	pop	r28
  4a:	1f 91       	pop	r17
  4c:	0f 91       	pop	r16
  4e:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray11pollSensorsEh:

00000000 <_ZN14APDSensorArray11pollSensorsEh>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	16 2f       	mov	r17, r22
   a:	2e 81       	ldd	r18, Y+6	; 0x06
   c:	3f 81       	ldd	r19, Y+7	; 0x07
   e:	37 fd       	sbrc	r19, 7
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN14APDSensorArray11pollSensorsEh+0x12>
  12:	8c 81       	ldd	r24, Y+4	; 0x04
  14:	9d 81       	ldd	r25, Y+5	; 0x05
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	28 17       	cp	r18, r24
  18:	39 07       	cpc	r19, r25
  1a:	04 f4       	brge	.+0      	; 0x1c <_ZN14APDSensorArray11pollSensorsEh+0x1c>
  1c:	ea 81       	ldd	r30, Y+2	; 0x02
  1e:	fb 81       	ldd	r31, Y+3	; 0x03
  20:	30 97       	sbiw	r30, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN14APDSensorArray11pollSensorsEh+0x24>
  24:	22 0f       	add	r18, r18
  26:	33 1f       	adc	r19, r19
  28:	e2 0f       	add	r30, r18
  2a:	f3 1f       	adc	r31, r19
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	80 81       	ld	r24, Z
  2e:	91 81       	ldd	r25, Z+1	; 0x01
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11pollSensorsEh>
  34:	88 23       	and	r24, r24
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN14APDSensorArray11pollSensorsEh+0x38>
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	11 30       	cpi	r17, 0x01	; 1
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN14APDSensorArray11pollSensorsEh+0x3c>
  3c:	48 85       	ldd	r20, Y+8	; 0x08
  3e:	59 85       	ldd	r21, Y+9	; 0x09
  40:	41 15       	cp	r20, r1
  42:	51 05       	cpc	r21, r1
  44:	01 f0       	breq	.+0      	; 0x46 <_ZN14APDSensorArray11pollSensorsEh+0x46>
  46:	2a 85       	ldd	r18, Y+10	; 0x0a
  48:	3b 85       	ldd	r19, Y+11	; 0x0b
  4a:	21 15       	cp	r18, r1
  4c:	31 05       	cpc	r19, r1
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZN14APDSensorArray11pollSensorsEh+0x50>
  50:	8e 81       	ldd	r24, Y+6	; 0x06
  52:	9f 81       	ldd	r25, Y+7	; 0x07
  54:	88 0f       	add	r24, r24
  56:	99 1f       	adc	r25, r25
  58:	ea 81       	ldd	r30, Y+2	; 0x02
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	fb 81       	ldd	r31, Y+3	; 0x03
  5c:	e8 0f       	add	r30, r24
  5e:	f9 1f       	adc	r31, r25
  60:	60 81       	ld	r22, Z
  62:	71 81       	ldd	r23, Z+1	; 0x01
  64:	c9 01       	movw	r24, r18
  66:	fa 01       	movw	r30, r20
  68:	19 95       	eicall
  6a:	2e 81       	ldd	r18, Y+6	; 0x06
  6c:	3f 81       	ldd	r19, Y+7	; 0x07
  6e:	2f 5f       	subi	r18, 0xFF	; 255
  70:	3f 4f       	sbci	r19, 0xFF	; 255
  72:	8c 81       	ldd	r24, Y+4	; 0x04
  74:	9d 81       	ldd	r25, Y+5	; 0x05
  76:	28 17       	cp	r18, r24
  78:	39 07       	cpc	r19, r25
              SerPrintP("OK.\n"); delay(20);
  7a:	04 f0       	brlt	.+0      	; 0x7c <_ZN14APDSensorArray11pollSensorsEh+0x7c>
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	3f 83       	std	Y+7, r19	; 0x07
  82:	2e 83       	std	Y+6, r18	; 0x06
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	1f 91       	pop	r17
  8a:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray6valueSEiPc:

00000000 <_ZN14APDSensorArray6valueSEiPc>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	8c 01       	movw	r16, r24
   e:	eb 01       	movw	r28, r22
  10:	f4 2e       	mov	r15, r20
  12:	e5 2e       	mov	r14, r21
  14:	84 2f       	mov	r24, r20
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	95 2f       	mov	r25, r21
  18:	60 e0       	ldi	r22, 0x00	; 0
  1a:	70 e0       	ldi	r23, 0x00	; 0
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray6valueSEiPc>
  20:	d7 fd       	sbrc	r29, 7
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN14APDSensorArray6valueSEiPc+0x24>
  24:	d8 01       	movw	r26, r16
  26:	14 96       	adiw	r26, 0x04	; 4
  28:	8d 91       	ld	r24, X+
  2a:	9c 91       	ld	r25, X
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	15 97       	sbiw	r26, 0x05	; 5
  2e:	c8 17       	cp	r28, r24
  30:	d9 07       	cpc	r29, r25
  32:	04 f4       	brge	.+0      	; 0x34 <_ZN14APDSensorArray6valueSEiPc+0x34>
  34:	cc 0f       	add	r28, r28
  36:	dd 1f       	adc	r29, r29
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	12 96       	adiw	r26, 0x02	; 2
  3a:	ed 91       	ld	r30, X+
  3c:	fc 91       	ld	r31, X
  3e:	13 97       	sbiw	r26, 0x03	; 3
  40:	ec 0f       	add	r30, r28
  42:	fd 1f       	adc	r31, r29
  44:	a0 81       	ld	r26, Z
  46:	b1 81       	ldd	r27, Z+1	; 0x01
  48:	ed 91       	ld	r30, X+
  4a:	fc 91       	ld	r31, X
  4c:	11 97       	sbiw	r26, 0x01	; 1
  4e:	06 80       	ldd	r0, Z+6	; 0x06
  50:	f7 81       	ldd	r31, Z+7	; 0x07
  52:	e0 2d       	mov	r30, r0
  54:	cd 01       	movw	r24, r26
  56:	6f 2d       	mov	r22, r15
  58:	7e 2d       	mov	r23, r14
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	19 95       	eicall
  5c:	8f 2d       	mov	r24, r15
  5e:	9e 2d       	mov	r25, r14
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	1f 91       	pop	r17
  66:	0f 91       	pop	r16
  68:	ff 90       	pop	r15
  6a:	ef 90       	pop	r14
  6c:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray6labelSEiPc:

00000000 <_ZN14APDSensorArray6labelSEiPc>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	8c 01       	movw	r16, r24
   e:	eb 01       	movw	r28, r22
  10:	f4 2e       	mov	r15, r20
  12:	e5 2e       	mov	r14, r21
  14:	84 2f       	mov	r24, r20
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	95 2f       	mov	r25, r21
  18:	60 e0       	ldi	r22, 0x00	; 0
  1a:	70 e0       	ldi	r23, 0x00	; 0
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray6labelSEiPc>
  20:	d7 fd       	sbrc	r29, 7
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN14APDSensorArray6labelSEiPc+0x24>
  24:	d8 01       	movw	r26, r16
  26:	14 96       	adiw	r26, 0x04	; 4
  28:	8d 91       	ld	r24, X+
  2a:	9c 91       	ld	r25, X
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	15 97       	sbiw	r26, 0x05	; 5
  2e:	c8 17       	cp	r28, r24
  30:	d9 07       	cpc	r29, r25
  32:	04 f4       	brge	.+0      	; 0x34 <_ZN14APDSensorArray6labelSEiPc+0x34>
  34:	cc 0f       	add	r28, r28
  36:	dd 1f       	adc	r29, r29
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	12 96       	adiw	r26, 0x02	; 2
  3a:	ed 91       	ld	r30, X+
  3c:	fc 91       	ld	r31, X
  3e:	13 97       	sbiw	r26, 0x03	; 3
  40:	ec 0f       	add	r30, r28
  42:	fd 1f       	adc	r31, r29
  44:	60 81       	ld	r22, Z
  46:	71 81       	ldd	r23, Z+1	; 0x01
  48:	6e 5f       	subi	r22, 0xFE	; 254
  4a:	7f 4f       	sbci	r23, 0xFF	; 255
  4c:	8f 2d       	mov	r24, r15
  4e:	9e 2d       	mov	r25, r14
  50:	4c e0       	ldi	r20, 0x0C	; 12
  52:	50 e0       	ldi	r21, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray6labelSEiPc>
  58:	8f 2d       	mov	r24, r15
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	9e 2d       	mov	r25, r14
  5c:	df 91       	pop	r29
  5e:	cf 91       	pop	r28
  60:	1f 91       	pop	r17
  62:	0f 91       	pop	r16
  64:	ff 90       	pop	r15
  66:	ef 90       	pop	r14
  68:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray18findReusableSensorEP6SDCONF:

00000000 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	9c 01       	movw	r18, r24
   6:	fb 01       	movw	r30, r22
   8:	45 85       	ldd	r20, Z+13	; 0x0d
   a:	56 85       	ldd	r21, Z+14	; 0x0e
   c:	46 30       	cpi	r20, 0x06	; 6
   e:	51 05       	cpc	r21, r1
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF+0x12>
  12:	47 30       	cpi	r20, 0x07	; 7
  14:	51 05       	cpc	r21, r1
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	04 f4       	brge	.+0      	; 0x18 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF+0x18>
  18:	ca 01       	movw	r24, r20
  1a:	02 97       	sbiw	r24, 0x02	; 2
  1c:	02 97       	sbiw	r24, 0x02	; 2
  1e:	00 f4       	brcc	.+0      	; 0x20 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF+0x22>
  22:	48 30       	cpi	r20, 0x08	; 8
  24:	51 05       	cpc	r21, r1
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF+0x28>
  28:	63 89       	ldd	r22, Z+19	; 0x13
  2a:	74 89       	ldd	r23, Z+20	; 0x14
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	c9 01       	movw	r24, r18
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF>
  32:	ec 01       	movw	r28, r24
  34:	00 97       	sbiw	r24, 0x00	; 0
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF+0x38>
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	be 01       	movw	r22, r28
  46:	40 e1       	ldi	r20, 0x10	; 16
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF+0x50>
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF>
  58:	c0 e0       	ldi	r28, 0x00	; 0
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	d0 e0       	ldi	r29, 0x00	; 0
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray18findReusableSensorEP6SDCONF>
  64:	ce 01       	movw	r24, r28
  66:	df 91       	pop	r29
  68:	cf 91       	pop	r28
  6a:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray11loadSensorsEP10APDStorage:

00000000 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	8a 81       	ldd	r24, Y+2	; 0x02
   e:	9b 81       	ldd	r25, Y+3	; 0x03
  10:	89 2b       	or	r24, r25
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN14APDSensorArray11loadSensorsEP10APDStorage+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN14APDSensorArray11loadSensorsEP10APDStorage+0x16>
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
  1e:	bc 01       	movw	r22, r24
  20:	9d 83       	std	Y+5, r25	; 0x05
  22:	8c 83       	std	Y+4, r24	; 0x04
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	8c 81       	ldd	r24, Y+4	; 0x04
  3a:	9d 81       	ldd	r25, Y+5	; 0x05
  3c:	97 fd       	sbrc	r25, 7
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN14APDSensorArray11loadSensorsEP10APDStorage+0x40>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
  48:	6c 81       	ldd	r22, Y+4	; 0x04
  4a:	7d 81       	ldd	r23, Y+5	; 0x05
  4c:	66 0f       	add	r22, r22
  4e:	77 1f       	adc	r23, r23
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	4a e0       	ldi	r20, 0x0A	; 10
  56:	50 e0       	ldi	r21, 0x00	; 0
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
  64:	8c 81       	ldd	r24, Y+4	; 0x04
  66:	9d 81       	ldd	r25, Y+5	; 0x05
  68:	88 0f       	add	r24, r24
  6a:	99 1f       	adc	r25, r25
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
  70:	ac 01       	movw	r20, r24
  72:	9b 83       	std	Y+3, r25	; 0x03
  74:	8a 83       	std	Y+2, r24	; 0x02
  76:	00 97       	sbiw	r24, 0x00	; 0
  78:	01 f0       	breq	.+0      	; 0x7a <_ZN14APDSensorArray11loadSensorsEP10APDStorage+0x7a>
              SerPrintP("OK.\n"); delay(20);
  7a:	2c 81       	ldd	r18, Y+4	; 0x04
  7c:	3d 81       	ldd	r19, Y+5	; 0x05
  7e:	22 0f       	add	r18, r18
  80:	33 1f       	adc	r19, r19
  82:	84 2f       	mov	r24, r20
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	a9 01       	movw	r20, r18
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
              this->pAPDSensors[i] = NULL;
  8e:	c8 01       	movw	r24, r16
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	9e 01       	movw	r18, r28

APDSensorArray::~APDSensorArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
      for (int i=0; i<this->iSensorCount; i++) {
  9a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
  9e:	1f 82       	std	Y+7, r1	; 0x07
  a0:	1e 82       	std	Y+6, r1	; 0x06
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN14APDSensorArray11loadSensorsEP10APDStorage+0xa4>
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	00 c0       	rjmp	.+0      	; 0xaa <_ZN14APDSensorArray11loadSensorsEP10APDStorage+0xaa>
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
              SerPrintP("OK.\n"); delay(20);
              this->pAPDSensors[i] = NULL;
          }
      }
      free(this->pAPDSensors);										// APDSensor pointers array was malloc
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage+0xb0>
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
      this->pAPDSensors = NULL;
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray11loadSensorsEP10APDStorage>
      this->iSensorCount=0;
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	9d 81       	ldd	r25, Y+5	; 0x05
  }
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray17new_sensor_parserEPviPc:

00000000 <_ZN14APDSensorArray17new_sensor_parserEPviPc>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	e3 97       	sbiw	r28, 0x33	; 51
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	f8 2e       	mov	r15, r24
  2a:	e9 2e       	mov	r14, r25
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	4b 01       	movw	r8, r22
  2e:	de 01       	movw	r26, r28
  30:	11 96       	adiw	r26, 0x01	; 1
  32:	e0 e0       	ldi	r30, 0x00	; 0
  34:	f0 e0       	ldi	r31, 0x00	; 0
  36:	83 e3       	ldi	r24, 0x33	; 51
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	01 90       	ld	r0, Z+
  3a:	0d 92       	st	X+, r0
  3c:	81 50       	subi	r24, 0x01	; 1
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x40>
  40:	2d b7       	in	r18, 0x3d	; 61
  42:	3e b7       	in	r19, 0x3e	; 62
  44:	26 51       	subi	r18, 0x16	; 22
  46:	30 40       	sbci	r19, 0x00	; 0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	3e bf       	out	0x3e, r19	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	2d bf       	out	0x3d, r18	; 61
  52:	ed b7       	in	r30, 0x3d	; 61
  54:	fe b7       	in	r31, 0x3e	; 62
  56:	31 96       	adiw	r30, 0x01	; 1
  58:	ad b7       	in	r26, 0x3d	; 61
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	be b7       	in	r27, 0x3e	; 62
  5c:	12 96       	adiw	r26, 0x02	; 2
  5e:	5c 93       	st	X, r21
  60:	4e 93       	st	-X, r20
  62:	11 97       	sbiw	r26, 0x01	; 1
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	93 83       	std	Z+3, r25	; 0x03
  6a:	82 83       	std	Z+2, r24	; 0x02
  6c:	ce 01       	movw	r24, r28
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	95 83       	std	Z+5, r25	; 0x05
  72:	84 83       	std	Z+4, r24	; 0x04
  74:	ce 01       	movw	r24, r28
  76:	0e 96       	adiw	r24, 0x0e	; 14
  78:	97 83       	std	Z+7, r25	; 0x07
              SerPrintP("OK.\n"); delay(20);
  7a:	86 83       	std	Z+6, r24	; 0x06
  7c:	ce 01       	movw	r24, r28
  7e:	40 96       	adiw	r24, 0x10	; 16
  80:	91 87       	std	Z+9, r25	; 0x09
  82:	80 87       	std	Z+8, r24	; 0x08
  84:	ce 01       	movw	r24, r28
  86:	42 96       	adiw	r24, 0x12	; 18
  88:	93 87       	std	Z+11, r25	; 0x0b
  8a:	82 87       	std	Z+10, r24	; 0x0a
  8c:	ce 01       	movw	r24, r28
              this->pAPDSensors[i] = NULL;
  8e:	44 96       	adiw	r24, 0x14	; 20
  90:	95 87       	std	Z+13, r25	; 0x0d
  92:	84 87       	std	Z+12, r24	; 0x0c
  94:	ce 01       	movw	r24, r28
  96:	46 96       	adiw	r24, 0x16	; 22
  98:	97 87       	std	Z+15, r25	; 0x0f

APDSensorArray::~APDSensorArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
      for (int i=0; i<this->iSensorCount; i++) {
  9a:	86 87       	std	Z+14, r24	; 0x0e
  9c:	ce 01       	movw	r24, r28
  9e:	48 96       	adiw	r24, 0x18	; 24
  a0:	91 8b       	std	Z+17, r25	; 0x11
  a2:	80 8b       	std	Z+16, r24	; 0x10
  a4:	ce 01       	movw	r24, r28
  a6:	4a 96       	adiw	r24, 0x1a	; 26
  a8:	93 8b       	std	Z+19, r25	; 0x13
  aa:	82 8b       	std	Z+18, r24	; 0x12
  ac:	8e 01       	movw	r16, r28
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
              SerPrintP("OK.\n"); delay(20);
              this->pAPDSensors[i] = NULL;
          }
      }
      free(this->pAPDSensors);										// APDSensor pointers array was malloc
  ae:	04 5e       	subi	r16, 0xE4	; 228
  b0:	1f 4f       	sbci	r17, 0xFF	; 255
  b2:	15 8b       	std	Z+21, r17	; 0x15
      this->pAPDSensors = NULL;
  b4:	04 8b       	std	Z+20, r16	; 0x14
  b6:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
      this->iSensorCount=0;
  ba:	ed b7       	in	r30, 0x3d	; 61
  }
}
  bc:	fe b7       	in	r31, 0x3e	; 62
  be:	76 96       	adiw	r30, 0x16	; 22
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	fe bf       	out	0x3e, r31	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	ed bf       	out	0x3d, r30	; 61
  ca:	09 97       	sbiw	r24, 0x09	; 9
  cc:	04 f4       	brge	.+0      	; 0xce <_ZN14APDSensorArray17new_sensor_parserEPviPc+0xce>
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	d8 01       	movw	r26, r16
  d2:	1d 92       	st	X+, r1
  d4:	8a 95       	dec	r24
  d6:	01 f4       	brne	.+0      	; 0xd8 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0xd8>
  d8:	af 2c       	mov	r10, r15
  da:	be 2c       	mov	r11, r14
  dc:	c5 01       	movw	r24, r10
  de:	6e 01       	movw	r12, r28
  e0:	08 94       	sec
  e2:	c1 1c       	adc	r12, r1
  e4:	d1 1c       	adc	r13, r1
  e6:	b6 01       	movw	r22, r12
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
  ec:	7c 01       	movw	r14, r24
  ee:	8e 85       	ldd	r24, Y+14	; 0x0e
  f0:	9f 85       	ldd	r25, Y+15	; 0x0f
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	91 05       	cpc	r25, r1
  f6:	01 f4       	brne	.+0      	; 0xf8 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0xf8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <_ZN14APDSensorArray17new_sensor_parserEPviPc+0xfa>
  fa:	84 30       	cpi	r24, 0x04	; 4
  fc:	91 05       	cpc	r25, r1
  fe:	04 f4       	brge	.+0      	; 0x100 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x100>
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	91 05       	cpc	r25, r1
 104:	01 f0       	breq	.+0      	; 0x106 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x106>
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	91 05       	cpc	r25, r1
 10a:	04 f4       	brge	.+0      	; 0x10c <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x10c>
 10c:	89 2b       	or	r24, r25
 10e:	01 f0       	breq	.+0      	; 0x110 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x110>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x112>
 112:	86 30       	cpi	r24, 0x06	; 6
 114:	91 05       	cpc	r25, r1
 116:	01 f4       	brne	.+0      	; 0x118 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x118>
 118:	00 c0       	rjmp	.+0      	; 0x11a <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x11a>
 11a:	87 30       	cpi	r24, 0x07	; 7
 11c:	91 05       	cpc	r25, r1
 11e:	04 f4       	brge	.+0      	; 0x120 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x120>
 120:	05 97       	sbiw	r24, 0x05	; 5
 122:	01 f0       	breq	.+0      	; 0x124 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x124>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x126>
 126:	00 c0       	rjmp	.+0      	; 0x128 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x128>
 128:	87 30       	cpi	r24, 0x07	; 7
 12a:	91 05       	cpc	r25, r1
 12c:	01 f4       	brne	.+0      	; 0x12e <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x12e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x130>
 130:	08 97       	sbiw	r24, 0x08	; 8
 132:	01 f0       	breq	.+0      	; 0x134 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x134>
 134:	00 c0       	rjmp	.+0      	; 0x136 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x136>
 136:	00 c0       	rjmp	.+0      	; 0x138 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x138>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 148:	18 2f       	mov	r17, r24
 14a:	09 2f       	mov	r16, r25
 14c:	b6 01       	movw	r22, r12
 14e:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x154>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 164:	18 2f       	mov	r17, r24
 166:	09 2f       	mov	r16, r25
 168:	b6 01       	movw	r22, r12
 16a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 16e:	21 2f       	mov	r18, r17
 170:	30 2f       	mov	r19, r16
 172:	c9 01       	movw	r24, r18
 174:	00 c0       	rjmp	.+0      	; 0x176 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x176>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 186:	18 2f       	mov	r17, r24
 188:	09 2f       	mov	r16, r25
 18a:	b6 01       	movw	r22, r12
 18c:	a7 01       	movw	r20, r14
 18e:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 192:	00 c0       	rjmp	.+0      	; 0x194 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x194>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 19c:	86 e4       	ldi	r24, 0x46	; 70
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1a4:	18 2f       	mov	r17, r24
 1a6:	09 2f       	mov	r16, r25
 1a8:	b6 01       	movw	r22, r12
 1aa:	a7 01       	movw	r20, r14
 1ac:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x1b2>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1ba:	80 e4       	ldi	r24, 0x40	; 64
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1c2:	18 2f       	mov	r17, r24
 1c4:	09 2f       	mov	r16, r25
 1c6:	b6 01       	movw	r22, r12
 1c8:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x1ce>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1de:	18 2f       	mov	r17, r24
 1e0:	09 2f       	mov	r16, r25
 1e2:	b6 01       	movw	r22, r12
 1e4:	a7 01       	movw	r20, r14
 1e6:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x1ec>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1f4:	89 e4       	ldi	r24, 0x49	; 73
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 1fc:	18 2f       	mov	r17, r24
 1fe:	09 2f       	mov	r16, r25
 200:	b6 01       	movw	r22, r12
 202:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x208>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 210:	85 e4       	ldi	r24, 0x45	; 69
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 218:	18 2f       	mov	r17, r24
 21a:	09 2f       	mov	r16, r25
 21c:	b6 01       	movw	r22, r12
 21e:	a7 01       	movw	r20, r14
 220:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 224:	00 c0       	rjmp	.+0      	; 0x226 <_ZN14APDSensorArray17new_sensor_parserEPviPc+0x226>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray17new_sensor_parserEPviPc>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	88 0c       	add	r8, r8
 234:	99 1c       	adc	r9, r9
 236:	d5 01       	movw	r26, r10
 238:	12 96       	adiw	r26, 0x02	; 2
 23a:	ed 91       	ld	r30, X+
 23c:	fc 91       	ld	r31, X
 23e:	13 97       	sbiw	r26, 0x03	; 3
 240:	e8 0d       	add	r30, r8
 242:	f9 1d       	adc	r31, r9
 244:	91 83       	std	Z+1, r25	; 0x01
 246:	80 83       	st	Z, r24
 248:	e3 96       	adiw	r28, 0x33	; 51
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	bf 90       	pop	r11
 266:	af 90       	pop	r10
 268:	9f 90       	pop	r9
 26a:	8f 90       	pop	r8
 26c:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArray10dumpToFileEP10APDStoragePc:

00000000 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	5f 92       	push	r5
   2:	6f 92       	push	r6
   4:	7f 92       	push	r7
   6:	8f 92       	push	r8
   8:	9f 92       	push	r9
   a:	af 92       	push	r10
   c:	bf 92       	push	r11
   e:	cf 92       	push	r12
  10:	df 92       	push	r13
  12:	ef 92       	push	r14
  14:	ff 92       	push	r15
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	0f 93       	push	r16
  18:	1f 93       	push	r17
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	c3 58       	subi	r28, 0x83	; 131
  24:	d0 40       	sbci	r29, 0x00	; 0
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	f8 94       	cli
  2a:	de bf       	out	0x3e, r29	; 62
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	0f be       	out	0x3f, r0	; 63
  2e:	cd bf       	out	0x3d, r28	; 61
  30:	6c 01       	movw	r12, r24
  32:	7b 01       	movw	r14, r22
  34:	8a 01       	movw	r16, r20
  36:	db 01       	movw	r26, r22
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	18 96       	adiw	r26, 0x08	; 8
  3a:	8d 91       	ld	r24, X+
  3c:	9c 91       	ld	r25, X
  3e:	19 97       	sbiw	r26, 0x09	; 9
  40:	ba 01       	movw	r22, r20
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
  46:	88 23       	and	r24, r24
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc+0x4a>
  4a:	f7 01       	movw	r30, r14
  4c:	80 85       	ldd	r24, Z+8	; 0x08
  4e:	91 85       	ldd	r25, Z+9	; 0x09
  50:	b8 01       	movw	r22, r16
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
  56:	7e 01       	movw	r14, r28
  58:	08 94       	sec
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	e1 1c       	adc	r14, r1
  5c:	f1 1c       	adc	r15, r1
  5e:	c7 01       	movw	r24, r14
  60:	b8 01       	movw	r22, r16
  62:	42 e4       	ldi	r20, 0x42	; 66
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
  68:	88 85       	ldd	r24, Y+8	; 0x08
  6a:	88 23       	and	r24, r24
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc+0x6e>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc+0x70>
  70:	00 e0       	ldi	r16, 0x00	; 0
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	20 e6       	ldi	r18, 0x60	; 96
  76:	52 2e       	mov	r5, r18
  78:	94 e2       	ldi	r25, 0x24	; 36
              SerPrintP("OK.\n"); delay(20);
  7a:	69 2e       	mov	r6, r25
  7c:	71 2c       	mov	r7, r1
  7e:	6c 0e       	add	r6, r28
  80:	7d 1e       	adc	r7, r29
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	a8 2e       	mov	r10, r24
  86:	b1 2c       	mov	r11, r1
  88:	ac 0e       	add	r10, r28
  8a:	bd 1e       	adc	r11, r29
  8c:	b0 e0       	ldi	r27, 0x00	; 0
              this->pAPDSensors[i] = NULL;
  8e:	8b 2e       	mov	r8, r27
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	9b 2e       	mov	r9, r27
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc+0x96>
  96:	18 a2       	std	Y+32, r1	; 0x20
  98:	19 a2       	std	Y+33, r1	; 0x21

APDSensorArray::~APDSensorArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
      for (int i=0; i<this->iSensorCount; i++) {
  9a:	1a a2       	std	Y+34, r1	; 0x22
  9c:	1b a2       	std	Y+35, r1	; 0x23
  9e:	d3 01       	movw	r26, r6
  a0:	e5 2d       	mov	r30, r5
  a2:	1d 92       	st	X+, r1
  a4:	ea 95       	dec	r30
  a6:	01 f4       	brne	.+0      	; 0xa8 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc+0xa8>
  a8:	c8 01       	movw	r24, r16
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
              SerPrintP("OK.\n"); delay(20);
              this->pAPDSensors[i] = NULL;
          }
      }
      free(this->pAPDSensors);										// APDSensor pointers array was malloc
  ae:	d6 01       	movw	r26, r12
  b0:	12 96       	adiw	r26, 0x02	; 2
  b2:	ed 91       	ld	r30, X+
      this->pAPDSensors = NULL;
  b4:	fc 91       	ld	r31, X
  b6:	13 97       	sbiw	r26, 0x03	; 3
      this->iSensorCount=0;
  b8:	e8 0f       	add	r30, r24
  ba:	f9 1f       	adc	r31, r25
  }
}
  bc:	01 90       	ld	r0, Z+
  be:	f0 81       	ld	r31, Z
  c0:	e0 2d       	mov	r30, r0
  c2:	8d b7       	in	r24, 0x3d	; 61
  c4:	9e b7       	in	r25, 0x3e	; 62
  c6:	46 97       	sbiw	r24, 0x16	; 22
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	9e bf       	out	0x3e, r25	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	8d bf       	out	0x3d, r24	; 61
  d2:	2d b7       	in	r18, 0x3d	; 61
  d4:	3e b7       	in	r19, 0x3e	; 62
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	ad b7       	in	r26, 0x3d	; 61
  dc:	be b7       	in	r27, 0x3e	; 62
  de:	12 96       	adiw	r26, 0x02	; 2
  e0:	bc 92       	st	X, r11
  e2:	ae 92       	st	-X, r10
  e4:	11 97       	sbiw	r26, 0x01	; 1
  e6:	d9 01       	movw	r26, r18
  e8:	13 96       	adiw	r26, 0x03	; 3
  ea:	9c 92       	st	X, r9
  ec:	8e 92       	st	-X, r8
  ee:	12 97       	sbiw	r26, 0x02	; 2
  f0:	32 96       	adiw	r30, 0x02	; 2
  f2:	15 96       	adiw	r26, 0x05	; 5
  f4:	fc 93       	st	X, r31
  f6:	ee 93       	st	-X, r30
  f8:	14 97       	sbiw	r26, 0x04	; 4
  fa:	32 97       	sbiw	r30, 0x02	; 2
  fc:	87 85       	ldd	r24, Z+15	; 0x0f
  fe:	90 89       	ldd	r25, Z+16	; 0x10
 100:	17 96       	adiw	r26, 0x07	; 7
 102:	9c 93       	st	X, r25
 104:	8e 93       	st	-X, r24
 106:	16 97       	sbiw	r26, 0x06	; 6
 108:	81 89       	ldd	r24, Z+17	; 0x11
 10a:	92 89       	ldd	r25, Z+18	; 0x12
 10c:	19 96       	adiw	r26, 0x09	; 9
 10e:	9c 93       	st	X, r25
 110:	8e 93       	st	-X, r24
 112:	18 97       	sbiw	r26, 0x08	; 8
 114:	83 89       	ldd	r24, Z+19	; 0x13
 116:	94 89       	ldd	r25, Z+20	; 0x14
 118:	1b 96       	adiw	r26, 0x0b	; 11
 11a:	9c 93       	st	X, r25
 11c:	8e 93       	st	-X, r24
 11e:	1a 97       	sbiw	r26, 0x0a	; 10
 120:	85 89       	ldd	r24, Z+21	; 0x15
 122:	96 89       	ldd	r25, Z+22	; 0x16
 124:	1d 96       	adiw	r26, 0x0d	; 13
 126:	9c 93       	st	X, r25
 128:	8e 93       	st	-X, r24
 12a:	1c 97       	sbiw	r26, 0x0c	; 12
 12c:	87 89       	ldd	r24, Z+23	; 0x17
 12e:	90 8d       	ldd	r25, Z+24	; 0x18
 130:	1f 96       	adiw	r26, 0x0f	; 15
 132:	9c 93       	st	X, r25
 134:	8e 93       	st	-X, r24
 136:	1e 97       	sbiw	r26, 0x0e	; 14
 138:	81 8d       	ldd	r24, Z+25	; 0x19
 13a:	92 8d       	ldd	r25, Z+26	; 0x1a
 13c:	51 96       	adiw	r26, 0x11	; 17
 13e:	9c 93       	st	X, r25
 140:	8e 93       	st	-X, r24
 142:	50 97       	sbiw	r26, 0x10	; 16
 144:	83 8d       	ldd	r24, Z+27	; 0x1b
 146:	94 8d       	ldd	r25, Z+28	; 0x1c
 148:	53 96       	adiw	r26, 0x13	; 19
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	52 97       	sbiw	r26, 0x12	; 18
 150:	7d 96       	adiw	r30, 0x1d	; 29
 152:	55 96       	adiw	r26, 0x15	; 21
 154:	fc 93       	st	X, r31
 156:	ee 93       	st	-X, r30
 158:	54 97       	sbiw	r26, 0x14	; 20
 15a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
 15e:	ed b7       	in	r30, 0x3d	; 61
 160:	fe b7       	in	r31, 0x3e	; 62
 162:	76 96       	adiw	r30, 0x16	; 22
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	fe bf       	out	0x3e, r31	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	ed bf       	out	0x3d, r30	; 61
 16e:	c7 01       	movw	r24, r14
 170:	b5 01       	movw	r22, r10
 172:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
 176:	0f 5f       	subi	r16, 0xFF	; 255
 178:	1f 4f       	sbci	r17, 0xFF	; 255
 17a:	d6 01       	movw	r26, r12
 17c:	14 96       	adiw	r26, 0x04	; 4
 17e:	8d 91       	ld	r24, X+
 180:	9c 91       	ld	r25, X
 182:	15 97       	sbiw	r26, 0x05	; 5
 184:	08 17       	cp	r16, r24
 186:	19 07       	cpc	r17, r25
 188:	04 f4       	brge	.+0      	; 0x18a <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc+0x18a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc+0x18c>
 18c:	ce 01       	movw	r24, r28
 18e:	05 96       	adiw	r24, 0x05	; 5
 190:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
 194:	00 c0       	rjmp	.+0      	; 0x196 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc+0x196>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	b8 01       	movw	r22, r16
 1a4:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
 1b0:	88 85       	ldd	r24, Y+8	; 0x08
 1b2:	88 23       	and	r24, r24
 1b4:	01 f0       	breq	.+0      	; 0x1b6 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc+0x1b6>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	9a 83       	std	Y+2, r25	; 0x02
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	ce 01       	movw	r24, r28
 1c0:	05 96       	adiw	r24, 0x05	; 5
 1c2:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArray10dumpToFileEP10APDStoragePc>
 1c6:	cd 57       	subi	r28, 0x7D	; 125
 1c8:	df 4f       	sbci	r29, 0xFF	; 255
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArrayD1Ev:

00000000 <_ZN14APDSensorArrayD1Ev>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	8a 81       	ldd	r24, Y+2	; 0x02
  18:	9b 81       	ldd	r25, Y+3	; 0x03
  1a:	89 2b       	or	r24, r25
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN14APDSensorArrayD1Ev+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN14APDSensorArrayD1Ev+0x20>
  20:	00 e0       	ldi	r16, 0x00	; 0
  22:	10 e0       	ldi	r17, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN14APDSensorArrayD1Ev+0x26>
  26:	78 01       	movw	r14, r16
  28:	ee 0c       	add	r14, r14
  2a:	ff 1c       	adc	r15, r15
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	ee 0d       	add	r30, r14
  2e:	ff 1d       	adc	r31, r15
  30:	80 81       	ld	r24, Z
  32:	91 81       	ldd	r25, Z+1	; 0x01
  34:	89 2b       	or	r24, r25
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN14APDSensorArrayD1Ev+0x38>
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD1Ev>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	b8 01       	movw	r22, r16
  46:	4a e0       	ldi	r20, 0x0A	; 10
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD1Ev>
  4e:	62 e3       	ldi	r22, 0x32	; 50
  50:	70 e0       	ldi	r23, 0x00	; 0
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD1Ev>
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	ea 81       	ldd	r30, Y+2	; 0x02
  5c:	fb 81       	ldd	r31, Y+3	; 0x03
  5e:	ee 0d       	add	r30, r14
  60:	ff 1d       	adc	r31, r15
  62:	a0 81       	ld	r26, Z
  64:	b1 81       	ldd	r27, Z+1	; 0x01
  66:	10 97       	sbiw	r26, 0x00	; 0
  68:	01 f0       	breq	.+0      	; 0x6a <_ZN14APDSensorArrayD1Ev+0x6a>
  6a:	ed 91       	ld	r30, X+
  6c:	fc 91       	ld	r31, X
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	02 80       	ldd	r0, Z+2	; 0x02
  72:	f3 81       	ldd	r31, Z+3	; 0x03
  74:	e0 2d       	mov	r30, r0
  76:	cd 01       	movw	r24, r26
  78:	19 95       	eicall
              SerPrintP("OK.\n"); delay(20);
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD1Ev>
  82:	64 e1       	ldi	r22, 0x14	; 20
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD1Ev>
              this->pAPDSensors[i] = NULL;
  8e:	ea 81       	ldd	r30, Y+2	; 0x02
  90:	fb 81       	ldd	r31, Y+3	; 0x03
  92:	ee 0d       	add	r30, r14
  94:	ff 1d       	adc	r31, r15
  96:	11 82       	std	Z+1, r1	; 0x01
  98:	10 82       	st	Z, r1

APDSensorArray::~APDSensorArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
      for (int i=0; i<this->iSensorCount; i++) {
  9a:	0f 5f       	subi	r16, 0xFF	; 255
  9c:	1f 4f       	sbci	r17, 0xFF	; 255
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	9d 81       	ldd	r25, Y+5	; 0x05
  a2:	ea 81       	ldd	r30, Y+2	; 0x02
  a4:	fb 81       	ldd	r31, Y+3	; 0x03
  a6:	08 17       	cp	r16, r24
  a8:	19 07       	cpc	r17, r25
  aa:	04 f4       	brge	.+0      	; 0xac <_ZN14APDSensorArrayD1Ev+0xac>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN14APDSensorArrayD1Ev+0xae>
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
              SerPrintP("OK.\n"); delay(20);
              this->pAPDSensors[i] = NULL;
          }
      }
      free(this->pAPDSensors);										// APDSensor pointers array was malloc
  ae:	cf 01       	movw	r24, r30
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD1Ev>
      this->pAPDSensors = NULL;
  b4:	1b 82       	std	Y+3, r1	; 0x03
  b6:	1a 82       	std	Y+2, r1	; 0x02
      this->iSensorCount=0;
  b8:	1d 82       	std	Y+5, r1	; 0x05
  ba:	1c 82       	std	Y+4, r1	; 0x04
  }
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	ff 90       	pop	r15
  c6:	ef 90       	pop	r14
  c8:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArrayD2Ev:

00000000 <_ZN14APDSensorArrayD2Ev>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	8a 81       	ldd	r24, Y+2	; 0x02
  18:	9b 81       	ldd	r25, Y+3	; 0x03
  1a:	89 2b       	or	r24, r25
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN14APDSensorArrayD2Ev+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN14APDSensorArrayD2Ev+0x20>
  20:	00 e0       	ldi	r16, 0x00	; 0
  22:	10 e0       	ldi	r17, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN14APDSensorArrayD2Ev+0x26>
  26:	78 01       	movw	r14, r16
  28:	ee 0c       	add	r14, r14
  2a:	ff 1c       	adc	r15, r15
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	ee 0d       	add	r30, r14
  2e:	ff 1d       	adc	r31, r15
  30:	80 81       	ld	r24, Z
  32:	91 81       	ldd	r25, Z+1	; 0x01
  34:	89 2b       	or	r24, r25
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN14APDSensorArrayD2Ev+0x38>
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD2Ev>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	b8 01       	movw	r22, r16
  46:	4a e0       	ldi	r20, 0x0A	; 10
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD2Ev>
  4e:	62 e3       	ldi	r22, 0x32	; 50
  50:	70 e0       	ldi	r23, 0x00	; 0
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD2Ev>
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	ea 81       	ldd	r30, Y+2	; 0x02
  5c:	fb 81       	ldd	r31, Y+3	; 0x03
  5e:	ee 0d       	add	r30, r14
  60:	ff 1d       	adc	r31, r15
  62:	a0 81       	ld	r26, Z
  64:	b1 81       	ldd	r27, Z+1	; 0x01
  66:	10 97       	sbiw	r26, 0x00	; 0
  68:	01 f0       	breq	.+0      	; 0x6a <_ZN14APDSensorArrayD2Ev+0x6a>
  6a:	ed 91       	ld	r30, X+
  6c:	fc 91       	ld	r31, X
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	02 80       	ldd	r0, Z+2	; 0x02
  72:	f3 81       	ldd	r31, Z+3	; 0x03
  74:	e0 2d       	mov	r30, r0
  76:	cd 01       	movw	r24, r26
  78:	19 95       	eicall
              SerPrintP("OK.\n"); delay(20);
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD2Ev>
  82:	64 e1       	ldi	r22, 0x14	; 20
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD2Ev>
              this->pAPDSensors[i] = NULL;
  8e:	ea 81       	ldd	r30, Y+2	; 0x02
  90:	fb 81       	ldd	r31, Y+3	; 0x03
  92:	ee 0d       	add	r30, r14
  94:	ff 1d       	adc	r31, r15
  96:	11 82       	std	Z+1, r1	; 0x01
  98:	10 82       	st	Z, r1

APDSensorArray::~APDSensorArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
      for (int i=0; i<this->iSensorCount; i++) {
  9a:	0f 5f       	subi	r16, 0xFF	; 255
  9c:	1f 4f       	sbci	r17, 0xFF	; 255
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	9d 81       	ldd	r25, Y+5	; 0x05
  a2:	ea 81       	ldd	r30, Y+2	; 0x02
  a4:	fb 81       	ldd	r31, Y+3	; 0x03
  a6:	08 17       	cp	r16, r24
  a8:	19 07       	cpc	r17, r25
  aa:	04 f4       	brge	.+0      	; 0xac <_ZN14APDSensorArrayD2Ev+0xac>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN14APDSensorArrayD2Ev+0xae>
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
              SerPrintP("OK.\n"); delay(20);
              this->pAPDSensors[i] = NULL;
          }
      }
      free(this->pAPDSensors);										// APDSensor pointers array was malloc
  ae:	cf 01       	movw	r24, r30
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD2Ev>
      this->pAPDSensors = NULL;
  b4:	1b 82       	std	Y+3, r1	; 0x03
  b6:	1a 82       	std	Y+2, r1	; 0x02
      this->iSensorCount=0;
  b8:	1d 82       	std	Y+5, r1	; 0x05
  ba:	1c 82       	std	Y+4, r1	; 0x04
  }
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	ff 90       	pop	r15
  c6:	ef 90       	pop	r14
  c8:	08 95       	ret

Disassembly of section .text._ZN14APDSensorArrayD0Ev:

00000000 <_ZN14APDSensorArrayD0Ev>:
  iNextSensor = 0;
  pfruleeval = NULL;
  pRA = NULL;
}

APDSensorArray::~APDSensorArray()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
  16:	8a 81       	ldd	r24, Y+2	; 0x02
  18:	9b 81       	ldd	r25, Y+3	; 0x03
  1a:	89 2b       	or	r24, r25
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN14APDSensorArrayD0Ev+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN14APDSensorArrayD0Ev+0x20>
  20:	00 e0       	ldi	r16, 0x00	; 0
  22:	10 e0       	ldi	r17, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN14APDSensorArrayD0Ev+0x26>
  26:	78 01       	movw	r14, r16
  28:	ee 0c       	add	r14, r14
  2a:	ff 1c       	adc	r15, r15
      for (int i=0; i<this->iSensorCount; i++) {
          if (this->pAPDSensors[i] != NULL) {
  2c:	ee 0d       	add	r30, r14
  2e:	ff 1d       	adc	r31, r15
  30:	80 81       	ld	r24, Z
  32:	91 81       	ldd	r25, Z+1	; 0x01
  34:	89 2b       	or	r24, r25
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN14APDSensorArrayD0Ev+0x38>
          	SerPrintP("\nX S"); Serial.print(i); delay(50);
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD0Ev>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	b8 01       	movw	r22, r16
  46:	4a e0       	ldi	r20, 0x0A	; 10
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD0Ev>
  4e:	62 e3       	ldi	r22, 0x32	; 50
  50:	70 e0       	ldi	r23, 0x00	; 0
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD0Ev>
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
  5a:	ea 81       	ldd	r30, Y+2	; 0x02
  5c:	fb 81       	ldd	r31, Y+3	; 0x03
  5e:	ee 0d       	add	r30, r14
  60:	ff 1d       	adc	r31, r15
  62:	a0 81       	ld	r26, Z
  64:	b1 81       	ldd	r27, Z+1	; 0x01
  66:	10 97       	sbiw	r26, 0x00	; 0
  68:	01 f0       	breq	.+0      	; 0x6a <_ZN14APDSensorArrayD0Ev+0x6a>
  6a:	ed 91       	ld	r30, X+
  6c:	fc 91       	ld	r31, X
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	02 80       	ldd	r0, Z+2	; 0x02
  72:	f3 81       	ldd	r31, Z+3	; 0x03
  74:	e0 2d       	mov	r30, r0
  76:	cd 01       	movw	r24, r26
  78:	19 95       	eicall
              SerPrintP("OK.\n"); delay(20);
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD0Ev>
  82:	64 e1       	ldi	r22, 0x14	; 20
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD0Ev>
              this->pAPDSensors[i] = NULL;
  8e:	ea 81       	ldd	r30, Y+2	; 0x02
  90:	fb 81       	ldd	r31, Y+3	; 0x03
  92:	ee 0d       	add	r30, r14
  94:	ff 1d       	adc	r31, r15
  96:	11 82       	std	Z+1, r1	; 0x01
  98:	10 82       	st	Z, r1

APDSensorArray::~APDSensorArray()
{
  // TODO Auto-generated destructor stub
  if (this->pAPDSensors != NULL) {
      for (int i=0; i<this->iSensorCount; i++) {
  9a:	0f 5f       	subi	r16, 0xFF	; 255
  9c:	1f 4f       	sbci	r17, 0xFF	; 255
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	9d 81       	ldd	r25, Y+5	; 0x05
  a2:	ea 81       	ldd	r30, Y+2	; 0x02
  a4:	fb 81       	ldd	r31, Y+3	; 0x03
  a6:	08 17       	cp	r16, r24
  a8:	19 07       	cpc	r17, r25
  aa:	04 f4       	brge	.+0      	; 0xac <_ZN14APDSensorArrayD0Ev+0xac>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN14APDSensorArrayD0Ev+0xae>
              delete((this->pAPDSensors[i]));				// each APDSensor was new by 'new_sensor_parser'
              SerPrintP("OK.\n"); delay(20);
              this->pAPDSensors[i] = NULL;
          }
      }
      free(this->pAPDSensors);										// APDSensor pointers array was malloc
  ae:	cf 01       	movw	r24, r30
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD0Ev>
      this->pAPDSensors = NULL;
  b4:	1b 82       	std	Y+3, r1	; 0x03
  b6:	1a 82       	std	Y+2, r1	; 0x02
      this->iSensorCount=0;
  b8:	1d 82       	std	Y+5, r1	; 0x05
  ba:	1c 82       	std	Y+4, r1	; 0x04
  }
}
  bc:	ce 01       	movw	r24, r28
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN14APDSensorArrayD0Ev>
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	1f 91       	pop	r17
  c8:	0f 91       	pop	r16
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
  ce:	08 95       	ret

APDSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  3 .stab         000012a8  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003dab  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN9APDSerial5printEPc 0000000c  00000000  00000000  00005097  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN9APDSerial8myPrintPEPvh 0000008a  00000000  00000000  000050a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN9APDSerial6printPEPv 00000008  00000000  00000000  0000512d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9APDSerial8printlnPEPv 00000008  00000000  00000000  00005135  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN9APDSerial7printlnEPc 0000000c  00000000  00000000  0000513d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9APDSerial6dumpIPEPh 0000003c  00000000  00000000  00005149  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9APDSerialD1Ev 00000014  00000000  00000000  00005185  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9APDSerialD2Ev 00000014  00000000  00000000  00005199  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN9APDSerialD0Ev 00000024  00000000  00000000  000051ad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN9APDSerialC1El 00000054  00000000  00000000  000051d1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN9APDSerialC2El 00000054  00000000  00000000  00005225  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .rodata._ZTV9APDSerial 00000008  00000000  00000000  00005279  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 17 .progmem.data 00000023  00000000  00000000  00005281  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN9APDSerial5printEPc:

00000000 <_ZN9APDSerial5printEPc>:
 *      Author: George Schreiber
 */

#include "APDSerial.h"

APDSerial::APDSerial(long baudrate) {
   0:	bc 01       	movw	r22, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial5printEPc>
   a:	08 95       	ret

Disassembly of section .text._ZN9APDSerial8myPrintPEPvh:

00000000 <_ZN9APDSerial8myPrintPEPvh>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN9APDSerial8myPrintPEPvh+0x16>
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8myPrintPEPvh>
	// TODO Auto-generated constructor stub
	Serial.begin(baudrate);
  1a:	6c 01       	movw	r12, r24
  1c:	8c 01       	movw	r16, r24
  1e:	0f 5f       	subi	r16, 0xFF	; 255
  20:	1f 4f       	sbci	r17, 0xFF	; 255
  22:	c8 01       	movw	r24, r16
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8myPrintPEPvh>
	SerPrintP("APD Serial initialized "); Serial.print(baudrate); SerPrintP(" bauds.\n");
  28:	ec 01       	movw	r28, r24
  2a:	00 97       	sbiw	r24, 0x00	; 0
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN9APDSerial8myPrintPEPvh+0x2e>
  2e:	60 e0       	ldi	r22, 0x00	; 0
  30:	70 e0       	ldi	r23, 0x00	; 0
  32:	a8 01       	movw	r20, r16
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8myPrintPEPvh>
  38:	ce 01       	movw	r24, r28
  3a:	b7 01       	movw	r22, r14
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8myPrintPEPvh>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	be 01       	movw	r22, r28
}
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8myPrintPEPvh>
  4a:	ce 01       	movw	r24, r28
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8myPrintPEPvh>
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN9APDSerial8myPrintPEPvh+0x52>
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	60 e0       	ldi	r22, 0x00	; 0
  58:	70 e0       	ldi	r23, 0x00	; 0
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8myPrintPEPvh>
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	b6 01       	movw	r22, r12
  64:	4a e0       	ldi	r20, 0x0A	; 10
  66:	50 e0       	ldi	r21, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8myPrintPEPvh>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8myPrintPEPvh>
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	1f 91       	pop	r17
  7e:	0f 91       	pop	r16
  80:	ff 90       	pop	r15
  82:	ef 90       	pop	r14
  84:	df 90       	pop	r13
  86:	cf 90       	pop	r12
  88:	08 95       	ret

Disassembly of section .text._ZN9APDSerial6printPEPv:

00000000 <_ZN9APDSerial6printPEPv>:
 *      Author: George Schreiber
 */

#include "APDSerial.h"

APDSerial::APDSerial(long baudrate) {
   0:	60 e0       	ldi	r22, 0x00	; 0
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial6printPEPv>
   6:	08 95       	ret

Disassembly of section .text._ZN9APDSerial8printlnPEPv:

00000000 <_ZN9APDSerial8printlnPEPv>:
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial8printlnPEPv>
   6:	08 95       	ret

Disassembly of section .text._ZN9APDSerial7printlnEPc:

00000000 <_ZN9APDSerial7printlnEPc>:
   0:	bc 01       	movw	r22, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial7printlnEPc>
   a:	08 95       	ret

Disassembly of section .text._ZN9APDSerial6dumpIPEPh:

00000000 <_ZN9APDSerial6dumpIPEPh>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	c0 e0       	ldi	r28, 0x00	; 0
   c:	d0 e0       	ldi	r29, 0x00	; 0
   e:	f8 01       	movw	r30, r16
  10:	ec 0f       	add	r30, r28
  12:	fd 1f       	adc	r31, r29
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	60 81       	ld	r22, Z
	// TODO Auto-generated constructor stub
	Serial.begin(baudrate);
  1a:	4a e0       	ldi	r20, 0x0A	; 10
  1c:	50 e0       	ldi	r21, 0x00	; 0
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial6dumpIPEPh>
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerial6dumpIPEPh>
	SerPrintP("APD Serial initialized "); Serial.print(baudrate); SerPrintP(" bauds.\n");
  2a:	21 96       	adiw	r28, 0x01	; 1
  2c:	c4 30       	cpi	r28, 0x04	; 4
  2e:	d1 05       	cpc	r29, r1
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN9APDSerial6dumpIPEPh+0x32>
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	1f 91       	pop	r17
  38:	0f 91       	pop	r16
  3a:	08 95       	ret

Disassembly of section .text._ZN9APDSerialD1Ev:

00000000 <_ZN9APDSerialD1Ev>:
 *      Author: George Schreiber
 */

#include "APDSerial.h"

APDSerial::APDSerial(long baudrate) {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialD1Ev>
  12:	08 95       	ret

Disassembly of section .text._ZN9APDSerialD2Ev:

00000000 <_ZN9APDSerialD2Ev>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialD2Ev>
  12:	08 95       	ret

Disassembly of section .text._ZN9APDSerialD0Ev:

00000000 <_ZN9APDSerialD0Ev>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialD0Ev>
  18:	c8 01       	movw	r24, r16
	// TODO Auto-generated constructor stub
	Serial.begin(baudrate);
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialD0Ev>
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN9APDSerialC1El:

00000000 <_ZN9APDSerialC1El>:
 *      Author: George Schreiber
 */

#include "APDSerial.h"

APDSerial::APDSerial(long baudrate) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	fc 01       	movw	r30, r24
   e:	7a 01       	movw	r14, r20
  10:	8b 01       	movw	r16, r22
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	91 83       	std	Z+1, r25	; 0x01
  18:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub
	Serial.begin(baudrate);
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	c8 2e       	mov	r12, r24
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	d8 2e       	mov	r13, r24
  22:	c6 01       	movw	r24, r12
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialC1El>
	SerPrintP("APD Serial initialized "); Serial.print(baudrate); SerPrintP(" bauds.\n");
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialC1El>
  30:	c6 01       	movw	r24, r12
  32:	b8 01       	movw	r22, r16
  34:	a7 01       	movw	r20, r14
  36:	2a e0       	ldi	r18, 0x0A	; 10
  38:	30 e0       	ldi	r19, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialC1El>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialC1El>
}
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	ff 90       	pop	r15
  4c:	ef 90       	pop	r14
  4e:	df 90       	pop	r13
  50:	cf 90       	pop	r12
  52:	08 95       	ret

Disassembly of section .text._ZN9APDSerialC2El:

00000000 <_ZN9APDSerialC2El>:
 *      Author: George Schreiber
 */

#include "APDSerial.h"

APDSerial::APDSerial(long baudrate) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	fc 01       	movw	r30, r24
   e:	7a 01       	movw	r14, r20
  10:	8b 01       	movw	r16, r22
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	91 83       	std	Z+1, r25	; 0x01
  18:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub
	Serial.begin(baudrate);
  1a:	90 e0       	ldi	r25, 0x00	; 0
  1c:	c9 2e       	mov	r12, r25
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	d9 2e       	mov	r13, r25
  22:	c6 01       	movw	r24, r12
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialC2El>
	SerPrintP("APD Serial initialized "); Serial.print(baudrate); SerPrintP(" bauds.\n");
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialC2El>
  30:	c6 01       	movw	r24, r12
  32:	b8 01       	movw	r22, r16
  34:	a7 01       	movw	r20, r14
  36:	2a e0       	ldi	r18, 0x0A	; 10
  38:	30 e0       	ldi	r19, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialC2El>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN9APDSerialC2El>
}
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	ff 90       	pop	r15
  4c:	ef 90       	pop	r14
  4e:	df 90       	pop	r13
  50:	cf 90       	pop	r12
  52:	08 95       	ret

APDStorage.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000058  2**0
                  ALLOC
  3 .stab         000018a8  00000000  00000000  00000058  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00004553  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN10APDStorage5readyEv 00000006  00000000  00000000  00005e53  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN10APDStorage14write_log_lineEPc 0000009a  00000000  00000000  00005e59  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_ 000000fc  00000000  00000000  00005ef3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN10APDStorage9logrotateEv 0000032e  00000000  00000000  00005fef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN10APDStorage5startEv 000000e8  00000000  00000000  0000631d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN10APDStorageD1Ev 00000028  00000000  00000000  00006405  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN10APDStorageD2Ev 00000028  00000000  00000000  0000642d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN10APDStorageD0Ev 0000002e  00000000  00000000  00006455  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN10APDStorageC1Eiii 00000078  00000000  00000000  00006483  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN10APDStorageC2Eiii 00000078  00000000  00000000  000064fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .rodata._ZTV10APDStorage 00000008  00000000  00000000  00006573  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 16 .progmem.data 000001a5  00000000  00000000  0000657b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN10APDStorage5readyEv:

00000000 <_ZN10APDStorage5readyEv>:
 */

#include "APDStorage.h"
#include "APDSerial.h"

APDStorage::APDStorage(int iSS, int iChip, int iSpeed = SPI_HALF_SPEED ) {
   0:	fc 01       	movw	r30, r24
   2:	84 85       	ldd	r24, Z+12	; 0x0c
   4:	08 95       	ret

Disassembly of section .text._ZN10APDStorage14write_log_lineEPc:

00000000 <_ZN10APDStorage14write_log_lineEPc>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	6f 97       	sbiw	r28, 0x1f	; 31
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  // TODO Auto-generated constructor stub
  sdChipSelect = iChip;
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  iSSPin = iSS;		// SS_PIN
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7b 01       	movw	r14, r22
  iSDSpeed =  (iSpeed == SPI_HALF_SPEED || iSpeed == SPI_FULL_SPEED) ? iSpeed : SPI_HALF_SPEED;
  1e:	fc 01       	movw	r30, r24
  20:	84 85       	ldd	r24, Z+12	; 0x0c
  22:	88 23       	and	r24, r24
  24:	01 f0       	breq	.+0      	; 0x26 <_ZN10APDStorage14write_log_lineEPc+0x26>
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage14write_log_lineEPc>

  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  SerPrintP("SS PIN: ") Serial.print(iSS,DEC); SerPrintP("(OUT+HIGH)");
  2e:	8e 01       	movw	r16, r28
  30:	0f 5f       	subi	r16, 0xFF	; 255
  32:	1f 4f       	sbci	r17, 0xFF	; 255
  34:	c8 01       	movw	r24, r16
  36:	60 e0       	ldi	r22, 0x00	; 0
  38:	70 e0       	ldi	r23, 0x00	; 0
  3a:	46 e4       	ldi	r20, 0x46	; 70
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage14write_log_lineEPc>
  40:	88 85       	ldd	r24, Y+8	; 0x08
  42:	88 23       	and	r24, r24
  44:	01 f0       	breq	.+0      	; 0x46 <_ZN10APDStorage14write_log_lineEPc+0x46>
  46:	c8 01       	movw	r24, r16
  48:	b7 01       	movw	r22, r14
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage14write_log_lineEPc>
  pinMode(iSS, OUTPUT);        // set SS PIN as output -- see SD readings
  4e:	ce 01       	movw	r24, r28
  50:	05 96       	adiw	r24, 0x05	; 5
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage14write_log_lineEPc>
  digitalWrite(iSS, HIGH);     // turn off the W5100 chip -- see SD readings
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN10APDStorage14write_log_lineEPc+0x58>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  SerPrintP(" - prepared...");
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage14write_log_lineEPc>
  60:	88 85       	ldd	r24, Y+8	; 0x08
  62:	88 23       	and	r24, r24
  p_sd = NULL;
  64:	01 f0       	breq	.+0      	; 0x66 <_ZN10APDStorage14write_log_lineEPc+0x66>
  66:	80 e0       	ldi	r24, 0x00	; 0
  p_root = NULL;
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	9a 83       	std	Y+2, r25	; 0x02
  bReady = false;
  6c:	89 83       	std	Y+1, r24	; 0x01
}
  6e:	ce 01       	movw	r24, r28
  70:	05 96       	adiw	r24, 0x05	; 5
  72:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage14write_log_lineEPc>
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN10APDStorage14write_log_lineEPc+0x78>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage14write_log_lineEPc>
  80:	6f 96       	adiw	r28, 0x1f	; 31
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	f8 94       	cli
  86:	de bf       	out	0x3e, r29	; 62
  88:	0f be       	out	0x3f, r0	; 63
  8a:	cd bf       	out	0x3d, r28	; 61
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	1f 91       	pop	r17
  92:	0f 91       	pop	r16
  94:	ff 90       	pop	r15
  96:	ef 90       	pop	r14
  98:	08 95       	ret

Disassembly of section .text._ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_:

00000000 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_>:
 */

#include "APDStorage.h"
#include "APDSerial.h"

APDStorage::APDStorage(int iSS, int iChip, int iSpeed = SPI_HALF_SPEED ) {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  // TODO Auto-generated constructor stub
  sdChipSelect = iChip;
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  iSSPin = iSS;		// SS_PIN
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	c3 58       	subi	r28, 0x83	; 131
  iSDSpeed =  (iSpeed == SPI_HALF_SPEED || iSpeed == SPI_FULL_SPEED) ? iSpeed : SPI_HALF_SPEED;
  1e:	d0 40       	sbci	r29, 0x00	; 0
  20:	0f b6       	in	r0, 0x3f	; 63
  22:	f8 94       	cli
  24:	de bf       	out	0x3e, r29	; 62
  26:	0f be       	out	0x3f, r0	; 63
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	8b 01       	movw	r16, r22

  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  SerPrintP("SS PIN: ") Serial.print(iSS,DEC); SerPrintP("(OUT+HIGH)");
  2c:	4a 01       	movw	r8, r20
  2e:	59 01       	movw	r10, r18
  30:	18 a2       	std	Y+32, r1	; 0x20
  32:	19 a2       	std	Y+33, r1	; 0x21
  34:	1a a2       	std	Y+34, r1	; 0x22
  36:	1b a2       	std	Y+35, r1	; 0x23
  38:	fe 01       	movw	r30, r28
  3a:	b4 96       	adiw	r30, 0x24	; 36
  3c:	80 e6       	ldi	r24, 0x60	; 96
  3e:	df 01       	movw	r26, r30
  40:	1d 92       	st	X+, r1
  42:	8a 95       	dec	r24
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_+0x46>
  46:	ce 01       	movw	r24, r28
  48:	01 96       	adiw	r24, 0x01	; 1
  4a:	41 e0       	ldi	r20, 0x01	; 1
  pinMode(iSS, OUTPUT);        // set SS PIN as output -- see SD readings
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_>
  50:	88 85       	ldd	r24, Y+8	; 0x08
  52:	88 23       	and	r24, r24
  digitalWrite(iSS, HIGH);     // turn off the W5100 chip -- see SD readings
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_+0x56>
  56:	00 e0       	ldi	r16, 0x00	; 0
  58:	10 e0       	ldi	r17, 0x00	; 0
  5a:	95 e0       	ldi	r25, 0x05	; 5
  SerPrintP(" - prepared...");
  5c:	c9 2e       	mov	r12, r25
  5e:	d1 2c       	mov	r13, r1
  60:	cc 0e       	add	r12, r28
  62:	dd 1e       	adc	r13, r29
  p_sd = NULL;
  64:	80 e2       	ldi	r24, 0x20	; 32
  66:	e8 2e       	mov	r14, r24
  p_root = NULL;
  68:	f1 2c       	mov	r15, r1
  6a:	ec 0e       	add	r14, r28
  bReady = false;
  6c:	fd 1e       	adc	r15, r29
}
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_+0x70>
  70:	c5 01       	movw	r24, r10
  72:	b8 01       	movw	r22, r16
  74:	a7 01       	movw	r20, r14
  76:	f4 01       	movw	r30, r8
  78:	19 95       	eicall
  7a:	0f 5f       	subi	r16, 0xFF	; 255
  7c:	1f 4f       	sbci	r17, 0xFF	; 255
  7e:	c6 01       	movw	r24, r12
  80:	b7 01       	movw	r22, r14
  82:	44 e6       	ldi	r20, 0x64	; 100
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_>
  8e:	89 2b       	or	r24, r25
  90:	01 f4       	brne	.+0      	; 0x92 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_+0x92>
  92:	c6 01       	movw	r24, r12
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_>
  98:	00 c0       	rjmp	.+0      	; 0x9a <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_+0x9a>
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_>
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	b8 01       	movw	r22, r16
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_>
  b8:	0f ef       	ldi	r16, 0xFF	; 255
  ba:	1f ef       	ldi	r17, 0xFF	; 255
  bc:	88 85       	ldd	r24, Y+8	; 0x08
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_+0xc2>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	9a 83       	std	Y+2, r25	; 0x02
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	ce 01       	movw	r24, r28
  cc:	05 96       	adiw	r24, 0x05	; 5
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage18readFileWithParserEPcPFvPviS0_ES1_>
  d2:	c8 01       	movw	r24, r16
  d4:	cd 57       	subi	r28, 0x7D	; 125
  d6:	df 4f       	sbci	r29, 0xFF	; 255
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	ff 90       	pop	r15
  ec:	ef 90       	pop	r14
  ee:	df 90       	pop	r13
  f0:	cf 90       	pop	r12
  f2:	bf 90       	pop	r11
  f4:	af 90       	pop	r10
  f6:	9f 90       	pop	r9
  f8:	8f 90       	pop	r8
  fa:	08 95       	ret

Disassembly of section .text._ZN10APDStorage9logrotateEv:

00000000 <_ZN10APDStorage9logrotateEv>:
 */

#include "APDStorage.h"
#include "APDSerial.h"

APDStorage::APDStorage(int iSS, int iChip, int iSpeed = SPI_HALF_SPEED ) {
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  // TODO Auto-generated constructor stub
  sdChipSelect = iChip;
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  iSSPin = iSS;		// SS_PIN
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  iSDSpeed =  (iSpeed == SPI_HALF_SPEED || iSpeed == SPI_FULL_SPEED) ? iSpeed : SPI_HALF_SPEED;
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	e9 97       	sbiw	r28, 0x39	; 57
  2a:	0f b6       	in	r0, 0x3f	; 63

  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  SerPrintP("SS PIN: ") Serial.print(iSS,DEC); SerPrintP("(OUT+HIGH)");
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	5c 01       	movw	r10, r24
  36:	dc 01       	movw	r26, r24
  38:	1c 96       	adiw	r26, 0x0c	; 12
  3a:	8c 91       	ld	r24, X
  3c:	88 23       	and	r24, r24
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN10APDStorage9logrotateEv+0x40>
  40:	0f ef       	ldi	r16, 0xFF	; 255
  42:	1f ef       	ldi	r17, 0xFF	; 255
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN10APDStorage9logrotateEv+0x46>
  46:	de 01       	movw	r26, r28
  48:	11 96       	adiw	r26, 0x01	; 1
  4a:	e0 e0       	ldi	r30, 0x00	; 0
  pinMode(iSS, OUTPUT);        // set SS PIN as output -- see SD readings
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	8b e0       	ldi	r24, 0x0B	; 11
  50:	01 90       	ld	r0, Z+
  52:	0d 92       	st	X+, r0
  digitalWrite(iSS, HIGH);     // turn off the W5100 chip -- see SD readings
  54:	81 50       	subi	r24, 0x01	; 1
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN10APDStorage9logrotateEv+0x58>
  58:	1d 86       	std	Y+13, r1	; 0x0d
  5a:	1c 86       	std	Y+12, r1	; 0x0c
  SerPrintP(" - prepared...");
  5c:	f5 01       	movw	r30, r10
  5e:	80 85       	ldd	r24, Z+8	; 0x08
  60:	91 85       	ldd	r25, Z+9	; 0x09
  62:	4e 01       	movw	r8, r28
  p_sd = NULL;
  64:	08 94       	sec
  66:	81 1c       	adc	r8, r1
  p_root = NULL;
  68:	91 1c       	adc	r9, r1
  6a:	b4 01       	movw	r22, r8
  bReady = false;
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
}
  70:	88 23       	and	r24, r24
  72:	01 f4       	brne	.+0      	; 0x74 <_ZN10APDStorage9logrotateEv+0x74>
  74:	00 c0       	rjmp	.+0      	; 0x76 <_ZN10APDStorage9logrotateEv+0x76>
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
  7e:	ce 01       	movw	r24, r28
  80:	4b 96       	adiw	r24, 0x1b	; 27
  82:	b4 01       	movw	r22, r8
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
  8a:	e8 a8       	ldd	r14, Y+48	; 0x30
  8c:	f9 a8       	ldd	r15, Y+49	; 0x31
  8e:	0a a9       	ldd	r16, Y+50	; 0x32
  90:	1b a9       	ldd	r17, Y+51	; 0x33
  92:	ce 01       	movw	r24, r28
  94:	4f 96       	adiw	r24, 0x1f	; 31
  96:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	b8 01       	movw	r22, r16
  a0:	a7 01       	movw	r20, r14
  a2:	2a e0       	ldi	r18, 0x0A	; 10
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	ef 16       	cp	r14, r31
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	ff 06       	cpc	r15, r31
  ba:	f0 e1       	ldi	r31, 0x10	; 16
  bc:	0f 07       	cpc	r16, r31
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	1f 07       	cpc	r17, r31
  c2:	00 f4       	brcc	.+0      	; 0xc4 <_ZN10APDStorage9logrotateEv+0xc4>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZN10APDStorage9logrotateEv+0xc6>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <_ZN10APDStorage9logrotateEv+0xd0>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <_ZN10APDStorage9logrotateEv+0xd2>
  d2:	ed b7       	in	r30, 0x3d	; 61
  d4:	fe b7       	in	r31, 0x3e	; 62
  d6:	31 96       	adiw	r30, 0x01	; 1
  d8:	ad b7       	in	r26, 0x3d	; 61
  da:	be b7       	in	r27, 0x3e	; 62
  dc:	12 96       	adiw	r26, 0x02	; 2
  de:	9c 92       	st	X, r9
  e0:	8e 92       	st	-X, r8
  e2:	11 97       	sbiw	r26, 0x01	; 1
  e4:	00 e0       	ldi	r16, 0x00	; 0
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	13 83       	std	Z+3, r17	; 0x03
  ea:	02 83       	std	Z+2, r16	; 0x02
  ec:	15 82       	std	Z+5, r1	; 0x05
  ee:	14 82       	std	Z+4, r1	; 0x04
  f0:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
  f4:	cc 24       	eor	r12, r12
  f6:	dd 24       	eor	r13, r13
  f8:	ed b7       	in	r30, 0x3d	; 61
  fa:	fe b7       	in	r31, 0x3e	; 62
  fc:	36 96       	adiw	r30, 0x06	; 6
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	fe bf       	out	0x3e, r31	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	ed bf       	out	0x3d, r30	; 61
 108:	74 01       	movw	r14, r8
 10a:	90 2e       	mov	r9, r16
 10c:	01 2f       	mov	r16, r17
 10e:	d5 01       	movw	r26, r10
 110:	18 96       	adiw	r26, 0x08	; 8
 112:	8d 91       	ld	r24, X+
 114:	9c 91       	ld	r25, X
 116:	19 97       	sbiw	r26, 0x09	; 9
 118:	b7 01       	movw	r22, r14
 11a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 11e:	88 23       	and	r24, r24
 120:	01 f4       	brne	.+0      	; 0x122 <_ZN10APDStorage9logrotateEv+0x122>
 122:	00 c0       	rjmp	.+0      	; 0x124 <_ZN10APDStorage9logrotateEv+0x124>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	b7 01       	movw	r22, r14
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 136:	08 94       	sec
 138:	c1 1c       	adc	r12, r1
 13a:	d1 1c       	adc	r13, r1
 13c:	00 d0       	rcall	.+0      	; 0x13e <_ZN10APDStorage9logrotateEv+0x13e>
 13e:	00 d0       	rcall	.+0      	; 0x140 <_ZN10APDStorage9logrotateEv+0x140>
 140:	ed b7       	in	r30, 0x3d	; 61
 142:	fe b7       	in	r31, 0x3e	; 62
 144:	31 96       	adiw	r30, 0x01	; 1
 146:	ad b7       	in	r26, 0x3d	; 61
 148:	be b7       	in	r27, 0x3e	; 62
 14a:	11 96       	adiw	r26, 0x01	; 1
 14c:	ec 92       	st	X, r14
 14e:	11 97       	sbiw	r26, 0x01	; 1
 150:	12 96       	adiw	r26, 0x02	; 2
 152:	fc 92       	st	X, r15
 154:	92 82       	std	Z+2, r9	; 0x02
 156:	03 83       	std	Z+3, r16	; 0x03
 158:	d5 82       	std	Z+5, r13	; 0x05
 15a:	c4 82       	std	Z+4, r12	; 0x04
 15c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 160:	ed b7       	in	r30, 0x3d	; 61
 162:	fe b7       	in	r31, 0x3e	; 62
 164:	36 96       	adiw	r30, 0x06	; 6
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	fe bf       	out	0x3e, r31	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	ed bf       	out	0x3d, r30	; 61
 170:	f7 ee       	ldi	r31, 0xE7	; 231
 172:	cf 16       	cp	r12, r31
 174:	f3 e0       	ldi	r31, 0x03	; 3
 176:	df 06       	cpc	r13, r31
 178:	01 f4       	brne	.+0      	; 0x17a <_ZN10APDStorage9logrotateEv+0x17a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_ZN10APDStorage9logrotateEv+0x17c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <_ZN10APDStorage9logrotateEv+0x17e>
 17e:	d5 01       	movw	r26, r10
 180:	18 96       	adiw	r26, 0x08	; 8
 182:	8d 91       	ld	r24, X+
 184:	9c 91       	ld	r25, X
 186:	19 97       	sbiw	r26, 0x09	; 9
 188:	b8 01       	movw	r22, r16
 18a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 18e:	76 01       	movw	r14, r12
 190:	42 e1       	ldi	r20, 0x12	; 18
 192:	24 2e       	mov	r2, r20
 194:	31 2c       	mov	r3, r1
 196:	2c 0e       	add	r2, r28
 198:	3d 1e       	adc	r3, r29
 19a:	3e e0       	ldi	r19, 0x0E	; 14
 19c:	63 2e       	mov	r6, r19
 19e:	71 2c       	mov	r7, r1
 1a0:	6c 0e       	add	r6, r28
 1a2:	7d 1e       	adc	r7, r29
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	42 2e       	mov	r4, r18
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	52 2e       	mov	r5, r18
 1ac:	4e 01       	movw	r8, r28
 1ae:	08 94       	sec
 1b0:	81 1c       	adc	r8, r1
 1b2:	91 1c       	adc	r9, r1
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_ZN10APDStorage9logrotateEv+0x1b6>
 1b6:	1e 86       	std	Y+14, r1	; 0x0e
 1b8:	1f 86       	std	Y+15, r1	; 0x0f
 1ba:	18 8a       	std	Y+16, r1	; 0x10
 1bc:	19 8a       	std	Y+17, r1	; 0x11
 1be:	f1 01       	movw	r30, r2
 1c0:	89 e0       	ldi	r24, 0x09	; 9
 1c2:	11 92       	st	Z+, r1
 1c4:	8a 95       	dec	r24
 1c6:	01 f4       	brne	.+0      	; 0x1c8 <_ZN10APDStorage9logrotateEv+0x1c8>
 1c8:	87 01       	movw	r16, r14
 1ca:	01 50       	subi	r16, 0x01	; 1
 1cc:	10 40       	sbci	r17, 0x00	; 0
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <_ZN10APDStorage9logrotateEv+0x1d0>
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <_ZN10APDStorage9logrotateEv+0x1d2>
 1d2:	ed b7       	in	r30, 0x3d	; 61
 1d4:	fe b7       	in	r31, 0x3e	; 62
 1d6:	31 96       	adiw	r30, 0x01	; 1
 1d8:	ad b7       	in	r26, 0x3d	; 61
 1da:	be b7       	in	r27, 0x3e	; 62
 1dc:	12 96       	adiw	r26, 0x02	; 2
 1de:	7c 92       	st	X, r7
 1e0:	6e 92       	st	-X, r6
 1e2:	11 97       	sbiw	r26, 0x01	; 1
 1e4:	53 82       	std	Z+3, r5	; 0x03
 1e6:	42 82       	std	Z+2, r4	; 0x02
 1e8:	15 83       	std	Z+5, r17	; 0x05
 1ea:	04 83       	std	Z+4, r16	; 0x04
 1ec:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 1f0:	ed b7       	in	r30, 0x3d	; 61
 1f2:	fe b7       	in	r31, 0x3e	; 62
 1f4:	31 96       	adiw	r30, 0x01	; 1
 1f6:	ad b7       	in	r26, 0x3d	; 61
 1f8:	be b7       	in	r27, 0x3e	; 62
 1fa:	12 96       	adiw	r26, 0x02	; 2
 1fc:	9c 92       	st	X, r9
 1fe:	8e 92       	st	-X, r8
 200:	11 97       	sbiw	r26, 0x01	; 1
 202:	53 82       	std	Z+3, r5	; 0x03
 204:	42 82       	std	Z+2, r4	; 0x02
 206:	f5 82       	std	Z+5, r15	; 0x05
 208:	e4 82       	std	Z+4, r14	; 0x04
 20a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 20e:	ed b7       	in	r30, 0x3d	; 61
 210:	fe b7       	in	r31, 0x3e	; 62
 212:	36 96       	adiw	r30, 0x06	; 6
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	fe bf       	out	0x3e, r31	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	ed bf       	out	0x3d, r30	; 61
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	b3 01       	movw	r22, r6
 22c:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	b4 01       	movw	r22, r8
 23e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 24a:	d5 01       	movw	r26, r10
 24c:	18 96       	adiw	r26, 0x08	; 8
 24e:	8d 91       	ld	r24, X+
 250:	9c 91       	ld	r25, X
 252:	19 97       	sbiw	r26, 0x09	; 9
 254:	b3 01       	movw	r22, r6
 256:	a4 01       	movw	r20, r8
 258:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 25c:	78 01       	movw	r14, r16
 25e:	e1 14       	cp	r14, r1
 260:	f1 04       	cpc	r15, r1
 262:	01 f0       	breq	.+0      	; 0x264 <_ZN10APDStorage9logrotateEv+0x264>
 264:	00 c0       	rjmp	.+0      	; 0x266 <_ZN10APDStorage9logrotateEv+0x266>
 266:	f5 01       	movw	r30, r10
 268:	80 85       	ldd	r24, Z+8	; 0x08
 26a:	91 85       	ldd	r25, Z+9	; 0x09
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	b6 01       	movw	r22, r12
 27e:	4a e0       	ldi	r20, 0x0A	; 10
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 28e:	86 01       	movw	r16, r12
 290:	00 c0       	rjmp	.+0      	; 0x292 <_ZN10APDStorage9logrotateEv+0x292>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 29a:	00 e0       	ldi	r16, 0x00	; 0
 29c:	10 e0       	ldi	r17, 0x00	; 0
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	9c 8f       	std	Y+28, r25	; 0x1c
 2a4:	8b 8f       	std	Y+27, r24	; 0x1b
 2a6:	8a a1       	ldd	r24, Y+34	; 0x22
 2a8:	88 23       	and	r24, r24
 2aa:	01 f0       	breq	.+0      	; 0x2ac <_ZN10APDStorage9logrotateEv+0x2ac>
 2ac:	ce 01       	movw	r24, r28
 2ae:	4f 96       	adiw	r24, 0x1f	; 31
 2b0:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <_ZN10APDStorage9logrotateEv+0x2b6>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 2be:	00 e0       	ldi	r16, 0x00	; 0
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 2ca:	c8 01       	movw	r24, r16
 2cc:	e9 96       	adiw	r28, 0x39	; 57
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	cf 91       	pop	r28
 2da:	df 91       	pop	r29
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	df 90       	pop	r13
 2e6:	cf 90       	pop	r12
 2e8:	bf 90       	pop	r11
 2ea:	af 90       	pop	r10
 2ec:	9f 90       	pop	r9
 2ee:	8f 90       	pop	r8
 2f0:	7f 90       	pop	r7
 2f2:	6f 90       	pop	r6
 2f4:	5f 90       	pop	r5
 2f6:	4f 90       	pop	r4
 2f8:	3f 90       	pop	r3
 2fa:	2f 90       	pop	r2
 2fc:	08 95       	ret
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	8e 01       	movw	r16, r28
 304:	0f 5f       	subi	r16, 0xFF	; 255
 306:	1f 4f       	sbci	r17, 0xFF	; 255
 308:	b8 01       	movw	r22, r16
 30a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 316:	d5 01       	movw	r26, r10
 318:	18 96       	adiw	r26, 0x08	; 8
 31a:	8d 91       	ld	r24, X+
 31c:	9c 91       	ld	r25, X
 31e:	19 97       	sbiw	r26, 0x09	; 9
 320:	b8 01       	movw	r22, r16
 322:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage9logrotateEv>
 326:	88 23       	and	r24, r24
 328:	01 f4       	brne	.+0      	; 0x32a <_ZN10APDStorage9logrotateEv+0x32a>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <_ZN10APDStorage9logrotateEv+0x32c>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <_ZZN10APDStorageC1EiiiE3__c+0x192>

Disassembly of section .text._ZN10APDStorage5startEv:

00000000 <_ZN10APDStorage5startEv>:
 */

#include "APDStorage.h"
#include "APDSerial.h"

APDStorage::APDStorage(int iSS, int iChip, int iSpeed = SPI_HALF_SPEED ) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
   e:	88 85       	ldd	r24, Y+8	; 0x08
  10:	99 85       	ldd	r25, Y+9	; 0x09
  12:	89 2b       	or	r24, r25
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN10APDStorage5startEv+0x16>
  // TODO Auto-generated constructor stub
  sdChipSelect = iChip;
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN10APDStorage5startEv+0x18>
  18:	1c 86       	std	Y+12, r1	; 0x0c
  iSSPin = iSS;		// SS_PIN
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  iSDSpeed =  (iSpeed == SPI_HALF_SPEED || iSpeed == SPI_FULL_SPEED) ? iSpeed : SPI_HALF_SPEED;
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  22:	8e e3       	ldi	r24, 0x3E	; 62
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  2a:	fc 01       	movw	r30, r24

  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  SerPrintP("SS PIN: ") Serial.print(iSS,DEC); SerPrintP("(OUT+HIGH)");
  2c:	89 e1       	ldi	r24, 0x19	; 25
  2e:	81 83       	std	Z+1, r24	; 0x01
  30:	14 82       	std	Z+4, r1	; 0x04
  32:	14 8e       	std	Z+28, r1	; 0x1c
  34:	13 a2       	std	Z+35, r1	; 0x23
  36:	16 a2       	std	Z+38, r1	; 0x26
  38:	f9 87       	std	Y+9, r31	; 0x09
  3a:	e8 87       	std	Y+8, r30	; 0x08
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  44:	88 85       	ldd	r24, Y+8	; 0x08
  46:	99 85       	ldd	r25, Y+9	; 0x09
  48:	89 2b       	or	r24, r25
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN10APDStorage5startEv+0x4c>
  pinMode(iSS, OUTPUT);        // set SS PIN as output -- see SD readings
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN10APDStorage5startEv+0x4e>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  digitalWrite(iSS, HIGH);     // turn off the W5100 chip -- see SD readings
  56:	6e 81       	ldd	r22, Y+6	; 0x06
  58:	7f 81       	ldd	r23, Y+7	; 0x07
  5a:	80 e0       	ldi	r24, 0x00	; 0
  SerPrintP(" - prepared...");
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	4a e0       	ldi	r20, 0x0A	; 10
  60:	50 e0       	ldi	r21, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  p_sd = NULL;
  66:	80 e0       	ldi	r24, 0x00	; 0
  p_root = NULL;
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  bReady = false;
}
  6e:	6a 81       	ldd	r22, Y+2	; 0x02
  70:	7b 81       	ldd	r23, Y+3	; 0x03
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	4a e0       	ldi	r20, 0x0A	; 10
  78:	50 e0       	ldi	r21, 0x00	; 0
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  86:	88 85       	ldd	r24, Y+8	; 0x08
  88:	99 85       	ldd	r25, Y+9	; 0x09
  8a:	6e 81       	ldd	r22, Y+6	; 0x06
  8c:	4a 81       	ldd	r20, Y+2	; 0x02
  8e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  92:	88 23       	and	r24, r24
  94:	01 f0       	breq	.+0      	; 0x96 <_ZN10APDStorage5startEv+0x96>
  96:	8f e1       	ldi	r24, 0x1F	; 31
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  9e:	fc 01       	movw	r30, r24
  a0:	14 82       	std	Z+4, r1	; 0x04
  a2:	17 82       	std	Z+7, r1	; 0x07
  a4:	13 82       	std	Z+3, r1	; 0x03
  a6:	12 82       	std	Z+2, r1	; 0x02
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	91 83       	std	Z+1, r25	; 0x01
  ae:	80 83       	st	Z, r24
  b0:	fb 87       	std	Y+11, r31	; 0x0b
  b2:	ea 87       	std	Y+10, r30	; 0x0a
  b4:	68 85       	ldd	r22, Y+8	; 0x08
  b6:	79 85       	ldd	r23, Y+9	; 0x09
  b8:	6b 5f       	subi	r22, 0xFB	; 251
  ba:	7f 4f       	sbci	r23, 0xFF	; 255
  bc:	cf 01       	movw	r24, r30
  be:	04 96       	adiw	r24, 0x04	; 4
  c0:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8c 87       	std	Y+12, r24	; 0x0c
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_ZN10APDStorage5startEv+0xd2>
  d2:	1b 86       	std	Y+11, r1	; 0x0b
  d4:	1a 86       	std	Y+10, r1	; 0x0a
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorage5startEv>
  de:	1c 86       	std	Y+12, r1	; 0x0c
  e0:	8c 85       	ldd	r24, Y+12	; 0x0c
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

Disassembly of section .text._ZN10APDStorageD1Ev:

00000000 <_ZN10APDStorageD1Ev>:
 */

#include "APDStorage.h"
#include "APDSerial.h"

APDStorage::APDStorage(int iSS, int iChip, int iSpeed = SPI_HALF_SPEED ) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	82 85       	ldd	r24, Z+10	; 0x0a
  12:	93 85       	ldd	r25, Z+11	; 0x0b
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageD1Ev>
  // TODO Auto-generated constructor stub
  sdChipSelect = iChip;
  18:	f8 01       	movw	r30, r16
  iSSPin = iSS;		// SS_PIN
  1a:	80 85       	ldd	r24, Z+8	; 0x08
  1c:	91 85       	ldd	r25, Z+9	; 0x09
  iSDSpeed =  (iSpeed == SPI_HALF_SPEED || iSpeed == SPI_FULL_SPEED) ? iSpeed : SPI_HALF_SPEED;
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageD1Ev>
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN10APDStorageD2Ev:

00000000 <_ZN10APDStorageD2Ev>:
 */

#include "APDStorage.h"
#include "APDSerial.h"

APDStorage::APDStorage(int iSS, int iChip, int iSpeed = SPI_HALF_SPEED ) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	82 85       	ldd	r24, Z+10	; 0x0a
  12:	93 85       	ldd	r25, Z+11	; 0x0b
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageD2Ev>
  // TODO Auto-generated constructor stub
  sdChipSelect = iChip;
  18:	f8 01       	movw	r30, r16
  iSSPin = iSS;		// SS_PIN
  1a:	80 85       	ldd	r24, Z+8	; 0x08
  1c:	91 85       	ldd	r25, Z+9	; 0x09
  iSDSpeed =  (iSpeed == SPI_HALF_SPEED || iSpeed == SPI_FULL_SPEED) ? iSpeed : SPI_HALF_SPEED;
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageD2Ev>
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN10APDStorageD0Ev:

00000000 <_ZN10APDStorageD0Ev>:
 */

#include "APDStorage.h"
#include "APDSerial.h"

APDStorage::APDStorage(int iSS, int iChip, int iSpeed = SPI_HALF_SPEED ) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24
  10:	82 85       	ldd	r24, Z+10	; 0x0a
  12:	93 85       	ldd	r25, Z+11	; 0x0b
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageD0Ev>
  // TODO Auto-generated constructor stub
  sdChipSelect = iChip;
  18:	f8 01       	movw	r30, r16
  iSSPin = iSS;		// SS_PIN
  1a:	80 85       	ldd	r24, Z+8	; 0x08
  1c:	91 85       	ldd	r25, Z+9	; 0x09
  iSDSpeed =  (iSpeed == SPI_HALF_SPEED || iSpeed == SPI_FULL_SPEED) ? iSpeed : SPI_HALF_SPEED;
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageD0Ev>
  22:	c8 01       	movw	r24, r16
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageD0Ev>
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16

  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  SerPrintP("SS PIN: ") Serial.print(iSS,DEC); SerPrintP("(OUT+HIGH)");
  2c:	08 95       	ret

Disassembly of section .text._ZN10APDStorageC1Eiii:

00000000 <_ZN10APDStorageC1Eiii>:
 */

#include "APDStorage.h"
#include "APDSerial.h"

APDStorage::APDStorage(int iSS, int iChip, int iSpeed = SPI_HALF_SPEED ) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	16 2f       	mov	r17, r22
   c:	07 2f       	mov	r16, r23
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
  // TODO Auto-generated constructor stub
  sdChipSelect = iChip;
  16:	5b 83       	std	Y+3, r21	; 0x03
  18:	4a 83       	std	Y+2, r20	; 0x02
  iSSPin = iSS;		// SS_PIN
  1a:	6c 83       	std	Y+4, r22	; 0x04
  1c:	7d 83       	std	Y+5, r23	; 0x05
  iSDSpeed =  (iSpeed == SPI_HALF_SPEED || iSpeed == SPI_FULL_SPEED) ? iSpeed : SPI_HALF_SPEED;
  1e:	22 30       	cpi	r18, 0x02	; 2
  20:	31 05       	cpc	r19, r1
  22:	00 f0       	brcs	.+0      	; 0x24 <_ZN10APDStorageC1Eiii+0x24>
  24:	21 e0       	ldi	r18, 0x01	; 1
  26:	30 e0       	ldi	r19, 0x00	; 0
  28:	3f 83       	std	Y+7, r19	; 0x07
  2a:	2e 83       	std	Y+6, r18	; 0x06

  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  SerPrintP("SS PIN: ") Serial.print(iSS,DEC); SerPrintP("(OUT+HIGH)");
  2c:	80 e0       	ldi	r24, 0x00	; 0
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC1Eiii>
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	61 2f       	mov	r22, r17
  3a:	70 2f       	mov	r23, r16
  3c:	4a e0       	ldi	r20, 0x0A	; 10
  3e:	50 e0       	ldi	r21, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC1Eiii>
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC1Eiii>
  pinMode(iSS, OUTPUT);        // set SS PIN as output -- see SD readings
  4c:	81 2f       	mov	r24, r17
  4e:	61 e0       	ldi	r22, 0x01	; 1
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC1Eiii>
  digitalWrite(iSS, HIGH);     // turn off the W5100 chip -- see SD readings
  54:	81 2f       	mov	r24, r17
  56:	61 e0       	ldi	r22, 0x01	; 1
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC1Eiii>
  SerPrintP(" - prepared...");
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC1Eiii>
  p_sd = NULL;
  64:	19 86       	std	Y+9, r1	; 0x09
  66:	18 86       	std	Y+8, r1	; 0x08
  p_root = NULL;
  68:	1b 86       	std	Y+11, r1	; 0x0b
  6a:	1a 86       	std	Y+10, r1	; 0x0a
  bReady = false;
  6c:	1c 86       	std	Y+12, r1	; 0x0c
}
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	08 95       	ret

Disassembly of section .text._ZN10APDStorageC2Eiii:

00000000 <_ZN10APDStorageC2Eiii>:
 */

#include "APDStorage.h"
#include "APDSerial.h"

APDStorage::APDStorage(int iSS, int iChip, int iSpeed = SPI_HALF_SPEED ) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	16 2f       	mov	r17, r22
   c:	07 2f       	mov	r16, r23
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	99 83       	std	Y+1, r25	; 0x01
  14:	88 83       	st	Y, r24
  // TODO Auto-generated constructor stub
  sdChipSelect = iChip;
  16:	5b 83       	std	Y+3, r21	; 0x03
  18:	4a 83       	std	Y+2, r20	; 0x02
  iSSPin = iSS;		// SS_PIN
  1a:	6c 83       	std	Y+4, r22	; 0x04
  1c:	7d 83       	std	Y+5, r23	; 0x05
  iSDSpeed =  (iSpeed == SPI_HALF_SPEED || iSpeed == SPI_FULL_SPEED) ? iSpeed : SPI_HALF_SPEED;
  1e:	22 30       	cpi	r18, 0x02	; 2
  20:	31 05       	cpc	r19, r1
  22:	00 f0       	brcs	.+0      	; 0x24 <_ZN10APDStorageC2Eiii+0x24>
  24:	21 e0       	ldi	r18, 0x01	; 1
  26:	30 e0       	ldi	r19, 0x00	; 0
  28:	3f 83       	std	Y+7, r19	; 0x07
  2a:	2e 83       	std	Y+6, r18	; 0x06

  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  SerPrintP("SS PIN: ") Serial.print(iSS,DEC); SerPrintP("(OUT+HIGH)");
  2c:	80 e0       	ldi	r24, 0x00	; 0
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC2Eiii>
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	61 2f       	mov	r22, r17
  3a:	70 2f       	mov	r23, r16
  3c:	4a e0       	ldi	r20, 0x0A	; 10
  3e:	50 e0       	ldi	r21, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC2Eiii>
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC2Eiii>
  pinMode(iSS, OUTPUT);        // set SS PIN as output -- see SD readings
  4c:	81 2f       	mov	r24, r17
  4e:	61 e0       	ldi	r22, 0x01	; 1
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC2Eiii>
  digitalWrite(iSS, HIGH);     // turn off the W5100 chip -- see SD readings
  54:	81 2f       	mov	r24, r17
  56:	61 e0       	ldi	r22, 0x01	; 1
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC2Eiii>
  SerPrintP(" - prepared...");
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN10APDStorageC2Eiii>
  p_sd = NULL;
  64:	19 86       	std	Y+9, r1	; 0x09
  66:	18 86       	std	Y+8, r1	; 0x08
  p_root = NULL;
  68:	1b 86       	std	Y+11, r1	; 0x0b
  6a:	1a 86       	std	Y+10, r1	; 0x0a
  bReady = false;
  6c:	1c 86       	std	Y+12, r1	; 0x0c
}
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	08 95       	ret

APDTime.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000057  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000008b  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  0000008c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00004553  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN7APDTimeD2Ev 0000000c  00000000  00000000  000061ab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN7APDTimeD1Ev 0000000c  00000000  00000000  000061b7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._GLOBAL__I__ZN7APDTimeC2Ev 00000016  00000000  00000000  000061c3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .ctors        00000002  00000000  00000000  000061d9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  9 .text._ZN7APDTime6adjustE8DateTime 00000076  00000000  00000000  000061db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN7APDTime13sendNTPpacketEPh 0000013a  00000000  00000000  00006251  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN7APDTime13PrintDateTimeE8DateTime 000000ca  00000000  00000000  0000638b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN7APDTime12setupNTPSyncEiPhii 000000ca  00000000  00000000  00006455  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN7APDTime9getUpTimeEv 0000002e  00000000  00000000  0000651f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN7APDTime10getUpTimeSEPc 0000013c  00000000  00000000  0000654d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN7APDTime3nowEv 000000fa  00000000  00000000  00006689  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN7APDTime7ntpSyncEv 000003f8  00000000  00000000  00006783  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN7APDTime4nowSEPc 000000be  00000000  00000000  00006b7b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN7APDTime9initBlankEv 00000158  00000000  00000000  00006c39  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN7APDTimeC1Ev 00000012  00000000  00000000  00006d91  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN7APDTimeC2Ev 00000012  00000000  00000000  00006da3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN7APDTimeD0Ev 00000012  00000000  00000000  00006db5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN7APDTimeC1Eh 00000094  00000000  00000000  00006dc7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN7APDTimeC2Eh 00000094  00000000  00000000  00006e5b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .rodata._ZTV7APDTime 00000008  00000000  00000000  00006eef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 25 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  00006ef7  2**0
                  ALLOC
 26 .progmem.data 00000223  00000000  00000000  00006ef7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN7APDTimeD2Ev:

00000000 <_ZN7APDTimeD2Ev>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	08 95       	ret

Disassembly of section .text._ZN7APDTimeD1Ev:

00000000 <_ZN7APDTimeD1Ev>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	08 95       	ret

Disassembly of section .text._GLOBAL__I__ZN7APDTimeC2Ev:

00000000 <_GLOBAL__I__ZN7APDTimeC2Ev>:
   0:	0f 93       	push	r16
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	40 e0       	ldi	r20, 0x00	; 0
   a:	20 e0       	ldi	r18, 0x00	; 0
   c:	00 e0       	ldi	r16, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_GLOBAL__I__ZN7APDTimeC2Ev>
  initBlank();
  12:	0f 91       	pop	r16
  14:	08 95       	ret

Disassembly of section .text._ZN7APDTime6adjustE8DateTime:

00000000 <_ZN7APDTime6adjustE8DateTime>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN7APDTime6adjustE8DateTime+0xa>
   a:	00 d0       	rcall	.+0      	; 0xc <_ZN7APDTime6adjustE8DateTime+0xc>
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	8c 01       	movw	r16, r24
  initBlank();
  12:	29 83       	std	Y+1, r18	; 0x01
  14:	3a 83       	std	Y+2, r19	; 0x02
  16:	4b 83       	std	Y+3, r20	; 0x03
  if (bRTC) {
  18:	5c 83       	std	Y+4, r21	; 0x04
  1a:	6d 83       	std	Y+5, r22	; 0x05
    if (this->pRTC == NULL) {
  1c:	7e 83       	std	Y+6, r23	; 0x06
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime6adjustE8DateTime>
      this->pRTC = new RTC_DS1307();
  26:	f8 01       	movw	r30, r16
  28:	86 ad       	ldd	r24, Z+62	; 0x3e
  2a:	97 ad       	ldd	r25, Z+63	; 0x3f
  2c:	00 97       	sbiw	r24, 0x00	; 0
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN7APDTime6adjustE8DateTime+0x30>

      if (this->pRTC != NULL) {
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime6adjustE8DateTime>
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	88 23       	and	r24, r24
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN7APDTime6adjustE8DateTime+0x38>
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
        pRTC->begin();
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime6adjustE8DateTime>

        if (! pRTC->isrunning()) {
  40:	ce 01       	movw	r24, r28
  42:	01 96       	adiw	r24, 0x01	; 1
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime6adjustE8DateTime>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime6adjustE8DateTime>
  50:	ce 01       	movw	r24, r28
  52:	01 96       	adiw	r24, 0x01	; 1
          free(this->pRTC);
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime6adjustE8DateTime>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime6adjustE8DateTime>
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  60:	26 96       	adiw	r28, 0x06	; 6
  62:	0f b6       	in	r0, 0x3f	; 63
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	f8 94       	cli
  66:	de bf       	out	0x3e, r29	; 62
  68:	0f be       	out	0x3f, r0	; 63
  6a:	cd bf       	out	0x3d, r28	; 61
          pRTC = NULL;
  6c:	cf 91       	pop	r28
  6e:	df 91       	pop	r29
  70:	1f 91       	pop	r17
      }
    }else{
        SerPrintP("RTC already init...");
  72:	0f 91       	pop	r16
  74:	08 95       	ret

Disassembly of section .text._ZN7APDTime13sendNTPpacketEPh:

00000000 <_ZN7APDTime13sendNTPpacketEPh>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  initBlank();
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  if (bRTC) {
  18:	df 93       	push	r29
  1a:	cf 93       	push	r28
    if (this->pRTC == NULL) {
  1c:	00 d0       	rcall	.+0      	; 0x1e <_ZN7APDTime13sendNTPpacketEPh+0x1e>
  1e:	00 d0       	rcall	.+0      	; 0x20 <_ZN7APDTime13sendNTPpacketEPh+0x20>
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
      this->pRTC = new RTC_DS1307();
  24:	5c 01       	movw	r10, r24
  26:	3b 01       	movw	r6, r22
  28:	dc 01       	movw	r26, r24
  2a:	1c 96       	adiw	r26, 0x0c	; 12
  2c:	8d 91       	ld	r24, X+
  2e:	9c 91       	ld	r25, X

      if (this->pRTC != NULL) {
  30:	1d 97       	sbiw	r26, 0x0d	; 13
  32:	89 2b       	or	r24, r25
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN7APDTime13sendNTPpacketEPh+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN7APDTime13sendNTPpacketEPh+0x38>
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
        pRTC->begin();
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime13sendNTPpacketEPh>

        if (! pRTC->isrunning()) {
  40:	8e e0       	ldi	r24, 0x0E	; 14
  42:	88 2e       	mov	r8, r24
  44:	91 2c       	mov	r9, r1
  46:	8a 0c       	add	r8, r10
  48:	9b 1c       	adc	r9, r11
  4a:	80 e3       	ldi	r24, 0x30	; 48
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	f4 01       	movw	r30, r8
  4e:	11 92       	st	Z+, r1
  50:	8a 95       	dec	r24
  52:	01 f4       	brne	.+0      	; 0x54 <_ZN7APDTime13sendNTPpacketEPh+0x54>
          free(this->pRTC);
  54:	83 ee       	ldi	r24, 0xE3	; 227
  56:	d5 01       	movw	r26, r10
  58:	1e 96       	adiw	r26, 0x0e	; 14
  5a:	8c 93       	st	X, r24
  5c:	1e 97       	sbiw	r26, 0x0e	; 14
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  5e:	1f 96       	adiw	r26, 0x0f	; 15
  60:	1c 92       	st	X, r1
  62:	1f 97       	sbiw	r26, 0x0f	; 15
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	86 e0       	ldi	r24, 0x06	; 6
  66:	50 96       	adiw	r26, 0x10	; 16
  68:	8c 93       	st	X, r24
  6a:	50 97       	sbiw	r26, 0x10	; 16
          pRTC = NULL;
  6c:	8c ee       	ldi	r24, 0xEC	; 236
  6e:	51 96       	adiw	r26, 0x11	; 17
  70:	8c 93       	st	X, r24
      }
    }else{
        SerPrintP("RTC already init...");
  72:	51 97       	sbiw	r26, 0x11	; 17
  74:	91 e3       	ldi	r25, 0x31	; 49
  76:	5a 96       	adiw	r26, 0x1a	; 26
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  78:	9c 93       	st	X, r25
  7a:	5a 97       	sbiw	r26, 0x1a	; 26
  7c:	8e e4       	ldi	r24, 0x4E	; 78
  7e:	5b 96       	adiw	r26, 0x1b	; 27
  80:	8c 93       	st	X, r24
  82:	5b 97       	sbiw	r26, 0x1b	; 27
  84:	5c 96       	adiw	r26, 0x1c	; 28
  86:	9c 93       	st	X, r25
  88:	5c 97       	sbiw	r26, 0x1c	; 28
  8a:	84 e3       	ldi	r24, 0x34	; 52
  }

}
  8c:	5d 96       	adiw	r26, 0x1d	; 29
  8e:	8c 93       	st	X, r24
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime13sendNTPpacketEPh>
  98:	f5 01       	movw	r30, r10
  9a:	e4 84       	ldd	r14, Z+12	; 0x0c
  9c:	f5 84       	ldd	r15, Z+13	; 0x0d
  9e:	d7 01       	movw	r26, r14
  a0:	ed 91       	ld	r30, X+
  a2:	fc 91       	ld	r31, X
  a4:	c0 88       	ldd	r12, Z+16	; 0x10
  a6:	d1 88       	ldd	r13, Z+17	; 0x11
  a8:	8e 01       	movw	r16, r28
  aa:	0f 5f       	subi	r16, 0xFF	; 255
  ac:	1f 4f       	sbci	r17, 0xFF	; 255
  ae:	c8 01       	movw	r24, r16
  b0:	b3 01       	movw	r22, r6
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime13sendNTPpacketEPh>
  b6:	c7 01       	movw	r24, r14
  b8:	b8 01       	movw	r22, r16
  ba:	4b e7       	ldi	r20, 0x7B	; 123
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	f6 01       	movw	r30, r12
  c0:	19 95       	eicall
  c2:	89 2b       	or	r24, r25
  c4:	01 f0       	breq	.+0      	; 0xc6 <_ZN7APDTime13sendNTPpacketEPh+0xc6>
  c6:	f5 01       	movw	r30, r10
  c8:	a4 85       	ldd	r26, Z+12	; 0x0c
  ca:	b5 85       	ldd	r27, Z+13	; 0x0d
  cc:	ed 91       	ld	r30, X+
  ce:	fc 91       	ld	r31, X
  d0:	11 97       	sbiw	r26, 0x01	; 1
  d2:	02 80       	ldd	r0, Z+2	; 0x02
  d4:	f3 81       	ldd	r31, Z+3	; 0x03
  d6:	e0 2d       	mov	r30, r0
  d8:	cd 01       	movw	r24, r26
  da:	b4 01       	movw	r22, r8
  dc:	40 e3       	ldi	r20, 0x30	; 48
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	19 95       	eicall
  e2:	f5 01       	movw	r30, r10
  e4:	a4 85       	ldd	r26, Z+12	; 0x0c
  e6:	b5 85       	ldd	r27, Z+13	; 0x0d
  e8:	ed 91       	ld	r30, X+
  ea:	fc 91       	ld	r31, X
  ec:	11 97       	sbiw	r26, 0x01	; 1
  ee:	04 88       	ldd	r0, Z+20	; 0x14
  f0:	f5 89       	ldd	r31, Z+21	; 0x15
  f2:	e0 2d       	mov	r30, r0
  f4:	cd 01       	movw	r24, r26
  f6:	19 95       	eicall
  f8:	00 c0       	rjmp	.+0      	; 0xfa <_ZN7APDTime13sendNTPpacketEPh+0xfa>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	00 c0       	rjmp	.+0      	; 0x100 <_ZN7APDTime13sendNTPpacketEPh+0x100>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime13sendNTPpacketEPh>
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	26 96       	adiw	r28, 0x06	; 6
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	df 90       	pop	r13
 12a:	cf 90       	pop	r12
 12c:	bf 90       	pop	r11
 12e:	af 90       	pop	r10
 130:	9f 90       	pop	r9
 132:	8f 90       	pop	r8
 134:	7f 90       	pop	r7
 136:	6f 90       	pop	r6
 138:	08 95       	ret

Disassembly of section .text._ZN7APDTime13PrintDateTimeE8DateTime:

00000000 <_ZN7APDTime13PrintDateTimeE8DateTime>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	df 93       	push	r29
   8:	cf 93       	push	r28
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	a6 97       	sbiw	r28, 0x26	; 38
  10:	0f b6       	in	r0, 0x3f	; 63
  initBlank();
  12:	f8 94       	cli
  14:	de bf       	out	0x3e, r29	; 62
  16:	0f be       	out	0x3f, r0	; 63
  if (bRTC) {
  18:	cd bf       	out	0x3d, r28	; 61
  1a:	f2 2e       	mov	r15, r18
    if (this->pRTC == NULL) {
  1c:	29 a3       	std	Y+33, r18	; 0x21
  1e:	23 2f       	mov	r18, r19
  20:	3a a3       	std	Y+34, r19	; 0x22
  22:	34 2f       	mov	r19, r20
      this->pRTC = new RTC_DS1307();
  24:	4b a3       	std	Y+35, r20	; 0x23
  26:	45 2f       	mov	r20, r21
  28:	5c a3       	std	Y+36, r21	; 0x24
  2a:	56 2f       	mov	r21, r22
  2c:	6d a3       	std	Y+37, r22	; 0x25
  2e:	7e a3       	std	Y+38, r23	; 0x26

      if (this->pRTC != NULL) {
  30:	19 82       	std	Y+1, r1	; 0x01
  32:	1a 82       	std	Y+2, r1	; 0x02
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	1b 82       	std	Y+3, r1	; 0x03
  36:	1c 82       	std	Y+4, r1	; 0x04
  38:	8e 01       	movw	r16, r28
  3a:	0b 5f       	subi	r16, 0xFB	; 251
        pRTC->begin();
  3c:	1f 4f       	sbci	r17, 0xFF	; 255
  3e:	8c e1       	ldi	r24, 0x1C	; 28

        if (! pRTC->isrunning()) {
  40:	d8 01       	movw	r26, r16
  42:	1d 92       	st	X+, r1
  44:	8a 95       	dec	r24
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN7APDTime13PrintDateTimeE8DateTime+0x48>
  48:	ed b7       	in	r30, 0x3d	; 61
  4a:	fe b7       	in	r31, 0x3e	; 62
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	70 97       	sbiw	r30, 0x10	; 16
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	fe bf       	out	0x3e, r31	; 62
          free(this->pRTC);
  54:	0f be       	out	0x3f, r0	; 63
  56:	ed bf       	out	0x3d, r30	; 61
  58:	31 96       	adiw	r30, 0x01	; 1
  5a:	8e 01       	movw	r16, r28
  5c:	0f 5f       	subi	r16, 0xFF	; 255
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  5e:	1f 4f       	sbci	r17, 0xFF	; 255
  60:	ad b7       	in	r26, 0x3d	; 61
  62:	be b7       	in	r27, 0x3e	; 62
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	12 96       	adiw	r26, 0x02	; 2
  66:	1c 93       	st	X, r17
  68:	0e 93       	st	-X, r16
  6a:	11 97       	sbiw	r26, 0x01	; 1
          pRTC = NULL;
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	93 83       	std	Z+3, r25	; 0x03
      }
    }else{
        SerPrintP("RTC already init...");
  72:	82 83       	std	Z+2, r24	; 0x02
  74:	af 2d       	mov	r26, r15
  76:	b0 e0       	ldi	r27, 0x00	; 0
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  78:	a0 53       	subi	r26, 0x30	; 48
  7a:	b8 4f       	sbci	r27, 0xF8	; 248
  7c:	b5 83       	std	Z+5, r27	; 0x05
  7e:	a4 83       	std	Z+4, r26	; 0x04
  80:	26 83       	std	Z+6, r18	; 0x06
  82:	17 82       	std	Z+7, r1	; 0x07
  84:	30 87       	std	Z+8, r19	; 0x08
  86:	11 86       	std	Z+9, r1	; 0x09
  88:	42 87       	std	Z+10, r20	; 0x0a
  8a:	13 86       	std	Z+11, r1	; 0x0b
  }

}
  8c:	54 87       	std	Z+12, r21	; 0x0c
  8e:	15 86       	std	Z+13, r1	; 0x0d
  90:	76 87       	std	Z+14, r23	; 0x0e
  92:	17 86       	std	Z+15, r1	; 0x0f
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime13PrintDateTimeE8DateTime>
  98:	ed b7       	in	r30, 0x3d	; 61
  9a:	fe b7       	in	r31, 0x3e	; 62
  9c:	70 96       	adiw	r30, 0x10	; 16
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	fe bf       	out	0x3e, r31	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	ed bf       	out	0x3d, r30	; 61
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	b8 01       	movw	r22, r16
  ae:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime13PrintDateTimeE8DateTime>
  b2:	a6 96       	adiw	r28, 0x26	; 38
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	1f 91       	pop	r17
  c4:	0f 91       	pop	r16
  c6:	ff 90       	pop	r15
  c8:	08 95       	ret

Disassembly of section .text._ZN7APDTime12setupNTPSyncEiPhii:

00000000 <_ZN7APDTime12setupNTPSyncEiPhii>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  initBlank();
  12:	df 93       	push	r29
  14:	7c 01       	movw	r14, r24
  16:	5b 01       	movw	r10, r22
  if (bRTC) {
  18:	ea 01       	movw	r28, r20
  1a:	69 01       	movw	r12, r18
    if (this->pRTC == NULL) {
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime12setupNTPSyncEiPhii>
      this->pRTC = new RTC_DS1307();
  24:	d7 01       	movw	r26, r14
  26:	1c 96       	adiw	r26, 0x0c	; 12
  28:	8d 91       	ld	r24, X+
  2a:	9c 91       	ld	r25, X
  2c:	1d 97       	sbiw	r26, 0x0d	; 13
  2e:	89 2b       	or	r24, r25

      if (this->pRTC != NULL) {
  30:	01 f0       	breq	.+0      	; 0x32 <_ZN7APDTime12setupNTPSyncEiPhii+0x32>
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN7APDTime12setupNTPSyncEiPhii+0x34>
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	88 81       	ld	r24, Y
  36:	99 81       	ldd	r25, Y+1	; 0x01
  38:	aa 81       	ldd	r26, Y+2	; 0x02
  3a:	bb 81       	ldd	r27, Y+3	; 0x03
        pRTC->begin();
  3c:	f7 01       	movw	r30, r14
  3e:	86 83       	std	Z+6, r24	; 0x06

        if (! pRTC->isrunning()) {
  40:	97 83       	std	Z+7, r25	; 0x07
  42:	a0 87       	std	Z+8, r26	; 0x08
  44:	b1 87       	std	Z+9, r27	; 0x09
  46:	15 83       	std	Z+5, r17	; 0x05
  48:	04 83       	std	Z+4, r16	; 0x04
  4a:	d3 82       	std	Z+3, r13	; 0x03
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	c2 82       	std	Z+2, r12	; 0x02
  4e:	b3 86       	std	Z+11, r11	; 0x0b
  50:	a2 86       	std	Z+10, r10	; 0x0a
  52:	89 e1       	ldi	r24, 0x19	; 25
          free(this->pRTC);
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime12setupNTPSyncEiPhii>
  5a:	ec 01       	movw	r28, r24
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime12setupNTPSyncEiPhii>
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  60:	d7 01       	movw	r26, r14
  62:	1d 96       	adiw	r26, 0x0d	; 13
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	dc 93       	st	X, r29
  66:	ce 93       	st	-X, r28
  68:	1c 97       	sbiw	r26, 0x0c	; 12
  6a:	20 97       	sbiw	r28, 0x00	; 0
          pRTC = NULL;
  6c:	01 f0       	breq	.+0      	; 0x6e <_ZN7APDTime12setupNTPSyncEiPhii+0x6e>
  6e:	e8 81       	ld	r30, Y
  70:	f9 81       	ldd	r31, Y+1	; 0x01
      }
    }else{
        SerPrintP("RTC already init...");
  72:	1a 96       	adiw	r26, 0x0a	; 10
  74:	6d 91       	ld	r22, X+
  76:	7c 91       	ld	r23, X
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  78:	1b 97       	sbiw	r26, 0x0b	; 11
  7a:	04 84       	ldd	r0, Z+12	; 0x0c
  7c:	f5 85       	ldd	r31, Z+13	; 0x0d
  7e:	e0 2d       	mov	r30, r0
  80:	ce 01       	movw	r24, r28
  82:	19 95       	eicall
  84:	88 23       	and	r24, r24
  86:	01 f0       	breq	.+0      	; 0x88 <_ZN7APDTime12setupNTPSyncEiPhii+0x88>
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  }

}
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_ZN7APDTime12setupNTPSyncEiPhii+0x8e>
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime12setupNTPSyncEiPhii>
  96:	f7 01       	movw	r30, r14
  98:	84 85       	ldd	r24, Z+12	; 0x0c
  9a:	95 85       	ldd	r25, Z+13	; 0x0d
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime12setupNTPSyncEiPhii>
  a0:	d7 01       	movw	r26, r14
  a2:	1d 96       	adiw	r26, 0x0d	; 13
  a4:	1c 92       	st	X, r1
  a6:	1e 92       	st	-X, r1
  a8:	1c 97       	sbiw	r26, 0x0c	; 12
  aa:	00 c0       	rjmp	.+0      	; 0xac <_ZN7APDTime12setupNTPSyncEiPhii+0xac>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime12setupNTPSyncEiPhii>
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	1f 91       	pop	r17
  ba:	0f 91       	pop	r16
  bc:	ff 90       	pop	r15
  be:	ef 90       	pop	r14
  c0:	df 90       	pop	r13
  c2:	cf 90       	pop	r12
  c4:	bf 90       	pop	r11
  c6:	af 90       	pop	r10
  c8:	08 95       	ret

Disassembly of section .text._ZN7APDTime9getUpTimeEv:

00000000 <_ZN7APDTime9getUpTimeEv>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9getUpTimeEv>
   a:	9b 01       	movw	r18, r22
   c:	ac 01       	movw	r20, r24
   e:	0e 5b       	subi	r16, 0xBE	; 190
  10:	1f 4f       	sbci	r17, 0xFF	; 255
  initBlank();
  12:	f8 01       	movw	r30, r16
  14:	80 81       	ld	r24, Z
  16:	91 81       	ldd	r25, Z+1	; 0x01
  if (bRTC) {
  18:	a2 81       	ldd	r26, Z+2	; 0x02
  1a:	b3 81       	ldd	r27, Z+3	; 0x03
    if (this->pRTC == NULL) {
  1c:	28 1b       	sub	r18, r24
  1e:	39 0b       	sbc	r19, r25
  20:	4a 0b       	sbc	r20, r26
  22:	5b 0b       	sbc	r21, r27
      this->pRTC = new RTC_DS1307();
  24:	b9 01       	movw	r22, r18
  26:	ca 01       	movw	r24, r20
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	08 95       	ret

Disassembly of section .text._ZN7APDTime10getUpTimeSEPc:

00000000 <_ZN7APDTime10getUpTimeSEPc>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  initBlank();
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  if (bRTC) {
  18:	8c 01       	movw	r16, r24
  1a:	76 2e       	mov	r7, r22
    if (this->pRTC == NULL) {
  1c:	67 2e       	mov	r6, r23
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime10getUpTimeSEPc>
  22:	0e 5b       	subi	r16, 0xBE	; 190
      this->pRTC = new RTC_DS1307();
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	f8 01       	movw	r30, r16
  28:	20 81       	ld	r18, Z
  2a:	31 81       	ldd	r19, Z+1	; 0x01
  2c:	42 81       	ldd	r20, Z+2	; 0x02
  2e:	53 81       	ldd	r21, Z+3	; 0x03

      if (this->pRTC != NULL) {
  30:	62 1b       	sub	r22, r18
  32:	73 0b       	sbc	r23, r19
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	84 0b       	sbc	r24, r20
  36:	95 0b       	sbc	r25, r21
  38:	28 ee       	ldi	r18, 0xE8	; 232
  3a:	33 e0       	ldi	r19, 0x03	; 3
        pRTC->begin();
  3c:	40 e0       	ldi	r20, 0x00	; 0
  3e:	50 e0       	ldi	r21, 0x00	; 0

        if (! pRTC->isrunning()) {
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime10getUpTimeSEPc>
  44:	f2 2e       	mov	r15, r18
  46:	e3 2e       	mov	r14, r19
  48:	d4 2e       	mov	r13, r20
  4a:	c5 2e       	mov	r12, r21
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	62 2f       	mov	r22, r18
  4e:	73 2f       	mov	r23, r19
  50:	84 2f       	mov	r24, r20
  52:	95 2f       	mov	r25, r21
          free(this->pRTC);
  54:	20 e1       	ldi	r18, 0x10	; 16
  56:	3e e0       	ldi	r19, 0x0E	; 14
  58:	40 e0       	ldi	r20, 0x00	; 0
  5a:	50 e0       	ldi	r21, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime10getUpTimeSEPc>
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  60:	b6 2e       	mov	r11, r22
  62:	a7 2e       	mov	r10, r23
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	98 2e       	mov	r9, r24
  66:	89 2e       	mov	r8, r25
  68:	8d b7       	in	r24, 0x3d	; 61
  6a:	9e b7       	in	r25, 0x3e	; 62
          pRTC = NULL;
  6c:	0c 97       	sbiw	r24, 0x0c	; 12
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	f8 94       	cli
      }
    }else{
        SerPrintP("RTC already init...");
  72:	9e bf       	out	0x3e, r25	; 62
  74:	0f be       	out	0x3f, r0	; 63
  76:	8d bf       	out	0x3d, r24	; 61
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  78:	0d b7       	in	r16, 0x3d	; 61
  7a:	1e b7       	in	r17, 0x3e	; 62
  7c:	0f 5f       	subi	r16, 0xFF	; 255
  7e:	1f 4f       	sbci	r17, 0xFF	; 255
  80:	ed b7       	in	r30, 0x3d	; 61
  82:	fe b7       	in	r31, 0x3e	; 62
  84:	71 82       	std	Z+1, r7	; 0x01
  86:	f8 01       	movw	r30, r16
  88:	61 82       	std	Z+1, r6	; 0x01
  8a:	80 e0       	ldi	r24, 0x00	; 0
  }

}
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	93 83       	std	Z+3, r25	; 0x03
  90:	82 83       	std	Z+2, r24	; 0x02
  92:	6f 2d       	mov	r22, r15
  94:	7e 2d       	mov	r23, r14
  96:	8d 2d       	mov	r24, r13
  98:	9c 2d       	mov	r25, r12
  9a:	20 e8       	ldi	r18, 0x80	; 128
  9c:	31 e5       	ldi	r19, 0x51	; 81
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime10getUpTimeSEPc>
  a6:	f8 01       	movw	r30, r16
  a8:	35 83       	std	Z+5, r19	; 0x05
  aa:	24 83       	std	Z+4, r18	; 0x04
  ac:	6f 2d       	mov	r22, r15
  ae:	7e 2d       	mov	r23, r14
  b0:	8d 2d       	mov	r24, r13
  b2:	9c 2d       	mov	r25, r12
  b4:	20 e1       	ldi	r18, 0x10	; 16
  b6:	3e e0       	ldi	r19, 0x0E	; 14
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime10getUpTimeSEPc>
  c0:	ca 01       	movw	r24, r20
  c2:	b9 01       	movw	r22, r18
  c4:	28 e1       	ldi	r18, 0x18	; 24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime10getUpTimeSEPc>
  d0:	f8 01       	movw	r30, r16
  d2:	77 83       	std	Z+7, r23	; 0x07
  d4:	66 83       	std	Z+6, r22	; 0x06
  d6:	6b 2d       	mov	r22, r11
  d8:	7a 2d       	mov	r23, r10
  da:	89 2d       	mov	r24, r9
  dc:	98 2d       	mov	r25, r8
  de:	2c e3       	ldi	r18, 0x3C	; 60
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime10getUpTimeSEPc>
  ea:	f8 01       	movw	r30, r16
  ec:	31 87       	std	Z+9, r19	; 0x09
  ee:	20 87       	std	Z+8, r18	; 0x08
  f0:	6b 2d       	mov	r22, r11
  f2:	7a 2d       	mov	r23, r10
  f4:	89 2d       	mov	r24, r9
  f6:	98 2d       	mov	r25, r8
  f8:	2c e3       	ldi	r18, 0x3C	; 60
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime10getUpTimeSEPc>
 104:	f8 01       	movw	r30, r16
 106:	73 87       	std	Z+11, r23	; 0x0b
 108:	62 87       	std	Z+10, r22	; 0x0a
 10a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime10getUpTimeSEPc>
 10e:	8d b7       	in	r24, 0x3d	; 61
 110:	9e b7       	in	r25, 0x3e	; 62
 112:	0c 96       	adiw	r24, 0x0c	; 12
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	9e bf       	out	0x3e, r25	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	8d bf       	out	0x3d, r24	; 61
 11e:	87 2d       	mov	r24, r7
 120:	96 2d       	mov	r25, r6
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	bf 90       	pop	r11
 130:	af 90       	pop	r10
 132:	9f 90       	pop	r9
 134:	8f 90       	pop	r8
 136:	7f 90       	pop	r7
 138:	6f 90       	pop	r6
 13a:	08 95       	ret

Disassembly of section .text._ZN7APDTime3nowEv:

00000000 <_ZN7APDTime3nowEv>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	ef 92       	push	r14
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	df 93       	push	r29
   e:	cf 93       	push	r28
  10:	cd b7       	in	r28, 0x3d	; 61
  initBlank();
  12:	de b7       	in	r29, 0x3e	; 62
  14:	62 97       	sbiw	r28, 0x12	; 18
  16:	0f b6       	in	r0, 0x3f	; 63
  if (bRTC) {
  18:	f8 94       	cli
  1a:	de bf       	out	0x3e, r29	; 62
    if (this->pRTC == NULL) {
  1c:	0f be       	out	0x3f, r0	; 63
  1e:	cd bf       	out	0x3d, r28	; 61
  20:	8c 01       	movw	r16, r24
  22:	00 5c       	subi	r16, 0xC0	; 192
      this->pRTC = new RTC_DS1307();
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	f8 01       	movw	r30, r16
  28:	80 81       	ld	r24, Z
  2a:	91 81       	ldd	r25, Z+1	; 0x01
  2c:	00 54       	subi	r16, 0x40	; 64
  2e:	10 40       	sbci	r17, 0x00	; 0

      if (this->pRTC != NULL) {
  30:	89 2b       	or	r24, r25
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN7APDTime3nowEv+0x34>
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN7APDTime3nowEv+0x36>
  36:	f8 01       	movw	r30, r16
  38:	86 ad       	ldd	r24, Z+62	; 0x3e
  3a:	97 ad       	ldd	r25, Z+63	; 0x3f
        pRTC->begin();
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime3nowEv>

        if (! pRTC->isrunning()) {
  40:	88 23       	and	r24, r24
  42:	01 f4       	brne	.+0      	; 0x44 <_ZN7APDTime3nowEv+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN7APDTime3nowEv+0x46>
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime3nowEv>
  4a:	2d 87       	std	Y+13, r18	; 0x0d
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	3e 87       	std	Y+14, r19	; 0x0e
  4e:	4f 87       	std	Y+15, r20	; 0x0f
  50:	58 8b       	std	Y+16, r21	; 0x10
  52:	69 8b       	std	Y+17, r22	; 0x11
          free(this->pRTC);
  54:	7a 8b       	std	Y+18, r23	; 0x12
  56:	de 01       	movw	r26, r28
  58:	17 96       	adiw	r26, 0x07	; 7
  5a:	fe 01       	movw	r30, r28
  5c:	3d 96       	adiw	r30, 0x0d	; 13
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  5e:	86 e0       	ldi	r24, 0x06	; 6
  60:	01 90       	ld	r0, Z+
  62:	0d 92       	st	X+, r0
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	81 50       	subi	r24, 0x01	; 1
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN7APDTime3nowEv+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN7APDTime3nowEv+0x6a>
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime3nowEv>
          pRTC = NULL;
  6e:	2d 87       	std	Y+13, r18	; 0x0d
  70:	3e 87       	std	Y+14, r19	; 0x0e
      }
    }else{
        SerPrintP("RTC already init...");
  72:	4f 87       	std	Y+15, r20	; 0x0f
  74:	58 8b       	std	Y+16, r21	; 0x10
  76:	69 8b       	std	Y+17, r22	; 0x11
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  78:	7a 8b       	std	Y+18, r23	; 0x12
  7a:	de 01       	movw	r26, r28
  7c:	17 96       	adiw	r26, 0x07	; 7
  7e:	fe 01       	movw	r30, r28
  80:	3d 96       	adiw	r30, 0x0d	; 13
  82:	86 e0       	ldi	r24, 0x06	; 6
  84:	01 90       	ld	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	81 50       	subi	r24, 0x01	; 1
  8a:	01 f4       	brne	.+0      	; 0x8c <_ZN7APDTime3nowEv+0x8c>
  }

}
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_ZN7APDTime3nowEv+0x8e>
  8e:	5e 01       	movw	r10, r28
  90:	08 94       	sec
  92:	a1 1c       	adc	r10, r1
  94:	b1 1c       	adc	r11, r1
  96:	c5 01       	movw	r24, r10
  98:	62 eb       	ldi	r22, 0xB2	; 178
  9a:	77 e0       	ldi	r23, 0x07	; 7
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	00 e0       	ldi	r16, 0x00	; 0
  a2:	ee 24       	eor	r14, r14
  a4:	cc 24       	eor	r12, r12
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime3nowEv>
  aa:	de 01       	movw	r26, r28
  ac:	17 96       	adiw	r26, 0x07	; 7
  ae:	f5 01       	movw	r30, r10
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	81 50       	subi	r24, 0x01	; 1
  b8:	01 f4       	brne	.+0      	; 0xba <_ZN7APDTime3nowEv+0xba>
  ba:	2f 81       	ldd	r18, Y+7	; 0x07
  bc:	38 85       	ldd	r19, Y+8	; 0x08
  be:	49 85       	ldd	r20, Y+9	; 0x09
  c0:	5a 85       	ldd	r21, Y+10	; 0x0a
  c2:	6b 85       	ldd	r22, Y+11	; 0x0b
  c4:	7c 85       	ldd	r23, Y+12	; 0x0c
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	62 96       	adiw	r28, 0x12	; 18
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	ef 90       	pop	r14
  e0:	cf 90       	pop	r12
  e2:	bf 90       	pop	r11
  e4:	af 90       	pop	r10
  e6:	08 95       	ret
  e8:	00 5c       	subi	r16, 0xC0	; 192
  ea:	1f 4f       	sbci	r17, 0xFF	; 255
  ec:	f8 01       	movw	r30, r16
  ee:	80 81       	ld	r24, Z
  f0:	91 81       	ldd	r25, Z+1	; 0x01
  f2:	89 2b       	or	r24, r25
  f4:	01 f0       	breq	.+0      	; 0xf6 <_ZN7APDTime3nowEv+0xf6>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_ZN7APDTime3nowEv+0xf8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <_ZZN7APDTime12setupNTPSyncEiPhiiE3__c_2+0x13>

Disassembly of section .text._ZN7APDTime7ntpSyncEv:

00000000 <_ZN7APDTime7ntpSyncEv>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
  10:	cf 92       	push	r12
  initBlank();
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
  if (bRTC) {
  18:	0f 93       	push	r16
  1a:	1f 93       	push	r17
    if (this->pRTC == NULL) {
  1c:	df 93       	push	r29
  1e:	cf 93       	push	r28
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
      this->pRTC = new RTC_DS1307();
  24:	e0 97       	sbiw	r28, 0x30	; 48
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	f8 94       	cli
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	0f be       	out	0x3f, r0	; 63
  2e:	cd bf       	out	0x3d, r28	; 61

      if (this->pRTC != NULL) {
  30:	4c 01       	movw	r8, r24
  32:	dc 01       	movw	r26, r24
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	1c 96       	adiw	r26, 0x0c	; 12
  36:	8d 91       	ld	r24, X+
  38:	9c 91       	ld	r25, X
  3a:	1d 97       	sbiw	r26, 0x0d	; 13
        pRTC->begin();
  3c:	89 2b       	or	r24, r25
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN7APDTime7ntpSyncEv+0x40>

        if (! pRTC->isrunning()) {
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN7APDTime7ntpSyncEv+0x46>
  46:	e0 e4       	ldi	r30, 0x40	; 64
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	8e 0e       	add	r8, r30
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	9f 1e       	adc	r9, r31
  4e:	d4 01       	movw	r26, r8
  50:	8d 91       	ld	r24, X+
  52:	9c 91       	ld	r25, X
          free(this->pRTC);
  54:	e0 ec       	ldi	r30, 0xC0	; 192
  56:	ff ef       	ldi	r31, 0xFF	; 255
  58:	8e 0e       	add	r8, r30
  5a:	9f 1e       	adc	r9, r31
  5c:	89 2b       	or	r24, r25
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN7APDTime7ntpSyncEv+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN7APDTime7ntpSyncEv+0x62>
  62:	d4 01       	movw	r26, r8
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	16 96       	adiw	r26, 0x06	; 6
  66:	8c 91       	ld	r24, X
  68:	88 23       	and	r24, r24
  6a:	01 f4       	brne	.+0      	; 0x6c <_ZN7APDTime7ntpSyncEv+0x6c>
          pRTC = NULL;
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN7APDTime7ntpSyncEv+0x6e>
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
      }
    }else{
        SerPrintP("RTC already init...");
  72:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  7a:	2b a7       	std	Y+43, r18	; 0x2b
  7c:	3c a7       	std	Y+44, r19	; 0x2c
  7e:	4d a7       	std	Y+45, r20	; 0x2d
  80:	5e a7       	std	Y+46, r21	; 0x2e
  82:	6f a7       	std	Y+47, r22	; 0x2f
  84:	78 ab       	std	Y+48, r23	; 0x30
  86:	de 01       	movw	r26, r28
  88:	11 96       	adiw	r26, 0x01	; 1
  8a:	fe 01       	movw	r30, r28
  }

}
  8c:	bb 96       	adiw	r30, 0x2b	; 43
  8e:	86 e0       	ldi	r24, 0x06	; 6
  90:	01 90       	ld	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	81 50       	subi	r24, 0x01	; 1
  96:	01 f4       	brne	.+0      	; 0x98 <_ZN7APDTime7ntpSyncEv+0x98>
  98:	c4 01       	movw	r24, r8
  9a:	29 81       	ldd	r18, Y+1	; 0x01
  9c:	3a 81       	ldd	r19, Y+2	; 0x02
  9e:	4b 81       	ldd	r20, Y+3	; 0x03
  a0:	5c 81       	ldd	r21, Y+4	; 0x04
  a2:	6d 81       	ldd	r22, Y+5	; 0x05
  a4:	7e 81       	ldd	r23, Y+6	; 0x06
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
  aa:	f4 01       	movw	r30, r8
  ac:	86 ad       	ldd	r24, Z+62	; 0x3e
  ae:	97 ad       	ldd	r25, Z+63	; 0x3f
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	01 f0       	breq	.+0      	; 0xb4 <_ZN7APDTime7ntpSyncEv+0xb4>
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
  b8:	88 23       	and	r24, r24
  ba:	01 f0       	breq	.+0      	; 0xbc <_ZN7APDTime7ntpSyncEv+0xbc>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
  c4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
  c8:	2b a7       	std	Y+43, r18	; 0x2b
  ca:	3c a7       	std	Y+44, r19	; 0x2c
  cc:	4d a7       	std	Y+45, r20	; 0x2d
  ce:	5e a7       	std	Y+46, r21	; 0x2e
  d0:	6f a7       	std	Y+47, r22	; 0x2f
  d2:	78 ab       	std	Y+48, r23	; 0x30
  d4:	de 01       	movw	r26, r28
  d6:	17 96       	adiw	r26, 0x07	; 7
  d8:	fe 01       	movw	r30, r28
  da:	bb 96       	adiw	r30, 0x2b	; 43
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	01 90       	ld	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	01 f4       	brne	.+0      	; 0xe6 <_ZN7APDTime7ntpSyncEv+0xe6>
  e6:	c4 01       	movw	r24, r8
  e8:	2f 81       	ldd	r18, Y+7	; 0x07
  ea:	38 85       	ldd	r19, Y+8	; 0x08
  ec:	49 85       	ldd	r20, Y+9	; 0x09
  ee:	5a 85       	ldd	r21, Y+10	; 0x0a
  f0:	6b 85       	ldd	r22, Y+11	; 0x0b
  f2:	7c 85       	ldd	r23, Y+12	; 0x0c
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 100:	84 01       	movw	r16, r8
 102:	0a 5f       	subi	r16, 0xFA	; 250
 104:	1f 4f       	sbci	r17, 0xFF	; 255
 106:	c8 01       	movw	r24, r16
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 114:	c4 01       	movw	r24, r8
 116:	b8 01       	movw	r22, r16
 118:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	10 e0       	ldi	r17, 0x00	; 0
 128:	d4 01       	movw	r26, r8
 12a:	1c 96       	adiw	r26, 0x0c	; 12
 12c:	ed 91       	ld	r30, X+
 12e:	fc 91       	ld	r31, X
 130:	1d 97       	sbiw	r26, 0x0d	; 13
 132:	a0 81       	ld	r26, Z
 134:	b1 81       	ldd	r27, Z+1	; 0x01
 136:	14 96       	adiw	r26, 0x04	; 4
 138:	2d 91       	ld	r18, X+
 13a:	3c 91       	ld	r19, X
 13c:	15 97       	sbiw	r26, 0x05	; 5
 13e:	cf 01       	movw	r24, r30
 140:	f9 01       	movw	r30, r18
 142:	19 95       	eicall
 144:	89 2b       	or	r24, r25
 146:	01 f4       	brne	.+0      	; 0x148 <_ZN7APDTime7ntpSyncEv+0x148>
 148:	6a e0       	ldi	r22, 0x0A	; 10
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 154:	0f 5f       	subi	r16, 0xFF	; 255
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	b3 e0       	ldi	r27, 0x03	; 3
 15a:	08 3e       	cpi	r16, 0xE8	; 232
 15c:	1b 07       	cpc	r17, r27
 15e:	01 f4       	brne	.+0      	; 0x160 <_ZN7APDTime7ntpSyncEv+0x160>
 160:	d4 01       	movw	r26, r8
 162:	1c 96       	adiw	r26, 0x0c	; 12
 164:	ed 91       	ld	r30, X+
 166:	fc 91       	ld	r31, X
 168:	1d 97       	sbiw	r26, 0x0d	; 13
 16a:	a0 81       	ld	r26, Z
 16c:	b1 81       	ldd	r27, Z+1	; 0x01
 16e:	14 96       	adiw	r26, 0x04	; 4
 170:	2d 91       	ld	r18, X+
 172:	3c 91       	ld	r19, X
 174:	15 97       	sbiw	r26, 0x05	; 5
 176:	cf 01       	movw	r24, r30
 178:	f9 01       	movw	r30, r18
 17a:	19 95       	eicall
 17c:	89 2b       	or	r24, r25
 17e:	01 f4       	brne	.+0      	; 0x180 <_ZN7APDTime7ntpSyncEv+0x180>
 180:	00 c0       	rjmp	.+0      	; 0x182 <_ZN7APDTime7ntpSyncEv+0x182>
 182:	f4 01       	movw	r30, r8
 184:	a4 85       	ldd	r26, Z+12	; 0x0c
 186:	b5 85       	ldd	r27, Z+13	; 0x0d
 188:	ed 91       	ld	r30, X+
 18a:	fc 91       	ld	r31, X
 18c:	11 97       	sbiw	r26, 0x01	; 1
 18e:	b4 01       	movw	r22, r8
 190:	62 5f       	subi	r22, 0xF2	; 242
 192:	7f 4f       	sbci	r23, 0xFF	; 255
 194:	00 8c       	ldd	r0, Z+24	; 0x18
 196:	f1 8d       	ldd	r31, Z+25	; 0x19
 198:	e0 2d       	mov	r30, r0
 19a:	cd 01       	movw	r24, r26
 19c:	40 e3       	ldi	r20, 0x30	; 48
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	19 95       	eicall
 1a2:	d4 01       	movw	r26, r8
 1a4:	d6 96       	adiw	r26, 0x36	; 54
 1a6:	8c 91       	ld	r24, X
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	a0 e0       	ldi	r26, 0x00	; 0
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	22 27       	eor	r18, r18
 1b0:	38 2f       	mov	r19, r24
 1b2:	49 2f       	mov	r20, r25
 1b4:	5a 2f       	mov	r21, r26
 1b6:	f4 01       	movw	r30, r8
 1b8:	87 a9       	ldd	r24, Z+55	; 0x37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	a0 e0       	ldi	r26, 0x00	; 0
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	28 2b       	or	r18, r24
 1c2:	39 2b       	or	r19, r25
 1c4:	4a 2b       	or	r20, r26
 1c6:	5b 2b       	or	r21, r27
 1c8:	74 2f       	mov	r23, r20
 1ca:	63 2f       	mov	r22, r19
 1cc:	52 2f       	mov	r21, r18
 1ce:	44 27       	eor	r20, r20
 1d0:	80 ad       	ldd	r24, Z+56	; 0x38
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	a0 e0       	ldi	r26, 0x00	; 0
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	48 2b       	or	r20, r24
 1da:	59 2b       	or	r21, r25
 1dc:	6a 2b       	or	r22, r26
 1de:	7b 2b       	or	r23, r27
 1e0:	44 24       	eor	r4, r4
 1e2:	54 2e       	mov	r5, r20
 1e4:	65 2e       	mov	r6, r21
 1e6:	76 2e       	mov	r7, r22
 1e8:	81 ad       	ldd	r24, Z+57	; 0x39
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	a0 e0       	ldi	r26, 0x00	; 0
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	48 2a       	or	r4, r24
 1f2:	59 2a       	or	r5, r25
 1f4:	6a 2a       	or	r6, r26
 1f6:	7b 2a       	or	r7, r27
 1f8:	62 ad       	ldd	r22, Z+58	; 0x3a
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	98 2f       	mov	r25, r24
 202:	87 2f       	mov	r24, r23
 204:	76 2f       	mov	r23, r22
 206:	66 27       	eor	r22, r22
 208:	23 ad       	ldd	r18, Z+59	; 0x3b
 20a:	62 0f       	add	r22, r18
 20c:	71 1d       	adc	r23, r1
 20e:	81 1d       	adc	r24, r1
 210:	91 1d       	adc	r25, r1
 212:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e8       	ldi	r20, 0x80	; 128
 21c:	57 e3       	ldi	r21, 0x37	; 55
 21e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 222:	7b 01       	movw	r14, r22
 224:	8c 01       	movw	r16, r24
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	91 e8       	ldi	r25, 0x81	; 129
 22a:	a5 e5       	ldi	r26, 0x55	; 85
 22c:	bc e7       	ldi	r27, 0x7C	; 124
 22e:	48 0e       	add	r4, r24
 230:	59 1e       	adc	r5, r25
 232:	6a 1e       	adc	r6, r26
 234:	7b 1e       	adc	r7, r27
 236:	ce 01       	movw	r24, r28
 238:	0d 96       	adiw	r24, 0x0d	; 13
 23a:	b3 01       	movw	r22, r6
 23c:	a2 01       	movw	r20, r4
 23e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 242:	c4 01       	movw	r24, r8
 244:	2d 85       	ldd	r18, Y+13	; 0x0d
 246:	3e 85       	ldd	r19, Y+14	; 0x0e
 248:	4f 85       	ldd	r20, Y+15	; 0x0f
 24a:	58 89       	ldd	r21, Y+16	; 0x10
 24c:	69 89       	ldd	r22, Y+17	; 0x11
 24e:	7a 89       	ldd	r23, Y+18	; 0x12
 250:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	b8 01       	movw	r22, r16
 25a:	a7 01       	movw	r20, r14
 25c:	24 e0       	ldi	r18, 0x04	; 4
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 264:	d4 01       	movw	r26, r8
 266:	14 96       	adiw	r26, 0x04	; 4
 268:	6d 91       	ld	r22, X+
 26a:	7c 91       	ld	r23, X
 26c:	15 97       	sbiw	r26, 0x05	; 5
 26e:	12 96       	adiw	r26, 0x02	; 2
 270:	2d 91       	ld	r18, X+
 272:	3c 91       	ld	r19, X
 274:	13 97       	sbiw	r26, 0x03	; 3
 276:	62 0f       	add	r22, r18
 278:	73 1f       	adc	r23, r19
 27a:	88 27       	eor	r24, r24
 27c:	77 fd       	sbrc	r23, 7
 27e:	80 95       	com	r24
 280:	98 2f       	mov	r25, r24
 282:	20 e1       	ldi	r18, 0x10	; 16
 284:	3e e0       	ldi	r19, 0x0E	; 14
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 28e:	5b 01       	movw	r10, r22
 290:	6c 01       	movw	r12, r24
 292:	08 94       	sec
 294:	a1 1c       	adc	r10, r1
 296:	b1 1c       	adc	r11, r1
 298:	c1 1c       	adc	r12, r1
 29a:	d1 1c       	adc	r13, r1
 29c:	a4 0c       	add	r10, r4
 29e:	b5 1c       	adc	r11, r5
 2a0:	c6 1c       	adc	r12, r6
 2a2:	d7 1c       	adc	r13, r7
 2a4:	c8 01       	movw	r24, r16
 2a6:	b7 01       	movw	r22, r14
 2a8:	2d ec       	ldi	r18, 0xCD	; 205
 2aa:	3c ec       	ldi	r19, 0xCC	; 204
 2ac:	4c ec       	ldi	r20, 0xCC	; 204
 2ae:	5e e3       	ldi	r21, 0x3E	; 62
 2b0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 2b4:	18 16       	cp	r1, r24
 2b6:	04 f4       	brge	.+0      	; 0x2b8 <_ZN7APDTime7ntpSyncEv+0x2b8>
 2b8:	08 94       	sec
 2ba:	a1 1c       	adc	r10, r1
 2bc:	b1 1c       	adc	r11, r1
 2be:	c1 1c       	adc	r12, r1
 2c0:	d1 1c       	adc	r13, r1
 2c2:	ce 01       	movw	r24, r28
 2c4:	43 96       	adiw	r24, 0x13	; 19
 2c6:	b6 01       	movw	r22, r12
 2c8:	a5 01       	movw	r20, r10
 2ca:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 2ce:	c4 01       	movw	r24, r8
 2d0:	2b 89       	ldd	r18, Y+19	; 0x13
 2d2:	3c 89       	ldd	r19, Y+20	; 0x14
 2d4:	4d 89       	ldd	r20, Y+21	; 0x15
 2d6:	5e 89       	ldd	r21, Y+22	; 0x16
 2d8:	6f 89       	ldd	r22, Y+23	; 0x17
 2da:	78 8d       	ldd	r23, Y+24	; 0x18
 2dc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 2e0:	f4 01       	movw	r30, r8
 2e2:	86 ad       	ldd	r24, Z+62	; 0x3e
 2e4:	97 ad       	ldd	r25, Z+63	; 0x3f
 2e6:	89 2b       	or	r24, r25
 2e8:	01 f0       	breq	.+0      	; 0x2ea <_ZN7APDTime7ntpSyncEv+0x2ea>
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 2f2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 2f6:	2b a7       	std	Y+43, r18	; 0x2b
 2f8:	3c a7       	std	Y+44, r19	; 0x2c
 2fa:	4d a7       	std	Y+45, r20	; 0x2d
 2fc:	5e a7       	std	Y+46, r21	; 0x2e
 2fe:	6f a7       	std	Y+47, r22	; 0x2f
 300:	78 ab       	std	Y+48, r23	; 0x30
 302:	de 01       	movw	r26, r28
 304:	59 96       	adiw	r26, 0x19	; 25
 306:	fe 01       	movw	r30, r28
 308:	bb 96       	adiw	r30, 0x2b	; 43
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	01 90       	ld	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	81 50       	subi	r24, 0x01	; 1
 312:	01 f4       	brne	.+0      	; 0x314 <_ZN7APDTime7ntpSyncEv+0x314>
 314:	c4 01       	movw	r24, r8
 316:	29 8d       	ldd	r18, Y+25	; 0x19
 318:	3a 8d       	ldd	r19, Y+26	; 0x1a
 31a:	4b 8d       	ldd	r20, Y+27	; 0x1b
 31c:	5c 8d       	ldd	r21, Y+28	; 0x1c
 31e:	6d 8d       	ldd	r22, Y+29	; 0x1d
 320:	7e 8d       	ldd	r23, Y+30	; 0x1e
 322:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 326:	d4 01       	movw	r26, r8
 328:	de 96       	adiw	r26, 0x3e	; 62
 32a:	8d 91       	ld	r24, X+
 32c:	9c 91       	ld	r25, X
 32e:	df 97       	sbiw	r26, 0x3f	; 63
 330:	89 2b       	or	r24, r25
 332:	01 f0       	breq	.+0      	; 0x334 <_ZN7APDTime7ntpSyncEv+0x334>
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 33c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 340:	2b a7       	std	Y+43, r18	; 0x2b
 342:	3c a7       	std	Y+44, r19	; 0x2c
 344:	4d a7       	std	Y+45, r20	; 0x2d
 346:	5e a7       	std	Y+46, r21	; 0x2e
 348:	6f a7       	std	Y+47, r22	; 0x2f
 34a:	78 ab       	std	Y+48, r23	; 0x30
 34c:	de 01       	movw	r26, r28
 34e:	5f 96       	adiw	r26, 0x1f	; 31
 350:	fe 01       	movw	r30, r28
 352:	bb 96       	adiw	r30, 0x2b	; 43
 354:	86 e0       	ldi	r24, 0x06	; 6
 356:	01 90       	ld	r0, Z+
 358:	0d 92       	st	X+, r0
 35a:	81 50       	subi	r24, 0x01	; 1
 35c:	01 f4       	brne	.+0      	; 0x35e <_ZN7APDTime7ntpSyncEv+0x35e>
 35e:	c4 01       	movw	r24, r8
 360:	2f 8d       	ldd	r18, Y+31	; 0x1f
 362:	38 a1       	ldd	r19, Y+32	; 0x20
 364:	49 a1       	ldd	r20, Y+33	; 0x21
 366:	5a a1       	ldd	r21, Y+34	; 0x22
 368:	6b a1       	ldd	r22, Y+35	; 0x23
 36a:	7c a1       	ldd	r23, Y+36	; 0x24
 36c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 378:	c4 01       	movw	r24, r8
 37a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 37e:	2b a7       	std	Y+43, r18	; 0x2b
 380:	3c a7       	std	Y+44, r19	; 0x2c
 382:	4d a7       	std	Y+45, r20	; 0x2d
 384:	5e a7       	std	Y+46, r21	; 0x2e
 386:	6f a7       	std	Y+47, r22	; 0x2f
 388:	78 ab       	std	Y+48, r23	; 0x30
 38a:	de 01       	movw	r26, r28
 38c:	95 96       	adiw	r26, 0x25	; 37
 38e:	fe 01       	movw	r30, r28
 390:	bb 96       	adiw	r30, 0x2b	; 43
 392:	86 e0       	ldi	r24, 0x06	; 6
 394:	01 90       	ld	r0, Z+
 396:	0d 92       	st	X+, r0
 398:	81 50       	subi	r24, 0x01	; 1
 39a:	01 f4       	brne	.+0      	; 0x39c <_ZN7APDTime7ntpSyncEv+0x39c>
 39c:	c4 01       	movw	r24, r8
 39e:	2d a1       	ldd	r18, Y+37	; 0x25
 3a0:	3e a1       	ldd	r19, Y+38	; 0x26
 3a2:	4f a1       	ldd	r20, Y+39	; 0x27
 3a4:	58 a5       	ldd	r21, Y+40	; 0x28
 3a6:	69 a5       	ldd	r22, Y+41	; 0x29
 3a8:	7a a5       	ldd	r23, Y+42	; 0x2a
 3aa:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <_ZN7APDTime7ntpSyncEv+0x3b4>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <_ZN7APDTime7ntpSyncEv+0x3be>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime7ntpSyncEv>
 3ca:	e0 96       	adiw	r28, 0x30	; 48
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	cf 91       	pop	r28
 3d8:	df 91       	pop	r29
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	cf 90       	pop	r12
 3e6:	bf 90       	pop	r11
 3e8:	af 90       	pop	r10
 3ea:	9f 90       	pop	r9
 3ec:	8f 90       	pop	r8
 3ee:	7f 90       	pop	r7
 3f0:	6f 90       	pop	r6
 3f2:	5f 90       	pop	r5
 3f4:	4f 90       	pop	r4
 3f6:	08 95       	ret

Disassembly of section .text._ZN7APDTime4nowSEPc:

00000000 <_ZN7APDTime4nowSEPc>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	2c 97       	sbiw	r28, 0x0c	; 12
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  initBlank();
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  if (bRTC) {
  18:	16 2f       	mov	r17, r22
  1a:	07 2f       	mov	r16, r23
    if (this->pRTC == NULL) {
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime4nowSEPc>
  20:	2f 83       	std	Y+7, r18	; 0x07
  22:	38 87       	std	Y+8, r19	; 0x08
      this->pRTC = new RTC_DS1307();
  24:	49 87       	std	Y+9, r20	; 0x09
  26:	5a 87       	std	Y+10, r21	; 0x0a
  28:	6b 87       	std	Y+11, r22	; 0x0b
  2a:	7c 87       	std	Y+12, r23	; 0x0c
  2c:	de 01       	movw	r26, r28
  2e:	11 96       	adiw	r26, 0x01	; 1

      if (this->pRTC != NULL) {
  30:	fe 01       	movw	r30, r28
  32:	37 96       	adiw	r30, 0x07	; 7
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	86 e0       	ldi	r24, 0x06	; 6
  36:	01 90       	ld	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	81 50       	subi	r24, 0x01	; 1
        pRTC->begin();
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN7APDTime4nowSEPc+0x3e>
  3e:	8d b7       	in	r24, 0x3d	; 61

        if (! pRTC->isrunning()) {
  40:	9e b7       	in	r25, 0x3e	; 62
  42:	40 97       	sbiw	r24, 0x10	; 16
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	9e bf       	out	0x3e, r25	; 62
  4a:	0f be       	out	0x3f, r0	; 63
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	8d bf       	out	0x3d, r24	; 61
  4e:	ed b7       	in	r30, 0x3d	; 61
  50:	fe b7       	in	r31, 0x3e	; 62
  52:	31 96       	adiw	r30, 0x01	; 1
          free(this->pRTC);
  54:	ad b7       	in	r26, 0x3d	; 61
  56:	be b7       	in	r27, 0x3e	; 62
  58:	11 96       	adiw	r26, 0x01	; 1
  5a:	1c 93       	st	X, r17
  5c:	01 83       	std	Z+1, r16	; 0x01
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	93 83       	std	Z+3, r25	; 0x03
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	82 83       	std	Z+2, r24	; 0x02
  66:	89 81       	ldd	r24, Y+1	; 0x01
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	80 53       	subi	r24, 0x30	; 48
          pRTC = NULL;
  6c:	98 4f       	sbci	r25, 0xF8	; 248
  6e:	95 83       	std	Z+5, r25	; 0x05
  70:	84 83       	std	Z+4, r24	; 0x04
      }
    }else{
        SerPrintP("RTC already init...");
  72:	8a 81       	ldd	r24, Y+2	; 0x02
  74:	86 83       	std	Z+6, r24	; 0x06
  76:	17 82       	std	Z+7, r1	; 0x07
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  78:	8b 81       	ldd	r24, Y+3	; 0x03
  7a:	80 87       	std	Z+8, r24	; 0x08
  7c:	11 86       	std	Z+9, r1	; 0x09
  7e:	8c 81       	ldd	r24, Y+4	; 0x04
  80:	82 87       	std	Z+10, r24	; 0x0a
  82:	13 86       	std	Z+11, r1	; 0x0b
  84:	8d 81       	ldd	r24, Y+5	; 0x05
  86:	84 87       	std	Z+12, r24	; 0x0c
  88:	15 86       	std	Z+13, r1	; 0x0d
  8a:	8e 81       	ldd	r24, Y+6	; 0x06
  }

}
  8c:	86 87       	std	Z+14, r24	; 0x0e
  8e:	17 86       	std	Z+15, r1	; 0x0f
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime4nowSEPc>
  94:	8d b7       	in	r24, 0x3d	; 61
  96:	9e b7       	in	r25, 0x3e	; 62
  98:	40 96       	adiw	r24, 0x10	; 16
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	9e bf       	out	0x3e, r25	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	8d bf       	out	0x3d, r24	; 61
  a4:	81 2f       	mov	r24, r17
  a6:	90 2f       	mov	r25, r16
  a8:	2c 96       	adiw	r28, 0x0c	; 12
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	1f 91       	pop	r17
  ba:	0f 91       	pop	r16
  bc:	08 95       	ret

Disassembly of section .text._ZN7APDTime9initBlankEv:

00000000 <_ZN7APDTime9initBlankEv>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	68 97       	sbiw	r28, 0x18	; 24
  initBlank();
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  if (bRTC) {
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
    if (this->pRTC == NULL) {
  1c:	7c 01       	movw	r14, r24
  1e:	86 e4       	ldi	r24, 0x46	; 70
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	e8 0e       	add	r14, r24
      this->pRTC = new RTC_DS1307();
  24:	f9 1e       	adc	r15, r25
  26:	f7 01       	movw	r30, r14
  28:	10 82       	st	Z, r1
  2a:	11 82       	std	Z+1, r1	; 0x01
  2c:	12 82       	std	Z+2, r1	; 0x02
  2e:	13 82       	std	Z+3, r1	; 0x03

      if (this->pRTC != NULL) {
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	f7 01       	movw	r30, r14
  36:	92 93       	st	-Z, r25
  38:	82 93       	st	-Z, r24
  3a:	72 93       	st	-Z, r23
        pRTC->begin();
  3c:	62 93       	st	-Z, r22
  3e:	7f 01       	movw	r14, r30

        if (! pRTC->isrunning()) {
  40:	8e eb       	ldi	r24, 0xBE	; 190
  42:	9f ef       	ldi	r25, 0xFF	; 255
  44:	e8 0e       	add	r14, r24
  46:	f9 1e       	adc	r15, r25
  48:	f7 01       	movw	r30, r14
  4a:	17 ae       	std	Z+63, r1	; 0x3f
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	16 ae       	std	Z+62, r1	; 0x3e
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
          free(this->pRTC);
  56:	9c 01       	movw	r18, r24
  58:	80 e4       	ldi	r24, 0x40	; 64
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	e8 0e       	add	r14, r24
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  5e:	f9 1e       	adc	r15, r25
  60:	f7 01       	movw	r30, r14
  62:	31 83       	std	Z+1, r19	; 0x01
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	20 83       	st	Z, r18
  66:	80 ec       	ldi	r24, 0xC0	; 192
  68:	9f ef       	ldi	r25, 0xFF	; 255
  6a:	e8 0e       	add	r14, r24
          pRTC = NULL;
  6c:	f9 1e       	adc	r15, r25
  6e:	23 2b       	or	r18, r19
  70:	01 f0       	breq	.+0      	; 0x72 <_ZN7APDTime9initBlankEv+0x72>
      }
    }else{
        SerPrintP("RTC already init...");
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  7a:	8e 01       	movw	r16, r28
  7c:	0f 5f       	subi	r16, 0xFF	; 255
  7e:	1f 4f       	sbci	r17, 0xFF	; 255
  80:	c8 01       	movw	r24, r16
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
  }

}
  8e:	c8 01       	movw	r24, r16
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
  98:	2b 8b       	std	Y+19, r18	; 0x13
  9a:	3c 8b       	std	Y+20, r19	; 0x14
  9c:	4d 8b       	std	Y+21, r20	; 0x15
  9e:	5e 8b       	std	Y+22, r21	; 0x16
  a0:	6f 8b       	std	Y+23, r22	; 0x17
  a2:	78 8f       	std	Y+24, r23	; 0x18
  a4:	de 01       	movw	r26, r28
  a6:	17 96       	adiw	r26, 0x07	; 7
  a8:	fe 01       	movw	r30, r28
  aa:	73 96       	adiw	r30, 0x13	; 19
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	01 90       	ld	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	81 50       	subi	r24, 0x01	; 1
  b4:	01 f4       	brne	.+0      	; 0xb6 <_ZN7APDTime9initBlankEv+0xb6>
  b6:	c7 01       	movw	r24, r14
  b8:	2f 81       	ldd	r18, Y+7	; 0x07
  ba:	38 85       	ldd	r19, Y+8	; 0x08
  bc:	49 85       	ldd	r20, Y+9	; 0x09
  be:	5a 85       	ldd	r21, Y+10	; 0x0a
  c0:	6b 85       	ldd	r22, Y+11	; 0x0b
  c2:	7c 85       	ldd	r23, Y+12	; 0x0c
  c4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN7APDTime9initBlankEv+0xce>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
  d6:	80 91 00 00 	lds	r24, 0x0000
  da:	90 91 01 00 	lds	r25, 0x0001
  de:	a0 91 02 00 	lds	r26, 0x0002
  e2:	b0 91 03 00 	lds	r27, 0x0003
  e6:	f7 01       	movw	r30, r14
  e8:	86 83       	std	Z+6, r24	; 0x06
  ea:	97 83       	std	Z+7, r25	; 0x07
  ec:	a0 87       	std	Z+8, r26	; 0x08
  ee:	b1 87       	std	Z+9, r27	; 0x09
  f0:	13 86       	std	Z+11, r1	; 0x0b
  f2:	12 86       	std	Z+10, r1	; 0x0a
  f4:	15 86       	std	Z+13, r1	; 0x0d
  f6:	14 86       	std	Z+12, r1	; 0x0c
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
 100:	c7 01       	movw	r24, r14
 102:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
 106:	2b 8b       	std	Y+19, r18	; 0x13
 108:	3c 8b       	std	Y+20, r19	; 0x14
 10a:	4d 8b       	std	Y+21, r20	; 0x15
 10c:	5e 8b       	std	Y+22, r21	; 0x16
 10e:	6f 8b       	std	Y+23, r22	; 0x17
 110:	78 8f       	std	Y+24, r23	; 0x18
 112:	de 01       	movw	r26, r28
 114:	1d 96       	adiw	r26, 0x0d	; 13
 116:	fe 01       	movw	r30, r28
 118:	73 96       	adiw	r30, 0x13	; 19
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	01 90       	ld	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	81 50       	subi	r24, 0x01	; 1
 122:	01 f4       	brne	.+0      	; 0x124 <_ZN7APDTime9initBlankEv+0x124>
 124:	c7 01       	movw	r24, r14
 126:	2d 85       	ldd	r18, Y+13	; 0x0d
 128:	3e 85       	ldd	r19, Y+14	; 0x0e
 12a:	4f 85       	ldd	r20, Y+15	; 0x0f
 12c:	58 89       	ldd	r21, Y+16	; 0x10
 12e:	69 89       	ldd	r22, Y+17	; 0x11
 130:	7a 89       	ldd	r23, Y+18	; 0x12
 132:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTime9initBlankEv>
 13e:	68 96       	adiw	r28, 0x18	; 24
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
 14a:	cf 91       	pop	r28
 14c:	df 91       	pop	r29
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	ff 90       	pop	r15
 154:	ef 90       	pop	r14
 156:	08 95       	ret

Disassembly of section .text._ZN7APDTimeC1Ev:

00000000 <_ZN7APDTimeC1Ev>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Ev>
  10:	08 95       	ret

Disassembly of section .text._ZN7APDTimeC2Ev:

00000000 <_ZN7APDTimeC2Ev>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Ev>
  10:	08 95       	ret

Disassembly of section .text._ZN7APDTimeD0Ev:

00000000 <_ZN7APDTimeD0Ev>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeD0Ev>
  10:	08 95       	ret

Disassembly of section .text._ZN7APDTimeC1Eh:

00000000 <_ZN7APDTimeC1Eh>:
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	16 2f       	mov	r17, r22
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	99 83       	std	Y+1, r25	; 0x01
  10:	88 83       	st	Y, r24
  initBlank();
  12:	ce 01       	movw	r24, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Eh>
  if (bRTC) {
  18:	11 23       	and	r17, r17
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN7APDTimeC1Eh+0x1c>
    if (this->pRTC == NULL) {
  1c:	8e ad       	ldd	r24, Y+62	; 0x3e
  1e:	9f ad       	ldd	r25, Y+63	; 0x3f
  20:	89 2b       	or	r24, r25
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN7APDTimeC1Eh+0x24>
      this->pRTC = new RTC_DS1307();
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Eh>
  2c:	9f af       	std	Y+63, r25	; 0x3f
  2e:	8e af       	std	Y+62, r24	; 0x3e

      if (this->pRTC != NULL) {
  30:	00 97       	sbiw	r24, 0x00	; 0
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN7APDTimeC1Eh+0x34>
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Eh>
        pRTC->begin();
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Eh>

        if (! pRTC->isrunning()) {
  40:	8e ad       	ldd	r24, Y+62	; 0x3e
  42:	9f ad       	ldd	r25, Y+63	; 0x3f
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Eh>
  48:	88 23       	and	r24, r24
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN7APDTimeC1Eh+0x4c>
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Eh>
          free(this->pRTC);
  54:	8e ad       	ldd	r24, Y+62	; 0x3e
  56:	9f ad       	ldd	r25, Y+63	; 0x3f
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Eh>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_ZN7APDTimeC1Eh+0x5e>
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN7APDTimeC1Eh+0x64>
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Eh>
          pRTC = NULL;
  6c:	1f ae       	std	Y+63, r1	; 0x3f
  6e:	1e ae       	std	Y+62, r1	; 0x3e
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZN7APDTimeC1Eh+0x72>
      }
    }else{
        SerPrintP("RTC already init...");
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN7APDTimeC1Eh+0x78>
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  78:	c0 5c       	subi	r28, 0xC0	; 192
  7a:	df 4f       	sbci	r29, 0xFF	; 255
  7c:	88 81       	ld	r24, Y
  7e:	99 81       	ldd	r25, Y+1	; 0x01
  80:	89 2b       	or	r24, r25
  82:	01 f4       	brne	.+0      	; 0x84 <_ZN7APDTimeC1Eh+0x84>
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC1Eh>
  }

}
  8c:	df 91       	pop	r29
  8e:	cf 91       	pop	r28
  90:	1f 91       	pop	r17
  92:	08 95       	ret

Disassembly of section .text._ZN7APDTimeC2Eh:

00000000 <_ZN7APDTimeC2Eh>:
APDTime::APDTime() {
	// TODO Auto-generated constructor stub
  initBlank();
}

APDTime::APDTime(boolean bRTC) {
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	16 2f       	mov	r17, r22
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	99 83       	std	Y+1, r25	; 0x01
  10:	88 83       	st	Y, r24
  initBlank();
  12:	ce 01       	movw	r24, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Eh>
  if (bRTC) {
  18:	11 23       	and	r17, r17
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN7APDTimeC2Eh+0x1c>
    if (this->pRTC == NULL) {
  1c:	8e ad       	ldd	r24, Y+62	; 0x3e
  1e:	9f ad       	ldd	r25, Y+63	; 0x3f
  20:	89 2b       	or	r24, r25
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN7APDTimeC2Eh+0x24>
      this->pRTC = new RTC_DS1307();
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Eh>
  2c:	9f af       	std	Y+63, r25	; 0x3f
  2e:	8e af       	std	Y+62, r24	; 0x3e

      if (this->pRTC != NULL) {
  30:	00 97       	sbiw	r24, 0x00	; 0
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN7APDTimeC2Eh+0x34>
        // not powering from A2&3
        //pinMode(A3, OUTPUT);  //digitalWrite(A3, HIGH);
        //pinMode(A2, OUTPUT);  //digitalWrite(A2, LOW);

        Wire.begin();
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Eh>
        pRTC->begin();
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Eh>

        if (! pRTC->isrunning()) {
  40:	8e ad       	ldd	r24, Y+62	; 0x3e
  42:	9f ad       	ldd	r25, Y+63	; 0x3f
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Eh>
  48:	88 23       	and	r24, r24
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN7APDTimeC2Eh+0x4c>
          SerPrintP("RTC is NOT running (no hw?)...");
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Eh>
          free(this->pRTC);
  54:	8e ad       	ldd	r24, Y+62	; 0x3e
  56:	9f ad       	ldd	r25, Y+63	; 0x3f
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Eh>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_ZN7APDTimeC2Eh+0x5e>
          this->pRTC = NULL;
//          SerPrintP("RTC HW NEEDS TESTING!\n");
          //RTC.adjust(DateTime(__DATE__, __TIME__));
        } else {
          // we have RTC
          SerPrintP("HW RTC OK..."); //pRTC->now());
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN7APDTimeC2Eh+0x64>
        }
      } else {
          SerPrintP("RTC alloc fail...");
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Eh>
          pRTC = NULL;
  6c:	1f ae       	std	Y+63, r1	; 0x3f
  6e:	1e ae       	std	Y+62, r1	; 0x3e
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZN7APDTimeC2Eh+0x72>
      }
    }else{
        SerPrintP("RTC already init...");
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN7APDTimeC2Eh+0x78>
    }
  } else {
      // millis based already by default
      if (pRTCm == NULL) SerPrintP("ERROR - SW clock should be running!\n");
  78:	c0 5c       	subi	r28, 0xC0	; 192
  7a:	df 4f       	sbci	r29, 0xFF	; 255
  7c:	88 81       	ld	r24, Y
  7e:	99 81       	ldd	r25, Y+1	; 0x01
  80:	89 2b       	or	r24, r25
  82:	01 f4       	brne	.+0      	; 0x84 <_ZN7APDTimeC2Eh+0x84>
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDTimeC2Eh>
  }

}
  8c:	df 91       	pop	r29
  8e:	cf 91       	pop	r28
  90:	1f 91       	pop	r17
  92:	08 95       	ret

APDWeb.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ab  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000001df  2**0
                  ALLOC
  3 .stab         00005760  00000000  00000000  000001e0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000079ba  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6APDWeb13pause_serviceEv 00000022  00000000  00000000  0000d2fa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6APDWeb16continue_serviceEv 00000022  00000000  00000000  0000d31c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6APDWeb14loop_webclientEv 0000009a  00000000  00000000  0000d33e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._GLOBAL__I__ZN6APDWebC2EP7APDTime 00000016  00000000  00000000  0000d3d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .ctors        00000002  00000000  00000000  0000d3ee  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 10 .text._ZN6APDWeb7failureEv 0000005e  00000000  00000000  0000d3f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6APDWeb11web_endpageEP14EthernetClient 00000034  00000000  00000000  0000d44e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6APDWeb25new_thingspeakconf_parserEPviPc 000000c0  00000000  00000000  0000d482  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6APDWeb19new_cosmconf_parserEPviPc 000000c8  00000000  00000000  0000d542  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6APDWeb22new_apduinoconf_parserEPviPc 000000d2  00000000  00000000  0000d60a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6APDWeb9myCPrintPEP14EthernetClientPv 00000092  00000000  00000000  0000d6dc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_ 000000b6  00000000  00000000  0000d76e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6APDWeb11json_statusEP14EthernetClient 000003ea  00000000  00000000  0000d824  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6APDWeb11json_headerEP14EthernetClient 0000002a  00000000  00000000  0000dc0e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6APDWeb17claim_device_linkEP14EthernetClient 0000007e  00000000  00000000  0000dc38  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6APDWeb12web_notfoundEP14EthernetClient 00000028  00000000  00000000  0000dcb6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6APDWeb15web_maintenanceEP14EthernetClient 0000002a  00000000  00000000  0000dcde  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN6APDWeb10web_statusEP14EthernetClient 0000043c  00000000  00000000  0000dd08  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN6APDWeb13web_startpageEP14EthernetClientPci 00000378  00000000  00000000  0000e144  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN6APDWeb10web_headerEP14EthernetClient 0000002a  00000000  00000000  0000e4bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN6APDWebD1Ev 00000030  00000000  00000000  0000e4e6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN6APDWebD2Ev 00000030  00000000  00000000  0000e516  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN6APDWeb24get_thingspeaklog_stringEPc 000001b6  00000000  00000000  0000e546  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN6APDWeb18thingspeak_loggingEv 0000021e  00000000  00000000  0000e6fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN6APDWeb21get_pachubelog_stringEPc 0000021c  00000000  00000000  0000e91a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN6APDWeb15pachube_loggingEv 000002f8  00000000  00000000  0000eb36  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN6APDWeb18get_lastlog_stringEPc 00000150  00000000  00000000  0000ee2e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN6APDWeb11web_loggingEv 00000236  00000000  00000000  0000ef7e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN6APDWeb15setup_webclientEv 0000003e  00000000  00000000  0000f1b4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_ 0000009c  00000000  00000000  0000f1f2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN6APDWeb26processProvisioningRequestEP14EthernetClient 0000041c  00000000  00000000  0000f28e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN6APDWeb10saveAPIkeyEPcS0_ 000000a6  00000000  00000000  0000f6aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN6APDWeb11dumpPachubeEv 0000019c  00000000  00000000  0000f750  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN6APDWeb9ListFilesE14EthernetClientPKch 000002c4  00000000  00000000  0000f8ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN6APDWeb9ServeFileE14EthernetClientPKc 00000178  00000000  00000000  0000fbb0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZN6APDWeb11loop_serverEv 000003ae  00000000  00000000  0000fd28  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage 000000d6  00000000  00000000  000100d6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZN6APDWeb15startWebLoggingEm 00000088  00000000  00000000  000101ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZN6APDWeb10loadAPIkeyEPcS0_ 00000112  00000000  00000000  00010234  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZN6APDWeb22setupThingSpeakLoggingEv 0000011e  00000000  00000000  00010346  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZN6APDWeb16setupCosmLoggingEv 0000011e  00000000  00000000  00010464  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZN6APDWeb9initBlankEP7APDTime 000002e2  00000000  00000000  00010582  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZN6APDWeb7wc_busyEv 0000009a  00000000  00000000  00010864  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZN6APDWeb13self_registerEv 00000294  00000000  00000000  000108fe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZN6APDWeb21registration_responseEPS_ 00000384  00000000  00000000  00010b92  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZN6APDWeb18setupAPDuinoOnlineEv 0000017c  00000000  00000000  00010f16  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZN6APDWeb5startEv 000002c4  00000000  00000000  00011092  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZN6APDWeb7restartEv 00000060  00000000  00000000  00011356  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZN6APDWeb4loopEv 00000118  00000000  00000000  000113b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZN6APDWebC1EP7NETCONFP7APDTime 00000080  00000000  00000000  000114ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZN6APDWebC2EP7NETCONFP7APDTime 00000080  00000000  00000000  0001154e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZN6APDWebC1EP7APDTime 00000034  00000000  00000000  000115ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZN6APDWebC2EP7APDTime 00000034  00000000  00000000  00011602  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZN6APDWebD0Ev 00000036  00000000  00000000  00011636  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .rodata._ZTV6APDWeb 00000008  00000000  00000000  0001166c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 60 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  00011674  2**0
                  ALLOC
 61 .progmem.data 00001084  00000000  00000000  00011674  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 62 .rodata._ZL9USERAGENT 00000009  00000000  00000000  000126f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 63 .rodata._ZL10WEBLOG_URI 00000011  00000000  00000000  00012701  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 64 .rodata._ZTV6Client 0000001c  00000000  00000000  00012712  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 65 .rodata._ZTV6Stream 00000010  00000000  00000000  0001272e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 66 .rodata._ZZN6APDWeb9initBlankEP7APDTimeE5C.134 00000006  00000000  00000000  0001273e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN6APDWeb13pause_serviceEv:

00000000 <_ZN6APDWeb13pause_serviceEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	fc 01       	movw	r30, r24
   2:	24 8d       	ldd	r18, Z+28	; 0x1c
   4:	35 8d       	ldd	r19, Z+29	; 0x1d
   6:	c9 01       	movw	r24, r18
   8:	83 70       	andi	r24, 0x03	; 3
   a:	90 70       	andi	r25, 0x00	; 0
   c:	03 97       	sbiw	r24, 0x03	; 3
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	01 f4       	brne	.+0      	; 0x10 <_ZN6APDWeb13pause_serviceEv+0x10>
  10:	22 fd       	sbrc	r18, 2
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN6APDWeb13pause_serviceEv+0x14>
  14:	24 60       	ori	r18, 0x04	; 4
  16:	35 8f       	std	Z+29, r19	; 0x1d
  18:	24 8f       	std	Z+28, r18	; 0x1c
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	08 95       	ret

Disassembly of section .text._ZN6APDWeb16continue_serviceEv:

00000000 <_ZN6APDWeb16continue_serviceEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	fc 01       	movw	r30, r24
   2:	24 8d       	ldd	r18, Z+28	; 0x1c
   4:	35 8d       	ldd	r19, Z+29	; 0x1d
   6:	20 ff       	sbrs	r18, 0
   8:	00 c0       	rjmp	.+0      	; 0xa <_ZN6APDWeb16continue_serviceEv+0xa>
   a:	c9 01       	movw	r24, r18
   c:	86 70       	andi	r24, 0x06	; 6
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	90 70       	andi	r25, 0x00	; 0
  10:	06 97       	sbiw	r24, 0x06	; 6
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN6APDWeb16continue_serviceEv+0x14>
  14:	2b 7f       	andi	r18, 0xFB	; 251
  16:	35 8f       	std	Z+29, r19	; 0x1d
  18:	24 8f       	std	Z+28, r18	; 0x1c
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	08 95       	ret

Disassembly of section .text._ZN6APDWeb14loop_webclientEv:

00000000 <_ZN6APDWeb14loop_webclientEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	aa a1       	ldd	r26, Y+34	; 0x22
   8:	bb a1       	ldd	r27, Y+35	; 0x23
   a:	10 97       	sbiw	r26, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6APDWeb14loop_webclientEv+0xe>
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6APDWeb14loop_webclientEv+0x10>
  10:	ed 91       	ld	r30, X+
  12:	fc 91       	ld	r31, X
  14:	11 97       	sbiw	r26, 0x01	; 1
  16:	04 80       	ldd	r0, Z+4	; 0x04
  18:	f5 81       	ldd	r31, Z+5	; 0x05
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	e0 2d       	mov	r30, r0
  1c:	cd 01       	movw	r24, r26
  1e:	19 95       	eicall
  20:	89 2b       	or	r24, r25
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN6APDWeb14loop_webclientEv+0x24>
  24:	ee a1       	ldd	r30, Y+38	; 0x26
  26:	ff a1       	ldd	r31, Y+39	; 0x27
  28:	30 97       	sbiw	r30, 0x00	; 0

	// TODO Auto-generated destructor stub
}
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN6APDWeb14loop_webclientEv+0x2c>
  2c:	ce 01       	movw	r24, r28
  2e:	19 95       	eicall
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN6APDWeb14loop_webclientEv+0x32>
  32:	ea a1       	ldd	r30, Y+34	; 0x22
  34:	fb a1       	ldd	r31, Y+35	; 0x23
  36:	a0 81       	ld	r26, Z
  38:	b1 81       	ldd	r27, Z+1	; 0x01
  3a:	16 96       	adiw	r26, 0x06	; 6
  3c:	2d 91       	ld	r18, X+
  3e:	3c 91       	ld	r19, X
  40:	17 97       	sbiw	r26, 0x07	; 7
  42:	cf 01       	movw	r24, r30
  44:	f9 01       	movw	r30, r18
  46:	19 95       	eicall
  48:	ea a1       	ldd	r30, Y+34	; 0x22
  4a:	fb a1       	ldd	r31, Y+35	; 0x23
  4c:	a0 81       	ld	r26, Z
  4e:	b1 81       	ldd	r27, Z+1	; 0x01
  50:	14 96       	adiw	r26, 0x04	; 4
  52:	2d 91       	ld	r18, X+
  54:	3c 91       	ld	r19, X
  56:	15 97       	sbiw	r26, 0x05	; 5
  58:	cf 01       	movw	r24, r30
  5a:	f9 01       	movw	r30, r18
  5c:	19 95       	eicall
  5e:	89 2b       	or	r24, r25
  60:	01 f4       	brne	.+0      	; 0x62 <_ZN6APDWeb14loop_webclientEv+0x62>
  62:	ea a1       	ldd	r30, Y+34	; 0x22
  64:	fb a1       	ldd	r31, Y+35	; 0x23
  66:	a0 81       	ld	r26, Z
  68:	b1 81       	ldd	r27, Z+1	; 0x01
  6a:	54 96       	adiw	r26, 0x14	; 20
  6c:	2d 91       	ld	r18, X+
  6e:	3c 91       	ld	r19, X
  70:	55 97       	sbiw	r26, 0x15	; 21
  72:	cf 01       	movw	r24, r30
  74:	f9 01       	movw	r30, r18
  76:	19 95       	eicall
  78:	88 23       	and	r24, r24
  7a:	01 f4       	brne	.+0      	; 0x7c <_ZN6APDWeb14loop_webclientEv+0x7c>
  7c:	ea a1       	ldd	r30, Y+34	; 0x22
  7e:	fb a1       	ldd	r31, Y+35	; 0x23
  80:	a0 81       	ld	r26, Z
  82:	b1 81       	ldd	r27, Z+1	; 0x01
  84:	52 96       	adiw	r26, 0x12	; 18
  86:	2d 91       	ld	r18, X+
  88:	3c 91       	ld	r19, X
  8a:	53 97       	sbiw	r26, 0x13	; 19
  8c:	cf 01       	movw	r24, r30
  8e:	f9 01       	movw	r30, r18
  90:	19 95       	eicall
  92:	18 a6       	std	Y+40, r1	; 0x28
  94:	df 91       	pop	r29
  96:	cf 91       	pop	r28
  98:	08 95       	ret

Disassembly of section .text._GLOBAL__I__ZN6APDWebC2EP7APDTime:

00000000 <_GLOBAL__I__ZN6APDWebC2EP7APDTime>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	40 e0       	ldi	r20, 0x00	; 0
   a:	20 e0       	ldi	r18, 0x00	; 0
   c:	00 e0       	ldi	r16, 0x00	; 0
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	0e 94 00 00 	call	0	; 0x0 <_GLOBAL__I__ZN6APDWebC2EP7APDTime>
  12:	0f 91       	pop	r16
  14:	08 95       	ret

Disassembly of section .text._ZN6APDWeb7failureEv:

00000000 <_ZN6APDWeb7failureEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7failureEv>
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	6b ad       	ldd	r22, Y+59	; 0x3b
  10:	7c ad       	ldd	r23, Y+60	; 0x3c
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	4a e0       	ldi	r20, 0x0A	; 10
  18:	50 e0       	ldi	r21, 0x00	; 0
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7failureEv>
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7failureEv>
  26:	8b ad       	ldd	r24, Y+59	; 0x3b
  28:	9c ad       	ldd	r25, Y+60	; 0x3c

	// TODO Auto-generated destructor stub
}
  2a:	01 96       	adiw	r24, 0x01	; 1
  2c:	9c af       	std	Y+60, r25	; 0x3c
  2e:	8b af       	std	Y+59, r24	; 0x3b
  30:	03 97       	sbiw	r24, 0x03	; 3
  32:	04 f0       	brlt	.+0      	; 0x34 <_ZN6APDWeb7failureEv+0x34>
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7failureEv>
  3c:	6b ad       	ldd	r22, Y+59	; 0x3b
  3e:	7c ad       	ldd	r23, Y+60	; 0x3c
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	4a e0       	ldi	r20, 0x0A	; 10
  46:	50 e0       	ldi	r21, 0x00	; 0
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7failureEv>
  4c:	81 e0       	ldi	r24, 0x01	; 1
  4e:	8f af       	std	Y+63, r24	; 0x3f
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7failureEv>
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	08 95       	ret

Disassembly of section .text._ZN6APDWeb11web_endpageEP14EthernetClient:

00000000 <_ZN6APDWeb11web_endpageEP14EthernetClient>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	eb 01       	movw	r28, r22
   6:	e8 81       	ld	r30, Y
   8:	f9 81       	ldd	r31, Y+1	; 0x01
   a:	06 88       	ldd	r0, Z+22	; 0x16
   c:	f7 89       	ldd	r31, Z+23	; 0x17
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	e0 2d       	mov	r30, r0
  10:	cb 01       	movw	r24, r22
  12:	19 95       	eicall
  14:	88 23       	and	r24, r24
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6APDWeb11web_endpageEP14EthernetClient+0x18>
  18:	ce 01       	movw	r24, r28
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	60 e0       	ldi	r22, 0x00	; 0
  1c:	70 e0       	ldi	r23, 0x00	; 0
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_endpageEP14EthernetClient>
  22:	61 e0       	ldi	r22, 0x01	; 1
  24:	70 e0       	ldi	r23, 0x00	; 0
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0

	// TODO Auto-generated destructor stub
}
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_endpageEP14EthernetClient>
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

Disassembly of section .text._ZN6APDWeb25new_thingspeakconf_parserEPviPc:

00000000 <_ZN6APDWeb25new_thingspeakconf_parserEPviPc>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a0 97       	sbiw	r28, 0x20	; 32
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	8d b7       	in	r24, 0x3d	; 61
  20:	9e b7       	in	r25, 0x3e	; 62
  22:	42 97       	sbiw	r24, 0x12	; 18
  24:	0f b6       	in	r0, 0x3f	; 63
  26:	f8 94       	cli
  28:	9e bf       	out	0x3e, r25	; 62

	// TODO Auto-generated destructor stub
}
  2a:	0f be       	out	0x3f, r0	; 63
  2c:	8d bf       	out	0x3d, r24	; 61
  2e:	ed b7       	in	r30, 0x3d	; 61
  30:	fe b7       	in	r31, 0x3e	; 62
  32:	31 96       	adiw	r30, 0x01	; 1
  34:	ad b7       	in	r26, 0x3d	; 61
  36:	be b7       	in	r27, 0x3e	; 62
  38:	12 96       	adiw	r26, 0x02	; 2
  3a:	5c 93       	st	X, r21
  3c:	4e 93       	st	-X, r20
  3e:	11 97       	sbiw	r26, 0x01	; 1
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	93 83       	std	Z+3, r25	; 0x03
  46:	82 83       	std	Z+2, r24	; 0x02
  48:	7e 01       	movw	r14, r28
  4a:	08 94       	sec
  4c:	e1 1c       	adc	r14, r1
  4e:	f1 1c       	adc	r15, r1
  50:	f5 82       	std	Z+5, r15	; 0x05
  52:	e4 82       	std	Z+4, r14	; 0x04
  54:	02 56       	subi	r16, 0x62	; 98
  56:	1f 4f       	sbci	r17, 0xFF	; 255
  58:	17 83       	std	Z+7, r17	; 0x07
  5a:	06 83       	std	Z+6, r16	; 0x06
  5c:	0f 5f       	subi	r16, 0xFF	; 255
  5e:	1f 4f       	sbci	r17, 0xFF	; 255
  60:	11 87       	std	Z+9, r17	; 0x09
  62:	00 87       	std	Z+8, r16	; 0x08
  64:	0f 5f       	subi	r16, 0xFF	; 255
  66:	1f 4f       	sbci	r17, 0xFF	; 255
  68:	13 87       	std	Z+11, r17	; 0x0b
  6a:	02 87       	std	Z+10, r16	; 0x0a
  6c:	0f 5f       	subi	r16, 0xFF	; 255
  6e:	1f 4f       	sbci	r17, 0xFF	; 255
  70:	15 87       	std	Z+13, r17	; 0x0d
  72:	04 87       	std	Z+12, r16	; 0x0c
  74:	0f 5d       	subi	r16, 0xDF	; 223
  76:	1f 4f       	sbci	r17, 0xFF	; 255
  78:	17 87       	std	Z+15, r17	; 0x0f
  7a:	06 87       	std	Z+14, r16	; 0x0e
  7c:	0e 5f       	subi	r16, 0xFE	; 254
  7e:	1f 4f       	sbci	r17, 0xFF	; 255
  80:	11 8b       	std	Z+17, r17	; 0x11
  82:	00 8b       	std	Z+16, r16	; 0x10
  84:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb25new_thingspeakconf_parserEPviPc>
  88:	8d b7       	in	r24, 0x3d	; 61
  8a:	9e b7       	in	r25, 0x3e	; 62
  8c:	42 96       	adiw	r24, 0x12	; 18
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	9e bf       	out	0x3e, r25	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	8d bf       	out	0x3d, r24	; 61
  98:	c8 01       	movw	r24, r16
  9a:	82 97       	sbiw	r24, 0x22	; 34
  9c:	b7 01       	movw	r22, r14
  9e:	4f e1       	ldi	r20, 0x1F	; 31
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb25new_thingspeakconf_parserEPviPc>
  a6:	a0 96       	adiw	r28, 0x20	; 32
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
  b2:	cf 91       	pop	r28
  b4:	df 91       	pop	r29
  b6:	1f 91       	pop	r17
  b8:	0f 91       	pop	r16
  ba:	ff 90       	pop	r15
  bc:	ef 90       	pop	r14
  be:	08 95       	ret

Disassembly of section .text._ZN6APDWeb19new_cosmconf_parserEPviPc:

00000000 <_ZN6APDWeb19new_cosmconf_parserEPviPc>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a0 97       	sbiw	r28, 0x20	; 32
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	8d b7       	in	r24, 0x3d	; 61
  20:	9e b7       	in	r25, 0x3e	; 62
  22:	44 97       	sbiw	r24, 0x14	; 20
  24:	0f b6       	in	r0, 0x3f	; 63
  26:	f8 94       	cli
  28:	9e bf       	out	0x3e, r25	; 62

	// TODO Auto-generated destructor stub
}
  2a:	0f be       	out	0x3f, r0	; 63
  2c:	8d bf       	out	0x3d, r24	; 61
  2e:	ed b7       	in	r30, 0x3d	; 61
  30:	fe b7       	in	r31, 0x3e	; 62
  32:	31 96       	adiw	r30, 0x01	; 1
  34:	ad b7       	in	r26, 0x3d	; 61
  36:	be b7       	in	r27, 0x3e	; 62
  38:	12 96       	adiw	r26, 0x02	; 2
  3a:	5c 93       	st	X, r21
  3c:	4e 93       	st	-X, r20
  3e:	11 97       	sbiw	r26, 0x01	; 1
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	93 83       	std	Z+3, r25	; 0x03
  46:	82 83       	std	Z+2, r24	; 0x02
  48:	7e 01       	movw	r14, r28
  4a:	08 94       	sec
  4c:	e1 1c       	adc	r14, r1
  4e:	f1 1c       	adc	r15, r1
  50:	f5 82       	std	Z+5, r15	; 0x05
  52:	e4 82       	std	Z+4, r14	; 0x04
  54:	00 59       	subi	r16, 0x90	; 144
  56:	1f 4f       	sbci	r17, 0xFF	; 255
  58:	17 83       	std	Z+7, r17	; 0x07
  5a:	06 83       	std	Z+6, r16	; 0x06
  5c:	0f 5f       	subi	r16, 0xFF	; 255
  5e:	1f 4f       	sbci	r17, 0xFF	; 255
  60:	11 87       	std	Z+9, r17	; 0x09
  62:	00 87       	std	Z+8, r16	; 0x08
  64:	0f 5f       	subi	r16, 0xFF	; 255
  66:	1f 4f       	sbci	r17, 0xFF	; 255
  68:	13 87       	std	Z+11, r17	; 0x0b
  6a:	02 87       	std	Z+10, r16	; 0x0a
  6c:	0f 5f       	subi	r16, 0xFF	; 255
  6e:	1f 4f       	sbci	r17, 0xFF	; 255
  70:	15 87       	std	Z+13, r17	; 0x0d
  72:	04 87       	std	Z+12, r16	; 0x0c
  74:	0f 5d       	subi	r16, 0xDF	; 223
  76:	1f 4f       	sbci	r17, 0xFF	; 255
  78:	17 87       	std	Z+15, r17	; 0x0f
  7a:	06 87       	std	Z+14, r16	; 0x0e
  7c:	0e 5f       	subi	r16, 0xFE	; 254
  7e:	1f 4f       	sbci	r17, 0xFF	; 255
  80:	11 8b       	std	Z+17, r17	; 0x11
  82:	00 8b       	std	Z+16, r16	; 0x10
  84:	0c 5f       	subi	r16, 0xFC	; 252
  86:	1f 4f       	sbci	r17, 0xFF	; 255
  88:	13 8b       	std	Z+19, r17	; 0x13
  8a:	02 8b       	std	Z+18, r16	; 0x12
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb19new_cosmconf_parserEPviPc>
  90:	8d b7       	in	r24, 0x3d	; 61
  92:	9e b7       	in	r25, 0x3e	; 62
  94:	44 96       	adiw	r24, 0x14	; 20
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	9e bf       	out	0x3e, r25	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	8d bf       	out	0x3d, r24	; 61
  a0:	c8 01       	movw	r24, r16
  a2:	86 97       	sbiw	r24, 0x26	; 38
  a4:	b7 01       	movw	r22, r14
  a6:	4f e1       	ldi	r20, 0x1F	; 31
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb19new_cosmconf_parserEPviPc>
  ae:	a0 96       	adiw	r28, 0x20	; 32
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	1f 91       	pop	r17
  c0:	0f 91       	pop	r16
  c2:	ff 90       	pop	r15
  c4:	ef 90       	pop	r14
  c6:	08 95       	ret

Disassembly of section .text._ZN6APDWeb22new_apduinoconf_parserEPviPc:

00000000 <_ZN6APDWeb22new_apduinoconf_parserEPviPc>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a4 97       	sbiw	r28, 0x24	; 36
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	80 e6       	ldi	r24, 0x60	; 96
  20:	9a ee       	ldi	r25, 0xEA	; 234
  22:	a0 e0       	ldi	r26, 0x00	; 0
  24:	b0 e0       	ldi	r27, 0x00	; 0
  26:	89 83       	std	Y+1, r24	; 0x01
  28:	9a 83       	std	Y+2, r25	; 0x02

	// TODO Auto-generated destructor stub
}
  2a:	ab 83       	std	Y+3, r26	; 0x03
  2c:	bc 83       	std	Y+4, r27	; 0x04
  2e:	8d b7       	in	r24, 0x3d	; 61
  30:	9e b7       	in	r25, 0x3e	; 62
  32:	42 97       	sbiw	r24, 0x12	; 18
  34:	0f b6       	in	r0, 0x3f	; 63
  36:	f8 94       	cli
  38:	9e bf       	out	0x3e, r25	; 62
  3a:	0f be       	out	0x3f, r0	; 63
  3c:	8d bf       	out	0x3d, r24	; 61
  3e:	ed b7       	in	r30, 0x3d	; 61
  40:	fe b7       	in	r31, 0x3e	; 62
  42:	31 96       	adiw	r30, 0x01	; 1
  44:	ad b7       	in	r26, 0x3d	; 61
  46:	be b7       	in	r27, 0x3e	; 62
  48:	12 96       	adiw	r26, 0x02	; 2
  4a:	5c 93       	st	X, r21
  4c:	4e 93       	st	-X, r20
  4e:	11 97       	sbiw	r26, 0x01	; 1
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	93 83       	std	Z+3, r25	; 0x03
  56:	82 83       	std	Z+2, r24	; 0x02
  58:	85 e0       	ldi	r24, 0x05	; 5
  5a:	e8 2e       	mov	r14, r24
  5c:	f1 2c       	mov	r15, r1
  5e:	ec 0e       	add	r14, r28
  60:	fd 1e       	adc	r15, r29
  62:	f5 82       	std	Z+5, r15	; 0x05
  64:	e4 82       	std	Z+4, r14	; 0x04
  66:	0a 5b       	subi	r16, 0xBA	; 186
  68:	1f 4f       	sbci	r17, 0xFF	; 255
  6a:	17 83       	std	Z+7, r17	; 0x07
  6c:	06 83       	std	Z+6, r16	; 0x06
  6e:	0f 5f       	subi	r16, 0xFF	; 255
  70:	1f 4f       	sbci	r17, 0xFF	; 255
  72:	11 87       	std	Z+9, r17	; 0x09
  74:	00 87       	std	Z+8, r16	; 0x08
  76:	0f 5f       	subi	r16, 0xFF	; 255
  78:	1f 4f       	sbci	r17, 0xFF	; 255
  7a:	13 87       	std	Z+11, r17	; 0x0b
  7c:	02 87       	std	Z+10, r16	; 0x0a
  7e:	0f 5f       	subi	r16, 0xFF	; 255
  80:	1f 4f       	sbci	r17, 0xFF	; 255
  82:	15 87       	std	Z+13, r17	; 0x0d
  84:	04 87       	std	Z+12, r16	; 0x0c
  86:	0f 5d       	subi	r16, 0xDF	; 223
  88:	1f 4f       	sbci	r17, 0xFF	; 255
  8a:	17 87       	std	Z+15, r17	; 0x0f
  8c:	06 87       	std	Z+14, r16	; 0x0e
  8e:	ce 01       	movw	r24, r28
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	91 8b       	std	Z+17, r25	; 0x11
  94:	80 8b       	std	Z+16, r24	; 0x10
  96:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22new_apduinoconf_parserEPviPc>
  9a:	8d b7       	in	r24, 0x3d	; 61
  9c:	9e b7       	in	r25, 0x3e	; 62
  9e:	42 96       	adiw	r24, 0x12	; 18
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	9e bf       	out	0x3e, r25	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	8d bf       	out	0x3d, r24	; 61
  aa:	c8 01       	movw	r24, r16
  ac:	80 97       	sbiw	r24, 0x20	; 32
  ae:	b7 01       	movw	r22, r14
  b0:	4f e1       	ldi	r20, 0x1F	; 31
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22new_apduinoconf_parserEPviPc>
  b8:	a4 96       	adiw	r28, 0x24	; 36
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	ff 90       	pop	r15
  ce:	ef 90       	pop	r14
  d0:	08 95       	ret

Disassembly of section .text._ZN6APDWeb9myCPrintPEP14EthernetClientPv:

00000000 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	7b 01       	movw	r14, r22
  18:	61 15       	cp	r22, r1
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	71 05       	cpc	r23, r1
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN6APDWeb9myCPrintPEP14EthernetClientPv+0x1e>
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv+0x22>
  22:	cb 01       	movw	r24, r22
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>
  28:	6c 01       	movw	r12, r24

	// TODO Auto-generated destructor stub
}
  2a:	8c 01       	movw	r16, r24
  2c:	0f 5f       	subi	r16, 0xFF	; 255
  2e:	1f 4f       	sbci	r17, 0xFF	; 255
  30:	c8 01       	movw	r24, r16
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>
  36:	ec 01       	movw	r28, r24
  38:	00 97       	sbiw	r24, 0x00	; 0
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN6APDWeb9myCPrintPEP14EthernetClientPv+0x3c>
  3c:	60 e0       	ldi	r22, 0x00	; 0
  3e:	70 e0       	ldi	r23, 0x00	; 0
  40:	a8 01       	movw	r20, r16
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>
  46:	ce 01       	movw	r24, r28
  48:	b7 01       	movw	r22, r14
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>
  4e:	c5 01       	movw	r24, r10
  50:	be 01       	movw	r22, r28
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>
  56:	ce 01       	movw	r24, r28
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_ZN6APDWeb9myCPrintPEP14EthernetClientPv+0x5e>
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	b6 01       	movw	r22, r12
  6c:	4a e0       	ldi	r20, 0x0A	; 10
  6e:	50 e0       	ldi	r21, 0x00	; 0
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9myCPrintPEP14EthernetClientPv>
  7c:	df 91       	pop	r29
  7e:	cf 91       	pop	r28
  80:	1f 91       	pop	r17
  82:	0f 91       	pop	r16
  84:	ff 90       	pop	r15
  86:	ef 90       	pop	r14
  88:	df 90       	pop	r13
  8a:	cf 90       	pop	r12
  8c:	bf 90       	pop	r11
  8e:	af 90       	pop	r10
  90:	08 95       	ret

Disassembly of section .text._ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_:

00000000 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	f8 2e       	mov	r15, r24
  16:	e9 2e       	mov	r14, r25
  18:	eb 01       	movw	r28, r22
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	6a 01       	movw	r12, r20
  1c:	59 01       	movw	r10, r18
  1e:	16 16       	cp	r1, r22
  20:	17 06       	cpc	r1, r23
  22:	04 f4       	brge	.+0      	; 0x24 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_+0x24>
  24:	60 e0       	ldi	r22, 0x00	; 0
  26:	70 e0       	ldi	r23, 0x00	; 0
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>

	// TODO Auto-generated destructor stub
}
  2c:	8f 2d       	mov	r24, r15
  2e:	9e 2d       	mov	r25, r14
  30:	60 e0       	ldi	r22, 0x00	; 0
  32:	70 e0       	ldi	r23, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  38:	8f 2d       	mov	r24, r15
  3a:	9e 2d       	mov	r25, r14
  3c:	be 01       	movw	r22, r28
  3e:	4a e0       	ldi	r20, 0x0A	; 10
  40:	50 e0       	ldi	r21, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  46:	8f 2d       	mov	r24, r15
  48:	9e 2d       	mov	r25, r14
  4a:	60 e0       	ldi	r22, 0x00	; 0
  4c:	70 e0       	ldi	r23, 0x00	; 0
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  52:	8f 2d       	mov	r24, r15
  54:	9e 2d       	mov	r25, r14
  56:	60 e0       	ldi	r22, 0x00	; 0
  58:	70 e0       	ldi	r23, 0x00	; 0
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  5e:	8f 2d       	mov	r24, r15
  60:	9e 2d       	mov	r25, r14
  62:	b6 01       	movw	r22, r12
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  68:	8f 2d       	mov	r24, r15
  6a:	9e 2d       	mov	r25, r14
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  74:	8f 2d       	mov	r24, r15
  76:	9e 2d       	mov	r25, r14
  78:	b5 01       	movw	r22, r10
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  7e:	8f 2d       	mov	r24, r15
  80:	9e 2d       	mov	r25, r14
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  8a:	8f 2d       	mov	r24, r15
  8c:	9e 2d       	mov	r25, r14
  8e:	b8 01       	movw	r22, r16
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  94:	8f 2d       	mov	r24, r15
  96:	9e 2d       	mov	r25, r14
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15json_array_itemEP14EthernetClientiPKcS3_S3_>
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	1f 91       	pop	r17
  a6:	0f 91       	pop	r16
  a8:	ff 90       	pop	r15
  aa:	ef 90       	pop	r14
  ac:	df 90       	pop	r13
  ae:	cf 90       	pop	r12
  b0:	bf 90       	pop	r11
  b2:	af 90       	pop	r10
  b4:	08 95       	ret

Disassembly of section .text._ZN6APDWeb11json_statusEP14EthernetClient:

00000000 <_ZN6APDWeb11json_statusEP14EthernetClient>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	df 93       	push	r29
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	cf 93       	push	r28
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
  20:	64 97       	sbiw	r28, 0x14	; 20
  22:	0f b6       	in	r0, 0x3f	; 63
  24:	f8 94       	cli
  26:	de bf       	out	0x3e, r29	; 62
  28:	0f be       	out	0x3f, r0	; 63

	// TODO Auto-generated destructor stub
}
  2a:	cd bf       	out	0x3d, r28	; 61
  2c:	4c 01       	movw	r8, r24
  2e:	6b 01       	movw	r12, r22
  30:	db 01       	movw	r26, r22
  32:	ed 91       	ld	r30, X+
  34:	fc 91       	ld	r31, X
  36:	06 88       	ldd	r0, Z+22	; 0x16
  38:	f7 89       	ldd	r31, Z+23	; 0x17
  3a:	e0 2d       	mov	r30, r0
  3c:	cb 01       	movw	r24, r22
  3e:	19 95       	eicall
  40:	88 23       	and	r24, r24
  42:	01 f4       	brne	.+0      	; 0x44 <_ZN6APDWeb11json_statusEP14EthernetClient+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN6APDWeb11json_statusEP14EthernetClient+0x46>
  46:	19 82       	std	Y+1, r1	; 0x01
  48:	1a 82       	std	Y+2, r1	; 0x02
  4a:	1b 82       	std	Y+3, r1	; 0x03
  4c:	1c 82       	std	Y+4, r1	; 0x04
  4e:	fe 01       	movw	r30, r28
  50:	35 96       	adiw	r30, 0x05	; 5
  52:	80 e1       	ldi	r24, 0x10	; 16
  54:	df 01       	movw	r26, r30
  56:	1d 92       	st	X+, r1
  58:	8a 95       	dec	r24
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6APDWeb11json_statusEP14EthernetClient+0x5c>
  5c:	c6 01       	movw	r24, r12
  5e:	60 e0       	ldi	r22, 0x00	; 0
  60:	70 e0       	ldi	r23, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
  66:	c6 01       	movw	r24, r12
  68:	60 e0       	ldi	r22, 0x00	; 0
  6a:	70 e0       	ldi	r23, 0x00	; 0
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
  70:	ed b7       	in	r30, 0x3d	; 61
  72:	fe b7       	in	r31, 0x3e	; 62
  74:	38 97       	sbiw	r30, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	fe bf       	out	0x3e, r31	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	ed bf       	out	0x3d, r30	; 61
  80:	31 96       	adiw	r30, 0x01	; 1
  82:	7e 01       	movw	r14, r28
  84:	08 94       	sec
  86:	e1 1c       	adc	r14, r1
  88:	f1 1c       	adc	r15, r1
  8a:	ad b7       	in	r26, 0x3d	; 61
  8c:	be b7       	in	r27, 0x3e	; 62
  8e:	12 96       	adiw	r26, 0x02	; 2
  90:	fc 92       	st	X, r15
  92:	ee 92       	st	-X, r14
  94:	11 97       	sbiw	r26, 0x01	; 1
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	93 83       	std	Z+3, r25	; 0x03
  9c:	82 83       	std	Z+2, r24	; 0x02
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	95 83       	std	Z+5, r25	; 0x05
  a4:	84 83       	std	Z+4, r24	; 0x04
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	97 83       	std	Z+7, r25	; 0x07
  ac:	86 83       	std	Z+6, r24	; 0x06
  ae:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
  b2:	ed b7       	in	r30, 0x3d	; 61
  b4:	fe b7       	in	r31, 0x3e	; 62
  b6:	38 96       	adiw	r30, 0x08	; 8
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	fe bf       	out	0x3e, r31	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	ed bf       	out	0x3d, r30	; 61
  c2:	c6 01       	movw	r24, r12
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	97 01       	movw	r18, r14
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
  d6:	c7 01       	movw	r24, r14
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
  e0:	d4 01       	movw	r26, r8
  e2:	9a 96       	adiw	r26, 0x2a	; 42
  e4:	8d 91       	ld	r24, X+
  e6:	9c 91       	ld	r25, X
  e8:	9b 97       	sbiw	r26, 0x2b	; 43
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	01 f0       	breq	.+0      	; 0xee <_ZN6APDWeb11json_statusEP14EthernetClient+0xee>
  ee:	b7 01       	movw	r22, r14
  f0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
  f4:	c6 01       	movw	r24, r12
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	7e 01       	movw	r14, r28
 100:	08 94       	sec
 102:	e1 1c       	adc	r14, r1
 104:	f1 1c       	adc	r15, r1
 106:	97 01       	movw	r18, r14
 108:	00 e0       	ldi	r16, 0x00	; 0
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 110:	f4 01       	movw	r30, r8
 112:	82 a5       	ldd	r24, Z+42	; 0x2a
 114:	93 a5       	ldd	r25, Z+43	; 0x2b
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	01 f0       	breq	.+0      	; 0x11a <_ZN6APDWeb11json_statusEP14EthernetClient+0x11a>
 11a:	b7 01       	movw	r22, r14
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 120:	c6 01       	movw	r24, r12
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	7e 01       	movw	r14, r28
 12c:	08 94       	sec
 12e:	e1 1c       	adc	r14, r1
 130:	f1 1c       	adc	r15, r1
 132:	97 01       	movw	r18, r14
 134:	00 e0       	ldi	r16, 0x00	; 0
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 13c:	d4 01       	movw	r26, r8
 13e:	94 96       	adiw	r26, 0x24	; 36
 140:	6d 91       	ld	r22, X+
 142:	7c 91       	ld	r23, X
 144:	95 97       	sbiw	r26, 0x25	; 37
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 14e:	45 e0       	ldi	r20, 0x05	; 5
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	87 01       	movw	r16, r14
 154:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 158:	9c 01       	movw	r18, r24
 15a:	c6 01       	movw	r24, r12
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 16c:	f4 01       	movw	r30, r8
 16e:	63 ad       	ldd	r22, Z+59	; 0x3b
 170:	74 ad       	ldd	r23, Z+60	; 0x3c
 172:	88 27       	eor	r24, r24
 174:	77 fd       	sbrc	r23, 7
 176:	80 95       	com	r24
 178:	98 2f       	mov	r25, r24
 17a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 17e:	45 e0       	ldi	r20, 0x05	; 5
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	87 01       	movw	r16, r14
 184:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 188:	9c 01       	movw	r18, r24
 18a:	c6 01       	movw	r24, r12
 18c:	64 e0       	ldi	r22, 0x04	; 4
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	00 e0       	ldi	r16, 0x00	; 0
 196:	10 e0       	ldi	r17, 0x00	; 0
 198:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 19c:	d4 01       	movw	r26, r8
 19e:	dd 96       	adiw	r26, 0x3d	; 61
 1a0:	6d 91       	ld	r22, X+
 1a2:	7c 91       	ld	r23, X
 1a4:	de 97       	sbiw	r26, 0x3e	; 62
 1a6:	88 27       	eor	r24, r24
 1a8:	77 fd       	sbrc	r23, 7
 1aa:	80 95       	com	r24
 1ac:	98 2f       	mov	r25, r24
 1ae:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 1b2:	45 e0       	ldi	r20, 0x05	; 5
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	87 01       	movw	r16, r14
 1b8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 1bc:	9c 01       	movw	r18, r24
 1be:	c6 01       	movw	r24, r12
 1c0:	65 e0       	ldi	r22, 0x05	; 5
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	00 e0       	ldi	r16, 0x00	; 0
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 1d0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 1d4:	aa 27       	eor	r26, r26
 1d6:	97 fd       	sbrc	r25, 7
 1d8:	a0 95       	com	r26
 1da:	ba 2f       	mov	r27, r26
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 1e4:	45 e0       	ldi	r20, 0x05	; 5
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	87 01       	movw	r16, r14
 1ea:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 1ee:	9c 01       	movw	r18, r24
 1f0:	c6 01       	movw	r24, r12
 1f2:	66 e0       	ldi	r22, 0x06	; 6
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 202:	c6 01       	movw	r24, r12
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 20c:	c6 01       	movw	r24, r12
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 216:	aa 24       	eor	r10, r10
 218:	bb 24       	eor	r11, r11
 21a:	37 01       	movw	r6, r14
 21c:	00 c0       	rjmp	.+0      	; 0x21e <_ZN6APDWeb11json_statusEP14EthernetClient+0x21e>
 21e:	85 01       	movw	r16, r10
 220:	00 0f       	add	r16, r16
 222:	11 1f       	adc	r17, r17
 224:	d4 01       	movw	r26, r8
 226:	9e 96       	adiw	r26, 0x2e	; 46
 228:	ed 91       	ld	r30, X+
 22a:	fc 91       	ld	r31, X
 22c:	9f 97       	sbiw	r26, 0x2f	; 47
 22e:	e0 0f       	add	r30, r16
 230:	f1 1f       	adc	r31, r17
 232:	e0 80       	ld	r14, Z
 234:	f1 80       	ldd	r15, Z+1	; 0x01
 236:	d7 01       	movw	r26, r14
 238:	ed 91       	ld	r30, X+
 23a:	fc 91       	ld	r31, X
 23c:	06 80       	ldd	r0, Z+6	; 0x06
 23e:	f7 81       	ldd	r31, Z+7	; 0x07
 240:	e0 2d       	mov	r30, r0
 242:	c7 01       	movw	r24, r14
 244:	b3 01       	movw	r22, r6
 246:	19 95       	eicall
 248:	9c 01       	movw	r18, r24
 24a:	d4 01       	movw	r26, r8
 24c:	9e 96       	adiw	r26, 0x2e	; 46
 24e:	ed 91       	ld	r30, X+
 250:	fc 91       	ld	r31, X
 252:	9f 97       	sbiw	r26, 0x2f	; 47
 254:	e0 0f       	add	r30, r16
 256:	f1 1f       	adc	r31, r17
 258:	01 90       	ld	r0, Z+
 25a:	f0 81       	ld	r31, Z
 25c:	e0 2d       	mov	r30, r0
 25e:	83 8d       	ldd	r24, Z+27	; 0x1b
 260:	94 8d       	ldd	r25, Z+28	; 0x1c
 262:	89 2b       	or	r24, r25
 264:	01 f4       	brne	.+0      	; 0x266 <_ZN6APDWeb11json_statusEP14EthernetClient+0x266>
 266:	00 e0       	ldi	r16, 0x00	; 0
 268:	10 e0       	ldi	r17, 0x00	; 0
 26a:	00 c0       	rjmp	.+0      	; 0x26c <_ZN6APDWeb11json_statusEP14EthernetClient+0x26c>
 26c:	00 e0       	ldi	r16, 0x00	; 0
 26e:	10 e0       	ldi	r17, 0x00	; 0
 270:	e2 e0       	ldi	r30, 0x02	; 2
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	ee 0e       	add	r14, r30
 276:	ff 1e       	adc	r15, r31
 278:	c6 01       	movw	r24, r12
 27a:	b5 01       	movw	r22, r10
 27c:	a7 01       	movw	r20, r14
 27e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 282:	08 94       	sec
 284:	a1 1c       	adc	r10, r1
 286:	b1 1c       	adc	r11, r1
 288:	d4 01       	movw	r26, r8
 28a:	d0 96       	adiw	r26, 0x30	; 48
 28c:	8d 91       	ld	r24, X+
 28e:	9c 91       	ld	r25, X
 290:	d1 97       	sbiw	r26, 0x31	; 49
 292:	a8 16       	cp	r10, r24
 294:	b9 06       	cpc	r11, r25
 296:	04 f0       	brlt	.+0      	; 0x298 <_ZN6APDWeb11json_statusEP14EthernetClient+0x298>
 298:	c6 01       	movw	r24, r12
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 2a2:	c6 01       	movw	r24, r12
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 2ac:	aa 24       	eor	r10, r10
 2ae:	bb 24       	eor	r11, r11
 2b0:	3e 01       	movw	r6, r28
 2b2:	08 94       	sec
 2b4:	61 1c       	adc	r6, r1
 2b6:	71 1c       	adc	r7, r1
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <_ZN6APDWeb11json_statusEP14EthernetClient+0x2ba>
 2ba:	85 01       	movw	r16, r10
 2bc:	00 0f       	add	r16, r16
 2be:	11 1f       	adc	r17, r17
 2c0:	d4 01       	movw	r26, r8
 2c2:	d2 96       	adiw	r26, 0x32	; 50
 2c4:	ed 91       	ld	r30, X+
 2c6:	fc 91       	ld	r31, X
 2c8:	d3 97       	sbiw	r26, 0x33	; 51
 2ca:	e0 0f       	add	r30, r16
 2cc:	f1 1f       	adc	r31, r17
 2ce:	e0 80       	ld	r14, Z
 2d0:	f1 80       	ldd	r15, Z+1	; 0x01
 2d2:	c7 01       	movw	r24, r14
 2d4:	b3 01       	movw	r22, r6
 2d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 2da:	9c 01       	movw	r18, r24
 2dc:	d4 01       	movw	r26, r8
 2de:	d2 96       	adiw	r26, 0x32	; 50
 2e0:	ed 91       	ld	r30, X+
 2e2:	fc 91       	ld	r31, X
 2e4:	d3 97       	sbiw	r26, 0x33	; 51
 2e6:	e0 0f       	add	r30, r16
 2e8:	f1 1f       	adc	r31, r17
 2ea:	01 90       	ld	r0, Z+
 2ec:	f0 81       	ld	r31, Z
 2ee:	e0 2d       	mov	r30, r0
 2f0:	85 89       	ldd	r24, Z+21	; 0x15
 2f2:	96 89       	ldd	r25, Z+22	; 0x16
 2f4:	89 2b       	or	r24, r25
 2f6:	01 f4       	brne	.+0      	; 0x2f8 <_ZN6APDWeb11json_statusEP14EthernetClient+0x2f8>
 2f8:	00 e0       	ldi	r16, 0x00	; 0
 2fa:	10 e0       	ldi	r17, 0x00	; 0
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <_ZN6APDWeb11json_statusEP14EthernetClient+0x2fe>
 2fe:	00 e0       	ldi	r16, 0x00	; 0
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	e2 e0       	ldi	r30, 0x02	; 2
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ee 0e       	add	r14, r30
 308:	ff 1e       	adc	r15, r31
 30a:	c6 01       	movw	r24, r12
 30c:	b5 01       	movw	r22, r10
 30e:	a7 01       	movw	r20, r14
 310:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 314:	08 94       	sec
 316:	a1 1c       	adc	r10, r1
 318:	b1 1c       	adc	r11, r1
 31a:	d4 01       	movw	r26, r8
 31c:	d4 96       	adiw	r26, 0x34	; 52
 31e:	8d 91       	ld	r24, X+
 320:	9c 91       	ld	r25, X
 322:	d5 97       	sbiw	r26, 0x35	; 53
 324:	a8 16       	cp	r10, r24
 326:	b9 06       	cpc	r11, r25
 328:	04 f0       	brlt	.+0      	; 0x32a <_ZN6APDWeb11json_statusEP14EthernetClient+0x32a>
 32a:	c6 01       	movw	r24, r12
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 334:	c6 01       	movw	r24, r12
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 33e:	ee 24       	eor	r14, r14
 340:	ff 24       	eor	r15, r15
 342:	5e 01       	movw	r10, r28
 344:	08 94       	sec
 346:	a1 1c       	adc	r10, r1
 348:	b1 1c       	adc	r11, r1
 34a:	00 c0       	rjmp	.+0      	; 0x34c <_ZN6APDWeb11json_statusEP14EthernetClient+0x34c>
 34c:	c7 01       	movw	r24, r14
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	d4 01       	movw	r26, r8
 354:	d6 96       	adiw	r26, 0x36	; 54
 356:	ed 91       	ld	r30, X+
 358:	fc 91       	ld	r31, X
 35a:	d7 97       	sbiw	r26, 0x37	; 55
 35c:	e8 0f       	add	r30, r24
 35e:	f9 1f       	adc	r31, r25
 360:	00 81       	ld	r16, Z
 362:	11 81       	ldd	r17, Z+1	; 0x01
 364:	c8 01       	movw	r24, r16
 366:	b5 01       	movw	r22, r10
 368:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 36c:	9c 01       	movw	r18, r24
 36e:	0e 5f       	subi	r16, 0xFE	; 254
 370:	1f 4f       	sbci	r17, 0xFF	; 255
 372:	c6 01       	movw	r24, r12
 374:	b7 01       	movw	r22, r14
 376:	a8 01       	movw	r20, r16
 378:	00 e0       	ldi	r16, 0x00	; 0
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 380:	08 94       	sec
 382:	e1 1c       	adc	r14, r1
 384:	f1 1c       	adc	r15, r1
 386:	f4 01       	movw	r30, r8
 388:	80 ad       	ldd	r24, Z+56	; 0x38
 38a:	91 ad       	ldd	r25, Z+57	; 0x39
 38c:	e8 16       	cp	r14, r24
 38e:	f9 06       	cpc	r15, r25
 390:	04 f0       	brlt	.+0      	; 0x392 <_ZN6APDWeb11json_statusEP14EthernetClient+0x392>
 392:	c6 01       	movw	r24, r12
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 39c:	c6 01       	movw	r24, r12
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <_ZN6APDWeb11json_statusEP14EthernetClient+0x3b8>
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_statusEP14EthernetClient>
 3c0:	64 96       	adiw	r28, 0x14	; 20
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	cf 91       	pop	r28
 3ce:	df 91       	pop	r29
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	df 90       	pop	r13
 3da:	cf 90       	pop	r12
 3dc:	bf 90       	pop	r11
 3de:	af 90       	pop	r10
 3e0:	9f 90       	pop	r9
 3e2:	8f 90       	pop	r8
 3e4:	7f 90       	pop	r7
 3e6:	6f 90       	pop	r6
 3e8:	08 95       	ret

Disassembly of section .text._ZN6APDWeb11json_headerEP14EthernetClient:

00000000 <_ZN6APDWeb11json_headerEP14EthernetClient>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	70 e0       	ldi	r23, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_headerEP14EthernetClient>
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	c8 01       	movw	r24, r16
  10:	60 e0       	ldi	r22, 0x00	; 0
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_headerEP14EthernetClient>
  18:	61 e0       	ldi	r22, 0x01	; 1
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	70 e0       	ldi	r23, 0x00	; 0
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11json_headerEP14EthernetClient>
  24:	1f 91       	pop	r17
  26:	0f 91       	pop	r16
  28:	08 95       	ret

Disassembly of section .text._ZN6APDWeb17claim_device_linkEP14EthernetClient:

00000000 <_ZN6APDWeb17claim_device_linkEP14EthernetClient>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	eb 01       	movw	r28, r22
   c:	e8 81       	ld	r30, Y
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	f9 81       	ldd	r31, Y+1	; 0x01
  10:	06 88       	ldd	r0, Z+22	; 0x16
  12:	f7 89       	ldd	r31, Z+23	; 0x17
  14:	e0 2d       	mov	r30, r0
  16:	cb 01       	movw	r24, r22
  18:	19 95       	eicall
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	88 23       	and	r24, r24
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN6APDWeb17claim_device_linkEP14EthernetClient+0x1e>
  1e:	ce 01       	movw	r24, r28
  20:	60 e0       	ldi	r22, 0x00	; 0
  22:	70 e0       	ldi	r23, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb17claim_device_linkEP14EthernetClient>
  28:	06 5b       	subi	r16, 0xB6	; 182

	// TODO Auto-generated destructor stub
}
  2a:	1f 4f       	sbci	r17, 0xFF	; 255
  2c:	ce 01       	movw	r24, r28
  2e:	b8 01       	movw	r22, r16
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb17claim_device_linkEP14EthernetClient>
  34:	ce 01       	movw	r24, r28
  36:	60 e0       	ldi	r22, 0x00	; 0
  38:	70 e0       	ldi	r23, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb17claim_device_linkEP14EthernetClient>
  3e:	02 58       	subi	r16, 0x82	; 130
  40:	1f 4f       	sbci	r17, 0xFF	; 255
  42:	ce 01       	movw	r24, r28
  44:	b8 01       	movw	r22, r16
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb17claim_device_linkEP14EthernetClient>
  4a:	ce 01       	movw	r24, r28
  4c:	60 e0       	ldi	r22, 0x00	; 0
  4e:	70 e0       	ldi	r23, 0x00	; 0
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb17claim_device_linkEP14EthernetClient>
  54:	ce 01       	movw	r24, r28
  56:	60 e0       	ldi	r22, 0x00	; 0
  58:	70 e0       	ldi	r23, 0x00	; 0
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb17claim_device_linkEP14EthernetClient>
  5e:	61 e0       	ldi	r22, 0x01	; 1
  60:	70 e0       	ldi	r23, 0x00	; 0
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb17claim_device_linkEP14EthernetClient>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN6APDWeb17claim_device_linkEP14EthernetClient+0x6c>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb17claim_device_linkEP14EthernetClient>
  74:	df 91       	pop	r29
  76:	cf 91       	pop	r28
  78:	1f 91       	pop	r17
  7a:	0f 91       	pop	r16
  7c:	08 95       	ret

Disassembly of section .text._ZN6APDWeb12web_notfoundEP14EthernetClient:

00000000 <_ZN6APDWeb12web_notfoundEP14EthernetClient>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	70 e0       	ldi	r23, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb12web_notfoundEP14EthernetClient>
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	c8 01       	movw	r24, r16
  10:	60 e0       	ldi	r22, 0x00	; 0
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb12web_notfoundEP14EthernetClient>
  18:	c8 01       	movw	r24, r16
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	60 e0       	ldi	r22, 0x00	; 0
  1c:	70 e0       	ldi	r23, 0x00	; 0
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb12web_notfoundEP14EthernetClient>
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN6APDWeb15web_maintenanceEP14EthernetClient:

00000000 <_ZN6APDWeb15web_maintenanceEP14EthernetClient>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8b 01       	movw	r16, r22
   6:	cb 01       	movw	r24, r22
   8:	60 e0       	ldi	r22, 0x00	; 0
   a:	70 e0       	ldi	r23, 0x00	; 0
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15web_maintenanceEP14EthernetClient>
{
	if (pwwwclient != NULL) free(pwwwclient);
  10:	c8 01       	movw	r24, r16
  12:	60 e0       	ldi	r22, 0x00	; 0
  14:	70 e0       	ldi	r23, 0x00	; 0
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15web_maintenanceEP14EthernetClient>
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	c8 01       	movw	r24, r16
  1c:	60 e0       	ldi	r22, 0x00	; 0
  1e:	70 e0       	ldi	r23, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15web_maintenanceEP14EthernetClient>
  24:	1f 91       	pop	r17
  26:	0f 91       	pop	r16
  28:	08 95       	ret

Disassembly of section .text._ZN6APDWeb10web_statusEP14EthernetClient:

00000000 <_ZN6APDWeb10web_statusEP14EthernetClient>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	df 93       	push	r29
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	cf 93       	push	r28
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
  20:	64 97       	sbiw	r28, 0x14	; 20
  22:	0f b6       	in	r0, 0x3f	; 63
  24:	f8 94       	cli
  26:	de bf       	out	0x3e, r29	; 62
  28:	0f be       	out	0x3f, r0	; 63

	// TODO Auto-generated destructor stub
}
  2a:	cd bf       	out	0x3d, r28	; 61
  2c:	5c 01       	movw	r10, r24
  2e:	7b 01       	movw	r14, r22
  30:	db 01       	movw	r26, r22
  32:	ed 91       	ld	r30, X+
  34:	fc 91       	ld	r31, X
  36:	06 88       	ldd	r0, Z+22	; 0x16
  38:	f7 89       	ldd	r31, Z+23	; 0x17
  3a:	e0 2d       	mov	r30, r0
  3c:	cb 01       	movw	r24, r22
  3e:	19 95       	eicall
  40:	88 23       	and	r24, r24
  42:	01 f4       	brne	.+0      	; 0x44 <_ZN6APDWeb10web_statusEP14EthernetClient+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN6APDWeb10web_statusEP14EthernetClient+0x46>
  46:	19 82       	std	Y+1, r1	; 0x01
  48:	1a 82       	std	Y+2, r1	; 0x02
  4a:	1b 82       	std	Y+3, r1	; 0x03
  4c:	1c 82       	std	Y+4, r1	; 0x04
  4e:	fe 01       	movw	r30, r28
  50:	35 96       	adiw	r30, 0x05	; 5
  52:	80 e1       	ldi	r24, 0x10	; 16
  54:	df 01       	movw	r26, r30
  56:	1d 92       	st	X+, r1
  58:	8a 95       	dec	r24
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6APDWeb10web_statusEP14EthernetClient+0x5c>
  5c:	c7 01       	movw	r24, r14
  5e:	60 e0       	ldi	r22, 0x00	; 0
  60:	70 e0       	ldi	r23, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
  66:	c7 01       	movw	r24, r14
  68:	60 e0       	ldi	r22, 0x00	; 0
  6a:	70 e0       	ldi	r23, 0x00	; 0
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
  70:	c7 01       	movw	r24, r14
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
  7a:	47 01       	movw	r8, r14
  7c:	cc 24       	eor	r12, r12
  7e:	dd 24       	eor	r13, r13
  80:	3e 01       	movw	r6, r28
  82:	08 94       	sec
  84:	61 1c       	adc	r6, r1
  86:	71 1c       	adc	r7, r1
  88:	00 c0       	rjmp	.+0      	; 0x8a <_ZN6APDWeb10web_statusEP14EthernetClient+0x8a>
  8a:	c7 01       	movw	r24, r14
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
  94:	c7 01       	movw	r24, r14
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
  9e:	c4 01       	movw	r24, r8
  a0:	b6 01       	movw	r22, r12
  a2:	4a e0       	ldi	r20, 0x0A	; 10
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
  aa:	c7 01       	movw	r24, r14
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
  b4:	86 01       	movw	r16, r12
  b6:	00 0f       	add	r16, r16
  b8:	11 1f       	adc	r17, r17
  ba:	d5 01       	movw	r26, r10
  bc:	9e 96       	adiw	r26, 0x2e	; 46
  be:	ed 91       	ld	r30, X+
  c0:	fc 91       	ld	r31, X
  c2:	9f 97       	sbiw	r26, 0x2f	; 47
  c4:	e0 0f       	add	r30, r16
  c6:	f1 1f       	adc	r31, r17
  c8:	60 81       	ld	r22, Z
  ca:	71 81       	ldd	r23, Z+1	; 0x01
  cc:	6e 5f       	subi	r22, 0xFE	; 254
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
  d0:	c4 01       	movw	r24, r8
  d2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
  d6:	c7 01       	movw	r24, r14
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
  e0:	d5 01       	movw	r26, r10
  e2:	9e 96       	adiw	r26, 0x2e	; 46
  e4:	ed 91       	ld	r30, X+
  e6:	fc 91       	ld	r31, X
  e8:	9f 97       	sbiw	r26, 0x2f	; 47
  ea:	e0 0f       	add	r30, r16
  ec:	f1 1f       	adc	r31, r17
  ee:	a0 81       	ld	r26, Z
  f0:	b1 81       	ldd	r27, Z+1	; 0x01
  f2:	ed 91       	ld	r30, X+
  f4:	fc 91       	ld	r31, X
  f6:	11 97       	sbiw	r26, 0x01	; 1
  f8:	06 80       	ldd	r0, Z+6	; 0x06
  fa:	f7 81       	ldd	r31, Z+7	; 0x07
  fc:	e0 2d       	mov	r30, r0
  fe:	cd 01       	movw	r24, r26
 100:	b3 01       	movw	r22, r6
 102:	19 95       	eicall
 104:	c4 01       	movw	r24, r8
 106:	b3 01       	movw	r22, r6
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 10c:	c7 01       	movw	r24, r14
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 116:	d5 01       	movw	r26, r10
 118:	9e 96       	adiw	r26, 0x2e	; 46
 11a:	ed 91       	ld	r30, X+
 11c:	fc 91       	ld	r31, X
 11e:	9f 97       	sbiw	r26, 0x2f	; 47
 120:	e0 0f       	add	r30, r16
 122:	f1 1f       	adc	r31, r17
 124:	01 90       	ld	r0, Z+
 126:	f0 81       	ld	r31, Z
 128:	e0 2d       	mov	r30, r0
 12a:	83 8d       	ldd	r24, Z+27	; 0x1b
 12c:	94 8d       	ldd	r25, Z+28	; 0x1c
 12e:	89 2b       	or	r24, r25
 130:	01 f0       	breq	.+0      	; 0x132 <_ZN6APDWeb10web_statusEP14EthernetClient+0x132>
 132:	c7 01       	movw	r24, r14
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 13c:	d5 01       	movw	r26, r10
 13e:	9e 96       	adiw	r26, 0x2e	; 46
 140:	ed 91       	ld	r30, X+
 142:	fc 91       	ld	r31, X
 144:	9f 97       	sbiw	r26, 0x2f	; 47
 146:	e0 0f       	add	r30, r16
 148:	f1 1f       	adc	r31, r17
 14a:	60 81       	ld	r22, Z
 14c:	71 81       	ldd	r23, Z+1	; 0x01
 14e:	6e 5f       	subi	r22, 0xFE	; 254
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	c4 01       	movw	r24, r8
 154:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 158:	c7 01       	movw	r24, r14
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 162:	c7 01       	movw	r24, r14
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 16c:	c7 01       	movw	r24, r14
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 182:	08 94       	sec
 184:	c1 1c       	adc	r12, r1
 186:	d1 1c       	adc	r13, r1
 188:	f5 01       	movw	r30, r10
 18a:	80 a9       	ldd	r24, Z+48	; 0x30
 18c:	91 a9       	ldd	r25, Z+49	; 0x31
 18e:	c8 16       	cp	r12, r24
 190:	d9 06       	cpc	r13, r25
 192:	04 f4       	brge	.+0      	; 0x194 <_ZN6APDWeb10web_statusEP14EthernetClient+0x194>
 194:	00 c0       	rjmp	.+0      	; 0x196 <_ZN6APDWeb10web_statusEP14EthernetClient+0x196>
 196:	c7 01       	movw	r24, r14
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 1a0:	c7 01       	movw	r24, r14
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 1aa:	c7 01       	movw	r24, r14
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 1b4:	c7 01       	movw	r24, r14
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 1be:	cc 24       	eor	r12, r12
 1c0:	dd 24       	eor	r13, r13
 1c2:	3e 01       	movw	r6, r28
 1c4:	08 94       	sec
 1c6:	61 1c       	adc	r6, r1
 1c8:	71 1c       	adc	r7, r1
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_ZN6APDWeb10web_statusEP14EthernetClient+0x1cc>
 1cc:	c7 01       	movw	r24, r14
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 1d6:	c7 01       	movw	r24, r14
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 1e0:	c4 01       	movw	r24, r8
 1e2:	b6 01       	movw	r22, r12
 1e4:	4a e0       	ldi	r20, 0x0A	; 10
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 1ec:	c7 01       	movw	r24, r14
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 1f6:	86 01       	movw	r16, r12
 1f8:	00 0f       	add	r16, r16
 1fa:	11 1f       	adc	r17, r17
 1fc:	d5 01       	movw	r26, r10
 1fe:	d2 96       	adiw	r26, 0x32	; 50
 200:	ed 91       	ld	r30, X+
 202:	fc 91       	ld	r31, X
 204:	d3 97       	sbiw	r26, 0x33	; 51
 206:	e0 0f       	add	r30, r16
 208:	f1 1f       	adc	r31, r17
 20a:	60 81       	ld	r22, Z
 20c:	71 81       	ldd	r23, Z+1	; 0x01
 20e:	6e 5f       	subi	r22, 0xFE	; 254
 210:	7f 4f       	sbci	r23, 0xFF	; 255
 212:	c4 01       	movw	r24, r8
 214:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 218:	c7 01       	movw	r24, r14
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 222:	d5 01       	movw	r26, r10
 224:	d2 96       	adiw	r26, 0x32	; 50
 226:	ed 91       	ld	r30, X+
 228:	fc 91       	ld	r31, X
 22a:	d3 97       	sbiw	r26, 0x33	; 51
 22c:	e0 0f       	add	r30, r16
 22e:	f1 1f       	adc	r31, r17
 230:	80 81       	ld	r24, Z
 232:	91 81       	ldd	r25, Z+1	; 0x01
 234:	b3 01       	movw	r22, r6
 236:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 23a:	c4 01       	movw	r24, r8
 23c:	b3 01       	movw	r22, r6
 23e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 242:	c7 01       	movw	r24, r14
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 24c:	c4 01       	movw	r24, r8
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 256:	c7 01       	movw	r24, r14
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 260:	d5 01       	movw	r26, r10
 262:	d2 96       	adiw	r26, 0x32	; 50
 264:	ed 91       	ld	r30, X+
 266:	fc 91       	ld	r31, X
 268:	d3 97       	sbiw	r26, 0x33	; 51
 26a:	e0 0f       	add	r30, r16
 26c:	f1 1f       	adc	r31, r17
 26e:	01 90       	ld	r0, Z+
 270:	f0 81       	ld	r31, Z
 272:	e0 2d       	mov	r30, r0
 274:	85 89       	ldd	r24, Z+21	; 0x15
 276:	96 89       	ldd	r25, Z+22	; 0x16
 278:	89 2b       	or	r24, r25
 27a:	01 f0       	breq	.+0      	; 0x27c <_ZN6APDWeb10web_statusEP14EthernetClient+0x27c>
 27c:	c7 01       	movw	r24, r14
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 286:	d5 01       	movw	r26, r10
 288:	d2 96       	adiw	r26, 0x32	; 50
 28a:	ed 91       	ld	r30, X+
 28c:	fc 91       	ld	r31, X
 28e:	d3 97       	sbiw	r26, 0x33	; 51
 290:	e0 0f       	add	r30, r16
 292:	f1 1f       	adc	r31, r17
 294:	60 81       	ld	r22, Z
 296:	71 81       	ldd	r23, Z+1	; 0x01
 298:	6e 5f       	subi	r22, 0xFE	; 254
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	c4 01       	movw	r24, r8
 29e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 2a2:	c7 01       	movw	r24, r14
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 2ac:	c7 01       	movw	r24, r14
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 2b6:	c7 01       	movw	r24, r14
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 2cc:	08 94       	sec
 2ce:	c1 1c       	adc	r12, r1
 2d0:	d1 1c       	adc	r13, r1
 2d2:	f5 01       	movw	r30, r10
 2d4:	84 a9       	ldd	r24, Z+52	; 0x34
 2d6:	95 a9       	ldd	r25, Z+53	; 0x35
 2d8:	c8 16       	cp	r12, r24
 2da:	d9 06       	cpc	r13, r25
 2dc:	04 f4       	brge	.+0      	; 0x2de <_ZN6APDWeb10web_statusEP14EthernetClient+0x2de>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <_ZN6APDWeb10web_statusEP14EthernetClient+0x2e0>
 2e0:	c7 01       	movw	r24, r14
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 2ea:	c7 01       	movw	r24, r14
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 2f4:	c7 01       	movw	r24, r14
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 2fe:	c7 01       	movw	r24, r14
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 308:	cc 24       	eor	r12, r12
 30a:	dd 24       	eor	r13, r13
 30c:	3e 01       	movw	r6, r28
 30e:	08 94       	sec
 310:	61 1c       	adc	r6, r1
 312:	71 1c       	adc	r7, r1
 314:	00 c0       	rjmp	.+0      	; 0x316 <_ZN6APDWeb10web_statusEP14EthernetClient+0x316>
 316:	c7 01       	movw	r24, r14
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 320:	c7 01       	movw	r24, r14
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 32a:	c4 01       	movw	r24, r8
 32c:	b6 01       	movw	r22, r12
 32e:	4a e0       	ldi	r20, 0x0A	; 10
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 336:	c7 01       	movw	r24, r14
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 340:	86 01       	movw	r16, r12
 342:	00 0f       	add	r16, r16
 344:	11 1f       	adc	r17, r17
 346:	d5 01       	movw	r26, r10
 348:	d6 96       	adiw	r26, 0x36	; 54
 34a:	ed 91       	ld	r30, X+
 34c:	fc 91       	ld	r31, X
 34e:	d7 97       	sbiw	r26, 0x37	; 55
 350:	e0 0f       	add	r30, r16
 352:	f1 1f       	adc	r31, r17
 354:	60 81       	ld	r22, Z
 356:	71 81       	ldd	r23, Z+1	; 0x01
 358:	6e 5f       	subi	r22, 0xFE	; 254
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	c4 01       	movw	r24, r8
 35e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 362:	c7 01       	movw	r24, r14
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 36c:	d5 01       	movw	r26, r10
 36e:	d6 96       	adiw	r26, 0x36	; 54
 370:	ed 91       	ld	r30, X+
 372:	fc 91       	ld	r31, X
 374:	d7 97       	sbiw	r26, 0x37	; 55
 376:	e0 0f       	add	r30, r16
 378:	f1 1f       	adc	r31, r17
 37a:	80 81       	ld	r24, Z
 37c:	91 81       	ldd	r25, Z+1	; 0x01
 37e:	b3 01       	movw	r22, r6
 380:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 384:	c4 01       	movw	r24, r8
 386:	b3 01       	movw	r22, r6
 388:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 38c:	c7 01       	movw	r24, r14
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 396:	c4 01       	movw	r24, r8
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 3a0:	c7 01       	movw	r24, r14
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 3aa:	c7 01       	movw	r24, r14
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 3b4:	c7 01       	movw	r24, r14
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 3ca:	08 94       	sec
 3cc:	c1 1c       	adc	r12, r1
 3ce:	d1 1c       	adc	r13, r1
 3d0:	f5 01       	movw	r30, r10
 3d2:	80 ad       	ldd	r24, Z+56	; 0x38
 3d4:	91 ad       	ldd	r25, Z+57	; 0x39
 3d6:	c8 16       	cp	r12, r24
 3d8:	d9 06       	cpc	r13, r25
 3da:	04 f4       	brge	.+0      	; 0x3dc <_ZN6APDWeb10web_statusEP14EthernetClient+0x3dc>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <_ZN6APDWeb10web_statusEP14EthernetClient+0x3de>
 3de:	c7 01       	movw	r24, r14
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 3e8:	c7 01       	movw	r24, r14
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 3f2:	c7 01       	movw	r24, r14
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 408:	00 c0       	rjmp	.+0      	; 0x40a <_ZN6APDWeb10web_statusEP14EthernetClient+0x40a>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_statusEP14EthernetClient>
 412:	64 96       	adiw	r28, 0x14	; 20
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
 41e:	cf 91       	pop	r28
 420:	df 91       	pop	r29
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	df 90       	pop	r13
 42c:	cf 90       	pop	r12
 42e:	bf 90       	pop	r11
 430:	af 90       	pop	r10
 432:	9f 90       	pop	r9
 434:	8f 90       	pop	r8
 436:	7f 90       	pop	r7
 438:	6f 90       	pop	r6
 43a:	08 95       	ret

Disassembly of section .text._ZN6APDWeb13web_startpageEP14EthernetClientPci:

00000000 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	a8 97       	sbiw	r28, 0x28	; 40
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	5c 01       	movw	r10, r24

	// TODO Auto-generated destructor stub
}
  2a:	6b 01       	movw	r12, r22
  2c:	7a 01       	movw	r14, r20
  2e:	89 01       	movw	r16, r18
  30:	db 01       	movw	r26, r22
  32:	ed 91       	ld	r30, X+
  34:	fc 91       	ld	r31, X
  36:	06 88       	ldd	r0, Z+22	; 0x16
  38:	f7 89       	ldd	r31, Z+23	; 0x17
  3a:	e0 2d       	mov	r30, r0
  3c:	cb 01       	movw	r24, r22
  3e:	19 95       	eicall
  40:	88 23       	and	r24, r24
  42:	01 f4       	brne	.+0      	; 0x44 <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x46>
  46:	c6 01       	movw	r24, r12
  48:	60 e0       	ldi	r22, 0x00	; 0
  4a:	70 e0       	ldi	r23, 0x00	; 0
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  50:	c6 01       	movw	r24, r12
  52:	60 e0       	ldi	r22, 0x00	; 0
  54:	70 e0       	ldi	r23, 0x00	; 0
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  5a:	9c 2c       	mov	r9, r12
  5c:	8d 2c       	mov	r8, r13
  5e:	c6 01       	movw	r24, r12
  60:	b7 01       	movw	r22, r14
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  66:	c6 01       	movw	r24, r12
  68:	60 e0       	ldi	r22, 0x00	; 0
  6a:	70 e0       	ldi	r23, 0x00	; 0
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  70:	c6 01       	movw	r24, r12
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  7a:	01 15       	cp	r16, r1
  7c:	11 05       	cpc	r17, r1
  7e:	01 f0       	breq	.+0      	; 0x80 <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x80>
  80:	c6 01       	movw	r24, r12
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  8a:	c6 01       	movw	r24, r12
  8c:	b8 01       	movw	r22, r16
  8e:	4a e0       	ldi	r20, 0x0A	; 10
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  96:	c6 01       	movw	r24, r12
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  a0:	c6 01       	movw	r24, r12
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  aa:	b5 01       	movw	r22, r10
  ac:	66 5b       	subi	r22, 0xB6	; 182
  ae:	7f 4f       	sbci	r23, 0xFF	; 255
  b0:	89 2d       	mov	r24, r9
  b2:	98 2d       	mov	r25, r8
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  b8:	c6 01       	movw	r24, r12
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  c2:	c6 01       	movw	r24, r12
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  cc:	b5 01       	movw	r22, r10
  ce:	68 53       	subi	r22, 0x38	; 56
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	89 2d       	mov	r24, r9
  d4:	98 2d       	mov	r25, r8
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  da:	c6 01       	movw	r24, r12
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  e4:	c6 01       	movw	r24, r12
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  ee:	c6 01       	movw	r24, r12
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
  f8:	c6 01       	movw	r24, r12
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 102:	c6 01       	movw	r24, r12
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 10c:	89 2d       	mov	r24, r9
 10e:	98 2d       	mov	r25, r8
 110:	b7 01       	movw	r22, r14
 112:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 116:	c6 01       	movw	r24, r12
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 120:	c6 01       	movw	r24, r12
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 12a:	c6 01       	movw	r24, r12
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 134:	89 2d       	mov	r24, r9
 136:	98 2d       	mov	r25, r8
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 140:	c6 01       	movw	r24, r12
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 14a:	89 2d       	mov	r24, r9
 14c:	98 2d       	mov	r25, r8
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 156:	c6 01       	movw	r24, r12
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 160:	c6 01       	movw	r24, r12
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 16a:	c6 01       	movw	r24, r12
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 174:	de 01       	movw	r26, r28
 176:	11 96       	adiw	r26, 0x01	; 1
 178:	e0 e0       	ldi	r30, 0x00	; 0
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	84 e1       	ldi	r24, 0x14	; 20
 17e:	01 90       	ld	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	81 50       	subi	r24, 0x01	; 1
 184:	01 f4       	brne	.+0      	; 0x186 <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x186>
 186:	f5 01       	movw	r30, r10
 188:	82 a5       	ldd	r24, Z+42	; 0x2a
 18a:	93 a5       	ldd	r25, Z+43	; 0x2b
 18c:	00 97       	sbiw	r24, 0x00	; 0
 18e:	01 f0       	breq	.+0      	; 0x190 <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x190>
 190:	be 01       	movw	r22, r28
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 19a:	89 2d       	mov	r24, r9
 19c:	98 2d       	mov	r25, r8
 19e:	8e 01       	movw	r16, r28
 1a0:	0f 5f       	subi	r16, 0xFF	; 255
 1a2:	1f 4f       	sbci	r17, 0xFF	; 255
 1a4:	b8 01       	movw	r22, r16
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 1aa:	c6 01       	movw	r24, r12
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 1b4:	d5 01       	movw	r26, r10
 1b6:	9a 96       	adiw	r26, 0x2a	; 42
 1b8:	8d 91       	ld	r24, X+
 1ba:	9c 91       	ld	r25, X
 1bc:	9b 97       	sbiw	r26, 0x2b	; 43
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	01 f0       	breq	.+0      	; 0x1c2 <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x1c2>
 1c2:	b8 01       	movw	r22, r16
 1c4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 1c8:	89 2d       	mov	r24, r9
 1ca:	98 2d       	mov	r25, r8
 1cc:	be 01       	movw	r22, r28
 1ce:	6f 5f       	subi	r22, 0xFF	; 255
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 1d6:	c6 01       	movw	r24, r12
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 1e0:	1d 8a       	std	Y+21, r1	; 0x15
 1e2:	1e 8a       	std	Y+22, r1	; 0x16
 1e4:	1f 8a       	std	Y+23, r1	; 0x17
 1e6:	18 8e       	std	Y+24, r1	; 0x18
 1e8:	fe 01       	movw	r30, r28
 1ea:	79 96       	adiw	r30, 0x19	; 25
 1ec:	80 e1       	ldi	r24, 0x10	; 16
 1ee:	df 01       	movw	r26, r30
 1f0:	1d 92       	st	X+, r1
 1f2:	8a 95       	dec	r24
 1f4:	01 f4       	brne	.+0      	; 0x1f6 <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x1f6>
 1f6:	f5 01       	movw	r30, r10
 1f8:	64 a1       	ldd	r22, Z+36	; 0x24
 1fa:	75 a1       	ldd	r23, Z+37	; 0x25
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 204:	e5 e1       	ldi	r30, 0x15	; 21
 206:	ee 2e       	mov	r14, r30
 208:	f1 2c       	mov	r15, r1
 20a:	ec 0e       	add	r14, r28
 20c:	fd 1e       	adc	r15, r29
 20e:	45 e0       	ldi	r20, 0x05	; 5
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	87 01       	movw	r16, r14
 214:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 218:	89 2d       	mov	r24, r9
 21a:	98 2d       	mov	r25, r8
 21c:	b7 01       	movw	r22, r14
 21e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 222:	c6 01       	movw	r24, r12
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 22c:	d5 01       	movw	r26, r10
 22e:	db 96       	adiw	r26, 0x3b	; 59
 230:	6d 91       	ld	r22, X+
 232:	7c 91       	ld	r23, X
 234:	dc 97       	sbiw	r26, 0x3c	; 60
 236:	88 27       	eor	r24, r24
 238:	77 fd       	sbrc	r23, 7
 23a:	80 95       	com	r24
 23c:	98 2f       	mov	r25, r24
 23e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 242:	45 e0       	ldi	r20, 0x05	; 5
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 24a:	89 2d       	mov	r24, r9
 24c:	98 2d       	mov	r25, r8
 24e:	b7 01       	movw	r22, r14
 250:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 254:	c6 01       	movw	r24, r12
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 25e:	f5 01       	movw	r30, r10
 260:	65 ad       	ldd	r22, Z+61	; 0x3d
 262:	76 ad       	ldd	r23, Z+62	; 0x3e
 264:	88 27       	eor	r24, r24
 266:	77 fd       	sbrc	r23, 7
 268:	80 95       	com	r24
 26a:	98 2f       	mov	r25, r24
 26c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 270:	45 e0       	ldi	r20, 0x05	; 5
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 278:	89 2d       	mov	r24, r9
 27a:	98 2d       	mov	r25, r8
 27c:	b7 01       	movw	r22, r14
 27e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 282:	c6 01       	movw	r24, r12
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 28c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 290:	aa 27       	eor	r26, r26
 292:	97 fd       	sbrc	r25, 7
 294:	a0 95       	com	r26
 296:	ba 2f       	mov	r27, r26
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 2a0:	45 e0       	ldi	r20, 0x05	; 5
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 2a8:	89 2d       	mov	r24, r9
 2aa:	98 2d       	mov	r25, r8
 2ac:	b7 01       	movw	r22, r14
 2ae:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 2b2:	c6 01       	movw	r24, r12
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 2bc:	c6 01       	movw	r24, r12
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 2d2:	c6 01       	movw	r24, r12
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 2dc:	c6 01       	movw	r24, r12
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 2e6:	c6 01       	movw	r24, r12
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 2f0:	d5 01       	movw	r26, r10
 2f2:	5c 96       	adiw	r26, 0x1c	; 28
 2f4:	8c 91       	ld	r24, X
 2f6:	82 fd       	sbrc	r24, 2
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x2fa>
 2fa:	c6 01       	movw	r24, r12
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 304:	c6 01       	movw	r24, r12
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 30e:	f5 01       	movw	r30, r10
 310:	84 8d       	ldd	r24, Z+28	; 0x1c
 312:	82 fd       	sbrc	r24, 2
 314:	00 c0       	rjmp	.+0      	; 0x316 <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x316>
 316:	c6 01       	movw	r24, r12
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 320:	d5 01       	movw	r26, r10
 322:	5c 96       	adiw	r26, 0x1c	; 28
 324:	8c 91       	ld	r24, X
 326:	82 fd       	sbrc	r24, 2
 328:	00 c0       	rjmp	.+0      	; 0x32a <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x32a>
 32a:	c6 01       	movw	r24, r12
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 334:	c6 01       	movw	r24, r12
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 33e:	c6 01       	movw	r24, r12
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 348:	00 c0       	rjmp	.+0      	; 0x34a <_ZN6APDWeb13web_startpageEP14EthernetClientPci+0x34a>
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13web_startpageEP14EthernetClientPci>
 352:	a8 96       	adiw	r28, 0x28	; 40
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
 35e:	cf 91       	pop	r28
 360:	df 91       	pop	r29
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	df 90       	pop	r13
 36c:	cf 90       	pop	r12
 36e:	bf 90       	pop	r11
 370:	af 90       	pop	r10
 372:	9f 90       	pop	r9
 374:	8f 90       	pop	r8
 376:	08 95       	ret

Disassembly of section .text._ZN6APDWeb10web_headerEP14EthernetClient:

00000000 <_ZN6APDWeb10web_headerEP14EthernetClient>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	70 e0       	ldi	r23, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_headerEP14EthernetClient>
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	c8 01       	movw	r24, r16
  10:	60 e0       	ldi	r22, 0x00	; 0
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_headerEP14EthernetClient>
  18:	61 e0       	ldi	r22, 0x01	; 1
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	70 e0       	ldi	r23, 0x00	; 0
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10web_headerEP14EthernetClient>
  24:	1f 91       	pop	r17
  26:	0f 91       	pop	r16
  28:	08 95       	ret

Disassembly of section .text._ZN6APDWebD1Ev:

00000000 <_ZN6APDWebD1Ev>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	8a a1       	ldd	r24, Y+34	; 0x22
  10:	9b a1       	ldd	r25, Y+35	; 0x23
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN6APDWebD1Ev+0x16>
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebD1Ev>
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	88 a1       	ldd	r24, Y+32	; 0x20
  1c:	99 a1       	ldd	r25, Y+33	; 0x21
  1e:	89 2b       	or	r24, r25
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6APDWebD1Ev+0x22>
  22:	8a a1       	ldd	r24, Y+34	; 0x22
  24:	9b a1       	ldd	r25, Y+35	; 0x23
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebD1Ev>

	// TODO Auto-generated destructor stub
}
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	08 95       	ret

Disassembly of section .text._ZN6APDWebD2Ev:

00000000 <_ZN6APDWebD2Ev>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	8a a1       	ldd	r24, Y+34	; 0x22
  10:	9b a1       	ldd	r25, Y+35	; 0x23
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN6APDWebD2Ev+0x16>
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebD2Ev>
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	88 a1       	ldd	r24, Y+32	; 0x20
  1c:	99 a1       	ldd	r25, Y+33	; 0x21
  1e:	89 2b       	or	r24, r25
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6APDWebD2Ev+0x22>
  22:	8a a1       	ldd	r24, Y+34	; 0x22
  24:	9b a1       	ldd	r25, Y+35	; 0x23
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebD2Ev>

	// TODO Auto-generated destructor stub
}
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	08 95       	ret

Disassembly of section .text._ZN6APDWeb24get_thingspeaklog_stringEPc:

00000000 <_ZN6APDWeb24get_thingspeaklog_stringEPc>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	a4 97       	sbiw	r28, 0x24	; 36

	// TODO Auto-generated destructor stub
}
  2a:	0f b6       	in	r0, 0x3f	; 63
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	5c 01       	movw	r10, r24
  36:	7a a3       	std	Y+34, r23	; 0x22
  38:	69 a3       	std	Y+33, r22	; 0x21
  3a:	19 82       	std	Y+1, r1	; 0x01
  3c:	1a 82       	std	Y+2, r1	; 0x02
  3e:	1b 82       	std	Y+3, r1	; 0x03
  40:	1c 82       	std	Y+4, r1	; 0x04
  42:	fe 01       	movw	r30, r28
  44:	35 96       	adiw	r30, 0x05	; 5
  46:	8c e0       	ldi	r24, 0x0C	; 12
  48:	df 01       	movw	r26, r30
  4a:	1d 92       	st	X+, r1
  4c:	8a 95       	dec	r24
  4e:	01 f4       	brne	.+0      	; 0x50 <_ZN6APDWeb24get_thingspeaklog_stringEPc+0x50>
  50:	e9 a0       	ldd	r14, Y+33	; 0x21
  52:	fa a0       	ldd	r15, Y+34	; 0x22
  54:	33 24       	eor	r3, r3
  56:	cc 24       	eor	r12, r12
  58:	dd 24       	eor	r13, r13
  5a:	fe 01       	movw	r30, r28
  5c:	75 96       	adiw	r30, 0x15	; 21
  5e:	fc a3       	std	Y+36, r31	; 0x24
  60:	eb a3       	std	Y+35, r30	; 0x23
  62:	b1 e1       	ldi	r27, 0x11	; 17
  64:	4b 2e       	mov	r4, r27
  66:	51 2c       	mov	r5, r1
  68:	4c 0e       	add	r4, r28
  6a:	5d 1e       	adc	r5, r29
  6c:	4e 01       	movw	r8, r28
  6e:	08 94       	sec
  70:	81 1c       	adc	r8, r1
  72:	91 1c       	adc	r9, r1
  74:	a6 e2       	ldi	r26, 0x26	; 38
  76:	2a 2e       	mov	r2, r26
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZN6APDWeb24get_thingspeaklog_stringEPc+0x7a>
  7a:	36 01       	movw	r6, r12
  7c:	66 0c       	add	r6, r6
  7e:	77 1c       	adc	r7, r7
  80:	d5 01       	movw	r26, r10
  82:	9e 96       	adiw	r26, 0x2e	; 46
  84:	ed 91       	ld	r30, X+
  86:	fc 91       	ld	r31, X
  88:	9f 97       	sbiw	r26, 0x2f	; 47
  8a:	e6 0d       	add	r30, r6
  8c:	f7 1d       	adc	r31, r7
  8e:	01 90       	ld	r0, Z+
  90:	f0 81       	ld	r31, Z
  92:	e0 2d       	mov	r30, r0
  94:	83 8d       	ldd	r24, Z+27	; 0x1b
  96:	94 8d       	ldd	r25, Z+28	; 0x1c
  98:	89 2b       	or	r24, r25
  9a:	01 f4       	brne	.+0      	; 0x9c <_ZN6APDWeb24get_thingspeaklog_stringEPc+0x9c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZN6APDWeb24get_thingspeaklog_stringEPc+0x9e>
  9e:	19 8a       	std	Y+17, r1	; 0x11
  a0:	1a 8a       	std	Y+18, r1	; 0x12
  a2:	1b 8a       	std	Y+19, r1	; 0x13
  a4:	1c 8a       	std	Y+20, r1	; 0x14
  a6:	eb a1       	ldd	r30, Y+35	; 0x23
  a8:	fc a1       	ldd	r31, Y+36	; 0x24
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	11 92       	st	Z+, r1
  ae:	8a 95       	dec	r24
  b0:	01 f4       	brne	.+0      	; 0xb2 <_ZN6APDWeb24get_thingspeaklog_stringEPc+0xb2>
  b2:	33 94       	inc	r3
  b4:	00 d0       	rcall	.+0      	; 0xb6 <_ZN6APDWeb24get_thingspeaklog_stringEPc+0xb6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <_ZN6APDWeb24get_thingspeaklog_stringEPc+0xb8>
  b8:	ed b7       	in	r30, 0x3d	; 61
  ba:	fe b7       	in	r31, 0x3e	; 62
  bc:	31 96       	adiw	r30, 0x01	; 1
  be:	ad b7       	in	r26, 0x3d	; 61
  c0:	be b7       	in	r27, 0x3e	; 62
  c2:	12 96       	adiw	r26, 0x02	; 2
  c4:	5c 92       	st	X, r5
  c6:	4e 92       	st	-X, r4
  c8:	11 97       	sbiw	r26, 0x01	; 1
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	93 83       	std	Z+3, r25	; 0x03
  d0:	82 83       	std	Z+2, r24	; 0x02
  d2:	34 82       	std	Z+4, r3	; 0x04
  d4:	15 82       	std	Z+5, r1	; 0x05
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb24get_thingspeaklog_stringEPc>
  da:	ad b7       	in	r26, 0x3d	; 61
  dc:	be b7       	in	r27, 0x3e	; 62
  de:	16 96       	adiw	r26, 0x06	; 6
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	be bf       	out	0x3e, r27	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	ad bf       	out	0x3d, r26	; 61
  ea:	e9 a1       	ldd	r30, Y+33	; 0x21
  ec:	fa a1       	ldd	r31, Y+34	; 0x22
  ee:	ee 15       	cp	r30, r14
  f0:	ff 05       	cpc	r31, r15
  f2:	00 f4       	brcc	.+0      	; 0xf4 <_ZN6APDWeb24get_thingspeaklog_stringEPc+0xf4>
  f4:	d7 01       	movw	r26, r14
  f6:	2d 92       	st	X+, r2
  f8:	7d 01       	movw	r14, r26
  fa:	c7 01       	movw	r24, r14
  fc:	b2 01       	movw	r22, r4
  fe:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb24get_thingspeaklog_stringEPc>
 102:	f2 01       	movw	r30, r4
 104:	01 90       	ld	r0, Z+
 106:	00 20       	and	r0, r0
 108:	01 f4       	brne	.+0      	; 0x10a <_ZN6APDWeb24get_thingspeaklog_stringEPc+0x10a>
 10a:	8f 01       	movw	r16, r30
 10c:	01 50       	subi	r16, 0x01	; 1
 10e:	10 40       	sbci	r17, 0x00	; 0
 110:	04 19       	sub	r16, r4
 112:	15 09       	sbc	r17, r5
 114:	0e 0d       	add	r16, r14
 116:	1f 1d       	adc	r17, r15
 118:	d8 01       	movw	r26, r16
 11a:	ed e3       	ldi	r30, 0x3D	; 61
 11c:	ed 93       	st	X+, r30
 11e:	8d 01       	movw	r16, r26
 120:	d5 01       	movw	r26, r10
 122:	9e 96       	adiw	r26, 0x2e	; 46
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	9f 97       	sbiw	r26, 0x2f	; 47
 12a:	e6 0d       	add	r30, r6
 12c:	f7 1d       	adc	r31, r7
 12e:	a0 81       	ld	r26, Z
 130:	b1 81       	ldd	r27, Z+1	; 0x01
 132:	ed 91       	ld	r30, X+
 134:	fc 91       	ld	r31, X
 136:	11 97       	sbiw	r26, 0x01	; 1
 138:	06 80       	ldd	r0, Z+6	; 0x06
 13a:	f7 81       	ldd	r31, Z+7	; 0x07
 13c:	e0 2d       	mov	r30, r0
 13e:	cd 01       	movw	r24, r26
 140:	b4 01       	movw	r22, r8
 142:	19 95       	eicall
 144:	c8 01       	movw	r24, r16
 146:	b4 01       	movw	r22, r8
 148:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb24get_thingspeaklog_stringEPc>
 14c:	f4 01       	movw	r30, r8
 14e:	01 90       	ld	r0, Z+
 150:	00 20       	and	r0, r0
 152:	01 f4       	brne	.+0      	; 0x154 <_ZN6APDWeb24get_thingspeaklog_stringEPc+0x154>
 154:	7f 01       	movw	r14, r30
 156:	08 94       	sec
 158:	e1 08       	sbc	r14, r1
 15a:	f1 08       	sbc	r15, r1
 15c:	e8 18       	sub	r14, r8
 15e:	f9 08       	sbc	r15, r9
 160:	e0 0e       	add	r14, r16
 162:	f1 1e       	adc	r15, r17
 164:	08 94       	sec
 166:	c1 1c       	adc	r12, r1
 168:	d1 1c       	adc	r13, r1
 16a:	d5 01       	movw	r26, r10
 16c:	d0 96       	adiw	r26, 0x30	; 48
 16e:	8d 91       	ld	r24, X+
 170:	9c 91       	ld	r25, X
 172:	d1 97       	sbiw	r26, 0x31	; 49
 174:	c8 16       	cp	r12, r24
 176:	d9 06       	cpc	r13, r25
 178:	04 f4       	brge	.+0      	; 0x17a <_ZN6APDWeb24get_thingspeaklog_stringEPc+0x17a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_ZN6APDWeb24get_thingspeaklog_stringEPc+0x17c>
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	f7 01       	movw	r30, r14
 180:	80 83       	st	Z, r24
 182:	11 82       	std	Z+1, r1	; 0x01
 184:	a4 96       	adiw	r28, 0x24	; 36
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	9f 90       	pop	r9
 1a6:	8f 90       	pop	r8
 1a8:	7f 90       	pop	r7
 1aa:	6f 90       	pop	r6
 1ac:	5f 90       	pop	r5
 1ae:	4f 90       	pop	r4
 1b0:	3f 90       	pop	r3
 1b2:	2f 90       	pop	r2
 1b4:	08 95       	ret

Disassembly of section .text._ZN6APDWeb18thingspeak_loggingEv:

00000000 <_ZN6APDWeb18thingspeak_loggingEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	c6 50       	subi	r28, 0x06	; 6
  1e:	d2 40       	sbci	r29, 0x02	; 2
  20:	0f b6       	in	r0, 0x3f	; 63
  22:	f8 94       	cli
  24:	de bf       	out	0x3e, r29	; 62
  26:	0f be       	out	0x3f, r0	; 63
  28:	cd bf       	out	0x3d, r28	; 61

	// TODO Auto-generated destructor stub
}
  2a:	5c 01       	movw	r10, r24
  2c:	fc 01       	movw	r30, r24
  2e:	a2 a1       	ldd	r26, Z+34	; 0x22
  30:	b3 a1       	ldd	r27, Z+35	; 0x23
  32:	10 97       	sbiw	r26, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN6APDWeb18thingspeak_loggingEv+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6APDWeb18thingspeak_loggingEv+0x38>
  38:	ed 91       	ld	r30, X+
  3a:	fc 91       	ld	r31, X
  3c:	11 97       	sbiw	r26, 0x01	; 1
  3e:	04 88       	ldd	r0, Z+20	; 0x14
  40:	f5 89       	ldd	r31, Z+21	; 0x15
  42:	e0 2d       	mov	r30, r0
  44:	cd 01       	movw	r24, r26
  46:	19 95       	eicall
  48:	88 23       	and	r24, r24
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN6APDWeb18thingspeak_loggingEv+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6APDWeb18thingspeak_loggingEv+0x4e>
  4e:	17 e0       	ldi	r17, 0x07	; 7
  50:	81 2e       	mov	r8, r17
  52:	91 2c       	mov	r9, r1
  54:	8c 0e       	add	r8, r28
  56:	9d 1e       	adc	r9, r29
  58:	c5 01       	movw	r24, r10
  5a:	b4 01       	movw	r22, r8
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	b4 01       	movw	r22, r8
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
  6a:	d5 01       	movw	r26, r10
  6c:	92 96       	adiw	r26, 0x22	; 34
  6e:	ed 90       	ld	r14, X+
  70:	fc 90       	ld	r15, X
  72:	93 97       	sbiw	r26, 0x23	; 35
  74:	d7 01       	movw	r26, r14
  76:	ed 91       	ld	r30, X+
  78:	fc 91       	ld	r31, X
  7a:	c4 84       	ldd	r12, Z+12	; 0x0c
  7c:	d5 84       	ldd	r13, Z+13	; 0x0d
  7e:	ee e9       	ldi	r30, 0x9E	; 158
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	ae 0e       	add	r10, r30
  84:	bf 1e       	adc	r11, r31
  86:	8e 01       	movw	r16, r28
  88:	0f 5f       	subi	r16, 0xFF	; 255
  8a:	1f 4f       	sbci	r17, 0xFF	; 255
  8c:	c8 01       	movw	r24, r16
  8e:	b5 01       	movw	r22, r10
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
  94:	84 e2       	ldi	r24, 0x24	; 36
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	a8 0e       	add	r10, r24
  9a:	b9 1e       	adc	r11, r25
  9c:	d5 01       	movw	r26, r10
  9e:	4d 91       	ld	r20, X+
  a0:	5c 91       	ld	r21, X
  a2:	ee e3       	ldi	r30, 0x3E	; 62
  a4:	ff ef       	ldi	r31, 0xFF	; 255
  a6:	ae 0e       	add	r10, r30
  a8:	bf 1e       	adc	r11, r31
  aa:	c7 01       	movw	r24, r14
  ac:	b8 01       	movw	r22, r16
  ae:	f6 01       	movw	r30, r12
  b0:	19 95       	eicall
  b2:	89 2b       	or	r24, r25
  b4:	01 f4       	brne	.+0      	; 0xb6 <_ZN6APDWeb18thingspeak_loggingEv+0xb6>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_ZN6APDWeb18thingspeak_loggingEv+0xb8>
  b8:	d5 01       	movw	r26, r10
  ba:	92 96       	adiw	r26, 0x22	; 34
  bc:	8d 91       	ld	r24, X+
  be:	9c 91       	ld	r25, X
  c0:	93 97       	sbiw	r26, 0x23	; 35
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
  ca:	f5 01       	movw	r30, r10
  cc:	82 a1       	ldd	r24, Z+34	; 0x22
  ce:	93 a1       	ldd	r25, Z+35	; 0x23
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
  d8:	b5 01       	movw	r22, r10
  da:	6e 55       	subi	r22, 0x5E	; 94
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	d5 01       	movw	r26, r10
  e0:	92 96       	adiw	r26, 0x22	; 34
  e2:	8d 91       	ld	r24, X+
  e4:	9c 91       	ld	r25, X
  e6:	93 97       	sbiw	r26, 0x23	; 35
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
  ec:	f5 01       	movw	r30, r10
  ee:	82 a1       	ldd	r24, Z+34	; 0x22
  f0:	93 a1       	ldd	r25, Z+35	; 0x23
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
  fa:	b5 01       	movw	r22, r10
  fc:	66 5b       	subi	r22, 0xB6	; 182
  fe:	7e 4f       	sbci	r23, 0xFE	; 254
 100:	d5 01       	movw	r26, r10
 102:	92 96       	adiw	r26, 0x22	; 34
 104:	8d 91       	ld	r24, X+
 106:	9c 91       	ld	r25, X
 108:	93 97       	sbiw	r26, 0x23	; 35
 10a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 10e:	f5 01       	movw	r30, r10
 110:	82 a1       	ldd	r24, Z+34	; 0x22
 112:	93 a1       	ldd	r25, Z+35	; 0x23
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 11c:	d5 01       	movw	r26, r10
 11e:	92 96       	adiw	r26, 0x22	; 34
 120:	8d 91       	ld	r24, X+
 122:	9c 91       	ld	r25, X
 124:	93 97       	sbiw	r26, 0x23	; 35
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 12e:	f5 01       	movw	r30, r10
 130:	82 a1       	ldd	r24, Z+34	; 0x22
 132:	93 a1       	ldd	r25, Z+35	; 0x23
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 13c:	d5 01       	movw	r26, r10
 13e:	92 96       	adiw	r26, 0x22	; 34
 140:	8d 91       	ld	r24, X+
 142:	9c 91       	ld	r25, X
 144:	93 97       	sbiw	r26, 0x23	; 35
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 14e:	f4 01       	movw	r30, r8
 150:	01 90       	ld	r0, Z+
 152:	00 20       	and	r0, r0
 154:	01 f4       	brne	.+0      	; 0x156 <_ZN6APDWeb18thingspeak_loggingEv+0x156>
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	e8 19       	sub	r30, r8
 15a:	f9 09       	sbc	r31, r9
 15c:	d5 01       	movw	r26, r10
 15e:	92 96       	adiw	r26, 0x22	; 34
 160:	8d 91       	ld	r24, X+
 162:	9c 91       	ld	r25, X
 164:	93 97       	sbiw	r26, 0x23	; 35
 166:	bf 01       	movw	r22, r30
 168:	4a e0       	ldi	r20, 0x0A	; 10
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 170:	f5 01       	movw	r30, r10
 172:	82 a1       	ldd	r24, Z+34	; 0x22
 174:	93 a1       	ldd	r25, Z+35	; 0x23
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 17e:	d5 01       	movw	r26, r10
 180:	92 96       	adiw	r26, 0x22	; 34
 182:	8d 91       	ld	r24, X+
 184:	9c 91       	ld	r25, X
 186:	93 97       	sbiw	r26, 0x23	; 35
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 18c:	f5 01       	movw	r30, r10
 18e:	82 a1       	ldd	r24, Z+34	; 0x22
 190:	93 a1       	ldd	r25, Z+35	; 0x23
 192:	b4 01       	movw	r22, r8
 194:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_ZN6APDWeb18thingspeak_loggingEv+0x1a2>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 1aa:	d5 01       	movw	r26, r10
 1ac:	92 96       	adiw	r26, 0x22	; 34
 1ae:	ed 91       	ld	r30, X+
 1b0:	fc 91       	ld	r31, X
 1b2:	93 97       	sbiw	r26, 0x23	; 35
 1b4:	a0 81       	ld	r26, Z
 1b6:	b1 81       	ldd	r27, Z+1	; 0x01
 1b8:	52 96       	adiw	r26, 0x12	; 18
 1ba:	2d 91       	ld	r18, X+
 1bc:	3c 91       	ld	r19, X
 1be:	53 97       	sbiw	r26, 0x13	; 19
 1c0:	cf 01       	movw	r24, r30
 1c2:	f9 01       	movw	r30, r18
 1c4:	19 95       	eicall
 1c6:	c5 01       	movw	r24, r10
 1c8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18thingspeak_loggingEv>
 1cc:	f5 01       	movw	r30, r10
 1ce:	a2 a1       	ldd	r26, Z+34	; 0x22
 1d0:	b3 a1       	ldd	r27, Z+35	; 0x23
 1d2:	10 97       	sbiw	r26, 0x00	; 0
 1d4:	01 f0       	breq	.+0      	; 0x1d6 <_ZN6APDWeb18thingspeak_loggingEv+0x1d6>
 1d6:	ed 91       	ld	r30, X+
 1d8:	fc 91       	ld	r31, X
 1da:	11 97       	sbiw	r26, 0x01	; 1
 1dc:	04 88       	ldd	r0, Z+20	; 0x14
 1de:	f5 89       	ldd	r31, Z+21	; 0x15
 1e0:	e0 2d       	mov	r30, r0
 1e2:	cd 01       	movw	r24, r26
 1e4:	19 95       	eicall
 1e6:	88 23       	and	r24, r24
 1e8:	01 f0       	breq	.+0      	; 0x1ea <_ZN6APDWeb18thingspeak_loggingEv+0x1ea>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_ZN6APDWeb18thingspeak_loggingEv+0x1ee>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	d5 01       	movw	r26, r10
 1f2:	98 96       	adiw	r26, 0x28	; 40
 1f4:	8c 93       	st	X, r24
 1f6:	ca 5f       	subi	r28, 0xFA	; 250
 1f8:	dd 4f       	sbci	r29, 0xFD	; 253
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	cf 91       	pop	r28
 206:	df 91       	pop	r29
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	bf 90       	pop	r11
 216:	af 90       	pop	r10
 218:	9f 90       	pop	r9
 21a:	8f 90       	pop	r8
 21c:	08 95       	ret

Disassembly of section .text._ZN6APDWeb21get_pachubelog_stringEPc:

00000000 <_ZN6APDWeb21get_pachubelog_stringEPc>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	bf 92       	push	r11
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
  18:	0f 93       	push	r16
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	1f 93       	push	r17
  1c:	df 93       	push	r29
  1e:	cf 93       	push	r28
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	60 97       	sbiw	r28, 0x10	; 16
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	f8 94       	cli

	// TODO Auto-generated destructor stub
}
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	0f be       	out	0x3f, r0	; 63
  2e:	cd bf       	out	0x3d, r28	; 61
  30:	5c 01       	movw	r10, r24
  32:	19 82       	std	Y+1, r1	; 0x01
  34:	1a 82       	std	Y+2, r1	; 0x02
  36:	1b 82       	std	Y+3, r1	; 0x03
  38:	1c 82       	std	Y+4, r1	; 0x04
  3a:	fe 01       	movw	r30, r28
  3c:	35 96       	adiw	r30, 0x05	; 5
  3e:	8c e0       	ldi	r24, 0x0C	; 12
  40:	df 01       	movw	r26, r30
  42:	1d 92       	st	X+, r1
  44:	8a 95       	dec	r24
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6APDWeb21get_pachubelog_stringEPc+0x48>
  48:	7b 01       	movw	r14, r22
  4a:	88 24       	eor	r8, r8
  4c:	99 24       	eor	r9, r9
  4e:	4c e2       	ldi	r20, 0x2C	; 44
  50:	44 2e       	mov	r4, r20
  52:	3e 01       	movw	r6, r28
  54:	08 94       	sec
  56:	61 1c       	adc	r6, r1
  58:	71 1c       	adc	r7, r1
  5a:	3a e0       	ldi	r19, 0x0A	; 10
  5c:	53 2e       	mov	r5, r19
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZN6APDWeb21get_pachubelog_stringEPc+0x60>
  60:	64 01       	movw	r12, r8
  62:	cc 0c       	add	r12, r12
  64:	dd 1c       	adc	r13, r13
  66:	d5 01       	movw	r26, r10
  68:	9e 96       	adiw	r26, 0x2e	; 46
  6a:	ed 91       	ld	r30, X+
  6c:	fc 91       	ld	r31, X
  6e:	9f 97       	sbiw	r26, 0x2f	; 47
  70:	ec 0d       	add	r30, r12
  72:	fd 1d       	adc	r31, r13
  74:	01 90       	ld	r0, Z+
  76:	f0 81       	ld	r31, Z
  78:	e0 2d       	mov	r30, r0
  7a:	83 8d       	ldd	r24, Z+27	; 0x1b
  7c:	94 8d       	ldd	r25, Z+28	; 0x1c
  7e:	89 2b       	or	r24, r25
  80:	01 f4       	brne	.+0      	; 0x82 <_ZN6APDWeb21get_pachubelog_stringEPc+0x82>
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN6APDWeb21get_pachubelog_stringEPc+0x84>
  84:	32 96       	adiw	r30, 0x02	; 2
  86:	c7 01       	movw	r24, r14
  88:	bf 01       	movw	r22, r30
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21get_pachubelog_stringEPc>
  8e:	d5 01       	movw	r26, r10
  90:	9e 96       	adiw	r26, 0x2e	; 46
  92:	ed 91       	ld	r30, X+
  94:	fc 91       	ld	r31, X
  96:	9f 97       	sbiw	r26, 0x2f	; 47
  98:	ec 0d       	add	r30, r12
  9a:	fd 1d       	adc	r31, r13
  9c:	01 90       	ld	r0, Z+
  9e:	f0 81       	ld	r31, Z
  a0:	e0 2d       	mov	r30, r0
  a2:	32 96       	adiw	r30, 0x02	; 2
  a4:	df 01       	movw	r26, r30
  a6:	0d 90       	ld	r0, X+
  a8:	00 20       	and	r0, r0
  aa:	01 f4       	brne	.+0      	; 0xac <_ZN6APDWeb21get_pachubelog_stringEPc+0xac>
  ac:	8d 01       	movw	r16, r26
  ae:	01 50       	subi	r16, 0x01	; 1
  b0:	10 40       	sbci	r17, 0x00	; 0
  b2:	0e 1b       	sub	r16, r30
  b4:	1f 0b       	sbc	r17, r31
  b6:	0e 0d       	add	r16, r14
  b8:	1f 1d       	adc	r17, r15
  ba:	f8 01       	movw	r30, r16
  bc:	41 92       	st	Z+, r4
  be:	8f 01       	movw	r16, r30
  c0:	d5 01       	movw	r26, r10
  c2:	9e 96       	adiw	r26, 0x2e	; 46
  c4:	ed 91       	ld	r30, X+
  c6:	fc 91       	ld	r31, X
  c8:	9f 97       	sbiw	r26, 0x2f	; 47
  ca:	ec 0d       	add	r30, r12
  cc:	fd 1d       	adc	r31, r13
  ce:	a0 81       	ld	r26, Z
  d0:	b1 81       	ldd	r27, Z+1	; 0x01
  d2:	ed 91       	ld	r30, X+
  d4:	fc 91       	ld	r31, X
  d6:	11 97       	sbiw	r26, 0x01	; 1
  d8:	06 80       	ldd	r0, Z+6	; 0x06
  da:	f7 81       	ldd	r31, Z+7	; 0x07
  dc:	e0 2d       	mov	r30, r0
  de:	cd 01       	movw	r24, r26
  e0:	b3 01       	movw	r22, r6
  e2:	19 95       	eicall
  e4:	c8 01       	movw	r24, r16
  e6:	b3 01       	movw	r22, r6
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21get_pachubelog_stringEPc>
  ec:	f3 01       	movw	r30, r6
  ee:	01 90       	ld	r0, Z+
  f0:	00 20       	and	r0, r0
  f2:	01 f4       	brne	.+0      	; 0xf4 <_ZN6APDWeb21get_pachubelog_stringEPc+0xf4>
  f4:	7f 01       	movw	r14, r30
  f6:	08 94       	sec
  f8:	e1 08       	sbc	r14, r1
  fa:	f1 08       	sbc	r15, r1
  fc:	e6 18       	sub	r14, r6
  fe:	f7 08       	sbc	r15, r7
 100:	e0 0e       	add	r14, r16
 102:	f1 1e       	adc	r15, r17
 104:	d7 01       	movw	r26, r14
 106:	5d 92       	st	X+, r5
 108:	7d 01       	movw	r14, r26
 10a:	08 94       	sec
 10c:	81 1c       	adc	r8, r1
 10e:	91 1c       	adc	r9, r1
 110:	f5 01       	movw	r30, r10
 112:	80 a9       	ldd	r24, Z+48	; 0x30
 114:	91 a9       	ldd	r25, Z+49	; 0x31
 116:	88 16       	cp	r8, r24
 118:	99 06       	cpc	r9, r25
 11a:	04 f4       	brge	.+0      	; 0x11c <_ZN6APDWeb21get_pachubelog_stringEPc+0x11c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_ZN6APDWeb21get_pachubelog_stringEPc+0x11e>
 11e:	88 24       	eor	r8, r8
 120:	99 24       	eor	r9, r9
 122:	9c e2       	ldi	r25, 0x2C	; 44
 124:	49 2e       	mov	r4, r25
 126:	3e 01       	movw	r6, r28
 128:	08 94       	sec
 12a:	61 1c       	adc	r6, r1
 12c:	71 1c       	adc	r7, r1
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	58 2e       	mov	r5, r24
 132:	00 c0       	rjmp	.+0      	; 0x134 <_ZN6APDWeb21get_pachubelog_stringEPc+0x134>
 134:	64 01       	movw	r12, r8
 136:	cc 0c       	add	r12, r12
 138:	dd 1c       	adc	r13, r13
 13a:	d5 01       	movw	r26, r10
 13c:	d2 96       	adiw	r26, 0x32	; 50
 13e:	ed 91       	ld	r30, X+
 140:	fc 91       	ld	r31, X
 142:	d3 97       	sbiw	r26, 0x33	; 51
 144:	ec 0d       	add	r30, r12
 146:	fd 1d       	adc	r31, r13
 148:	01 90       	ld	r0, Z+
 14a:	f0 81       	ld	r31, Z
 14c:	e0 2d       	mov	r30, r0
 14e:	85 89       	ldd	r24, Z+21	; 0x15
 150:	96 89       	ldd	r25, Z+22	; 0x16
 152:	89 2b       	or	r24, r25
 154:	01 f0       	breq	.+0      	; 0x156 <_ZN6APDWeb21get_pachubelog_stringEPc+0x156>
 156:	32 96       	adiw	r30, 0x02	; 2
 158:	c7 01       	movw	r24, r14
 15a:	bf 01       	movw	r22, r30
 15c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21get_pachubelog_stringEPc>
 160:	d5 01       	movw	r26, r10
 162:	d2 96       	adiw	r26, 0x32	; 50
 164:	ed 91       	ld	r30, X+
 166:	fc 91       	ld	r31, X
 168:	d3 97       	sbiw	r26, 0x33	; 51
 16a:	ec 0d       	add	r30, r12
 16c:	fd 1d       	adc	r31, r13
 16e:	01 90       	ld	r0, Z+
 170:	f0 81       	ld	r31, Z
 172:	e0 2d       	mov	r30, r0
 174:	32 96       	adiw	r30, 0x02	; 2
 176:	df 01       	movw	r26, r30
 178:	0d 90       	ld	r0, X+
 17a:	00 20       	and	r0, r0
 17c:	01 f4       	brne	.+0      	; 0x17e <_ZN6APDWeb21get_pachubelog_stringEPc+0x17e>
 17e:	8d 01       	movw	r16, r26
 180:	01 50       	subi	r16, 0x01	; 1
 182:	10 40       	sbci	r17, 0x00	; 0
 184:	0e 1b       	sub	r16, r30
 186:	1f 0b       	sbc	r17, r31
 188:	0e 0d       	add	r16, r14
 18a:	1f 1d       	adc	r17, r15
 18c:	f8 01       	movw	r30, r16
 18e:	41 92       	st	Z+, r4
 190:	8f 01       	movw	r16, r30
 192:	d5 01       	movw	r26, r10
 194:	d2 96       	adiw	r26, 0x32	; 50
 196:	ed 91       	ld	r30, X+
 198:	fc 91       	ld	r31, X
 19a:	d3 97       	sbiw	r26, 0x33	; 51
 19c:	ec 0d       	add	r30, r12
 19e:	fd 1d       	adc	r31, r13
 1a0:	80 81       	ld	r24, Z
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	b3 01       	movw	r22, r6
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21get_pachubelog_stringEPc>
 1aa:	c8 01       	movw	r24, r16
 1ac:	b3 01       	movw	r22, r6
 1ae:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21get_pachubelog_stringEPc>
 1b2:	f3 01       	movw	r30, r6
 1b4:	01 90       	ld	r0, Z+
 1b6:	00 20       	and	r0, r0
 1b8:	01 f4       	brne	.+0      	; 0x1ba <_ZN6APDWeb21get_pachubelog_stringEPc+0x1ba>
 1ba:	7f 01       	movw	r14, r30
 1bc:	08 94       	sec
 1be:	e1 08       	sbc	r14, r1
 1c0:	f1 08       	sbc	r15, r1
 1c2:	e6 18       	sub	r14, r6
 1c4:	f7 08       	sbc	r15, r7
 1c6:	e0 0e       	add	r14, r16
 1c8:	f1 1e       	adc	r15, r17
 1ca:	d7 01       	movw	r26, r14
 1cc:	5d 92       	st	X+, r5
 1ce:	7d 01       	movw	r14, r26
 1d0:	08 94       	sec
 1d2:	81 1c       	adc	r8, r1
 1d4:	91 1c       	adc	r9, r1
 1d6:	f5 01       	movw	r30, r10
 1d8:	84 a9       	ldd	r24, Z+52	; 0x34
 1da:	95 a9       	ldd	r25, Z+53	; 0x35
 1dc:	88 16       	cp	r8, r24
 1de:	99 06       	cpc	r9, r25
 1e0:	04 f4       	brge	.+0      	; 0x1e2 <_ZN6APDWeb21get_pachubelog_stringEPc+0x1e2>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <_ZN6APDWeb21get_pachubelog_stringEPc+0x1e4>
 1e4:	8a e0       	ldi	r24, 0x0A	; 10
 1e6:	d7 01       	movw	r26, r14
 1e8:	8c 93       	st	X, r24
 1ea:	11 96       	adiw	r26, 0x01	; 1
 1ec:	1c 92       	st	X, r1
 1ee:	60 96       	adiw	r28, 0x10	; 16
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	cf 91       	pop	r28
 1fc:	df 91       	pop	r29
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	cf 90       	pop	r12
 20a:	bf 90       	pop	r11
 20c:	af 90       	pop	r10
 20e:	9f 90       	pop	r9
 210:	8f 90       	pop	r8
 212:	7f 90       	pop	r7
 214:	6f 90       	pop	r6
 216:	5f 90       	pop	r5
 218:	4f 90       	pop	r4
 21a:	08 95       	ret

Disassembly of section .text._ZN6APDWeb15pachube_loggingEv:

00000000 <_ZN6APDWeb15pachube_loggingEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	bf 92       	push	r11
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
  18:	0f 93       	push	r16
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	1f 93       	push	r17
  1c:	df 93       	push	r29
  1e:	cf 93       	push	r28
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	c6 54       	subi	r28, 0x46	; 70
  26:	d2 40       	sbci	r29, 0x02	; 2
  28:	0f b6       	in	r0, 0x3f	; 63

	// TODO Auto-generated destructor stub
}
  2a:	f8 94       	cli
  2c:	de bf       	out	0x3e, r29	; 62
  2e:	0f be       	out	0x3f, r0	; 63
  30:	cd bf       	out	0x3d, r28	; 61
  32:	5c 01       	movw	r10, r24
  34:	fc 01       	movw	r30, r24
  36:	a2 a1       	ldd	r26, Z+34	; 0x22
  38:	b3 a1       	ldd	r27, Z+35	; 0x23
  3a:	10 97       	sbiw	r26, 0x00	; 0
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN6APDWeb15pachube_loggingEv+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN6APDWeb15pachube_loggingEv+0x40>
  40:	ed 91       	ld	r30, X+
  42:	fc 91       	ld	r31, X
  44:	11 97       	sbiw	r26, 0x01	; 1
  46:	04 88       	ldd	r0, Z+20	; 0x14
  48:	f5 89       	ldd	r31, Z+21	; 0x15
  4a:	e0 2d       	mov	r30, r0
  4c:	cd 01       	movw	r24, r26
  4e:	19 95       	eicall
  50:	88 23       	and	r24, r24
  52:	01 f0       	breq	.+0      	; 0x54 <_ZN6APDWeb15pachube_loggingEv+0x54>
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZN6APDWeb15pachube_loggingEv+0x56>
  56:	1f 82       	std	Y+7, r1	; 0x07
  58:	18 86       	std	Y+8, r1	; 0x08
  5a:	19 86       	std	Y+9, r1	; 0x09
  5c:	1a 86       	std	Y+10, r1	; 0x0a
  5e:	fe 01       	movw	r30, r28
  60:	3b 96       	adiw	r30, 0x0b	; 11
  62:	8c e3       	ldi	r24, 0x3C	; 60
  64:	df 01       	movw	r26, r30
  66:	1d 92       	st	X+, r1
  68:	8a 95       	dec	r24
  6a:	01 f4       	brne	.+0      	; 0x6c <_ZN6APDWeb15pachube_loggingEv+0x6c>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
  74:	77 e4       	ldi	r23, 0x47	; 71
  76:	47 2e       	mov	r4, r23
  78:	51 2c       	mov	r5, r1
  7a:	4c 0e       	add	r4, r28
  7c:	5d 1e       	adc	r5, r29
  7e:	c5 01       	movw	r24, r10
  80:	b2 01       	movw	r22, r4
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
  86:	ed b7       	in	r30, 0x3d	; 61
  88:	fe b7       	in	r31, 0x3e	; 62
  8a:	38 97       	sbiw	r30, 0x08	; 8
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	fe bf       	out	0x3e, r31	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	ed bf       	out	0x3d, r30	; 61
  96:	31 96       	adiw	r30, 0x01	; 1
  98:	67 e0       	ldi	r22, 0x07	; 7
  9a:	86 2e       	mov	r8, r22
  9c:	91 2c       	mov	r9, r1
  9e:	8c 0e       	add	r8, r28
  a0:	9d 1e       	adc	r9, r29
  a2:	ad b7       	in	r26, 0x3d	; 61
  a4:	be b7       	in	r27, 0x3e	; 62
  a6:	12 96       	adiw	r26, 0x02	; 2
  a8:	9c 92       	st	X, r9
  aa:	8e 92       	st	-X, r8
  ac:	11 97       	sbiw	r26, 0x01	; 1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	93 83       	std	Z+3, r25	; 0x03
  b4:	82 83       	std	Z+2, r24	; 0x02
  b6:	86 e9       	ldi	r24, 0x96	; 150
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	a8 0e       	add	r10, r24
  bc:	b9 1e       	adc	r11, r25
  be:	d5 01       	movw	r26, r10
  c0:	2d 91       	ld	r18, X+
  c2:	3d 91       	ld	r19, X+
  c4:	4d 91       	ld	r20, X+
  c6:	5c 91       	ld	r21, X
  c8:	8a e6       	ldi	r24, 0x6A	; 106
  ca:	9f ef       	ldi	r25, 0xFF	; 255
  cc:	a8 0e       	add	r10, r24
  ce:	b9 1e       	adc	r11, r25
  d0:	24 83       	std	Z+4, r18	; 0x04
  d2:	35 83       	std	Z+5, r19	; 0x05
  d4:	46 83       	std	Z+6, r20	; 0x06
  d6:	57 83       	std	Z+7, r21	; 0x07
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
  dc:	ad b7       	in	r26, 0x3d	; 61
  de:	be b7       	in	r27, 0x3e	; 62
  e0:	18 96       	adiw	r26, 0x08	; 8
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	be bf       	out	0x3e, r27	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	ad bf       	out	0x3d, r26	; 61
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	b2 01       	movw	r22, r4
  f2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
  fe:	54 e7       	ldi	r21, 0x74	; 116
 100:	65 2e       	mov	r6, r21
 102:	71 2c       	mov	r7, r1
 104:	6a 0c       	add	r6, r10
 106:	7b 1c       	adc	r7, r11
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	b3 01       	movw	r22, r6
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	b4 01       	movw	r22, r8
 118:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 11c:	f5 01       	movw	r30, r10
 11e:	e2 a0       	ldd	r14, Z+34	; 0x22
 120:	f3 a0       	ldd	r15, Z+35	; 0x23
 122:	d7 01       	movw	r26, r14
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	c4 84       	ldd	r12, Z+12	; 0x0c
 12a:	d5 84       	ldd	r13, Z+13	; 0x0d
 12c:	e0 e7       	ldi	r30, 0x70	; 112
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ae 0e       	add	r10, r30
 132:	bf 1e       	adc	r11, r31
 134:	8e 01       	movw	r16, r28
 136:	0f 5f       	subi	r16, 0xFF	; 255
 138:	1f 4f       	sbci	r17, 0xFF	; 255
 13a:	c8 01       	movw	r24, r16
 13c:	b5 01       	movw	r22, r10
 13e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 142:	84 e2       	ldi	r24, 0x24	; 36
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	a8 0e       	add	r10, r24
 148:	b9 1e       	adc	r11, r25
 14a:	d5 01       	movw	r26, r10
 14c:	4d 91       	ld	r20, X+
 14e:	5c 91       	ld	r21, X
 150:	ec e6       	ldi	r30, 0x6C	; 108
 152:	ff ef       	ldi	r31, 0xFF	; 255
 154:	ae 0e       	add	r10, r30
 156:	bf 1e       	adc	r11, r31
 158:	c7 01       	movw	r24, r14
 15a:	b8 01       	movw	r22, r16
 15c:	f6 01       	movw	r30, r12
 15e:	19 95       	eicall
 160:	89 2b       	or	r24, r25
 162:	01 f4       	brne	.+0      	; 0x164 <_ZN6APDWeb15pachube_loggingEv+0x164>
 164:	00 c0       	rjmp	.+0      	; 0x166 <_ZN6APDWeb15pachube_loggingEv+0x166>
 166:	d5 01       	movw	r26, r10
 168:	92 96       	adiw	r26, 0x22	; 34
 16a:	8d 91       	ld	r24, X+
 16c:	9c 91       	ld	r25, X
 16e:	93 97       	sbiw	r26, 0x23	; 35
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 178:	f5 01       	movw	r30, r10
 17a:	82 a1       	ldd	r24, Z+34	; 0x22
 17c:	93 a1       	ldd	r25, Z+35	; 0x23
 17e:	b4 01       	movw	r22, r8
 180:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 184:	d5 01       	movw	r26, r10
 186:	92 96       	adiw	r26, 0x22	; 34
 188:	8d 91       	ld	r24, X+
 18a:	9c 91       	ld	r25, X
 18c:	93 97       	sbiw	r26, 0x23	; 35
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 196:	f5 01       	movw	r30, r10
 198:	82 a1       	ldd	r24, Z+34	; 0x22
 19a:	93 a1       	ldd	r25, Z+35	; 0x23
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 1a4:	d5 01       	movw	r26, r10
 1a6:	92 96       	adiw	r26, 0x22	; 34
 1a8:	8d 91       	ld	r24, X+
 1aa:	9c 91       	ld	r25, X
 1ac:	93 97       	sbiw	r26, 0x23	; 35
 1ae:	b3 01       	movw	r22, r6
 1b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 1b4:	f5 01       	movw	r30, r10
 1b6:	82 a1       	ldd	r24, Z+34	; 0x22
 1b8:	93 a1       	ldd	r25, Z+35	; 0x23
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 1c2:	b5 01       	movw	r22, r10
 1c4:	67 5f       	subi	r22, 0xF7	; 247
 1c6:	7e 4f       	sbci	r23, 0xFE	; 254
 1c8:	d5 01       	movw	r26, r10
 1ca:	92 96       	adiw	r26, 0x22	; 34
 1cc:	8d 91       	ld	r24, X+
 1ce:	9c 91       	ld	r25, X
 1d0:	93 97       	sbiw	r26, 0x23	; 35
 1d2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 1d6:	f5 01       	movw	r30, r10
 1d8:	82 a1       	ldd	r24, Z+34	; 0x22
 1da:	93 a1       	ldd	r25, Z+35	; 0x23
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 1e4:	d5 01       	movw	r26, r10
 1e6:	92 96       	adiw	r26, 0x22	; 34
 1e8:	8d 91       	ld	r24, X+
 1ea:	9c 91       	ld	r25, X
 1ec:	93 97       	sbiw	r26, 0x23	; 35
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 1f6:	f5 01       	movw	r30, r10
 1f8:	82 a1       	ldd	r24, Z+34	; 0x22
 1fa:	93 a1       	ldd	r25, Z+35	; 0x23
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 204:	d5 01       	movw	r26, r10
 206:	92 96       	adiw	r26, 0x22	; 34
 208:	8d 91       	ld	r24, X+
 20a:	9c 91       	ld	r25, X
 20c:	93 97       	sbiw	r26, 0x23	; 35
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 216:	f2 01       	movw	r30, r4
 218:	01 90       	ld	r0, Z+
 21a:	00 20       	and	r0, r0
 21c:	01 f4       	brne	.+0      	; 0x21e <_ZN6APDWeb15pachube_loggingEv+0x21e>
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	e4 19       	sub	r30, r4
 222:	f5 09       	sbc	r31, r5
 224:	d5 01       	movw	r26, r10
 226:	92 96       	adiw	r26, 0x22	; 34
 228:	8d 91       	ld	r24, X+
 22a:	9c 91       	ld	r25, X
 22c:	93 97       	sbiw	r26, 0x23	; 35
 22e:	bf 01       	movw	r22, r30
 230:	4a e0       	ldi	r20, 0x0A	; 10
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 238:	f5 01       	movw	r30, r10
 23a:	82 a1       	ldd	r24, Z+34	; 0x22
 23c:	93 a1       	ldd	r25, Z+35	; 0x23
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 246:	d5 01       	movw	r26, r10
 248:	92 96       	adiw	r26, 0x22	; 34
 24a:	8d 91       	ld	r24, X+
 24c:	9c 91       	ld	r25, X
 24e:	93 97       	sbiw	r26, 0x23	; 35
 250:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 254:	f5 01       	movw	r30, r10
 256:	82 a1       	ldd	r24, Z+34	; 0x22
 258:	93 a1       	ldd	r25, Z+35	; 0x23
 25a:	b2 01       	movw	r22, r4
 25c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 268:	00 c0       	rjmp	.+0      	; 0x26a <_ZN6APDWeb15pachube_loggingEv+0x26a>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 272:	d5 01       	movw	r26, r10
 274:	92 96       	adiw	r26, 0x22	; 34
 276:	ed 91       	ld	r30, X+
 278:	fc 91       	ld	r31, X
 27a:	93 97       	sbiw	r26, 0x23	; 35
 27c:	a0 81       	ld	r26, Z
 27e:	b1 81       	ldd	r27, Z+1	; 0x01
 280:	52 96       	adiw	r26, 0x12	; 18
 282:	2d 91       	ld	r18, X+
 284:	3c 91       	ld	r19, X
 286:	53 97       	sbiw	r26, 0x13	; 19
 288:	cf 01       	movw	r24, r30
 28a:	f9 01       	movw	r30, r18
 28c:	19 95       	eicall
 28e:	00 c0       	rjmp	.+0      	; 0x290 <_ZN6APDWeb15pachube_loggingEv+0x290>
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 298:	c5 01       	movw	r24, r10
 29a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15pachube_loggingEv>
 29e:	f5 01       	movw	r30, r10
 2a0:	a2 a1       	ldd	r26, Z+34	; 0x22
 2a2:	b3 a1       	ldd	r27, Z+35	; 0x23
 2a4:	10 97       	sbiw	r26, 0x00	; 0
 2a6:	01 f0       	breq	.+0      	; 0x2a8 <_ZN6APDWeb15pachube_loggingEv+0x2a8>
 2a8:	ed 91       	ld	r30, X+
 2aa:	fc 91       	ld	r31, X
 2ac:	11 97       	sbiw	r26, 0x01	; 1
 2ae:	04 88       	ldd	r0, Z+20	; 0x14
 2b0:	f5 89       	ldd	r31, Z+21	; 0x15
 2b2:	e0 2d       	mov	r30, r0
 2b4:	cd 01       	movw	r24, r26
 2b6:	19 95       	eicall
 2b8:	88 23       	and	r24, r24
 2ba:	01 f0       	breq	.+0      	; 0x2bc <_ZN6APDWeb15pachube_loggingEv+0x2bc>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <_ZN6APDWeb15pachube_loggingEv+0x2c0>
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	d5 01       	movw	r26, r10
 2c4:	98 96       	adiw	r26, 0x28	; 40
 2c6:	8c 93       	st	X, r24
 2c8:	ca 5b       	subi	r28, 0xBA	; 186
 2ca:	dd 4f       	sbci	r29, 0xFD	; 253
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	cf 91       	pop	r28
 2d8:	df 91       	pop	r29
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	bf 90       	pop	r11
 2e8:	af 90       	pop	r10
 2ea:	9f 90       	pop	r9
 2ec:	8f 90       	pop	r8
 2ee:	7f 90       	pop	r7
 2f0:	6f 90       	pop	r6
 2f2:	5f 90       	pop	r5
 2f4:	4f 90       	pop	r4
 2f6:	08 95       	ret

Disassembly of section .text._ZN6APDWeb18get_lastlog_stringEPc:

00000000 <_ZN6APDWeb18get_lastlog_stringEPc>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	9f 92       	push	r9
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	a4 97       	sbiw	r28, 0x24	; 36
  1c:	0f b6       	in	r0, 0x3f	; 63
  1e:	f8 94       	cli
  20:	de bf       	out	0x3e, r29	; 62
  22:	0f be       	out	0x3f, r0	; 63
  24:	cd bf       	out	0x3d, r28	; 61
  26:	5c 01       	movw	r10, r24
  28:	8b 01       	movw	r16, r22

	// TODO Auto-generated destructor stub
}
  2a:	de 01       	movw	r26, r28
  2c:	51 96       	adiw	r26, 0x11	; 17
  2e:	e0 e0       	ldi	r30, 0x00	; 0
  30:	f0 e0       	ldi	r31, 0x00	; 0
  32:	84 e1       	ldi	r24, 0x14	; 20
  34:	01 90       	ld	r0, Z+
  36:	0d 92       	st	X+, r0
  38:	81 50       	subi	r24, 0x01	; 1
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN6APDWeb18get_lastlog_stringEPc+0x3c>
  3c:	d5 01       	movw	r26, r10
  3e:	9a 96       	adiw	r26, 0x2a	; 42
  40:	8d 91       	ld	r24, X+
  42:	9c 91       	ld	r25, X
  44:	9b 97       	sbiw	r26, 0x2b	; 43
  46:	00 97       	sbiw	r24, 0x00	; 0
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN6APDWeb18get_lastlog_stringEPc+0x4a>
  4a:	be 01       	movw	r22, r28
  4c:	6f 5e       	subi	r22, 0xEF	; 239
  4e:	7f 4f       	sbci	r23, 0xFF	; 255
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18get_lastlog_stringEPc>
  54:	19 82       	std	Y+1, r1	; 0x01
  56:	1a 82       	std	Y+2, r1	; 0x02
  58:	1b 82       	std	Y+3, r1	; 0x03
  5a:	1c 82       	std	Y+4, r1	; 0x04
  5c:	fe 01       	movw	r30, r28
  5e:	35 96       	adiw	r30, 0x05	; 5
  60:	8c e0       	ldi	r24, 0x0C	; 12
  62:	df 01       	movw	r26, r30
  64:	1d 92       	st	X+, r1
  66:	8a 95       	dec	r24
  68:	01 f4       	brne	.+0      	; 0x6a <_ZN6APDWeb18get_lastlog_stringEPc+0x6a>
  6a:	c8 01       	movw	r24, r16
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18get_lastlog_stringEPc>
  74:	a8 e0       	ldi	r26, 0x08	; 8
  76:	ea 2e       	mov	r14, r26
  78:	f1 2c       	mov	r15, r1
  7a:	e0 0e       	add	r14, r16
  7c:	f1 1e       	adc	r15, r17
  7e:	8e 01       	movw	r16, r28
  80:	0f 5e       	subi	r16, 0xEF	; 239
  82:	1f 4f       	sbci	r17, 0xFF	; 255
  84:	c7 01       	movw	r24, r14
  86:	b8 01       	movw	r22, r16
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18get_lastlog_stringEPc>
  8c:	d8 01       	movw	r26, r16
  8e:	0d 90       	ld	r0, X+
  90:	00 20       	and	r0, r0
  92:	01 f4       	brne	.+0      	; 0x94 <_ZN6APDWeb18get_lastlog_stringEPc+0x94>
  94:	11 97       	sbiw	r26, 0x01	; 1
  96:	a0 1b       	sub	r26, r16
  98:	b1 0b       	sbc	r27, r17
  9a:	ae 0d       	add	r26, r14
  9c:	bf 1d       	adc	r27, r15
  9e:	ee 24       	eor	r14, r14
  a0:	ff 24       	eor	r15, r15
  a2:	fc e2       	ldi	r31, 0x2C	; 44
  a4:	9f 2e       	mov	r9, r31
  a6:	6e 01       	movw	r12, r28
  a8:	08 94       	sec
  aa:	c1 1c       	adc	r12, r1
  ac:	d1 1c       	adc	r13, r1
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN6APDWeb18get_lastlog_stringEPc+0xb0>
  b0:	97 01       	movw	r18, r14
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	f5 01       	movw	r30, r10
  b8:	86 a5       	ldd	r24, Z+46	; 0x2e
  ba:	97 a5       	ldd	r25, Z+47	; 0x2f
  bc:	82 0f       	add	r24, r18
  be:	93 1f       	adc	r25, r19
  c0:	fc 01       	movw	r30, r24
  c2:	80 81       	ld	r24, Z
  c4:	91 81       	ldd	r25, Z+1	; 0x01
  c6:	fc 01       	movw	r30, r24
  c8:	83 8d       	ldd	r24, Z+27	; 0x1b
  ca:	94 8d       	ldd	r25, Z+28	; 0x1c
  cc:	89 2b       	or	r24, r25
  ce:	01 f0       	breq	.+0      	; 0xd0 <_ZN6APDWeb18get_lastlog_stringEPc+0xd0>
  d0:	9d 92       	st	X+, r9
  d2:	8d 01       	movw	r16, r26
  d4:	d5 01       	movw	r26, r10
  d6:	9e 96       	adiw	r26, 0x2e	; 46
  d8:	ed 91       	ld	r30, X+
  da:	fc 91       	ld	r31, X
  dc:	9f 97       	sbiw	r26, 0x2f	; 47
  de:	e2 0f       	add	r30, r18
  e0:	f3 1f       	adc	r31, r19
  e2:	a0 81       	ld	r26, Z
  e4:	b1 81       	ldd	r27, Z+1	; 0x01
  e6:	ed 91       	ld	r30, X+
  e8:	fc 91       	ld	r31, X
  ea:	11 97       	sbiw	r26, 0x01	; 1
  ec:	06 80       	ldd	r0, Z+6	; 0x06
  ee:	f7 81       	ldd	r31, Z+7	; 0x07
  f0:	e0 2d       	mov	r30, r0
  f2:	cd 01       	movw	r24, r26
  f4:	b6 01       	movw	r22, r12
  f6:	19 95       	eicall
  f8:	c8 01       	movw	r24, r16
  fa:	b6 01       	movw	r22, r12
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18get_lastlog_stringEPc>
 100:	d6 01       	movw	r26, r12
 102:	0d 90       	ld	r0, X+
 104:	00 20       	and	r0, r0
 106:	01 f4       	brne	.+0      	; 0x108 <_ZN6APDWeb18get_lastlog_stringEPc+0x108>
 108:	11 97       	sbiw	r26, 0x01	; 1
 10a:	ac 19       	sub	r26, r12
 10c:	bd 09       	sbc	r27, r13
 10e:	a0 0f       	add	r26, r16
 110:	b1 1f       	adc	r27, r17
 112:	08 94       	sec
 114:	e1 1c       	adc	r14, r1
 116:	f1 1c       	adc	r15, r1
 118:	f5 01       	movw	r30, r10
 11a:	80 a9       	ldd	r24, Z+48	; 0x30
 11c:	91 a9       	ldd	r25, Z+49	; 0x31
 11e:	e8 16       	cp	r14, r24
 120:	f9 06       	cpc	r15, r25
 122:	04 f0       	brlt	.+0      	; 0x124 <_ZN6APDWeb18get_lastlog_stringEPc+0x124>
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	8c 93       	st	X, r24
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	1c 92       	st	X, r1
 12c:	a4 96       	adiw	r28, 0x24	; 36
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	ef 90       	pop	r14
 144:	df 90       	pop	r13
 146:	cf 90       	pop	r12
 148:	bf 90       	pop	r11
 14a:	af 90       	pop	r10
 14c:	9f 90       	pop	r9
 14e:	08 95       	ret

Disassembly of section .text._ZN6APDWeb11web_loggingEv:

00000000 <_ZN6APDWeb11web_loggingEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	c6 50       	subi	r28, 0x06	; 6
  1e:	d2 40       	sbci	r29, 0x02	; 2
  20:	0f b6       	in	r0, 0x3f	; 63
  22:	f8 94       	cli
  24:	de bf       	out	0x3e, r29	; 62
  26:	0f be       	out	0x3f, r0	; 63
  28:	cd bf       	out	0x3d, r28	; 61

	// TODO Auto-generated destructor stub
}
  2a:	5c 01       	movw	r10, r24
  2c:	fc 01       	movw	r30, r24
  2e:	a2 a1       	ldd	r26, Z+34	; 0x22
  30:	b3 a1       	ldd	r27, Z+35	; 0x23
  32:	10 97       	sbiw	r26, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN6APDWeb11web_loggingEv+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6APDWeb11web_loggingEv+0x38>
  38:	ed 91       	ld	r30, X+
  3a:	fc 91       	ld	r31, X
  3c:	11 97       	sbiw	r26, 0x01	; 1
  3e:	04 88       	ldd	r0, Z+20	; 0x14
  40:	f5 89       	ldd	r31, Z+21	; 0x15
  42:	e0 2d       	mov	r30, r0
  44:	cd 01       	movw	r24, r26
  46:	19 95       	eicall
  48:	88 23       	and	r24, r24
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN6APDWeb11web_loggingEv+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6APDWeb11web_loggingEv+0x4e>
  4e:	b7 e0       	ldi	r27, 0x07	; 7
  50:	8b 2e       	mov	r8, r27
  52:	91 2c       	mov	r9, r1
  54:	8c 0e       	add	r8, r28
  56:	9d 1e       	adc	r9, r29
  58:	c5 01       	movw	r24, r10
  5a:	b4 01       	movw	r22, r8
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
  60:	d5 01       	movw	r26, r10
  62:	92 96       	adiw	r26, 0x22	; 34
  64:	ed 90       	ld	r14, X+
  66:	fc 90       	ld	r15, X
  68:	93 97       	sbiw	r26, 0x23	; 35
  6a:	d7 01       	movw	r26, r14
  6c:	ed 91       	ld	r30, X+
  6e:	fc 91       	ld	r31, X
  70:	c4 84       	ldd	r12, Z+12	; 0x0c
  72:	d5 84       	ldd	r13, Z+13	; 0x0d
  74:	e6 e4       	ldi	r30, 0x46	; 70
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	ae 0e       	add	r10, r30
  7a:	bf 1e       	adc	r11, r31
  7c:	8e 01       	movw	r16, r28
  7e:	0f 5f       	subi	r16, 0xFF	; 255
  80:	1f 4f       	sbci	r17, 0xFF	; 255
  82:	c8 01       	movw	r24, r16
  84:	b5 01       	movw	r22, r10
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
  8a:	84 e2       	ldi	r24, 0x24	; 36
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	a8 0e       	add	r10, r24
  90:	b9 1e       	adc	r11, r25
  92:	d5 01       	movw	r26, r10
  94:	4d 91       	ld	r20, X+
  96:	5c 91       	ld	r21, X
  98:	e6 e9       	ldi	r30, 0x96	; 150
  9a:	ff ef       	ldi	r31, 0xFF	; 255
  9c:	ae 0e       	add	r10, r30
  9e:	bf 1e       	adc	r11, r31
  a0:	c7 01       	movw	r24, r14
  a2:	b8 01       	movw	r22, r16
  a4:	f6 01       	movw	r30, r12
  a6:	19 95       	eicall
  a8:	89 2b       	or	r24, r25
  aa:	01 f4       	brne	.+0      	; 0xac <_ZN6APDWeb11web_loggingEv+0xac>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN6APDWeb11web_loggingEv+0xae>
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
  b6:	d5 01       	movw	r26, r10
  b8:	92 96       	adiw	r26, 0x22	; 34
  ba:	8d 91       	ld	r24, X+
  bc:	9c 91       	ld	r25, X
  be:	93 97       	sbiw	r26, 0x23	; 35
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
  c8:	f5 01       	movw	r30, r10
  ca:	82 a1       	ldd	r24, Z+34	; 0x22
  cc:	93 a1       	ldd	r25, Z+35	; 0x23
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
  d6:	d5 01       	movw	r26, r10
  d8:	92 96       	adiw	r26, 0x22	; 34
  da:	8d 91       	ld	r24, X+
  dc:	9c 91       	ld	r25, X
  de:	93 97       	sbiw	r26, 0x23	; 35
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
  e8:	f5 01       	movw	r30, r10
  ea:	82 a1       	ldd	r24, Z+34	; 0x22
  ec:	93 a1       	ldd	r25, Z+35	; 0x23
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
  f6:	b5 01       	movw	r22, r10
  f8:	66 5b       	subi	r22, 0xB6	; 182
  fa:	7f 4f       	sbci	r23, 0xFF	; 255
  fc:	d5 01       	movw	r26, r10
  fe:	92 96       	adiw	r26, 0x22	; 34
 100:	8d 91       	ld	r24, X+
 102:	9c 91       	ld	r25, X
 104:	93 97       	sbiw	r26, 0x23	; 35
 106:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 10a:	f5 01       	movw	r30, r10
 10c:	82 a1       	ldd	r24, Z+34	; 0x22
 10e:	93 a1       	ldd	r25, Z+35	; 0x23
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 118:	b5 01       	movw	r22, r10
 11a:	68 53       	subi	r22, 0x38	; 56
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	d5 01       	movw	r26, r10
 120:	92 96       	adiw	r26, 0x22	; 34
 122:	8d 91       	ld	r24, X+
 124:	9c 91       	ld	r25, X
 126:	93 97       	sbiw	r26, 0x23	; 35
 128:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 12c:	f5 01       	movw	r30, r10
 12e:	82 a1       	ldd	r24, Z+34	; 0x22
 130:	93 a1       	ldd	r25, Z+35	; 0x23
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 13a:	d5 01       	movw	r26, r10
 13c:	92 96       	adiw	r26, 0x22	; 34
 13e:	8d 91       	ld	r24, X+
 140:	9c 91       	ld	r25, X
 142:	93 97       	sbiw	r26, 0x23	; 35
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 14c:	f5 01       	movw	r30, r10
 14e:	82 a1       	ldd	r24, Z+34	; 0x22
 150:	93 a1       	ldd	r25, Z+35	; 0x23
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 15a:	d5 01       	movw	r26, r10
 15c:	92 96       	adiw	r26, 0x22	; 34
 15e:	8d 91       	ld	r24, X+
 160:	9c 91       	ld	r25, X
 162:	93 97       	sbiw	r26, 0x23	; 35
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 16c:	f4 01       	movw	r30, r8
 16e:	01 90       	ld	r0, Z+
 170:	00 20       	and	r0, r0
 172:	01 f4       	brne	.+0      	; 0x174 <_ZN6APDWeb11web_loggingEv+0x174>
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	e8 19       	sub	r30, r8
 178:	f9 09       	sbc	r31, r9
 17a:	d5 01       	movw	r26, r10
 17c:	92 96       	adiw	r26, 0x22	; 34
 17e:	8d 91       	ld	r24, X+
 180:	9c 91       	ld	r25, X
 182:	93 97       	sbiw	r26, 0x23	; 35
 184:	bf 01       	movw	r22, r30
 186:	4a e0       	ldi	r20, 0x0A	; 10
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 18e:	f5 01       	movw	r30, r10
 190:	82 a1       	ldd	r24, Z+34	; 0x22
 192:	93 a1       	ldd	r25, Z+35	; 0x23
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 19c:	d5 01       	movw	r26, r10
 19e:	92 96       	adiw	r26, 0x22	; 34
 1a0:	8d 91       	ld	r24, X+
 1a2:	9c 91       	ld	r25, X
 1a4:	93 97       	sbiw	r26, 0x23	; 35
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 1aa:	f5 01       	movw	r30, r10
 1ac:	82 a1       	ldd	r24, Z+34	; 0x22
 1ae:	93 a1       	ldd	r25, Z+35	; 0x23
 1b0:	b4 01       	movw	r22, r8
 1b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <_ZN6APDWeb11web_loggingEv+0x1b8>
 1b8:	d5 01       	movw	r26, r10
 1ba:	92 96       	adiw	r26, 0x22	; 34
 1bc:	ed 91       	ld	r30, X+
 1be:	fc 91       	ld	r31, X
 1c0:	93 97       	sbiw	r26, 0x23	; 35
 1c2:	a0 81       	ld	r26, Z
 1c4:	b1 81       	ldd	r27, Z+1	; 0x01
 1c6:	52 96       	adiw	r26, 0x12	; 18
 1c8:	2d 91       	ld	r18, X+
 1ca:	3c 91       	ld	r19, X
 1cc:	53 97       	sbiw	r26, 0x13	; 19
 1ce:	cf 01       	movw	r24, r30
 1d0:	f9 01       	movw	r30, r18
 1d2:	19 95       	eicall
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_ZN6APDWeb11web_loggingEv+0x1d6>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 1de:	c5 01       	movw	r24, r10
 1e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11web_loggingEv>
 1e4:	f5 01       	movw	r30, r10
 1e6:	a2 a1       	ldd	r26, Z+34	; 0x22
 1e8:	b3 a1       	ldd	r27, Z+35	; 0x23
 1ea:	10 97       	sbiw	r26, 0x00	; 0
 1ec:	01 f0       	breq	.+0      	; 0x1ee <_ZN6APDWeb11web_loggingEv+0x1ee>
 1ee:	ed 91       	ld	r30, X+
 1f0:	fc 91       	ld	r31, X
 1f2:	11 97       	sbiw	r26, 0x01	; 1
 1f4:	04 88       	ldd	r0, Z+20	; 0x14
 1f6:	f5 89       	ldd	r31, Z+21	; 0x15
 1f8:	e0 2d       	mov	r30, r0
 1fa:	cd 01       	movw	r24, r26
 1fc:	19 95       	eicall
 1fe:	88 23       	and	r24, r24
 200:	01 f0       	breq	.+0      	; 0x202 <_ZN6APDWeb11web_loggingEv+0x202>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	00 c0       	rjmp	.+0      	; 0x206 <_ZN6APDWeb11web_loggingEv+0x206>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	d5 01       	movw	r26, r10
 20a:	98 96       	adiw	r26, 0x28	; 40
 20c:	8c 93       	st	X, r24
 20e:	ca 5f       	subi	r28, 0xFA	; 250
 210:	dd 4f       	sbci	r29, 0xFD	; 253
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	cf 91       	pop	r28
 21e:	df 91       	pop	r29
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	df 90       	pop	r13
 22a:	cf 90       	pop	r12
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	9f 90       	pop	r9
 232:	8f 90       	pop	r8
 234:	08 95       	ret

Disassembly of section .text._ZN6APDWeb15setup_webclientEv:

00000000 <_ZN6APDWeb15setup_webclientEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8a a1       	ldd	r24, Y+34	; 0x22
   c:	9b a1       	ldd	r25, Y+35	; 0x23
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	89 2b       	or	r24, r25
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6APDWeb15setup_webclientEv+0x12>
  12:	8d e0       	ldi	r24, 0x0D	; 13
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15setup_webclientEv>
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	18 2f       	mov	r17, r24
  1c:	09 2f       	mov	r16, r25
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15setup_webclientEv>
  22:	1a a3       	std	Y+34, r17	; 0x22
  24:	0b a3       	std	Y+35, r16	; 0x23
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	8a a1       	ldd	r24, Y+34	; 0x22

	// TODO Auto-generated destructor stub
}
  2a:	9b a1       	ldd	r25, Y+35	; 0x23
  2c:	89 2b       	or	r24, r25
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN6APDWeb15setup_webclientEv+0x30>
  30:	21 e0       	ldi	r18, 0x01	; 1
  32:	82 2f       	mov	r24, r18
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	08 95       	ret

Disassembly of section .text._ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_:

00000000 <_ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	6b 01       	movw	r12, r22
  16:	7a 01       	movw	r14, r20
  18:	59 01       	movw	r10, r18
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	da 01       	movw	r26, r20
  1c:	1c 92       	st	X, r1
  1e:	c0 e0       	ldi	r28, 0x00	; 0
  20:	d0 e0       	ldi	r29, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_+0x24>
  24:	81 81       	ldd	r24, Z+1	; 0x01
  26:	81 93       	st	Z+, r24
  28:	2f 5f       	subi	r18, 0xFF	; 255

	// TODO Auto-generated destructor stub
}
  2a:	3f 4f       	sbci	r19, 0xFF	; 255
  2c:	c2 e6       	ldi	r28, 0x62	; 98
  2e:	d0 e0       	ldi	r29, 0x00	; 0
  30:	23 36       	cpi	r18, 0x63	; 99
  32:	31 05       	cpc	r19, r1
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_+0x36>
  36:	87 01       	movw	r16, r14
  38:	0c 0f       	add	r16, r28
  3a:	1d 1f       	adc	r17, r29
  3c:	d6 01       	movw	r26, r12
  3e:	ed 91       	ld	r30, X+
  40:	fc 91       	ld	r31, X
  42:	04 80       	ldd	r0, Z+4	; 0x04
  44:	f5 81       	ldd	r31, Z+5	; 0x05
  46:	e0 2d       	mov	r30, r0
  48:	c6 01       	movw	r24, r12
  4a:	19 95       	eicall
  4c:	89 2b       	or	r24, r25
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_+0x50>
  50:	c7 01       	movw	r24, r14
  52:	b5 01       	movw	r22, r10
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_>
  58:	00 97       	sbiw	r24, 0x00	; 0
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_+0x5c>
  5c:	d6 01       	movw	r26, r12
  5e:	ed 91       	ld	r30, X+
  60:	fc 91       	ld	r31, X
  62:	06 80       	ldd	r0, Z+6	; 0x06
  64:	f7 81       	ldd	r31, Z+7	; 0x07
  66:	e0 2d       	mov	r30, r0
  68:	c6 01       	movw	r24, r12
  6a:	19 95       	eicall
  6c:	f8 01       	movw	r30, r16
  6e:	80 83       	st	Z, r24
  70:	21 96       	adiw	r28, 0x01	; 1
  72:	11 82       	std	Z+1, r1	; 0x01
  74:	0f 5f       	subi	r16, 0xFF	; 255
  76:	1f 4f       	sbci	r17, 0xFF	; 255
  78:	c3 36       	cpi	r28, 0x63	; 99
  7a:	d1 05       	cpc	r29, r1
  7c:	04 f0       	brlt	.+0      	; 0x7e <_ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_+0x7e>
  7e:	f7 01       	movw	r30, r14
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	00 c0       	rjmp	.+0      	; 0x86 <_ZN6APDWeb15forwardToMarkerEP14EthernetClientPcS2_+0x86>
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
  8c:	0f 91       	pop	r16
  8e:	ff 90       	pop	r15
  90:	ef 90       	pop	r14
  92:	df 90       	pop	r13
  94:	cf 90       	pop	r12
  96:	bf 90       	pop	r11
  98:	af 90       	pop	r10
  9a:	08 95       	ret

Disassembly of section .text._ZN6APDWeb26processProvisioningRequestEP14EthernetClient:

00000000 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	c7 59       	subi	r28, 0x97	; 151

	// TODO Auto-generated destructor stub
}
  2a:	d0 40       	sbci	r29, 0x00	; 0
  2c:	0f b6       	in	r0, 0x3f	; 63
  2e:	f8 94       	cli
  30:	de bf       	out	0x3e, r29	; 62
  32:	0f be       	out	0x3f, r0	; 63
  34:	cd bf       	out	0x3d, r28	; 61
  36:	5c 01       	movw	r10, r24
  38:	7b 01       	movw	r14, r22
  3a:	61 15       	cp	r22, r1
  3c:	71 05       	cpc	r23, r1
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x42>
  42:	1c 82       	std	Y+4, r1	; 0x04
  44:	1d 82       	std	Y+5, r1	; 0x05
  46:	1e 82       	std	Y+6, r1	; 0x06
  48:	1f 82       	std	Y+7, r1	; 0x07
  4a:	fe 01       	movw	r30, r28
  4c:	38 96       	adiw	r30, 0x08	; 8
  4e:	8a e0       	ldi	r24, 0x0A	; 10
  50:	df 01       	movw	r26, r30
  52:	1d 92       	st	X+, r1
  54:	8a 95       	dec	r24
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x58>
  58:	19 aa       	std	Y+49, r1	; 0x31
  5a:	8e 01       	movw	r16, r28
  5c:	0c 56       	subi	r16, 0x6C	; 108
  5e:	1f 4f       	sbci	r17, 0xFF	; 255
  60:	f8 01       	movw	r30, r16
  62:	10 82       	st	Z, r1
  64:	c5 01       	movw	r24, r10
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	50 e0       	ldi	r21, 0x00	; 0
  6a:	20 e0       	ldi	r18, 0x00	; 0
  6c:	30 e0       	ldi	r19, 0x00	; 0
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
  72:	cb 56       	subi	r28, 0x6B	; 107
  74:	df 4f       	sbci	r29, 0xFF	; 255
  76:	18 82       	st	Y, r1
  78:	c5 59       	subi	r28, 0x95	; 149
  7a:	d0 40       	sbci	r29, 0x00	; 0
  7c:	88 24       	eor	r8, r8
  7e:	99 24       	eor	r9, r9
  80:	44 24       	eor	r4, r4
  82:	55 24       	eor	r5, r5
  84:	81 e3       	ldi	r24, 0x31	; 49
  86:	68 2e       	mov	r6, r24
  88:	71 2c       	mov	r7, r1
  8a:	6c 0e       	add	r6, r28
  8c:	7d 1e       	adc	r7, r29
  8e:	ca 56       	subi	r28, 0x6A	; 106
  90:	df 4f       	sbci	r29, 0xFF	; 255
  92:	19 83       	std	Y+1, r17	; 0x01
  94:	08 83       	st	Y, r16
  96:	c6 59       	subi	r28, 0x96	; 150
  98:	d0 40       	sbci	r29, 0x00	; 0
  9a:	04 e0       	ldi	r16, 0x04	; 4
  9c:	20 2e       	mov	r2, r16
  9e:	31 2c       	mov	r3, r1
  a0:	2c 0e       	add	r2, r28
  a2:	3d 1e       	adc	r3, r29
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0xa6>
  a6:	c5 01       	movw	r24, r10
  a8:	b7 01       	movw	r22, r14
  aa:	a3 01       	movw	r20, r6
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
  b4:	c3 01       	movw	r24, r6
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
  be:	89 2b       	or	r24, r25
  c0:	01 f4       	brne	.+0      	; 0xc2 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0xc2>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0xc4>
  c4:	c5 01       	movw	r24, r10
  c6:	b7 01       	movw	r22, r14
  c8:	a3 01       	movw	r20, r6
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
  d2:	c3 01       	movw	r24, r6
  d4:	66 e2       	ldi	r22, 0x26	; 38
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
  dc:	fc 01       	movw	r30, r24
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	01 f0       	breq	.+0      	; 0xe2 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0xe2>
  e2:	10 82       	st	Z, r1
  e4:	c1 01       	movw	r24, r2
  e6:	b3 01       	movw	r22, r6
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
  ec:	c5 01       	movw	r24, r10
  ee:	b7 01       	movw	r22, r14
  f0:	a3 01       	movw	r20, r6
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
  fa:	c3 01       	movw	r24, r6
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	01 f4       	brne	.+0      	; 0x108 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x108>
 108:	00 c0       	rjmp	.+0      	; 0x10a <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x10a>
 10a:	d5 01       	movw	r26, r10
 10c:	9c 96       	adiw	r26, 0x2c	; 44
 10e:	ed 91       	ld	r30, X+
 110:	fc 91       	ld	r31, X
 112:	9d 97       	sbiw	r26, 0x2d	; 45
 114:	80 85       	ldd	r24, Z+8	; 0x08
 116:	91 85       	ldd	r25, Z+9	; 0x09
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 120:	88 23       	and	r24, r24
 122:	01 f0       	breq	.+0      	; 0x124 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x124>
 124:	d5 01       	movw	r26, r10
 126:	9c 96       	adiw	r26, 0x2c	; 44
 128:	ed 91       	ld	r30, X+
 12a:	fc 91       	ld	r31, X
 12c:	9d 97       	sbiw	r26, 0x2d	; 45
 12e:	80 85       	ldd	r24, Z+8	; 0x08
 130:	91 85       	ldd	r25, Z+9	; 0x09
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 13a:	ce 01       	movw	r24, r28
 13c:	42 96       	adiw	r24, 0x12	; 18
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	42 e4       	ldi	r20, 0x42	; 66
 144:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 148:	19 aa       	std	Y+49, r1	; 0x31
 14a:	cc 24       	eor	r12, r12
 14c:	dd 24       	eor	r13, r13
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x150>
 150:	15 32       	cpi	r17, 0x25	; 37
 152:	01 f0       	breq	.+0      	; 0x154 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x154>
 154:	00 c0       	rjmp	.+0      	; 0x156 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x156>
 156:	d7 01       	movw	r26, r14
 158:	ed 91       	ld	r30, X+
 15a:	fc 91       	ld	r31, X
 15c:	04 80       	ldd	r0, Z+4	; 0x04
 15e:	f5 81       	ldd	r31, Z+5	; 0x05
 160:	e0 2d       	mov	r30, r0
 162:	c7 01       	movw	r24, r14
 164:	19 95       	eicall
 166:	02 97       	sbiw	r24, 0x02	; 2
 168:	04 f4       	brge	.+0      	; 0x16a <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x16a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x16c>
 16c:	80 91 00 00 	lds	r24, 0x0000
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	1b 82       	std	Y+3, r1	; 0x03
 174:	1a 82       	std	Y+2, r1	; 0x02
 176:	1b 82       	std	Y+3, r1	; 0x03
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	06 80       	ldd	r0, Z+6	; 0x06
 180:	f7 81       	ldd	r31, Z+7	; 0x07
 182:	e0 2d       	mov	r30, r0
 184:	c7 01       	movw	r24, r14
 186:	19 95       	eicall
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	d7 01       	movw	r26, r14
 18c:	ed 91       	ld	r30, X+
 18e:	fc 91       	ld	r31, X
 190:	06 80       	ldd	r0, Z+6	; 0x06
 192:	f7 81       	ldd	r31, Z+7	; 0x07
 194:	e0 2d       	mov	r30, r0
 196:	c7 01       	movw	r24, r14
 198:	19 95       	eicall
 19a:	08 2f       	mov	r16, r24
 19c:	8a 83       	std	Y+2, r24	; 0x02
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	99 27       	eor	r25, r25
 1a2:	87 fd       	sbrc	r24, 7
 1a4:	90 95       	com	r25
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 1aa:	89 2b       	or	r24, r25
 1ac:	01 f4       	brne	.+0      	; 0x1ae <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1ae>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1b0>
 1b0:	80 2f       	mov	r24, r16
 1b2:	99 27       	eor	r25, r25
 1b4:	87 fd       	sbrc	r24, 7
 1b6:	90 95       	com	r25
 1b8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 1bc:	89 2b       	or	r24, r25
 1be:	01 f4       	brne	.+0      	; 0x1c0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1c0>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1c2>
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 1ca:	68 2f       	mov	r22, r24
 1cc:	86 32       	cpi	r24, 0x26	; 38
 1ce:	01 f4       	brne	.+0      	; 0x1d0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1d0>
 1d0:	89 8d       	ldd	r24, Y+25	; 0x19
 1d2:	88 23       	and	r24, r24
 1d4:	01 f4       	brne	.+0      	; 0x1d6 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1d6>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1d8>
 1d8:	ce 01       	movw	r24, r28
 1da:	42 96       	adiw	r24, 0x12	; 18
 1dc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 1e0:	08 94       	sec
 1e2:	41 1c       	adc	r4, r1
 1e4:	51 1c       	adc	r5, r1
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1e8>
 1e8:	18 2f       	mov	r17, r24
 1ea:	11 30       	cpi	r17, 0x01	; 1
 1ec:	01 f0       	breq	.+0      	; 0x1ee <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1ee>
 1ee:	16 32       	cpi	r17, 0x26	; 38
 1f0:	01 f0       	breq	.+0      	; 0x1f2 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1f2>
 1f2:	08 94       	sec
 1f4:	81 1c       	adc	r8, r1
 1f6:	91 1c       	adc	r9, r1
 1f8:	89 8d       	ldd	r24, Y+25	; 0x19
 1fa:	88 23       	and	r24, r24
 1fc:	01 f0       	breq	.+0      	; 0x1fe <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x1fe>
 1fe:	ce 01       	movw	r24, r28
 200:	42 96       	adiw	r24, 0x12	; 18
 202:	61 2f       	mov	r22, r17
 204:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 208:	08 94       	sec
 20a:	41 1c       	adc	r4, r1
 20c:	51 1c       	adc	r5, r1
 20e:	f3 01       	movw	r30, r6
 210:	ec 0d       	add	r30, r12
 212:	fd 1d       	adc	r31, r13
 214:	10 83       	st	Z, r17
 216:	08 94       	sec
 218:	c1 1c       	adc	r12, r1
 21a:	d1 1c       	adc	r13, r1
 21c:	f3 01       	movw	r30, r6
 21e:	ec 0d       	add	r30, r12
 220:	fd 1d       	adc	r31, r13
 222:	10 82       	st	Z, r1
 224:	b3 e6       	ldi	r27, 0x63	; 99
 226:	cb 16       	cp	r12, r27
 228:	d1 04       	cpc	r13, r1
 22a:	04 f0       	brlt	.+0      	; 0x22c <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x22c>
 22c:	f3 01       	movw	r30, r6
 22e:	81 81       	ldd	r24, Z+1	; 0x01
 230:	81 93       	st	Z+, r24
 232:	ca 56       	subi	r28, 0x6A	; 106
 234:	df 4f       	sbci	r29, 0xFF	; 255
 236:	88 81       	ld	r24, Y
 238:	99 81       	ldd	r25, Y+1	; 0x01
 23a:	c6 59       	subi	r28, 0x96	; 150
 23c:	d0 40       	sbci	r29, 0x00	; 0
 23e:	e8 17       	cp	r30, r24
 240:	f9 07       	cpc	r31, r25
 242:	01 f4       	brne	.+0      	; 0x244 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x244>
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 250:	12 e6       	ldi	r17, 0x62	; 98
 252:	c1 2e       	mov	r12, r17
 254:	d1 2c       	mov	r13, r1
 256:	d7 01       	movw	r26, r14
 258:	ed 91       	ld	r30, X+
 25a:	fc 91       	ld	r31, X
 25c:	04 80       	ldd	r0, Z+4	; 0x04
 25e:	f5 81       	ldd	r31, Z+5	; 0x05
 260:	e0 2d       	mov	r30, r0
 262:	c7 01       	movw	r24, r14
 264:	19 95       	eicall
 266:	89 2b       	or	r24, r25
 268:	01 f0       	breq	.+0      	; 0x26a <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x26a>
 26a:	c3 01       	movw	r24, r6
 26c:	66 e2       	ldi	r22, 0x26	; 38
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	01 f4       	brne	.+0      	; 0x278 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x278>
 278:	d7 01       	movw	r26, r14
 27a:	ed 91       	ld	r30, X+
 27c:	fc 91       	ld	r31, X
 27e:	06 80       	ldd	r0, Z+6	; 0x06
 280:	f7 81       	ldd	r31, Z+7	; 0x07
 282:	e0 2d       	mov	r30, r0
 284:	c7 01       	movw	r24, r14
 286:	19 95       	eicall
 288:	18 2f       	mov	r17, r24
 28a:	8b 32       	cpi	r24, 0x2B	; 43
 28c:	01 f0       	breq	.+0      	; 0x28e <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x28e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x290>
 290:	00 c0       	rjmp	.+0      	; 0x292 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x292>
 292:	89 8d       	ldd	r24, Y+25	; 0x19
 294:	88 23       	and	r24, r24
 296:	01 f0       	breq	.+0      	; 0x298 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x298>
 298:	ce 01       	movw	r24, r28
 29a:	46 96       	adiw	r24, 0x16	; 22
 29c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 2a0:	8c 81       	ldd	r24, Y+4	; 0x04
 2a2:	88 23       	and	r24, r24
 2a4:	01 f0       	breq	.+0      	; 0x2a6 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x2a6>
 2a6:	d5 01       	movw	r26, r10
 2a8:	9c 96       	adiw	r26, 0x2c	; 44
 2aa:	ed 91       	ld	r30, X+
 2ac:	fc 91       	ld	r31, X
 2ae:	9d 97       	sbiw	r26, 0x2d	; 45
 2b0:	80 85       	ldd	r24, Z+8	; 0x08
 2b2:	91 85       	ldd	r25, Z+9	; 0x09
 2b4:	b1 01       	movw	r22, r2
 2b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 2ba:	88 23       	and	r24, r24
 2bc:	01 f0       	breq	.+0      	; 0x2be <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x2be>
 2be:	d5 01       	movw	r26, r10
 2c0:	9c 96       	adiw	r26, 0x2c	; 44
 2c2:	ed 91       	ld	r30, X+
 2c4:	fc 91       	ld	r31, X
 2c6:	9d 97       	sbiw	r26, 0x2d	; 45
 2c8:	80 85       	ldd	r24, Z+8	; 0x08
 2ca:	91 85       	ldd	r25, Z+9	; 0x09
 2cc:	b1 01       	movw	r22, r2
 2ce:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 2d2:	d5 01       	movw	r26, r10
 2d4:	9c 96       	adiw	r26, 0x2c	; 44
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	9d 97       	sbiw	r26, 0x2d	; 45
 2dc:	80 85       	ldd	r24, Z+8	; 0x08
 2de:	91 85       	ldd	r25, Z+9	; 0x09
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	a1 01       	movw	r20, r2
 2e6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 2ea:	cb 56       	subi	r28, 0x6B	; 107
 2ec:	df 4f       	sbci	r29, 0xFF	; 255
 2ee:	b8 81       	ld	r27, Y
 2f0:	c5 59       	subi	r28, 0x95	; 149
 2f2:	d0 40       	sbci	r29, 0x00	; 0
 2f4:	bf 5f       	subi	r27, 0xFF	; 255
 2f6:	cb 56       	subi	r28, 0x6B	; 107
 2f8:	df 4f       	sbci	r29, 0xFF	; 255
 2fa:	b8 83       	st	Y, r27
 2fc:	c5 59       	subi	r28, 0x95	; 149
 2fe:	d0 40       	sbci	r29, 0x00	; 0
 300:	c3 01       	movw	r24, r6
 302:	66 e2       	ldi	r22, 0x26	; 38
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 30a:	fc 01       	movw	r30, r24
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	01 f0       	breq	.+0      	; 0x310 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x310>
 310:	10 82       	st	Z, r1
 312:	e0 e0       	ldi	r30, 0x00	; 0
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	fb 8b       	std	Y+19, r31	; 0x13
 318:	ea 8b       	std	Y+18, r30	; 0x12
 31a:	89 8d       	ldd	r24, Y+25	; 0x19
 31c:	88 23       	and	r24, r24
 31e:	01 f0       	breq	.+0      	; 0x320 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x320>
 320:	ce 01       	movw	r24, r28
 322:	46 96       	adiw	r24, 0x16	; 22
 324:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 328:	00 c0       	rjmp	.+0      	; 0x32a <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x32a>
 32a:	cb 56       	subi	r28, 0x6B	; 107
 32c:	df 4f       	sbci	r29, 0xFF	; 255
 32e:	f8 81       	ld	r31, Y
 330:	c5 59       	subi	r28, 0x95	; 149
 332:	d0 40       	sbci	r29, 0x00	; 0
 334:	ff 23       	and	r31, r31
 336:	01 f4       	brne	.+0      	; 0x338 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x338>
 338:	c7 01       	movw	r24, r14
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 342:	d7 01       	movw	r26, r14
 344:	ed 91       	ld	r30, X+
 346:	fc 91       	ld	r31, X
 348:	04 80       	ldd	r0, Z+4	; 0x04
 34a:	f5 81       	ldd	r31, Z+5	; 0x05
 34c:	e0 2d       	mov	r30, r0
 34e:	c7 01       	movw	r24, r14
 350:	19 95       	eicall
 352:	89 2b       	or	r24, r25
 354:	01 f0       	breq	.+0      	; 0x356 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x356>
 356:	00 c0       	rjmp	.+0      	; 0x358 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x358>
 358:	c7 01       	movw	r24, r14
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 362:	c7 01       	movw	r24, r14
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 36c:	c7 01       	movw	r24, r14
 36e:	b4 01       	movw	r22, r8
 370:	4a e0       	ldi	r20, 0x0A	; 10
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 378:	c7 01       	movw	r24, r14
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 382:	c7 01       	movw	r24, r14
 384:	b4 01       	movw	r22, r8
 386:	4a e0       	ldi	r20, 0x0A	; 10
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 38e:	c7 01       	movw	r24, r14
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 398:	c7 01       	movw	r24, r14
 39a:	cb 56       	subi	r28, 0x6B	; 107
 39c:	df 4f       	sbci	r29, 0xFF	; 255
 39e:	68 81       	ld	r22, Y
 3a0:	c5 59       	subi	r28, 0x95	; 149
 3a2:	d0 40       	sbci	r29, 0x00	; 0
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 3ac:	c7 01       	movw	r24, r14
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 3b6:	84 14       	cp	r8, r4
 3b8:	95 04       	cpc	r9, r5
 3ba:	01 f0       	breq	.+0      	; 0x3bc <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x3bc>
 3bc:	c7 01       	movw	r24, r14
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 3c6:	c5 01       	movw	r24, r10
 3c8:	b7 01       	movw	r22, r14
 3ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x3d0>
 3d0:	10 e2       	ldi	r17, 0x20	; 32
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x3d4>
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x3de>
 3de:	08 94       	sec
 3e0:	81 1c       	adc	r8, r1
 3e2:	91 1c       	adc	r9, r1
 3e4:	11 e0       	ldi	r17, 0x01	; 1
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <_ZN6APDWeb26processProvisioningRequestEP14EthernetClient+0x3e8>
 3e8:	c9 56       	subi	r28, 0x69	; 105
 3ea:	df 4f       	sbci	r29, 0xFF	; 255
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
 3f6:	cf 91       	pop	r28
 3f8:	df 91       	pop	r29
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	bf 90       	pop	r11
 408:	af 90       	pop	r10
 40a:	9f 90       	pop	r9
 40c:	8f 90       	pop	r8
 40e:	7f 90       	pop	r7
 410:	6f 90       	pop	r6
 412:	5f 90       	pop	r5
 414:	4f 90       	pop	r4
 416:	3f 90       	pop	r3
 418:	2f 90       	pop	r2
 41a:	08 95       	ret

Disassembly of section .text._ZN6APDWeb10saveAPIkeyEPcS0_:

00000000 <_ZN6APDWeb10saveAPIkeyEPcS0_>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	df 93       	push	r29
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	cf 93       	push	r28
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	6f 97       	sbiw	r28, 0x1f	; 31
  16:	0f b6       	in	r0, 0x3f	; 63
  18:	f8 94       	cli
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	de bf       	out	0x3e, r29	; 62
  1c:	0f be       	out	0x3f, r0	; 63
  1e:	cd bf       	out	0x3d, r28	; 61
  20:	6b 01       	movw	r12, r22
  22:	8a 01       	movw	r16, r20
  24:	fc 01       	movw	r30, r24
  26:	84 a5       	ldd	r24, Z+44	; 0x2c
  28:	95 a5       	ldd	r25, Z+45	; 0x2d

	// TODO Auto-generated destructor stub
}
  2a:	00 97       	sbiw	r24, 0x00	; 0
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6APDWeb10saveAPIkeyEPcS0_+0x2e>
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10saveAPIkeyEPcS0_>
  32:	88 23       	and	r24, r24
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN6APDWeb10saveAPIkeyEPcS0_+0x36>
  36:	7e 01       	movw	r14, r28
  38:	08 94       	sec
  3a:	e1 1c       	adc	r14, r1
  3c:	f1 1c       	adc	r15, r1
  3e:	c7 01       	movw	r24, r14
  40:	b8 01       	movw	r22, r16
  42:	42 e4       	ldi	r20, 0x42	; 66
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10saveAPIkeyEPcS0_>
  48:	88 85       	ldd	r24, Y+8	; 0x08
  4a:	88 23       	and	r24, r24
  4c:	01 f0       	breq	.+0      	; 0x4e <_ZN6APDWeb10saveAPIkeyEPcS0_+0x4e>
  4e:	c7 01       	movw	r24, r14
  50:	b6 01       	movw	r22, r12
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10saveAPIkeyEPcS0_>
  56:	ce 01       	movw	r24, r28
  58:	05 96       	adiw	r24, 0x05	; 5
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10saveAPIkeyEPcS0_>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZN6APDWeb10saveAPIkeyEPcS0_+0x60>
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10saveAPIkeyEPcS0_>
  68:	88 85       	ldd	r24, Y+8	; 0x08
  6a:	88 23       	and	r24, r24
  6c:	01 f0       	breq	.+0      	; 0x6e <_ZN6APDWeb10saveAPIkeyEPcS0_+0x6e>
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	9a 83       	std	Y+2, r25	; 0x02
  74:	89 83       	std	Y+1, r24	; 0x01
  76:	ce 01       	movw	r24, r28
  78:	05 96       	adiw	r24, 0x05	; 5
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10saveAPIkeyEPcS0_>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN6APDWeb10saveAPIkeyEPcS0_+0x80>
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10saveAPIkeyEPcS0_>
  88:	6f 96       	adiw	r28, 0x1f	; 31
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	1f 91       	pop	r17
  9a:	0f 91       	pop	r16
  9c:	ff 90       	pop	r15
  9e:	ef 90       	pop	r14
  a0:	df 90       	pop	r13
  a2:	cf 90       	pop	r12
  a4:	08 95       	ret

Disassembly of section .text._ZN6APDWeb11dumpPachubeEv:

00000000 <_ZN6APDWeb11dumpPachubeEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	df 93       	push	r29
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	cf 93       	push	r28
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	c3 58       	subi	r28, 0x83	; 131
  16:	d0 40       	sbci	r29, 0x00	; 0
  18:	0f b6       	in	r0, 0x3f	; 63
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	f8 94       	cli
  1c:	de bf       	out	0x3e, r29	; 62
  1e:	0f be       	out	0x3f, r0	; 63
  20:	cd bf       	out	0x3d, r28	; 61
  22:	7c 01       	movw	r14, r24
  24:	dc 01       	movw	r26, r24
  26:	9c 96       	adiw	r26, 0x2c	; 44
  28:	ed 91       	ld	r30, X+

	// TODO Auto-generated destructor stub
}
  2a:	fc 91       	ld	r31, X
  2c:	9d 97       	sbiw	r26, 0x2d	; 45
  2e:	80 85       	ldd	r24, Z+8	; 0x08
  30:	91 85       	ldd	r25, Z+9	; 0x09
  32:	60 e0       	ldi	r22, 0x00	; 0
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11dumpPachubeEv>
  3a:	88 23       	and	r24, r24
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6APDWeb11dumpPachubeEv+0x3e>
  3e:	d7 01       	movw	r26, r14
  40:	9c 96       	adiw	r26, 0x2c	; 44
  42:	ed 91       	ld	r30, X+
  44:	fc 91       	ld	r31, X
  46:	9d 97       	sbiw	r26, 0x2d	; 45
  48:	80 85       	ldd	r24, Z+8	; 0x08
  4a:	91 85       	ldd	r25, Z+9	; 0x09
  4c:	60 e0       	ldi	r22, 0x00	; 0
  4e:	70 e0       	ldi	r23, 0x00	; 0
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11dumpPachubeEv>
  54:	6e 01       	movw	r12, r28
  56:	08 94       	sec
  58:	c1 1c       	adc	r12, r1
  5a:	d1 1c       	adc	r13, r1
  5c:	c6 01       	movw	r24, r12
  5e:	60 e0       	ldi	r22, 0x00	; 0
  60:	70 e0       	ldi	r23, 0x00	; 0
  62:	42 e4       	ldi	r20, 0x42	; 66
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11dumpPachubeEv>
  68:	88 85       	ldd	r24, Y+8	; 0x08
  6a:	88 23       	and	r24, r24
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN6APDWeb11dumpPachubeEv+0x6e>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN6APDWeb11dumpPachubeEv+0x70>
  70:	18 a2       	std	Y+32, r1	; 0x20
  72:	19 a2       	std	Y+33, r1	; 0x21
  74:	1a a2       	std	Y+34, r1	; 0x22
  76:	1b a2       	std	Y+35, r1	; 0x23
  78:	fe 01       	movw	r30, r28
  7a:	b4 96       	adiw	r30, 0x24	; 36
  7c:	80 e6       	ldi	r24, 0x60	; 96
  7e:	df 01       	movw	r26, r30
  80:	1d 92       	st	X+, r1
  82:	8a 95       	dec	r24
  84:	01 f4       	brne	.+0      	; 0x86 <_ZN6APDWeb11dumpPachubeEv+0x86>
  86:	2d b7       	in	r18, 0x3d	; 61
  88:	3e b7       	in	r19, 0x3e	; 62
  8a:	28 51       	subi	r18, 0x18	; 24
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	3e bf       	out	0x3e, r19	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	2d bf       	out	0x3d, r18	; 61
  98:	ed b7       	in	r30, 0x3d	; 61
  9a:	fe b7       	in	r31, 0x3e	; 62
  9c:	31 96       	adiw	r30, 0x01	; 1
  9e:	8e 01       	movw	r16, r28
  a0:	00 5e       	subi	r16, 0xE0	; 224
  a2:	1f 4f       	sbci	r17, 0xFF	; 255
  a4:	ad b7       	in	r26, 0x3d	; 61
  a6:	be b7       	in	r27, 0x3e	; 62
  a8:	12 96       	adiw	r26, 0x02	; 2
  aa:	1c 93       	st	X, r17
  ac:	0e 93       	st	-X, r16
  ae:	11 97       	sbiw	r26, 0x01	; 1
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	82 83       	std	Z+2, r24	; 0x02
  b8:	24 e7       	ldi	r18, 0x74	; 116
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	e2 0e       	add	r14, r18
  be:	f3 1e       	adc	r15, r19
  c0:	f5 82       	std	Z+5, r15	; 0x05
  c2:	e4 82       	std	Z+4, r14	; 0x04
  c4:	8c ef       	ldi	r24, 0xFC	; 252
  c6:	9f ef       	ldi	r25, 0xFF	; 255
  c8:	e8 0e       	add	r14, r24
  ca:	f9 1e       	adc	r15, r25
  cc:	d7 01       	movw	r26, r14
  ce:	8d 91       	ld	r24, X+
  d0:	86 83       	std	Z+6, r24	; 0x06
  d2:	17 82       	std	Z+7, r1	; 0x07
  d4:	8d 91       	ld	r24, X+
  d6:	80 87       	std	Z+8, r24	; 0x08
  d8:	11 86       	std	Z+9, r1	; 0x09
  da:	8d 91       	ld	r24, X+
  dc:	7d 01       	movw	r14, r26
  de:	82 87       	std	Z+10, r24	; 0x0a
  e0:	13 86       	std	Z+11, r1	; 0x0b
  e2:	8c 91       	ld	r24, X
  e4:	84 87       	std	Z+12, r24	; 0x0c
  e6:	15 86       	std	Z+13, r1	; 0x0d
  e8:	21 e2       	ldi	r18, 0x21	; 33
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	e2 0e       	add	r14, r18
  ee:	f3 1e       	adc	r15, r19
  f0:	d7 01       	movw	r26, r14
  f2:	8d 91       	ld	r24, X+
  f4:	9d 91       	ld	r25, X+
  f6:	97 87       	std	Z+15, r25	; 0x0f
  f8:	86 87       	std	Z+14, r24	; 0x0e
  fa:	2d 91       	ld	r18, X+
  fc:	3d 91       	ld	r19, X+
  fe:	4d 91       	ld	r20, X+
 100:	5d 91       	ld	r21, X+
 102:	7d 01       	movw	r14, r26
 104:	20 8b       	std	Z+16, r18	; 0x10
 106:	31 8b       	std	Z+17, r19	; 0x11
 108:	42 8b       	std	Z+18, r20	; 0x12
 10a:	53 8b       	std	Z+19, r21	; 0x13
 10c:	2d 91       	ld	r18, X+
 10e:	3d 91       	ld	r19, X+
 110:	4d 91       	ld	r20, X+
 112:	5c 91       	ld	r21, X
 114:	86 e6       	ldi	r24, 0x66	; 102
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	e8 0e       	add	r14, r24
 11a:	f9 1e       	adc	r15, r25
 11c:	24 8b       	std	Z+20, r18	; 0x14
 11e:	35 8b       	std	Z+21, r19	; 0x15
 120:	46 8b       	std	Z+22, r20	; 0x16
 122:	57 8b       	std	Z+23, r21	; 0x17
 124:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11dumpPachubeEv>
 128:	ad b7       	in	r26, 0x3d	; 61
 12a:	be b7       	in	r27, 0x3e	; 62
 12c:	58 96       	adiw	r26, 0x18	; 24
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	be bf       	out	0x3e, r27	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	ad bf       	out	0x3d, r26	; 61
 138:	c6 01       	movw	r24, r12
 13a:	b8 01       	movw	r22, r16
 13c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11dumpPachubeEv>
 140:	ce 01       	movw	r24, r28
 142:	05 96       	adiw	r24, 0x05	; 5
 144:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11dumpPachubeEv>
 148:	00 c0       	rjmp	.+0      	; 0x14a <_ZN6APDWeb11dumpPachubeEv+0x14a>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11dumpPachubeEv>
 152:	c7 01       	movw	r24, r14
 154:	29 e0       	ldi	r18, 0x09	; 9
 156:	31 e0       	ldi	r19, 0x01	; 1
 158:	e2 0e       	add	r14, r18
 15a:	f3 1e       	adc	r15, r19
 15c:	b7 01       	movw	r22, r14
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11dumpPachubeEv>
 166:	88 85       	ldd	r24, Y+8	; 0x08
 168:	88 23       	and	r24, r24
 16a:	01 f0       	breq	.+0      	; 0x16c <_ZN6APDWeb11dumpPachubeEv+0x16c>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	9a 83       	std	Y+2, r25	; 0x02
 172:	89 83       	std	Y+1, r24	; 0x01
 174:	ce 01       	movw	r24, r28
 176:	05 96       	adiw	r24, 0x05	; 5
 178:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11dumpPachubeEv>
 17c:	cd 57       	subi	r28, 0x7D	; 125
 17e:	df 4f       	sbci	r29, 0xFF	; 255
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	cf 91       	pop	r28
 18c:	df 91       	pop	r29
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	08 95       	ret

Disassembly of section .text._ZN6APDWeb9ListFilesE14EthernetClientPKch:

00000000 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	a4 97       	sbiw	r28, 0x24	; 36

	// TODO Auto-generated destructor stub
}
  2a:	0f b6       	in	r0, 0x3f	; 63
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	4c 01       	movw	r8, r24
  36:	d6 2e       	mov	r13, r22
  38:	c7 2e       	mov	r12, r23
  3a:	8a 01       	movw	r16, r20
  3c:	f2 2e       	mov	r15, r18
  3e:	dc 01       	movw	r26, r24
  40:	9c 96       	adiw	r26, 0x2c	; 44
  42:	ed 91       	ld	r30, X+
  44:	fc 91       	ld	r31, X
  46:	9d 97       	sbiw	r26, 0x2d	; 45
  48:	a2 84       	ldd	r10, Z+10	; 0x0a
  4a:	b3 84       	ldd	r11, Z+11	; 0x0b
  4c:	30 97       	sbiw	r30, 0x00	; 0
  4e:	01 f4       	brne	.+0      	; 0x50 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x52>
  52:	cf 01       	movw	r24, r30
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
  58:	81 30       	cpi	r24, 0x01	; 1
  5a:	01 f0       	breq	.+0      	; 0x5c <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x5e>
  5e:	d4 01       	movw	r26, r8
  60:	9c 96       	adiw	r26, 0x2c	; 44
  62:	ed 91       	ld	r30, X+
  64:	fc 91       	ld	r31, X
  66:	9d 97       	sbiw	r26, 0x2d	; 45
  68:	82 85       	ldd	r24, Z+10	; 0x0a
  6a:	93 85       	ldd	r25, Z+11	; 0x0b
  6c:	89 2b       	or	r24, r25
  6e:	01 f4       	brne	.+0      	; 0x70 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x72>
  72:	c5 01       	movw	r24, r10
  74:	04 96       	adiw	r24, 0x04	; 4
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	50 e0       	ldi	r21, 0x00	; 0
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
  82:	01 15       	cp	r16, r1
  84:	11 05       	cpc	r17, r1
  86:	01 f0       	breq	.+0      	; 0x88 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x88>
  88:	f8 01       	movw	r30, r16
  8a:	80 81       	ld	r24, Z
  8c:	88 23       	and	r24, r24
  8e:	01 f0       	breq	.+0      	; 0x90 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x90>
  90:	8f e1       	ldi	r24, 0x1F	; 31
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
  98:	5c 01       	movw	r10, r24
  9a:	b8 01       	movw	r22, r16
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
  a2:	8d 2d       	mov	r24, r13
  a4:	9c 2d       	mov	r25, r12
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
  ae:	d4 01       	movw	r26, r8
  b0:	9c 96       	adiw	r26, 0x2c	; 44
  b2:	ed 91       	ld	r30, X+
  b4:	fc 91       	ld	r31, X
  b6:	9d 97       	sbiw	r26, 0x2d	; 45
  b8:	82 85       	ldd	r24, Z+10	; 0x0a
  ba:	93 85       	ldd	r25, Z+11	; 0x0b
  bc:	a8 16       	cp	r10, r24
  be:	b9 06       	cpc	r11, r25
  c0:	01 f0       	breq	.+0      	; 0xc2 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0xc2>
  c2:	8d 2d       	mov	r24, r13
  c4:	9c 2d       	mov	r25, r12
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
  ce:	f5 01       	movw	r30, r10
  d0:	34 96       	adiw	r30, 0x04	; 4
  d2:	fa a3       	std	Y+34, r31	; 0x22
  d4:	e9 a3       	std	Y+33, r30	; 0x21
  d6:	3e 01       	movw	r6, r28
  d8:	08 94       	sec
  da:	61 1c       	adc	r6, r1
  dc:	71 1c       	adc	r7, r1
  de:	ce 01       	movw	r24, r28
  e0:	0c 96       	adiw	r24, 0x0c	; 12
  e2:	9c a3       	std	Y+36, r25	; 0x24
  e4:	8b a3       	std	Y+35, r24	; 0x23
  e6:	8f 2d       	mov	r24, r15
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	31 e0       	ldi	r19, 0x01	; 1
  ec:	23 2e       	mov	r2, r19
  ee:	31 2c       	mov	r3, r1
  f0:	28 22       	and	r2, r24
  f2:	39 22       	and	r3, r25
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	42 2e       	mov	r4, r18
  f8:	51 2c       	mov	r5, r1
  fa:	48 22       	and	r4, r24
  fc:	59 22       	and	r5, r25
  fe:	00 c0       	rjmp	.+0      	; 0x100 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x100>
 100:	8e 32       	cpi	r24, 0x2E	; 46
 102:	01 f4       	brne	.+0      	; 0x104 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x104>
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	8e 32       	cpi	r24, 0x2E	; 46
 108:	01 f0       	breq	.+0      	; 0x10a <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x10a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x10c>
 10c:	8c 85       	ldd	r24, Y+12	; 0x0c
 10e:	83 fd       	sbrc	r24, 3
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x112>
 112:	8d 2d       	mov	r24, r13
 114:	9c 2d       	mov	r25, r12
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 11e:	73 01       	movw	r14, r6
 120:	d7 01       	movw	r26, r14
 122:	8c 91       	ld	r24, X
 124:	80 32       	cpi	r24, 0x20	; 32
 126:	01 f0       	breq	.+0      	; 0x128 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x128>
 128:	8e 2d       	mov	r24, r14
 12a:	86 19       	sub	r24, r6
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	01 f4       	brne	.+0      	; 0x130 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x130>
 130:	8d 2d       	mov	r24, r13
 132:	9c 2d       	mov	r25, r12
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 13c:	8d 2d       	mov	r24, r13
 13e:	9c 2d       	mov	r25, r12
 140:	f7 01       	movw	r30, r14
 142:	60 81       	ld	r22, Z
 144:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	d7 01       	movw	r26, r14
 14e:	6c 91       	ld	r22, X
 150:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 154:	08 94       	sec
 156:	e1 1c       	adc	r14, r1
 158:	f1 1c       	adc	r15, r1
 15a:	eb a1       	ldd	r30, Y+35	; 0x23
 15c:	fc a1       	ldd	r31, Y+36	; 0x24
 15e:	ee 16       	cp	r14, r30
 160:	ff 06       	cpc	r15, r31
 162:	01 f4       	brne	.+0      	; 0x164 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x164>
 164:	8c 85       	ldd	r24, Y+12	; 0x0c
 166:	88 71       	andi	r24, 0x18	; 24
 168:	80 31       	cpi	r24, 0x10	; 16
 16a:	01 f4       	brne	.+0      	; 0x16c <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x16c>
 16c:	8d 2d       	mov	r24, r13
 16e:	9c 2d       	mov	r25, r12
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 184:	8d 2d       	mov	r24, r13
 186:	9c 2d       	mov	r25, r12
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 190:	83 01       	movw	r16, r6
 192:	d8 01       	movw	r26, r16
 194:	8c 91       	ld	r24, X
 196:	80 32       	cpi	r24, 0x20	; 32
 198:	01 f0       	breq	.+0      	; 0x19a <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x19a>
 19a:	80 2f       	mov	r24, r16
 19c:	86 19       	sub	r24, r6
 19e:	88 30       	cpi	r24, 0x08	; 8
 1a0:	01 f4       	brne	.+0      	; 0x1a2 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x1a2>
 1a2:	8d 2d       	mov	r24, r13
 1a4:	9c 2d       	mov	r25, r12
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 1ae:	8d 2d       	mov	r24, r13
 1b0:	9c 2d       	mov	r25, r12
 1b2:	f8 01       	movw	r30, r16
 1b4:	60 81       	ld	r22, Z
 1b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	0e 15       	cp	r16, r14
 1c0:	1f 05       	cpc	r17, r15
 1c2:	01 f4       	brne	.+0      	; 0x1c4 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x1c4>
 1c4:	8d 2d       	mov	r24, r13
 1c6:	9c 2d       	mov	r25, r12
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 1d0:	8c 85       	ldd	r24, Y+12	; 0x0c
 1d2:	88 71       	andi	r24, 0x18	; 24
 1d4:	80 31       	cpi	r24, 0x10	; 16
 1d6:	01 f4       	brne	.+0      	; 0x1d8 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x1d8>
 1d8:	8d 2d       	mov	r24, r13
 1da:	9c 2d       	mov	r25, r12
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 1e4:	21 14       	cp	r2, r1
 1e6:	31 04       	cpc	r3, r1
 1e8:	01 f0       	breq	.+0      	; 0x1ea <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x1ea>
 1ea:	89 8d       	ldd	r24, Y+25	; 0x19
 1ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1ee:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 1f2:	8d 2d       	mov	r24, r13
 1f4:	9c 2d       	mov	r25, r12
 1f6:	60 e2       	ldi	r22, 0x20	; 32
 1f8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 1fc:	8f 89       	ldd	r24, Y+23	; 0x17
 1fe:	98 8d       	ldd	r25, Y+24	; 0x18
 200:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 204:	8c 85       	ldd	r24, Y+12	; 0x0c
 206:	88 71       	andi	r24, 0x18	; 24
 208:	80 31       	cpi	r24, 0x10	; 16
 20a:	01 f0       	breq	.+0      	; 0x20c <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x20c>
 20c:	41 14       	cp	r4, r1
 20e:	51 04       	cpc	r5, r1
 210:	01 f0       	breq	.+0      	; 0x212 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x212>
 212:	8d 2d       	mov	r24, r13
 214:	9c 2d       	mov	r25, r12
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 21e:	4d 8d       	ldd	r20, Y+29	; 0x1d
 220:	5e 8d       	ldd	r21, Y+30	; 0x1e
 222:	6f 8d       	ldd	r22, Y+31	; 0x1f
 224:	78 a1       	ldd	r23, Y+32	; 0x20
 226:	8d 2d       	mov	r24, r13
 228:	9c 2d       	mov	r25, r12
 22a:	2a e0       	ldi	r18, 0x0A	; 10
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 232:	8d 2d       	mov	r24, r13
 234:	9c 2d       	mov	r25, r12
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 23e:	89 a1       	ldd	r24, Y+33	; 0x21
 240:	9a a1       	ldd	r25, Y+34	; 0x22
 242:	b3 01       	movw	r22, r6
 244:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 248:	18 16       	cp	r1, r24
 24a:	04 f4       	brge	.+0      	; 0x24c <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x24c>
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	88 23       	and	r24, r24
 250:	01 f0       	breq	.+0      	; 0x252 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x252>
 252:	85 3e       	cpi	r24, 0xE5	; 229
 254:	01 f0       	breq	.+0      	; 0x256 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x256>
 256:	00 c0       	rjmp	.+0      	; 0x258 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x258>
 258:	c5 01       	movw	r24, r10
 25a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x260>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 268:	8d 2d       	mov	r24, r13
 26a:	9c 2d       	mov	r25, r12
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	00 c0       	rjmp	.+0      	; 0x272 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x272>
 272:	8d 2d       	mov	r24, r13
 274:	9c 2d       	mov	r25, r12
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ListFilesE14EthernetClientPKch>
 27e:	d4 01       	movw	r26, r8
 280:	9c 96       	adiw	r26, 0x2c	; 44
 282:	ed 91       	ld	r30, X+
 284:	fc 91       	ld	r31, X
 286:	9d 97       	sbiw	r26, 0x2d	; 45
 288:	82 85       	ldd	r24, Z+10	; 0x0a
 28a:	93 85       	ldd	r25, Z+11	; 0x0b
 28c:	a8 16       	cp	r10, r24
 28e:	b9 06       	cpc	r11, r25
 290:	01 f4       	brne	.+0      	; 0x292 <_ZN6APDWeb9ListFilesE14EthernetClientPKch+0x292>
 292:	a4 96       	adiw	r28, 0x24	; 36
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	cf 91       	pop	r28
 2a0:	df 91       	pop	r29
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	bf 90       	pop	r11
 2b0:	af 90       	pop	r10
 2b2:	9f 90       	pop	r9
 2b4:	8f 90       	pop	r8
 2b6:	7f 90       	pop	r7
 2b8:	6f 90       	pop	r6
 2ba:	5f 90       	pop	r5
 2bc:	4f 90       	pop	r4
 2be:	3f 90       	pop	r3
 2c0:	2f 90       	pop	r2
 2c2:	08 95       	ret

Disassembly of section .text._ZN6APDWeb9ServeFileE14EthernetClientPKc:

00000000 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	df 93       	push	r29
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	cf 93       	push	r28
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	ac 97       	sbiw	r28, 0x2c	; 44
  16:	0f b6       	in	r0, 0x3f	; 63
  18:	f8 94       	cli
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	de bf       	out	0x3e, r29	; 62
  1c:	0f be       	out	0x3f, r0	; 63
  1e:	cd bf       	out	0x3d, r28	; 61
  20:	7c 01       	movw	r14, r24
  22:	8b 01       	movw	r16, r22
  24:	6a 01       	movw	r12, r20
  26:	dc 01       	movw	r26, r24
  28:	9c 96       	adiw	r26, 0x2c	; 44

	// TODO Auto-generated destructor stub
}
  2a:	ed 91       	ld	r30, X+
  2c:	fc 91       	ld	r31, X
  2e:	9d 97       	sbiw	r26, 0x2d	; 45
  30:	62 85       	ldd	r22, Z+10	; 0x0a
  32:	73 85       	ldd	r23, Z+11	; 0x0b
  34:	61 15       	cp	r22, r1
  36:	71 05       	cpc	r23, r1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0x3a>
  3a:	60 e0       	ldi	r22, 0x00	; 0
  3c:	70 e0       	ldi	r23, 0x00	; 0
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0x40>
  40:	6c 5f       	subi	r22, 0xFC	; 252
  42:	7f 4f       	sbci	r23, 0xFF	; 255
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	9f 87       	std	Y+15, r25	; 0x0f
  4a:	8e 87       	std	Y+14, r24	; 0x0e
  4c:	19 8a       	std	Y+17, r1	; 0x11
  4e:	18 8a       	std	Y+16, r1	; 0x10
  50:	1d 8a       	std	Y+21, r1	; 0x15
  52:	1a 8a       	std	Y+18, r1	; 0x12
  54:	ce 01       	movw	r24, r28
  56:	42 96       	adiw	r24, 0x12	; 18
  58:	a6 01       	movw	r20, r12
  5a:	21 e0       	ldi	r18, 0x01	; 1
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  60:	88 23       	and	r24, r24
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0x64>
  64:	10 e0       	ldi	r17, 0x00	; 0
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0x68>
  68:	8d 89       	ldd	r24, Y+21	; 0x15
  6a:	81 30       	cpi	r24, 0x01	; 1
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0x6e>
  6e:	c8 01       	movw	r24, r16
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  78:	c6 01       	movw	r24, r12
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  82:	89 2b       	or	r24, r25
  84:	01 f4       	brne	.+0      	; 0x86 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0x86>
  86:	c6 01       	movw	r24, r12
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	70 e0       	ldi	r23, 0x00	; 0
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  90:	89 2b       	or	r24, r25
  92:	01 f4       	brne	.+0      	; 0x94 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0x94>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0x96>
  96:	c8 01       	movw	r24, r16
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  a0:	c8 01       	movw	r24, r16
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  aa:	78 01       	movw	r14, r16
  ac:	8e 01       	movw	r16, r28
  ae:	0e 5e       	subi	r16, 0xEE	; 238
  b0:	1f 4f       	sbci	r17, 0xFF	; 255
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0xb4>
  b4:	c7 01       	movw	r24, r14
  b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  ba:	c8 01       	movw	r24, r16
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  c0:	bc 01       	movw	r22, r24
  c2:	97 ff       	sbrs	r25, 7
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0xc6>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0xc8>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	00 f0       	brcs	.+0      	; 0xcc <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0xcc>
  cc:	c8 01       	movw	r24, r16
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  d2:	c7 01       	movw	r24, r14
  d4:	b8 01       	movw	r22, r16
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
  e2:	f8 01       	movw	r30, r16
  e4:	82 81       	ldd	r24, Z+2	; 0x02
  e6:	93 81       	ldd	r25, Z+3	; 0x03
  e8:	9c 83       	std	Y+4, r25	; 0x04
  ea:	8b 83       	std	Y+3, r24	; 0x03
  ec:	84 81       	ldd	r24, Z+4	; 0x04
  ee:	95 81       	ldd	r25, Z+5	; 0x05
  f0:	a6 81       	ldd	r26, Z+6	; 0x06
  f2:	b7 81       	ldd	r27, Z+7	; 0x07
  f4:	8d 83       	std	Y+5, r24	; 0x05
  f6:	9e 83       	std	Y+6, r25	; 0x06
  f8:	af 83       	std	Y+7, r26	; 0x07
  fa:	b8 87       	std	Y+8, r27	; 0x08
  fc:	80 85       	ldd	r24, Z+8	; 0x08
  fe:	91 85       	ldd	r25, Z+9	; 0x09
 100:	a2 85       	ldd	r26, Z+10	; 0x0a
 102:	b3 85       	ldd	r27, Z+11	; 0x0b
 104:	89 87       	std	Y+9, r24	; 0x09
 106:	9a 87       	std	Y+10, r25	; 0x0a
 108:	ab 87       	std	Y+11, r26	; 0x0b
 10a:	bc 87       	std	Y+12, r27	; 0x0c
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	84 85       	ldd	r24, Z+12	; 0x0c
 116:	8d 87       	std	Y+13, r24	; 0x0d
 118:	c7 01       	movw	r24, r14
 11a:	be 01       	movw	r22, r28
 11c:	6f 5f       	subi	r22, 0xFF	; 255
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	a6 01       	movw	r20, r12
 122:	23 e0       	ldi	r18, 0x03	; 3
 124:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
 128:	c7 01       	movw	r24, r14
 12a:	b8 01       	movw	r22, r16
 12c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
 130:	ce 01       	movw	r24, r28
 132:	42 96       	adiw	r24, 0x12	; 18
 134:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
 138:	11 e0       	ldi	r17, 0x01	; 1
 13a:	8d 89       	ldd	r24, Y+21	; 0x15
 13c:	88 23       	and	r24, r24
 13e:	01 f0       	breq	.+0      	; 0x140 <_ZN6APDWeb9ServeFileE14EthernetClientPKc+0x140>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	9f 87       	std	Y+15, r25	; 0x0f
 146:	8e 87       	std	Y+14, r24	; 0x0e
 148:	ce 01       	movw	r24, r28
 14a:	42 96       	adiw	r24, 0x12	; 18
 14c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9ServeFileE14EthernetClientPKc>
 150:	81 2f       	mov	r24, r17
 152:	ac 96       	adiw	r28, 0x2c	; 44
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	df 90       	pop	r13
 16c:	cf 90       	pop	r12
 16e:	08 95       	ret
 170:	c8 01       	movw	r24, r16
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	00 c0       	rjmp	.+0      	; 0x178 <_ZZN6APDWeb18thingspeak_loggingEvE3__c_3+0xf>

Disassembly of section .text._ZN6APDWeb11loop_serverEv:

00000000 <_ZN6APDWeb11loop_serverEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	1f 93       	push	r17
  10:	df 93       	push	r29
  12:	cf 93       	push	r28
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	c8 59       	subi	r28, 0x98	; 152
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	d0 40       	sbci	r29, 0x00	; 0
  1c:	0f b6       	in	r0, 0x3f	; 63
  1e:	f8 94       	cli
  20:	de bf       	out	0x3e, r29	; 62
  22:	0f be       	out	0x3f, r0	; 63
  24:	cd bf       	out	0x3d, r28	; 61
  26:	7c 01       	movw	r14, r24
  28:	fc 01       	movw	r30, r24

	// TODO Auto-generated destructor stub
}
  2a:	60 a1       	ldd	r22, Z+32	; 0x20
  2c:	71 a1       	ldd	r23, Z+33	; 0x21
  2e:	61 15       	cp	r22, r1
  30:	71 05       	cpc	r23, r1
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN6APDWeb11loop_serverEv+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6APDWeb11loop_serverEv+0x36>
  36:	fe 01       	movw	r30, r28
  38:	e8 56       	subi	r30, 0x68	; 104
  3a:	ff 4f       	sbci	r31, 0xFF	; 255
  3c:	10 82       	st	Z, r1
  3e:	6e 01       	movw	r12, r28
  40:	08 94       	sec
  42:	c1 1c       	adc	r12, r1
  44:	d1 1c       	adc	r13, r1
  46:	c6 01       	movw	r24, r12
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
  4c:	c6 01       	movw	r24, r12
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
  52:	88 23       	and	r24, r24
  54:	01 f4       	brne	.+0      	; 0x56 <_ZN6APDWeb11loop_serverEv+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN6APDWeb11loop_serverEv+0x58>
  58:	f7 01       	movw	r30, r14
  5a:	84 a1       	ldd	r24, Z+36	; 0x24
  5c:	95 a1       	ldd	r25, Z+37	; 0x25
  5e:	01 96       	adiw	r24, 0x01	; 1
  60:	95 a3       	std	Z+37, r25	; 0x25
  62:	84 a3       	std	Z+36, r24	; 0x24
  64:	00 e0       	ldi	r16, 0x00	; 0
  66:	10 e0       	ldi	r17, 0x00	; 0
  68:	55 e3       	ldi	r21, 0x35	; 53
  6a:	a5 2e       	mov	r10, r21
  6c:	b1 2c       	mov	r11, r1
  6e:	ac 0e       	add	r10, r28
  70:	bd 1e       	adc	r11, r29
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZN6APDWeb11loop_serverEv+0x74>
  74:	c6 01       	movw	r24, r12
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
  7a:	89 2b       	or	r24, r25
  7c:	01 f4       	brne	.+0      	; 0x7e <_ZN6APDWeb11loop_serverEv+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN6APDWeb11loop_serverEv+0x80>
  80:	c6 01       	movw	r24, r12
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
  86:	8a 30       	cpi	r24, 0x0A	; 10
  88:	01 f0       	breq	.+0      	; 0x8a <_ZN6APDWeb11loop_serverEv+0x8a>
  8a:	8d 30       	cpi	r24, 0x0D	; 13
  8c:	01 f0       	breq	.+0      	; 0x8e <_ZN6APDWeb11loop_serverEv+0x8e>
  8e:	f5 01       	movw	r30, r10
  90:	e0 0f       	add	r30, r16
  92:	f1 1f       	adc	r31, r17
  94:	80 83       	st	Z, r24
  96:	0f 5f       	subi	r16, 0xFF	; 255
  98:	1f 4f       	sbci	r17, 0xFF	; 255
  9a:	04 36       	cpi	r16, 0x64	; 100
  9c:	11 05       	cpc	r17, r1
  9e:	04 f4       	brge	.+0      	; 0xa0 <_ZN6APDWeb11loop_serverEv+0xa0>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_ZN6APDWeb11loop_serverEv+0xa2>
  a2:	03 e6       	ldi	r16, 0x63	; 99
  a4:	10 e0       	ldi	r17, 0x00	; 0
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN6APDWeb11loop_serverEv+0xa8>
  a8:	45 e3       	ldi	r20, 0x35	; 53
  aa:	c4 2e       	mov	r12, r20
  ac:	d1 2c       	mov	r13, r1
  ae:	cc 0e       	add	r12, r28
  b0:	dd 1e       	adc	r13, r29
  b2:	0c 0d       	add	r16, r12
  b4:	1d 1d       	adc	r17, r13
  b6:	f8 01       	movw	r30, r16
  b8:	10 82       	st	Z, r1
  ba:	c6 01       	movw	r24, r12
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
  c4:	89 2b       	or	r24, r25
  c6:	01 f0       	breq	.+0      	; 0xc8 <_ZN6APDWeb11loop_serverEv+0xc8>
  c8:	8e 01       	movw	r16, r28
  ca:	0f 5f       	subi	r16, 0xFF	; 255
  cc:	1f 4f       	sbci	r17, 0xFF	; 255
  ce:	c8 01       	movw	r24, r16
  d0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
  d4:	c7 01       	movw	r24, r14
  d6:	b8 01       	movw	r22, r16
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	9c 81       	ldd	r25, Y+4	; 0x04
  e8:	99 8b       	std	Y+17, r25	; 0x11
  ea:	88 8b       	std	Y+16, r24	; 0x10
  ec:	8d 81       	ldd	r24, Y+5	; 0x05
  ee:	9e 81       	ldd	r25, Y+6	; 0x06
  f0:	af 81       	ldd	r26, Y+7	; 0x07
  f2:	b8 85       	ldd	r27, Y+8	; 0x08
  f4:	8a 8b       	std	Y+18, r24	; 0x12
  f6:	9b 8b       	std	Y+19, r25	; 0x13
  f8:	ac 8b       	std	Y+20, r26	; 0x14
  fa:	bd 8b       	std	Y+21, r27	; 0x15
  fc:	89 85       	ldd	r24, Y+9	; 0x09
  fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 100:	ab 85       	ldd	r26, Y+11	; 0x0b
 102:	bc 85       	ldd	r27, Y+12	; 0x0c
 104:	8e 8b       	std	Y+22, r24	; 0x16
 106:	9f 8b       	std	Y+23, r25	; 0x17
 108:	a8 8f       	std	Y+24, r26	; 0x18
 10a:	b9 8f       	std	Y+25, r27	; 0x19
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	9f 87       	std	Y+15, r25	; 0x0f
 112:	8e 87       	std	Y+14, r24	; 0x0e
 114:	8d 85       	ldd	r24, Y+13	; 0x0d
 116:	8a 8f       	std	Y+26, r24	; 0x1a
 118:	c7 01       	movw	r24, r14
 11a:	be 01       	movw	r22, r28
 11c:	62 5f       	subi	r22, 0xF2	; 242
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	23 e0       	ldi	r18, 0x03	; 3
 126:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <_ZN6APDWeb11loop_serverEv+0x12c>
 12c:	c6 01       	movw	r24, r12
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 136:	89 2b       	or	r24, r25
 138:	01 f0       	breq	.+0      	; 0x13a <_ZN6APDWeb11loop_serverEv+0x13a>
 13a:	c6 01       	movw	r24, r12
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 144:	fc 01       	movw	r30, r24
 146:	10 82       	st	Z, r1
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	9c 81       	ldd	r25, Y+4	; 0x04
 14c:	9e 8f       	std	Y+30, r25	; 0x1e
 14e:	8d 8f       	std	Y+29, r24	; 0x1d
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	9e 81       	ldd	r25, Y+6	; 0x06
 154:	af 81       	ldd	r26, Y+7	; 0x07
 156:	b8 85       	ldd	r27, Y+8	; 0x08
 158:	8f 8f       	std	Y+31, r24	; 0x1f
 15a:	98 a3       	std	Y+32, r25	; 0x20
 15c:	a9 a3       	std	Y+33, r26	; 0x21
 15e:	ba a3       	std	Y+34, r27	; 0x22
 160:	89 85       	ldd	r24, Y+9	; 0x09
 162:	9a 85       	ldd	r25, Y+10	; 0x0a
 164:	ab 85       	ldd	r26, Y+11	; 0x0b
 166:	bc 85       	ldd	r27, Y+12	; 0x0c
 168:	8b a3       	std	Y+35, r24	; 0x23
 16a:	9c a3       	std	Y+36, r25	; 0x24
 16c:	ad a3       	std	Y+37, r26	; 0x25
 16e:	be a3       	std	Y+38, r27	; 0x26
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	9c 8f       	std	Y+28, r25	; 0x1c
 176:	8b 8f       	std	Y+27, r24	; 0x1b
 178:	8d 85       	ldd	r24, Y+13	; 0x0d
 17a:	8f a3       	std	Y+39, r24	; 0x27
 17c:	c7 01       	movw	r24, r14
 17e:	be 01       	movw	r22, r28
 180:	65 5e       	subi	r22, 0xE5	; 229
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	ae 01       	movw	r20, r28
 186:	43 5c       	subi	r20, 0xC3	; 195
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 18e:	88 23       	and	r24, r24
 190:	01 f0       	breq	.+0      	; 0x192 <_ZN6APDWeb11loop_serverEv+0x192>
 192:	00 c0       	rjmp	.+0      	; 0x194 <_ZN6APDWeb11loop_serverEv+0x194>
 194:	00 c0       	rjmp	.+0      	; 0x196 <_ZN6APDWeb11loop_serverEv+0x196>
 196:	c6 01       	movw	r24, r12
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 1a0:	89 2b       	or	r24, r25
 1a2:	01 f4       	brne	.+0      	; 0x1a4 <_ZN6APDWeb11loop_serverEv+0x1a4>
 1a4:	c6 01       	movw	r24, r12
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 1ae:	89 2b       	or	r24, r25
 1b0:	01 f4       	brne	.+0      	; 0x1b2 <_ZN6APDWeb11loop_serverEv+0x1b2>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN6APDWeb11loop_serverEv+0x1b4>
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	9b a7       	std	Y+43, r25	; 0x2b
 1ba:	8a a7       	std	Y+42, r24	; 0x2a
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	af 81       	ldd	r26, Y+7	; 0x07
 1c2:	b8 85       	ldd	r27, Y+8	; 0x08
 1c4:	8c a7       	std	Y+44, r24	; 0x2c
 1c6:	9d a7       	std	Y+45, r25	; 0x2d
 1c8:	ae a7       	std	Y+46, r26	; 0x2e
 1ca:	bf a7       	std	Y+47, r27	; 0x2f
 1cc:	89 85       	ldd	r24, Y+9	; 0x09
 1ce:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d0:	ab 85       	ldd	r26, Y+11	; 0x0b
 1d2:	bc 85       	ldd	r27, Y+12	; 0x0c
 1d4:	88 ab       	std	Y+48, r24	; 0x30
 1d6:	99 ab       	std	Y+49, r25	; 0x31
 1d8:	aa ab       	std	Y+50, r26	; 0x32
 1da:	bb ab       	std	Y+51, r27	; 0x33
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	99 a7       	std	Y+41, r25	; 0x29
 1e2:	88 a7       	std	Y+40, r24	; 0x28
 1e4:	8d 85       	ldd	r24, Y+13	; 0x0d
 1e6:	8c ab       	std	Y+52, r24	; 0x34
 1e8:	c7 01       	movw	r24, r14
 1ea:	be 01       	movw	r22, r28
 1ec:	68 5d       	subi	r22, 0xD8	; 216
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 1f8:	88 23       	and	r24, r24
 1fa:	01 f0       	breq	.+0      	; 0x1fc <_ZN6APDWeb11loop_serverEv+0x1fc>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_ZN6APDWeb11loop_serverEv+0x1fe>
 1fe:	f7 01       	movw	r30, r14
 200:	84 8d       	ldd	r24, Z+28	; 0x1c
 202:	8e 01       	movw	r16, r28
 204:	0f 5f       	subi	r16, 0xFF	; 255
 206:	1f 4f       	sbci	r17, 0xFF	; 255
 208:	82 fd       	sbrc	r24, 2
 20a:	00 c0       	rjmp	.+0      	; 0x20c <_ZN6APDWeb11loop_serverEv+0x20c>
 20c:	c8 01       	movw	r24, r16
 20e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 212:	c7 01       	movw	r24, r14
 214:	b8 01       	movw	r22, r16
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	24 e1       	ldi	r18, 0x14	; 20
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 222:	c7 01       	movw	r24, r14
 224:	b8 01       	movw	r22, r16
 226:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 22a:	c7 01       	movw	r24, r14
 22c:	b8 01       	movw	r22, r16
 22e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 232:	00 c0       	rjmp	.+0      	; 0x234 <_ZN6APDWeb11loop_serverEv+0x234>
 234:	8e 01       	movw	r16, r28
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	c8 01       	movw	r24, r16
 23c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 240:	c7 01       	movw	r24, r14
 242:	b8 01       	movw	r22, r16
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 250:	c8 01       	movw	r24, r16
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 25a:	c7 01       	movw	r24, r14
 25c:	b8 01       	movw	r22, r16
 25e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	00 c0       	rjmp	.+0      	; 0x268 <_ZN6APDWeb11loop_serverEv+0x268>
 268:	c8 01       	movw	r24, r16
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 272:	89 2b       	or	r24, r25
 274:	01 f0       	breq	.+0      	; 0x276 <_ZN6APDWeb11loop_serverEv+0x276>
 276:	8e 01       	movw	r16, r28
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	c8 01       	movw	r24, r16
 27e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 282:	c7 01       	movw	r24, r14
 284:	b8 01       	movw	r22, r16
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 292:	c8 01       	movw	r24, r16
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 29c:	c7 01       	movw	r24, r14
 29e:	b8 01       	movw	r22, r16
 2a0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	f7 01       	movw	r30, r14
 2aa:	97 8f       	std	Z+31, r25	; 0x1f
 2ac:	86 8f       	std	Z+30, r24	; 0x1e
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <_ZN6APDWeb11loop_serverEv+0x2b0>
 2b0:	c8 01       	movw	r24, r16
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 2ba:	89 2b       	or	r24, r25
 2bc:	01 f0       	breq	.+0      	; 0x2be <_ZN6APDWeb11loop_serverEv+0x2be>
 2be:	8e 01       	movw	r16, r28
 2c0:	0f 5f       	subi	r16, 0xFF	; 255
 2c2:	1f 4f       	sbci	r17, 0xFF	; 255
 2c4:	c8 01       	movw	r24, r16
 2c6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 2ca:	c7 01       	movw	r24, r14
 2cc:	b8 01       	movw	r22, r16
 2ce:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <_ZN6APDWeb11loop_serverEv+0x2d4>
 2d4:	c8 01       	movw	r24, r16
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 2de:	89 2b       	or	r24, r25
 2e0:	01 f0       	breq	.+0      	; 0x2e2 <_ZN6APDWeb11loop_serverEv+0x2e2>
 2e2:	8e 01       	movw	r16, r28
 2e4:	0f 5f       	subi	r16, 0xFF	; 255
 2e6:	1f 4f       	sbci	r17, 0xFF	; 255
 2e8:	c8 01       	movw	r24, r16
 2ea:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 2ee:	c7 01       	movw	r24, r14
 2f0:	b8 01       	movw	r22, r16
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 2fe:	c7 01       	movw	r24, r14
 300:	b8 01       	movw	r22, r16
 302:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 306:	00 c0       	rjmp	.+0      	; 0x308 <_ZN6APDWeb11loop_serverEv+0x308>
 308:	c8 01       	movw	r24, r16
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 312:	89 2b       	or	r24, r25
 314:	01 f0       	breq	.+0      	; 0x316 <_ZN6APDWeb11loop_serverEv+0x316>
 316:	f7 01       	movw	r30, r14
 318:	84 8d       	ldd	r24, Z+28	; 0x1c
 31a:	8e 01       	movw	r16, r28
 31c:	0f 5f       	subi	r16, 0xFF	; 255
 31e:	1f 4f       	sbci	r17, 0xFF	; 255
 320:	82 fd       	sbrc	r24, 2
 322:	00 c0       	rjmp	.+0      	; 0x324 <_ZN6APDWeb11loop_serverEv+0x324>
 324:	c7 01       	movw	r24, r14
 326:	b8 01       	movw	r22, r16
 328:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <_ZN6APDWeb11loop_serverEv+0x32e>
 32e:	c7 01       	movw	r24, r14
 330:	b8 01       	movw	r22, r16
 332:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 336:	00 c0       	rjmp	.+0      	; 0x338 <_ZN6APDWeb11loop_serverEv+0x338>
 338:	c8 01       	movw	r24, r16
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 342:	89 2b       	or	r24, r25
 344:	01 f4       	brne	.+0      	; 0x346 <_ZN6APDWeb11loop_serverEv+0x346>
 346:	ce 01       	movw	r24, r28
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <_ZN6APDWeb11loop_serverEv+0x350>
 350:	c6 01       	movw	r24, r12
 352:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 356:	88 23       	and	r24, r24
 358:	01 f0       	breq	.+0      	; 0x35a <_ZN6APDWeb11loop_serverEv+0x35a>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <_ZN6APDWeb11loop_serverEv+0x35c>
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 370:	00 c0       	rjmp	.+0      	; 0x372 <_ZN6APDWeb11loop_serverEv+0x372>
 372:	8e 01       	movw	r16, r28
 374:	0b 5c       	subi	r16, 0xCB	; 203
 376:	1f 4f       	sbci	r17, 0xFF	; 255
 378:	c8 01       	movw	r24, r16
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb11loop_serverEv>
 382:	89 2b       	or	r24, r25
 384:	01 f0       	breq	.+0      	; 0x386 <_ZN6APDWeb11loop_serverEv+0x386>
 386:	00 c0       	rjmp	.+0      	; 0x388 <_ZN6APDWeb11loop_serverEv+0x388>
 388:	00 c0       	rjmp	.+0      	; 0x38a <_ZN6APDWeb11loop_serverEv+0x38a>
 38a:	c8 56       	subi	r28, 0x68	; 104
 38c:	df 4f       	sbci	r29, 0xFF	; 255
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
 398:	cf 91       	pop	r28
 39a:	df 91       	pop	r29
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	bf 90       	pop	r11
 3aa:	af 90       	pop	r10
 3ac:	08 95       	ret

Disassembly of section .text._ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage:

00000000 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	ec 01       	movw	r28, r24
  26:	3b 01       	movw	r6, r22
  28:	1a 01       	movw	r2, r20

	// TODO Auto-generated destructor stub
}
  2a:	49 01       	movw	r8, r18
  2c:	28 01       	movw	r4, r16
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage>
  36:	88 a1       	ldd	r24, Y+32	; 0x20
  38:	99 a1       	ldd	r25, Y+33	; 0x21
  3a:	89 2b       	or	r24, r25
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage+0x3e>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage>
  46:	6a 8d       	ldd	r22, Y+26	; 0x1a
  48:	7b 8d       	ldd	r23, Y+27	; 0x1b
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	4a e0       	ldi	r20, 0x0A	; 10
  50:	50 e0       	ldi	r21, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage>
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage>
  5e:	86 e0       	ldi	r24, 0x06	; 6
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage>
  66:	8c 01       	movw	r16, r24
  68:	6a 8d       	ldd	r22, Y+26	; 0x1a
  6a:	7b 8d       	ldd	r23, Y+27	; 0x1b
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage>
  70:	19 a3       	std	Y+33, r17	; 0x21
  72:	08 a3       	std	Y+32, r16	; 0x20
  74:	d8 01       	movw	r26, r16
  76:	ed 91       	ld	r30, X+
  78:	fc 91       	ld	r31, X
  7a:	04 80       	ldd	r0, Z+4	; 0x04
  7c:	f5 81       	ldd	r31, Z+5	; 0x05
  7e:	e0 2d       	mov	r30, r0
  80:	c8 01       	movw	r24, r16
  82:	19 95       	eicall
  84:	7f a6       	std	Y+47, r7	; 0x2f
  86:	6e a6       	std	Y+46, r6	; 0x2e
  88:	9b aa       	std	Y+51, r9	; 0x33
  8a:	8a aa       	std	Y+50, r8	; 0x32
  8c:	ff aa       	std	Y+55, r15	; 0x37
  8e:	ee aa       	std	Y+54, r14	; 0x36
  90:	39 aa       	std	Y+49, r3	; 0x31
  92:	28 aa       	std	Y+48, r2	; 0x30
  94:	5d aa       	std	Y+53, r5	; 0x35
  96:	4c aa       	std	Y+52, r4	; 0x34
  98:	d9 ae       	std	Y+57, r13	; 0x39
  9a:	c8 ae       	std	Y+56, r12	; 0x38
  9c:	bd a6       	std	Y+45, r11	; 0x2d
  9e:	ac a6       	std	Y+44, r10	; 0x2c
  a0:	ce 01       	movw	r24, r28
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage+0xa8>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb14startWebServerEPP9APDSensoriPP10APDControliPP7APDRuleiP10APDStorage>
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	1f 91       	pop	r17
  b6:	0f 91       	pop	r16
  b8:	ff 90       	pop	r15
  ba:	ef 90       	pop	r14
  bc:	df 90       	pop	r13
  be:	cf 90       	pop	r12
  c0:	bf 90       	pop	r11
  c2:	af 90       	pop	r10
  c4:	9f 90       	pop	r9
  c6:	8f 90       	pop	r8
  c8:	7f 90       	pop	r7
  ca:	6f 90       	pop	r6
  cc:	5f 90       	pop	r5
  ce:	4f 90       	pop	r4
  d0:	3f 90       	pop	r3
  d2:	2f 90       	pop	r2
  d4:	08 95       	ret

Disassembly of section .text._ZN6APDWeb15startWebLoggingEm:

00000000 <_ZN6APDWeb15startWebLoggingEm>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	6a 01       	movw	r12, r20
  18:	7b 01       	movw	r14, r22
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	ec 01       	movw	r28, r24
  1c:	c5 57       	subi	r28, 0x75	; 117
  1e:	de 4f       	sbci	r29, 0xFE	; 254
  20:	88 81       	ld	r24, Y
  22:	99 81       	ldd	r25, Y+1	; 0x01
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN6APDWeb15startWebLoggingEm+0x28>
  28:	89 e0       	ldi	r24, 0x09	; 9

	// TODO Auto-generated destructor stub
}
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15startWebLoggingEm>
  30:	18 2f       	mov	r17, r24
  32:	09 2f       	mov	r16, r25
  34:	b7 01       	movw	r22, r14
  36:	a6 01       	movw	r20, r12
  38:	21 e0       	ldi	r18, 0x01	; 1
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15startWebLoggingEm>
  3e:	18 83       	st	Y, r17
  40:	09 83       	std	Y+1, r16	; 0x01
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN6APDWeb15startWebLoggingEm+0x44>
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15startWebLoggingEm>
  48:	85 01       	movw	r16, r10
  4a:	05 57       	subi	r16, 0x75	; 117
  4c:	1e 4f       	sbci	r17, 0xFE	; 254
  4e:	f8 01       	movw	r30, r16
  50:	80 81       	ld	r24, Z
  52:	91 81       	ldd	r25, Z+1	; 0x01
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15startWebLoggingEm>
  58:	ff 24       	eor	r15, r15
  5a:	f8 01       	movw	r30, r16
  5c:	80 81       	ld	r24, Z
  5e:	91 81       	ldd	r25, Z+1	; 0x01
  60:	89 2b       	or	r24, r25
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN6APDWeb15startWebLoggingEm+0x64>
  64:	ff 24       	eor	r15, r15
  66:	f3 94       	inc	r15
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb15startWebLoggingEm>
  70:	8f 2d       	mov	r24, r15
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	df 90       	pop	r13
  80:	cf 90       	pop	r12
  82:	bf 90       	pop	r11
  84:	af 90       	pop	r10
  86:	08 95       	ret

Disassembly of section .text._ZN6APDWeb10loadAPIkeyEPcS0_:

00000000 <_ZN6APDWeb10loadAPIkeyEPcS0_>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	1f 93       	push	r17
  10:	df 93       	push	r29
  12:	cf 93       	push	r28
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	c3 58       	subi	r28, 0x83	; 131
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	d0 40       	sbci	r29, 0x00	; 0
  1c:	0f b6       	in	r0, 0x3f	; 63
  1e:	f8 94       	cli
  20:	de bf       	out	0x3e, r29	; 62
  22:	0f be       	out	0x3f, r0	; 63
  24:	cd bf       	out	0x3d, r28	; 61
  26:	6b 01       	movw	r12, r22
  28:	8a 01       	movw	r16, r20

	// TODO Auto-generated destructor stub
}
  2a:	dc 01       	movw	r26, r24
  2c:	9c 96       	adiw	r26, 0x2c	; 44
  2e:	8d 91       	ld	r24, X+
  30:	9c 91       	ld	r25, X
  32:	9d 97       	sbiw	r26, 0x2d	; 45
  34:	00 97       	sbiw	r24, 0x00	; 0
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6APDWeb10loadAPIkeyEPcS0_+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN6APDWeb10loadAPIkeyEPcS0_+0x3a>
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10loadAPIkeyEPcS0_>
  3e:	88 23       	and	r24, r24
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN6APDWeb10loadAPIkeyEPcS0_+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN6APDWeb10loadAPIkeyEPcS0_+0x44>
  44:	18 a2       	std	Y+32, r1	; 0x20
  46:	19 a2       	std	Y+33, r1	; 0x21
  48:	1a a2       	std	Y+34, r1	; 0x22
  4a:	1b a2       	std	Y+35, r1	; 0x23
  4c:	fe 01       	movw	r30, r28
  4e:	b4 96       	adiw	r30, 0x24	; 36
  50:	80 e6       	ldi	r24, 0x60	; 96
  52:	df 01       	movw	r26, r30
  54:	1d 92       	st	X+, r1
  56:	8a 95       	dec	r24
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN6APDWeb10loadAPIkeyEPcS0_+0x5a>
  5a:	ce 01       	movw	r24, r28
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	b8 01       	movw	r22, r16
  60:	41 e0       	ldi	r20, 0x01	; 1
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10loadAPIkeyEPcS0_>
  66:	88 85       	ldd	r24, Y+8	; 0x08
  68:	88 23       	and	r24, r24
  6a:	01 f0       	breq	.+0      	; 0x6c <_ZN6APDWeb10loadAPIkeyEPcS0_+0x6c>
  6c:	00 e0       	ldi	r16, 0x00	; 0
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	75 e0       	ldi	r23, 0x05	; 5
  72:	a7 2e       	mov	r10, r23
  74:	b1 2c       	mov	r11, r1
  76:	ac 0e       	add	r10, r28
  78:	bd 1e       	adc	r11, r29
  7a:	60 e2       	ldi	r22, 0x20	; 32
  7c:	e6 2e       	mov	r14, r22
  7e:	f1 2c       	mov	r15, r1
  80:	ec 0e       	add	r14, r28
  82:	fd 1e       	adc	r15, r29
  84:	00 c0       	rjmp	.+0      	; 0x86 <_ZN6APDWeb10loadAPIkeyEPcS0_+0x86>
  86:	c7 01       	movw	r24, r14
  88:	6a e0       	ldi	r22, 0x0A	; 10
  8a:	70 e0       	ldi	r23, 0x00	; 0
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10loadAPIkeyEPcS0_>
  90:	fc 01       	movw	r30, r24
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	01 f0       	breq	.+0      	; 0x96 <_ZN6APDWeb10loadAPIkeyEPcS0_+0x96>
  96:	10 82       	st	Z, r1
  98:	88 a1       	ldd	r24, Y+32	; 0x20
  9a:	88 23       	and	r24, r24
  9c:	01 f0       	breq	.+0      	; 0x9e <_ZN6APDWeb10loadAPIkeyEPcS0_+0x9e>
  9e:	c6 01       	movw	r24, r12
  a0:	b7 01       	movw	r22, r14
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10loadAPIkeyEPcS0_>
  a6:	0f 5f       	subi	r16, 0xFF	; 255
  a8:	1f 4f       	sbci	r17, 0xFF	; 255
  aa:	c5 01       	movw	r24, r10
  ac:	b7 01       	movw	r22, r14
  ae:	44 e6       	ldi	r20, 0x64	; 100
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10loadAPIkeyEPcS0_>
  ba:	89 2b       	or	r24, r25
  bc:	01 f4       	brne	.+0      	; 0xbe <_ZN6APDWeb10loadAPIkeyEPcS0_+0xbe>
  be:	01 2b       	or	r16, r17
  c0:	01 f0       	breq	.+0      	; 0xc2 <_ZN6APDWeb10loadAPIkeyEPcS0_+0xc2>
  c2:	f6 01       	movw	r30, r12
  c4:	80 81       	ld	r24, Z
  c6:	88 23       	and	r24, r24
  c8:	01 f0       	breq	.+0      	; 0xca <_ZN6APDWeb10loadAPIkeyEPcS0_+0xca>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN6APDWeb10loadAPIkeyEPcS0_+0xce>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	18 2f       	mov	r17, r24
  d2:	88 85       	ldd	r24, Y+8	; 0x08
  d4:	88 23       	and	r24, r24
  d6:	01 f0       	breq	.+0      	; 0xd8 <_ZN6APDWeb10loadAPIkeyEPcS0_+0xd8>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	9a 83       	std	Y+2, r25	; 0x02
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	ce 01       	movw	r24, r28
  e2:	05 96       	adiw	r24, 0x05	; 5
  e4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb10loadAPIkeyEPcS0_>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_ZN6APDWeb10loadAPIkeyEPcS0_+0xea>
  ea:	10 e0       	ldi	r17, 0x00	; 0
  ec:	81 2f       	mov	r24, r17
  ee:	cd 57       	subi	r28, 0x7D	; 125
  f0:	df 4f       	sbci	r29, 0xFF	; 255
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	1f 91       	pop	r17
 102:	0f 91       	pop	r16
 104:	ff 90       	pop	r15
 106:	ef 90       	pop	r14
 108:	df 90       	pop	r13
 10a:	cf 90       	pop	r12
 10c:	bf 90       	pop	r11
 10e:	af 90       	pop	r10
 110:	08 95       	ret

Disassembly of section .text._ZN6APDWeb22setupThingSpeakLoggingEv:

00000000 <_ZN6APDWeb22setupThingSpeakLoggingEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  16:	ea e4       	ldi	r30, 0x4A	; 74
  18:	ee 2e       	mov	r14, r30
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	e1 e0       	ldi	r30, 0x01	; 1
  1c:	fe 2e       	mov	r15, r30
  1e:	ec 0e       	add	r14, r28
  20:	fd 1e       	adc	r15, r29
  22:	f7 01       	movw	r30, r14
  24:	10 82       	st	Z, r1
  26:	89 a5       	ldd	r24, Y+41	; 0x29
  28:	88 23       	and	r24, r24

	// TODO Auto-generated destructor stub
}
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN6APDWeb22setupThingSpeakLoggingEv+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6APDWeb22setupThingSpeakLoggingEv+0x2e>
  2e:	8c a5       	ldd	r24, Y+44	; 0x2c
  30:	9d a5       	ldd	r25, Y+45	; 0x2d
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN6APDWeb22setupThingSpeakLoggingEv+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6APDWeb22setupThingSpeakLoggingEv+0x38>
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  3c:	88 23       	and	r24, r24
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN6APDWeb22setupThingSpeakLoggingEv+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6APDWeb22setupThingSpeakLoggingEv+0x42>
  42:	c1 57       	subi	r28, 0x71	; 113
  44:	de 4f       	sbci	r29, 0xFE	; 254
  46:	88 81       	ld	r24, Y
  48:	99 81       	ldd	r25, Y+1	; 0x01
  4a:	cf 58       	subi	r28, 0x8F	; 143
  4c:	d1 40       	sbci	r29, 0x01	; 1
  4e:	89 2b       	or	r24, r25
  50:	01 f0       	breq	.+0      	; 0x52 <_ZN6APDWeb22setupThingSpeakLoggingEv+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN6APDWeb22setupThingSpeakLoggingEv+0x54>
  54:	8c a5       	ldd	r24, Y+44	; 0x2c
  56:	9d a5       	ldd	r25, Y+45	; 0x2d
  58:	60 e0       	ldi	r22, 0x00	; 0
  5a:	70 e0       	ldi	r23, 0x00	; 0
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	50 e0       	ldi	r21, 0x00	; 0
  60:	9e 01       	movw	r18, r28
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  66:	18 16       	cp	r1, r24
  68:	19 06       	cpc	r1, r25
  6a:	04 f0       	brlt	.+0      	; 0x6c <_ZN6APDWeb22setupThingSpeakLoggingEv+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6APDWeb22setupThingSpeakLoggingEv+0x6e>
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  76:	be 01       	movw	r22, r28
  78:	6e 55       	subi	r22, 0x5E	; 94
  7a:	7f 4f       	sbci	r23, 0xFF	; 255
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  8c:	8e 01       	movw	r16, r28
  8e:	02 56       	subi	r16, 0x62	; 98
  90:	1f 4f       	sbci	r17, 0xFF	; 255
  92:	c8 01       	movw	r24, r16
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  98:	f8 01       	movw	r30, r16
  9a:	80 81       	ld	r24, Z
  9c:	88 23       	and	r24, r24
  9e:	01 f0       	breq	.+0      	; 0xa0 <_ZN6APDWeb22setupThingSpeakLoggingEv+0xa0>
  a0:	ce 01       	movw	r24, r28
  a2:	b7 01       	movw	r22, r14
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	b7 01       	movw	r22, r14
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  b6:	64 e1       	ldi	r22, 0x14	; 20
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN6APDWeb22setupThingSpeakLoggingEv+0xc4>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  d4:	89 e0       	ldi	r24, 0x09	; 9
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  dc:	18 2f       	mov	r17, r24
  de:	09 2f       	mov	r16, r25
  e0:	cc 53       	subi	r28, 0x3C	; 60
  e2:	df 4f       	sbci	r29, 0xFF	; 255
  e4:	48 81       	ld	r20, Y
  e6:	59 81       	ldd	r21, Y+1	; 0x01
  e8:	6a 81       	ldd	r22, Y+2	; 0x02
  ea:	7b 81       	ldd	r23, Y+3	; 0x03
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
  f2:	fe 01       	movw	r30, r28
  f4:	e5 53       	subi	r30, 0x35	; 53
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	10 83       	st	Z, r17
  fa:	01 83       	std	Z+1, r16	; 0x01
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	00 c0       	rjmp	.+0      	; 0x100 <_ZN6APDWeb22setupThingSpeakLoggingEv+0x100>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb22setupThingSpeakLoggingEv>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	ff 90       	pop	r15
 114:	ef 90       	pop	r14
 116:	08 95       	ret
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_ZZN6APDWeb11json_headerEP14EthernetClientE3__c+0x5>

Disassembly of section .text._ZN6APDWeb16setupCosmLoggingEv:

00000000 <_ZN6APDWeb16setupCosmLoggingEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  16:	f9 e0       	ldi	r31, 0x09	; 9
  18:	ef 2e       	mov	r14, r31
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	f1 e0       	ldi	r31, 0x01	; 1
  1c:	ff 2e       	mov	r15, r31
  1e:	ec 0e       	add	r14, r28
  20:	fd 1e       	adc	r15, r29
  22:	f7 01       	movw	r30, r14
  24:	10 82       	st	Z, r1
  26:	89 a5       	ldd	r24, Y+41	; 0x29
  28:	88 23       	and	r24, r24

	// TODO Auto-generated destructor stub
}
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN6APDWeb16setupCosmLoggingEv+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6APDWeb16setupCosmLoggingEv+0x2e>
  2e:	8c a5       	ldd	r24, Y+44	; 0x2c
  30:	9d a5       	ldd	r25, Y+45	; 0x2d
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN6APDWeb16setupCosmLoggingEv+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6APDWeb16setupCosmLoggingEv+0x38>
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  3c:	88 23       	and	r24, r24
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN6APDWeb16setupCosmLoggingEv+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6APDWeb16setupCosmLoggingEv+0x42>
  42:	c3 57       	subi	r28, 0x73	; 115
  44:	de 4f       	sbci	r29, 0xFE	; 254
  46:	88 81       	ld	r24, Y
  48:	99 81       	ldd	r25, Y+1	; 0x01
  4a:	cd 58       	subi	r28, 0x8D	; 141
  4c:	d1 40       	sbci	r29, 0x01	; 1
  4e:	89 2b       	or	r24, r25
  50:	01 f0       	breq	.+0      	; 0x52 <_ZN6APDWeb16setupCosmLoggingEv+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN6APDWeb16setupCosmLoggingEv+0x54>
  54:	8c a5       	ldd	r24, Y+44	; 0x2c
  56:	9d a5       	ldd	r25, Y+45	; 0x2d
  58:	60 e0       	ldi	r22, 0x00	; 0
  5a:	70 e0       	ldi	r23, 0x00	; 0
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	50 e0       	ldi	r21, 0x00	; 0
  60:	9e 01       	movw	r18, r28
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  66:	18 16       	cp	r1, r24
  68:	19 06       	cpc	r1, r25
  6a:	04 f0       	brlt	.+0      	; 0x6c <_ZN6APDWeb16setupCosmLoggingEv+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6APDWeb16setupCosmLoggingEv+0x6e>
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  76:	be 01       	movw	r22, r28
  78:	6c 58       	subi	r22, 0x8C	; 140
  7a:	7f 4f       	sbci	r23, 0xFF	; 255
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  8c:	8e 01       	movw	r16, r28
  8e:	00 59       	subi	r16, 0x90	; 144
  90:	1f 4f       	sbci	r17, 0xFF	; 255
  92:	c8 01       	movw	r24, r16
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  98:	f8 01       	movw	r30, r16
  9a:	80 81       	ld	r24, Z
  9c:	88 23       	and	r24, r24
  9e:	01 f0       	breq	.+0      	; 0xa0 <_ZN6APDWeb16setupCosmLoggingEv+0xa0>
  a0:	ce 01       	movw	r24, r28
  a2:	b7 01       	movw	r22, r14
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	b7 01       	movw	r22, r14
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  b6:	64 e1       	ldi	r22, 0x14	; 20
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN6APDWeb16setupCosmLoggingEv+0xc4>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  d4:	89 e0       	ldi	r24, 0x09	; 9
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  dc:	18 2f       	mov	r17, r24
  de:	09 2f       	mov	r16, r25
  e0:	c6 56       	subi	r28, 0x66	; 102
  e2:	df 4f       	sbci	r29, 0xFF	; 255
  e4:	48 81       	ld	r20, Y
  e6:	59 81       	ldd	r21, Y+1	; 0x01
  e8:	6a 81       	ldd	r22, Y+2	; 0x02
  ea:	7b 81       	ldd	r23, Y+3	; 0x03
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
  f2:	fe 01       	movw	r30, r28
  f4:	ed 50       	subi	r30, 0x0D	; 13
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	10 83       	st	Z, r17
  fa:	01 83       	std	Z+1, r16	; 0x01
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	00 c0       	rjmp	.+0      	; 0x100 <_ZN6APDWeb16setupCosmLoggingEv+0x100>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb16setupCosmLoggingEv>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	ff 90       	pop	r15
 114:	ef 90       	pop	r14
 116:	08 95       	ret
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_ZZN6APDWeb11json_headerEP14EthernetClientE3__c+0x5>

Disassembly of section .text._ZN6APDWeb9initBlankEP7APDTime:

00000000 <_ZN6APDWeb9initBlankEP7APDTime>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	1f 93       	push	r17
  10:	df 93       	push	r29
  12:	cf 93       	push	r28
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	62 97       	sbiw	r28, 0x12	; 18
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	de bf       	out	0x3e, r29	; 62
  20:	0f be       	out	0x3f, r0	; 63
  22:	cd bf       	out	0x3d, r28	; 61
  24:	5c 01       	movw	r10, r24
  26:	dc 01       	movw	r26, r24
  28:	9b 96       	adiw	r26, 0x2b	; 43

	// TODO Auto-generated destructor stub
}
  2a:	7c 93       	st	X, r23
  2c:	6e 93       	st	-X, r22
  2e:	9a 97       	sbiw	r26, 0x2a	; 42
  30:	de 01       	movw	r26, r28
  32:	1d 96       	adiw	r26, 0x0d	; 13
  34:	e0 e0       	ldi	r30, 0x00	; 0
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	86 e0       	ldi	r24, 0x06	; 6
  3a:	01 90       	ld	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	81 50       	subi	r24, 0x01	; 1
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN6APDWeb9initBlankEP7APDTime+0x42>
  42:	d5 01       	movw	r26, r10
  44:	12 96       	adiw	r26, 0x02	; 2
  46:	fe 01       	movw	r30, r28
  48:	3d 96       	adiw	r30, 0x0d	; 13
  4a:	86 e0       	ldi	r24, 0x06	; 6
  4c:	01 90       	ld	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	81 50       	subi	r24, 0x01	; 1
  52:	01 f4       	brne	.+0      	; 0x54 <_ZN6APDWeb9initBlankEP7APDTime+0x54>
  54:	f5 01       	movw	r30, r10
  56:	10 86       	std	Z+8, r1	; 0x08
  58:	11 86       	std	Z+9, r1	; 0x09
  5a:	12 86       	std	Z+10, r1	; 0x0a
  5c:	13 86       	std	Z+11, r1	; 0x0b
  5e:	d5 01       	movw	r26, r10
  60:	1c 96       	adiw	r26, 0x0c	; 12
  62:	1d 92       	st	X+, r1
  64:	1d 92       	st	X+, r1
  66:	1d 92       	st	X+, r1
  68:	1c 92       	st	X, r1
  6a:	1f 97       	sbiw	r26, 0x0f	; 15
  6c:	10 8a       	std	Z+16, r1	; 0x10
  6e:	11 8a       	std	Z+17, r1	; 0x11
  70:	12 8a       	std	Z+18, r1	; 0x12
  72:	13 8a       	std	Z+19, r1	; 0x13
  74:	54 96       	adiw	r26, 0x14	; 20
  76:	1d 92       	st	X+, r1
  78:	1d 92       	st	X+, r1
  7a:	1d 92       	st	X+, r1
  7c:	1c 92       	st	X, r1
  7e:	57 97       	sbiw	r26, 0x17	; 23
  80:	8c ec       	ldi	r24, 0xCC	; 204
  82:	89 83       	std	Y+1, r24	; 0x01
  84:	8c e0       	ldi	r24, 0x0C	; 12
  86:	8a 83       	std	Y+2, r24	; 0x02
  88:	84 ee       	ldi	r24, 0xE4	; 228
  8a:	8b 83       	std	Y+3, r24	; 0x03
  8c:	83 e7       	ldi	r24, 0x73	; 115
  8e:	8c 83       	std	Y+4, r24	; 0x04
  90:	e6 e4       	ldi	r30, 0x46	; 70
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	ae 0e       	add	r10, r30
  96:	bf 1e       	adc	r11, r31
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	9a 81       	ldd	r25, Y+2	; 0x02
  9c:	ab 81       	ldd	r26, Y+3	; 0x03
  9e:	bc 81       	ldd	r27, Y+4	; 0x04
  a0:	f5 01       	movw	r30, r10
  a2:	80 83       	st	Z, r24
  a4:	91 83       	std	Z+1, r25	; 0x01
  a6:	a2 83       	std	Z+2, r26	; 0x02
  a8:	b3 83       	std	Z+3, r27	; 0x03
  aa:	8a eb       	ldi	r24, 0xBA	; 186
  ac:	9f ef       	ldi	r25, 0xFF	; 255
  ae:	a8 0e       	add	r10, r24
  b0:	b9 1e       	adc	r11, r25
  b2:	c5 01       	movw	r24, r10
  b4:	86 5b       	subi	r24, 0xB6	; 182
  b6:	9f 4f       	sbci	r25, 0xFF	; 255
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9initBlankEP7APDTime>
  c0:	aa e6       	ldi	r26, 0x6A	; 106
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	aa 0e       	add	r10, r26
  c6:	bb 1e       	adc	r11, r27
  c8:	b0 e5       	ldi	r27, 0x50	; 80
  ca:	cb 2e       	mov	r12, r27
  cc:	d1 2c       	mov	r13, r1
  ce:	f5 01       	movw	r30, r10
  d0:	c1 92       	st	Z+, r12
  d2:	d1 92       	st	Z+, r13
  d4:	a0 e6       	ldi	r26, 0x60	; 96
  d6:	ea 2e       	mov	r14, r26
  d8:	aa ee       	ldi	r26, 0xEA	; 234
  da:	fa 2e       	mov	r15, r26
  dc:	01 2d       	mov	r16, r1
  de:	11 2d       	mov	r17, r1
  e0:	df 01       	movw	r26, r30
  e2:	ed 92       	st	X+, r14
  e4:	fd 92       	st	X+, r15
  e6:	0d 93       	st	X+, r16
  e8:	1d 93       	st	X+, r17
  ea:	5d 01       	movw	r10, r26
  ec:	88 ed       	ldi	r24, 0xD8	; 216
  ee:	8d 83       	std	Y+5, r24	; 0x05
  f0:	84 e3       	ldi	r24, 0x34	; 52
  f2:	8e 83       	std	Y+6, r24	; 0x06
  f4:	89 ee       	ldi	r24, 0xE9	; 233
  f6:	8f 83       	std	Y+7, r24	; 0x07
  f8:	8a e7       	ldi	r24, 0x7A	; 122
  fa:	88 87       	std	Y+8, r24	; 0x08
  fc:	8d 81       	ldd	r24, Y+5	; 0x05
  fe:	9e 81       	ldd	r25, Y+6	; 0x06
 100:	af 81       	ldd	r26, Y+7	; 0x07
 102:	b8 85       	ldd	r27, Y+8	; 0x08
 104:	f5 01       	movw	r30, r10
 106:	80 83       	st	Z, r24
 108:	91 83       	std	Z+1, r25	; 0x01
 10a:	a2 83       	std	Z+2, r26	; 0x02
 10c:	b3 83       	std	Z+3, r27	; 0x03
 10e:	80 e9       	ldi	r24, 0x90	; 144
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	a8 0e       	add	r10, r24
 114:	b9 1e       	adc	r11, r25
 116:	c5 01       	movw	r24, r10
 118:	8c 58       	subi	r24, 0x8C	; 140
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9initBlankEP7APDTime>
 124:	a4 e9       	ldi	r26, 0x94	; 148
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	aa 0e       	add	r10, r26
 12a:	bb 1e       	adc	r11, r27
 12c:	f5 01       	movw	r30, r10
 12e:	c1 92       	st	Z+, r12
 130:	d1 92       	st	Z+, r13
 132:	df 01       	movw	r26, r30
 134:	1d 92       	st	X+, r1
 136:	1d 92       	st	X+, r1
 138:	1d 92       	st	X+, r1
 13a:	1d 92       	st	X+, r1
 13c:	fd 01       	movw	r30, r26
 13e:	e1 92       	st	Z+, r14
 140:	f1 92       	st	Z+, r15
 142:	01 93       	st	Z+, r16
 144:	11 93       	st	Z+, r17
 146:	5f 01       	movw	r10, r30
 148:	88 eb       	ldi	r24, 0xB8	; 184
 14a:	89 87       	std	Y+9, r24	; 0x09
 14c:	8a e6       	ldi	r24, 0x6A	; 106
 14e:	8a 87       	std	Y+10, r24	; 0x0a
 150:	89 e9       	ldi	r24, 0x99	; 153
 152:	8b 87       	std	Y+11, r24	; 0x0b
 154:	85 e9       	ldi	r24, 0x95	; 149
 156:	8c 87       	std	Y+12, r24	; 0x0c
 158:	89 85       	ldd	r24, Y+9	; 0x09
 15a:	9a 85       	ldd	r25, Y+10	; 0x0a
 15c:	ab 85       	ldd	r26, Y+11	; 0x0b
 15e:	bc 85       	ldd	r27, Y+12	; 0x0c
 160:	80 83       	st	Z, r24
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	a2 83       	std	Z+2, r26	; 0x02
 166:	b3 83       	std	Z+3, r27	; 0x03
 168:	82 e6       	ldi	r24, 0x62	; 98
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	a8 0e       	add	r10, r24
 16e:	b9 1e       	adc	r11, r25
 170:	c5 01       	movw	r24, r10
 172:	8e 55       	subi	r24, 0x5E	; 94
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb9initBlankEP7APDTime>
 17e:	a2 ec       	ldi	r26, 0xC2	; 194
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	aa 0e       	add	r10, r26
 184:	bb 1e       	adc	r11, r27
 186:	f5 01       	movw	r30, r10
 188:	c1 92       	st	Z+, r12
 18a:	d1 92       	st	Z+, r13
 18c:	5f 01       	movw	r10, r30
 18e:	e0 82       	st	Z, r14
 190:	f1 82       	std	Z+1, r15	; 0x01
 192:	02 83       	std	Z+2, r16	; 0x02
 194:	13 83       	std	Z+3, r17	; 0x03
 196:	ec e3       	ldi	r30, 0x3C	; 60
 198:	ff ef       	ldi	r31, 0xFF	; 255
 19a:	ae 0e       	add	r10, r30
 19c:	bf 1e       	adc	r11, r31
 19e:	88 eb       	ldi	r24, 0xB8	; 184
 1a0:	92 e2       	ldi	r25, 0x22	; 34
 1a2:	d5 01       	movw	r26, r10
 1a4:	59 96       	adiw	r26, 0x19	; 25
 1a6:	9c 93       	st	X, r25
 1a8:	8e 93       	st	-X, r24
 1aa:	58 97       	sbiw	r26, 0x18	; 24
 1ac:	5b 96       	adiw	r26, 0x1b	; 27
 1ae:	dc 92       	st	X, r13
 1b0:	ce 92       	st	-X, r12
 1b2:	5a 97       	sbiw	r26, 0x1a	; 26
 1b4:	99 96       	adiw	r26, 0x29	; 41
 1b6:	1c 92       	st	X, r1
 1b8:	99 97       	sbiw	r26, 0x29	; 41
 1ba:	91 96       	adiw	r26, 0x21	; 33
 1bc:	1c 92       	st	X, r1
 1be:	1e 92       	st	-X, r1
 1c0:	90 97       	sbiw	r26, 0x20	; 32
 1c2:	93 96       	adiw	r26, 0x23	; 35
 1c4:	1c 92       	st	X, r1
 1c6:	1e 92       	st	-X, r1
 1c8:	92 97       	sbiw	r26, 0x22	; 34
 1ca:	95 96       	adiw	r26, 0x25	; 37
 1cc:	1c 92       	st	X, r1
 1ce:	1e 92       	st	-X, r1
 1d0:	94 97       	sbiw	r26, 0x24	; 36
 1d2:	97 96       	adiw	r26, 0x27	; 39
 1d4:	1c 92       	st	X, r1
 1d6:	1e 92       	st	-X, r1
 1d8:	96 97       	sbiw	r26, 0x26	; 38
 1da:	98 96       	adiw	r26, 0x28	; 40
 1dc:	1c 92       	st	X, r1
 1de:	98 97       	sbiw	r26, 0x28	; 40
 1e0:	9f 96       	adiw	r26, 0x2f	; 47
 1e2:	1c 92       	st	X, r1
 1e4:	1e 92       	st	-X, r1
 1e6:	9e 97       	sbiw	r26, 0x2e	; 46
 1e8:	d3 96       	adiw	r26, 0x33	; 51
 1ea:	1c 92       	st	X, r1
 1ec:	1e 92       	st	-X, r1
 1ee:	d2 97       	sbiw	r26, 0x32	; 50
 1f0:	d7 96       	adiw	r26, 0x37	; 55
 1f2:	1c 92       	st	X, r1
 1f4:	1e 92       	st	-X, r1
 1f6:	d6 97       	sbiw	r26, 0x36	; 54
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	9f ef       	ldi	r25, 0xFF	; 255
 1fc:	d1 96       	adiw	r26, 0x31	; 49
 1fe:	9c 93       	st	X, r25
 200:	8e 93       	st	-X, r24
 202:	d0 97       	sbiw	r26, 0x30	; 48
 204:	d5 96       	adiw	r26, 0x35	; 53
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	d4 97       	sbiw	r26, 0x34	; 52
 20c:	d9 96       	adiw	r26, 0x39	; 57
 20e:	9c 93       	st	X, r25
 210:	8e 93       	st	-X, r24
 212:	d8 97       	sbiw	r26, 0x38	; 56
 214:	9d 96       	adiw	r26, 0x2d	; 45
 216:	1c 92       	st	X, r1
 218:	1e 92       	st	-X, r1
 21a:	9c 97       	sbiw	r26, 0x2c	; 44
 21c:	c5 01       	movw	r24, r10
 21e:	88 53       	subi	r24, 0x38	; 56
 220:	9f 4f       	sbci	r25, 0xFF	; 255
 222:	21 e4       	ldi	r18, 0x41	; 65
 224:	dc 01       	movw	r26, r24
 226:	82 2f       	mov	r24, r18
 228:	1d 92       	st	X+, r1
 22a:	8a 95       	dec	r24
 22c:	01 f4       	brne	.+0      	; 0x22e <_ZN6APDWeb9initBlankEP7APDTime+0x22e>
 22e:	c5 01       	movw	r24, r10
 230:	87 5f       	subi	r24, 0xF7	; 247
 232:	9e 4f       	sbci	r25, 0xFE	; 254
 234:	dc 01       	movw	r26, r24
 236:	82 2f       	mov	r24, r18
 238:	1d 92       	st	X+, r1
 23a:	8a 95       	dec	r24
 23c:	01 f4       	brne	.+0      	; 0x23e <_ZN6APDWeb9initBlankEP7APDTime+0x23e>
 23e:	c5 01       	movw	r24, r10
 240:	86 5b       	subi	r24, 0xB6	; 182
 242:	9e 4f       	sbci	r25, 0xFE	; 254
 244:	dc 01       	movw	r26, r24
 246:	1d 92       	st	X+, r1
 248:	2a 95       	dec	r18
 24a:	01 f4       	brne	.+0      	; 0x24c <_ZN6APDWeb9initBlankEP7APDTime+0x24c>
 24c:	eb e8       	ldi	r30, 0x8B	; 139
 24e:	f1 e0       	ldi	r31, 0x01	; 1
 250:	ae 0e       	add	r10, r30
 252:	bf 1e       	adc	r11, r31
 254:	d5 01       	movw	r26, r10
 256:	1d 92       	st	X+, r1
 258:	1d 92       	st	X+, r1
 25a:	fd 01       	movw	r30, r26
 25c:	11 92       	st	Z+, r1
 25e:	11 92       	st	Z+, r1
 260:	5f 01       	movw	r10, r30
 262:	11 82       	std	Z+1, r1	; 0x01
 264:	10 82       	st	Z, r1
 266:	81 e7       	ldi	r24, 0x71	; 113
 268:	9e ef       	ldi	r25, 0xFE	; 254
 26a:	a8 0e       	add	r10, r24
 26c:	b9 1e       	adc	r11, r25
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	d5 01       	movw	r26, r10
 272:	da 96       	adiw	r26, 0x3a	; 58
 274:	8c 93       	st	X, r24
 276:	da 97       	sbiw	r26, 0x3a	; 58
 278:	dc 96       	adiw	r26, 0x3c	; 60
 27a:	1c 92       	st	X, r1
 27c:	1e 92       	st	-X, r1
 27e:	db 97       	sbiw	r26, 0x3b	; 59
 280:	de 96       	adiw	r26, 0x3e	; 62
 282:	1c 92       	st	X, r1
 284:	1e 92       	st	-X, r1
 286:	dd 97       	sbiw	r26, 0x3d	; 61
 288:	df 96       	adiw	r26, 0x3f	; 63
 28a:	1c 92       	st	X, r1
 28c:	e0 e4       	ldi	r30, 0x40	; 64
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	ae 0e       	add	r10, r30
 292:	bf 1e       	adc	r11, r31
 294:	d5 01       	movw	r26, r10
 296:	1d 92       	st	X+, r1
 298:	1d 92       	st	X+, r1
 29a:	5d 01       	movw	r10, r26
 29c:	fd 01       	movw	r30, r26
 29e:	10 82       	st	Z, r1
 2a0:	11 82       	std	Z+1, r1	; 0x01
 2a2:	12 82       	std	Z+2, r1	; 0x02
 2a4:	13 82       	std	Z+3, r1	; 0x03
 2a6:	8e eb       	ldi	r24, 0xBE	; 190
 2a8:	9f ef       	ldi	r25, 0xFF	; 255
 2aa:	a8 0e       	add	r10, r24
 2ac:	b9 1e       	adc	r11, r25
 2ae:	d5 01       	movw	r26, r10
 2b0:	5d 96       	adiw	r26, 0x1d	; 29
 2b2:	1c 92       	st	X, r1
 2b4:	1e 92       	st	-X, r1
 2b6:	5c 97       	sbiw	r26, 0x1c	; 28
 2b8:	5f 96       	adiw	r26, 0x1f	; 31
 2ba:	1c 92       	st	X, r1
 2bc:	1e 92       	st	-X, r1
 2be:	5e 97       	sbiw	r26, 0x1e	; 30
 2c0:	62 96       	adiw	r28, 0x12	; 18
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	cf 91       	pop	r28
 2ce:	df 91       	pop	r29
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	08 95       	ret

Disassembly of section .text._ZN6APDWeb7wc_busyEv:

00000000 <_ZN6APDWeb7wc_busyEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7wc_busyEv>
   a:	9b 01       	movw	r18, r22
   c:	ac 01       	movw	r20, r24
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	ce 5b       	subi	r28, 0xBE	; 190
  10:	df 4f       	sbci	r29, 0xFF	; 255
  12:	88 81       	ld	r24, Y
  14:	99 81       	ldd	r25, Y+1	; 0x01
  16:	aa 81       	ldd	r26, Y+2	; 0x02
  18:	bb 81       	ldd	r27, Y+3	; 0x03
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	c2 54       	subi	r28, 0x42	; 66
  1c:	d0 40       	sbci	r29, 0x00	; 0
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	a1 05       	cpc	r26, r1
  22:	b1 05       	cpc	r27, r1
  24:	01 f0       	breq	.+0      	; 0x26 <_ZN6APDWeb7wc_busyEv+0x26>
  26:	c0 5c       	subi	r28, 0xC0	; 192
  28:	df 4f       	sbci	r29, 0xFF	; 255

	// TODO Auto-generated destructor stub
}
  2a:	88 81       	ld	r24, Y
  2c:	99 81       	ldd	r25, Y+1	; 0x01
  2e:	c0 54       	subi	r28, 0x40	; 64
  30:	d0 40       	sbci	r29, 0x00	; 0
  32:	89 2b       	or	r24, r25
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN6APDWeb7wc_busyEv+0x36>
  36:	ce 5b       	subi	r28, 0xBE	; 190
  38:	df 4f       	sbci	r29, 0xFF	; 255
  3a:	28 83       	st	Y, r18
  3c:	39 83       	std	Y+1, r19	; 0x01
  3e:	4a 83       	std	Y+2, r20	; 0x02
  40:	5b 83       	std	Y+3, r21	; 0x03
  42:	c2 54       	subi	r28, 0x42	; 66
  44:	d0 40       	sbci	r29, 0x00	; 0
  46:	fe 01       	movw	r30, r28
  48:	e0 5c       	subi	r30, 0xC0	; 192
  4a:	ff 4f       	sbci	r31, 0xFF	; 255
  4c:	80 81       	ld	r24, Z
  4e:	91 81       	ldd	r25, Z+1	; 0x01
  50:	01 96       	adiw	r24, 0x01	; 1
  52:	91 83       	std	Z+1, r25	; 0x01
  54:	80 83       	st	Z, r24
  56:	80 51       	subi	r24, 0x10	; 16
  58:	97 42       	sbci	r25, 0x27	; 39
  5a:	04 f4       	brge	.+0      	; 0x5c <_ZN6APDWeb7wc_busyEv+0x5c>
  5c:	ce 5b       	subi	r28, 0xBE	; 190
  5e:	df 4f       	sbci	r29, 0xFF	; 255
  60:	88 81       	ld	r24, Y
  62:	99 81       	ldd	r25, Y+1	; 0x01
  64:	aa 81       	ldd	r26, Y+2	; 0x02
  66:	bb 81       	ldd	r27, Y+3	; 0x03
  68:	c2 54       	subi	r28, 0x42	; 66
  6a:	d0 40       	sbci	r29, 0x00	; 0
  6c:	28 1b       	sub	r18, r24
  6e:	39 0b       	sbc	r19, r25
  70:	4a 0b       	sbc	r20, r26
  72:	5b 0b       	sbc	r21, r27
  74:	21 53       	subi	r18, 0x31	; 49
  76:	35 47       	sbci	r19, 0x75	; 117
  78:	40 40       	sbci	r20, 0x00	; 0
  7a:	50 40       	sbci	r21, 0x00	; 0
  7c:	00 f0       	brcs	.+0      	; 0x7e <_ZN6APDWeb7wc_busyEv+0x7e>
  7e:	ce 01       	movw	r24, r28
  80:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7wc_busyEv>
  84:	c0 5c       	subi	r28, 0xC0	; 192
  86:	df 4f       	sbci	r29, 0xFF	; 255
  88:	19 92       	st	Y+, r1
  8a:	19 92       	st	Y+, r1
  8c:	18 82       	st	Y, r1
  8e:	19 82       	std	Y+1, r1	; 0x01
  90:	1a 82       	std	Y+2, r1	; 0x02
  92:	1b 82       	std	Y+3, r1	; 0x03
  94:	df 91       	pop	r29
  96:	cf 91       	pop	r28
  98:	08 95       	ret

Disassembly of section .text._ZN6APDWeb13self_registerEv:

00000000 <_ZN6APDWeb13self_registerEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	c6 56       	subi	r28, 0x66	; 102
  1e:	d0 40       	sbci	r29, 0x00	; 0
  20:	0f b6       	in	r0, 0x3f	; 63
  22:	f8 94       	cli
  24:	de bf       	out	0x3e, r29	; 62
  26:	0f be       	out	0x3f, r0	; 63
  28:	cd bf       	out	0x3d, r28	; 61

	// TODO Auto-generated destructor stub
}
  2a:	5c 01       	movw	r10, r24
  2c:	fc 01       	movw	r30, r24
  2e:	a2 a1       	ldd	r26, Z+34	; 0x22
  30:	b3 a1       	ldd	r27, Z+35	; 0x23
  32:	10 97       	sbiw	r26, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN6APDWeb13self_registerEv+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6APDWeb13self_registerEv+0x38>
  38:	ed 91       	ld	r30, X+
  3a:	fc 91       	ld	r31, X
  3c:	11 97       	sbiw	r26, 0x01	; 1
  3e:	04 88       	ldd	r0, Z+20	; 0x14
  40:	f5 89       	ldd	r31, Z+21	; 0x15
  42:	e0 2d       	mov	r30, r0
  44:	cd 01       	movw	r24, r26
  46:	19 95       	eicall
  48:	88 23       	and	r24, r24
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN6APDWeb13self_registerEv+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6APDWeb13self_registerEv+0x4e>
  4e:	8d b7       	in	r24, 0x3d	; 61
  50:	9e b7       	in	r25, 0x3e	; 62
  52:	40 97       	sbiw	r24, 0x10	; 16
  54:	0f b6       	in	r0, 0x3f	; 63
  56:	f8 94       	cli
  58:	9e bf       	out	0x3e, r25	; 62
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	8d bf       	out	0x3d, r24	; 61
  5e:	ed b7       	in	r30, 0x3d	; 61
  60:	fe b7       	in	r31, 0x3e	; 62
  62:	31 96       	adiw	r30, 0x01	; 1
  64:	17 e0       	ldi	r17, 0x07	; 7
  66:	81 2e       	mov	r8, r17
  68:	91 2c       	mov	r9, r1
  6a:	8c 0e       	add	r8, r28
  6c:	9d 1e       	adc	r9, r29
  6e:	ad b7       	in	r26, 0x3d	; 61
  70:	be b7       	in	r27, 0x3e	; 62
  72:	12 96       	adiw	r26, 0x02	; 2
  74:	9c 92       	st	X, r9
  76:	8e 92       	st	-X, r8
  78:	11 97       	sbiw	r26, 0x01	; 1
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	93 83       	std	Z+3, r25	; 0x03
  80:	82 83       	std	Z+2, r24	; 0x02
  82:	d5 01       	movw	r26, r10
  84:	18 96       	adiw	r26, 0x08	; 8
  86:	8c 91       	ld	r24, X
  88:	18 97       	sbiw	r26, 0x08	; 8
  8a:	84 83       	std	Z+4, r24	; 0x04
  8c:	15 82       	std	Z+5, r1	; 0x05
  8e:	19 96       	adiw	r26, 0x09	; 9
  90:	8c 91       	ld	r24, X
  92:	19 97       	sbiw	r26, 0x09	; 9
  94:	86 83       	std	Z+6, r24	; 0x06
  96:	17 82       	std	Z+7, r1	; 0x07
  98:	1a 96       	adiw	r26, 0x0a	; 10
  9a:	8c 91       	ld	r24, X
  9c:	1a 97       	sbiw	r26, 0x0a	; 10
  9e:	80 87       	std	Z+8, r24	; 0x08
  a0:	11 86       	std	Z+9, r1	; 0x09
  a2:	1b 96       	adiw	r26, 0x0b	; 11
  a4:	8c 91       	ld	r24, X
  a6:	82 87       	std	Z+10, r24	; 0x0a
  a8:	13 86       	std	Z+11, r1	; 0x0b
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	95 87       	std	Z+13, r25	; 0x0d
  b0:	84 87       	std	Z+12, r24	; 0x0c
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	97 87       	std	Z+15, r25	; 0x0f
  b8:	86 87       	std	Z+14, r24	; 0x0e
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
  be:	f5 01       	movw	r30, r10
  c0:	e2 a0       	ldd	r14, Z+34	; 0x22
  c2:	f3 a0       	ldd	r15, Z+35	; 0x23
  c4:	d7 01       	movw	r26, r14
  c6:	ed 91       	ld	r30, X+
  c8:	fc 91       	ld	r31, X
  ca:	c4 84       	ldd	r12, Z+12	; 0x0c
  cc:	d5 84       	ldd	r13, Z+13	; 0x0d
  ce:	ed b7       	in	r30, 0x3d	; 61
  d0:	fe b7       	in	r31, 0x3e	; 62
  d2:	70 96       	adiw	r30, 0x10	; 16
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	fe bf       	out	0x3e, r31	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	ed bf       	out	0x3d, r30	; 61
  de:	86 e4       	ldi	r24, 0x46	; 70
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	a8 0e       	add	r10, r24
  e4:	b9 1e       	adc	r11, r25
  e6:	8e 01       	movw	r16, r28
  e8:	0f 5f       	subi	r16, 0xFF	; 255
  ea:	1f 4f       	sbci	r17, 0xFF	; 255
  ec:	c8 01       	movw	r24, r16
  ee:	b5 01       	movw	r22, r10
  f0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
  f4:	a4 e2       	ldi	r26, 0x24	; 36
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	aa 0e       	add	r10, r26
  fa:	bb 1e       	adc	r11, r27
  fc:	f5 01       	movw	r30, r10
  fe:	40 81       	ld	r20, Z
 100:	51 81       	ldd	r21, Z+1	; 0x01
 102:	86 e9       	ldi	r24, 0x96	; 150
 104:	9f ef       	ldi	r25, 0xFF	; 255
 106:	a8 0e       	add	r10, r24
 108:	b9 1e       	adc	r11, r25
 10a:	c7 01       	movw	r24, r14
 10c:	b8 01       	movw	r22, r16
 10e:	f6 01       	movw	r30, r12
 110:	19 95       	eicall
 112:	f5 01       	movw	r30, r10
 114:	a2 a1       	ldd	r26, Z+34	; 0x22
 116:	b3 a1       	ldd	r27, Z+35	; 0x23
 118:	89 2b       	or	r24, r25
 11a:	01 f4       	brne	.+0      	; 0x11c <_ZN6APDWeb13self_registerEv+0x11c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_ZN6APDWeb13self_registerEv+0x11e>
 11e:	cd 01       	movw	r24, r26
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 128:	d5 01       	movw	r26, r10
 12a:	92 96       	adiw	r26, 0x22	; 34
 12c:	8d 91       	ld	r24, X+
 12e:	9c 91       	ld	r25, X
 130:	93 97       	sbiw	r26, 0x23	; 35
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 13a:	b5 01       	movw	r22, r10
 13c:	66 5b       	subi	r22, 0xB6	; 182
 13e:	7f 4f       	sbci	r23, 0xFF	; 255
 140:	f5 01       	movw	r30, r10
 142:	82 a1       	ldd	r24, Z+34	; 0x22
 144:	93 a1       	ldd	r25, Z+35	; 0x23
 146:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 14a:	d5 01       	movw	r26, r10
 14c:	92 96       	adiw	r26, 0x22	; 34
 14e:	8d 91       	ld	r24, X+
 150:	9c 91       	ld	r25, X
 152:	93 97       	sbiw	r26, 0x23	; 35
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 15c:	b5 01       	movw	r22, r10
 15e:	68 53       	subi	r22, 0x38	; 56
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	f5 01       	movw	r30, r10
 164:	82 a1       	ldd	r24, Z+34	; 0x22
 166:	93 a1       	ldd	r25, Z+35	; 0x23
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 16c:	d5 01       	movw	r26, r10
 16e:	92 96       	adiw	r26, 0x22	; 34
 170:	8d 91       	ld	r24, X+
 172:	9c 91       	ld	r25, X
 174:	93 97       	sbiw	r26, 0x23	; 35
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 17e:	f5 01       	movw	r30, r10
 180:	82 a1       	ldd	r24, Z+34	; 0x22
 182:	93 a1       	ldd	r25, Z+35	; 0x23
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 18c:	d5 01       	movw	r26, r10
 18e:	92 96       	adiw	r26, 0x22	; 34
 190:	8d 91       	ld	r24, X+
 192:	9c 91       	ld	r25, X
 194:	93 97       	sbiw	r26, 0x23	; 35
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 19e:	f5 01       	movw	r30, r10
 1a0:	82 a1       	ldd	r24, Z+34	; 0x22
 1a2:	93 a1       	ldd	r25, Z+35	; 0x23
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 1ac:	f4 01       	movw	r30, r8
 1ae:	01 90       	ld	r0, Z+
 1b0:	00 20       	and	r0, r0
 1b2:	01 f4       	brne	.+0      	; 0x1b4 <_ZN6APDWeb13self_registerEv+0x1b4>
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	e8 19       	sub	r30, r8
 1b8:	f9 09       	sbc	r31, r9
 1ba:	d5 01       	movw	r26, r10
 1bc:	92 96       	adiw	r26, 0x22	; 34
 1be:	8d 91       	ld	r24, X+
 1c0:	9c 91       	ld	r25, X
 1c2:	93 97       	sbiw	r26, 0x23	; 35
 1c4:	bf 01       	movw	r22, r30
 1c6:	4a e0       	ldi	r20, 0x0A	; 10
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 1ce:	f5 01       	movw	r30, r10
 1d0:	82 a1       	ldd	r24, Z+34	; 0x22
 1d2:	93 a1       	ldd	r25, Z+35	; 0x23
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 1dc:	d5 01       	movw	r26, r10
 1de:	92 96       	adiw	r26, 0x22	; 34
 1e0:	8d 91       	ld	r24, X+
 1e2:	9c 91       	ld	r25, X
 1e4:	93 97       	sbiw	r26, 0x23	; 35
 1e6:	b4 01       	movw	r22, r8
 1e8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 1f4:	f5 01       	movw	r30, r10
 1f6:	86 a1       	ldd	r24, Z+38	; 0x26
 1f8:	97 a1       	ldd	r25, Z+39	; 0x27
 1fa:	89 2b       	or	r24, r25
 1fc:	01 f4       	brne	.+0      	; 0x1fe <_ZN6APDWeb13self_registerEv+0x1fe>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	97 a3       	std	Z+39, r25	; 0x27
 204:	86 a3       	std	Z+38, r24	; 0x26
 206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN6APDWeb13self_registerEv+0x208>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 210:	00 c0       	rjmp	.+0      	; 0x212 <_ZN6APDWeb13self_registerEv+0x212>
 212:	ed 91       	ld	r30, X+
 214:	fc 91       	ld	r31, X
 216:	11 97       	sbiw	r26, 0x01	; 1
 218:	02 88       	ldd	r0, Z+18	; 0x12
 21a:	f3 89       	ldd	r31, Z+19	; 0x13
 21c:	e0 2d       	mov	r30, r0
 21e:	cd 01       	movw	r24, r26
 220:	19 95       	eicall
 222:	00 c0       	rjmp	.+0      	; 0x224 <_ZN6APDWeb13self_registerEv+0x224>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 22c:	c5 01       	movw	r24, r10
 22e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 232:	f5 01       	movw	r30, r10
 234:	a2 a1       	ldd	r26, Z+34	; 0x22
 236:	b3 a1       	ldd	r27, Z+35	; 0x23
 238:	10 97       	sbiw	r26, 0x00	; 0
 23a:	01 f0       	breq	.+0      	; 0x23c <_ZN6APDWeb13self_registerEv+0x23c>
 23c:	ed 91       	ld	r30, X+
 23e:	fc 91       	ld	r31, X
 240:	11 97       	sbiw	r26, 0x01	; 1
 242:	04 88       	ldd	r0, Z+20	; 0x14
 244:	f5 89       	ldd	r31, Z+21	; 0x15
 246:	e0 2d       	mov	r30, r0
 248:	cd 01       	movw	r24, r26
 24a:	19 95       	eicall
 24c:	88 23       	and	r24, r24
 24e:	01 f0       	breq	.+0      	; 0x250 <_ZN6APDWeb13self_registerEv+0x250>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	00 c0       	rjmp	.+0      	; 0x254 <_ZN6APDWeb13self_registerEv+0x254>
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	d5 01       	movw	r26, r10
 258:	98 96       	adiw	r26, 0x28	; 40
 25a:	8c 93       	st	X, r24
 25c:	00 c0       	rjmp	.+0      	; 0x25e <_ZN6APDWeb13self_registerEv+0x25e>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 266:	c5 01       	movw	r24, r10
 268:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb13self_registerEv>
 26c:	ca 59       	subi	r28, 0x9A	; 154
 26e:	df 4f       	sbci	r29, 0xFF	; 255
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	df 90       	pop	r13
 288:	cf 90       	pop	r12
 28a:	bf 90       	pop	r11
 28c:	af 90       	pop	r10
 28e:	9f 90       	pop	r9
 290:	8f 90       	pop	r8
 292:	08 95       	ret

Disassembly of section .text._ZN6APDWeb21registration_responseEPS_:

00000000 <_ZN6APDWeb21registration_responseEPS_>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	cb 5a       	subi	r28, 0xAB	; 171

	// TODO Auto-generated destructor stub
}
  2a:	d0 40       	sbci	r29, 0x00	; 0
  2c:	0f b6       	in	r0, 0x3f	; 63
  2e:	f8 94       	cli
  30:	de bf       	out	0x3e, r29	; 62
  32:	0f be       	out	0x3f, r0	; 63
  34:	cd bf       	out	0x3d, r28	; 61
  36:	7c 01       	movw	r14, r24
  38:	64 ef       	ldi	r22, 0xF4	; 244
  3a:	71 e0       	ldi	r23, 0x01	; 1
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
  44:	1b 82       	std	Y+3, r1	; 0x03
  46:	1c 82       	std	Y+4, r1	; 0x04
  48:	1d 82       	std	Y+5, r1	; 0x05
  4a:	1e 82       	std	Y+6, r1	; 0x06
  4c:	fe 01       	movw	r30, r28
  4e:	37 96       	adiw	r30, 0x07	; 7
  50:	8d e3       	ldi	r24, 0x3D	; 61
  52:	df 01       	movw	r26, r30
  54:	1d 92       	st	X+, r1
  56:	8a 95       	dec	r24
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN6APDWeb21registration_responseEPS_+0x5a>
  5a:	f7 01       	movw	r30, r14
  5c:	a2 a1       	ldd	r26, Z+34	; 0x22
  5e:	b3 a1       	ldd	r27, Z+35	; 0x23
  60:	10 97       	sbiw	r26, 0x00	; 0
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN6APDWeb21registration_responseEPS_+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN6APDWeb21registration_responseEPS_+0x66>
  66:	ed 91       	ld	r30, X+
  68:	fc 91       	ld	r31, X
  6a:	11 97       	sbiw	r26, 0x01	; 1
  6c:	04 80       	ldd	r0, Z+4	; 0x04
  6e:	f5 81       	ldd	r31, Z+5	; 0x05
  70:	e0 2d       	mov	r30, r0
  72:	cd 01       	movw	r24, r26
  74:	19 95       	eicall
  76:	89 2b       	or	r24, r25
  78:	01 f4       	brne	.+0      	; 0x7a <_ZN6APDWeb21registration_responseEPS_+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZN6APDWeb21registration_responseEPS_+0x7c>
  7c:	28 ec       	ldi	r18, 0xC8	; 200
  7e:	a2 2e       	mov	r10, r18
  80:	b1 2c       	mov	r11, r1
  82:	ae 0c       	add	r10, r14
  84:	bf 1c       	adc	r11, r15
  86:	9a e4       	ldi	r25, 0x4A	; 74
  88:	29 2e       	mov	r2, r25
  8a:	31 2c       	mov	r3, r1
  8c:	2e 0c       	add	r2, r14
  8e:	3f 1c       	adc	r3, r15
  90:	c7 55       	subi	r28, 0x57	; 87
  92:	df 4f       	sbci	r29, 0xFF	; 255
  94:	18 82       	st	Y, r1
  96:	c9 5a       	subi	r28, 0xA9	; 169
  98:	d0 40       	sbci	r29, 0x00	; 0
  9a:	88 24       	eor	r8, r8
  9c:	8a 94       	dec	r8
  9e:	98 2c       	mov	r9, r8
  a0:	84 e4       	ldi	r24, 0x44	; 68
  a2:	c8 2e       	mov	r12, r24
  a4:	d1 2c       	mov	r13, r1
  a6:	cc 0e       	add	r12, r28
  a8:	dd 1e       	adc	r13, r29
  aa:	04 e0       	ldi	r16, 0x04	; 4
  ac:	40 2e       	mov	r4, r16
  ae:	51 2c       	mov	r5, r1
  b0:	4c 0c       	add	r4, r12
  b2:	5d 1c       	adc	r5, r13
  b4:	9e 01       	movw	r18, r28
  b6:	29 55       	subi	r18, 0x59	; 89
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	c6 55       	subi	r28, 0x56	; 86
  bc:	df 4f       	sbci	r29, 0xFF	; 255
  be:	39 83       	std	Y+1, r19	; 0x01
  c0:	28 83       	st	Y, r18
  c2:	ca 5a       	subi	r28, 0xAA	; 170
  c4:	d0 40       	sbci	r29, 0x00	; 0
  c6:	35 01       	movw	r6, r10
  c8:	00 c0       	rjmp	.+0      	; 0xca <_ZN6APDWeb21registration_responseEPS_+0xca>
  ca:	d6 01       	movw	r26, r12
  cc:	1d 92       	st	X+, r1
  ce:	1d 92       	st	X+, r1
  d0:	1d 92       	st	X+, r1
  d2:	1c 92       	st	X, r1
  d4:	13 97       	sbiw	r26, 0x03	; 3
  d6:	f2 01       	movw	r30, r4
  d8:	20 e6       	ldi	r18, 0x60	; 96
  da:	11 92       	st	Z+, r1
  dc:	2a 95       	dec	r18
  de:	01 f4       	brne	.+0      	; 0xe0 <_ZN6APDWeb21registration_responseEPS_+0xe0>
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	9f ef       	ldi	r25, 0xFF	; 255
  e4:	9a 83       	std	Y+2, r25	; 0x02
  e6:	89 83       	std	Y+1, r24	; 0x01
  e8:	c8 55       	subi	r28, 0x58	; 88
  ea:	df 4f       	sbci	r29, 0xFF	; 255
  ec:	18 82       	st	Y, r1
  ee:	c8 5a       	subi	r28, 0xA8	; 168
  f0:	d0 40       	sbci	r29, 0x00	; 0
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN6APDWeb21registration_responseEPS_+0xf4>
  f4:	f6 01       	movw	r30, r12
  f6:	e0 0f       	add	r30, r16
  f8:	f1 1f       	adc	r31, r17
  fa:	80 83       	st	Z, r24
  fc:	0f 5f       	subi	r16, 0xFF	; 255
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
 100:	f6 01       	movw	r30, r12
 102:	e0 0f       	add	r30, r16
 104:	f1 1f       	adc	r31, r17
 106:	10 82       	st	Z, r1
 108:	03 36       	cpi	r16, 0x63	; 99
 10a:	11 05       	cpc	r17, r1
 10c:	04 f0       	brlt	.+0      	; 0x10e <_ZN6APDWeb21registration_responseEPS_+0x10e>
 10e:	f6 01       	movw	r30, r12
 110:	81 81       	ldd	r24, Z+1	; 0x01
 112:	81 93       	st	Z+, r24
 114:	c6 55       	subi	r28, 0x56	; 86
 116:	df 4f       	sbci	r29, 0xFF	; 255
 118:	88 81       	ld	r24, Y
 11a:	99 81       	ldd	r25, Y+1	; 0x01
 11c:	ca 5a       	subi	r28, 0xAA	; 170
 11e:	d0 40       	sbci	r29, 0x00	; 0
 120:	e8 17       	cp	r30, r24
 122:	f9 07       	cpc	r31, r25
 124:	01 f4       	brne	.+0      	; 0x126 <_ZN6APDWeb21registration_responseEPS_+0x126>
 126:	02 e6       	ldi	r16, 0x62	; 98
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	d7 01       	movw	r26, r14
 12c:	92 96       	adiw	r26, 0x22	; 34
 12e:	ed 91       	ld	r30, X+
 130:	fc 91       	ld	r31, X
 132:	93 97       	sbiw	r26, 0x23	; 35
 134:	a0 81       	ld	r26, Z
 136:	b1 81       	ldd	r27, Z+1	; 0x01
 138:	14 96       	adiw	r26, 0x04	; 4
 13a:	2d 91       	ld	r18, X+
 13c:	3c 91       	ld	r19, X
 13e:	15 97       	sbiw	r26, 0x05	; 5
 140:	cf 01       	movw	r24, r30
 142:	f9 01       	movw	r30, r18
 144:	19 95       	eicall
 146:	89 2b       	or	r24, r25
 148:	01 f4       	brne	.+0      	; 0x14a <_ZN6APDWeb21registration_responseEPS_+0x14a>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <_ZN6APDWeb21registration_responseEPS_+0x14c>
 14c:	c6 01       	movw	r24, r12
 14e:	6a e0       	ldi	r22, 0x0A	; 10
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 156:	00 97       	sbiw	r24, 0x00	; 0
 158:	01 f0       	breq	.+0      	; 0x15a <_ZN6APDWeb21registration_responseEPS_+0x15a>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <_ZN6APDWeb21registration_responseEPS_+0x15c>
 15c:	d7 01       	movw	r26, r14
 15e:	92 96       	adiw	r26, 0x22	; 34
 160:	ed 91       	ld	r30, X+
 162:	fc 91       	ld	r31, X
 164:	93 97       	sbiw	r26, 0x23	; 35
 166:	a0 81       	ld	r26, Z
 168:	b1 81       	ldd	r27, Z+1	; 0x01
 16a:	16 96       	adiw	r26, 0x06	; 6
 16c:	2d 91       	ld	r18, X+
 16e:	3c 91       	ld	r19, X
 170:	17 97       	sbiw	r26, 0x07	; 7
 172:	cf 01       	movw	r24, r30
 174:	f9 01       	movw	r30, r18
 176:	19 95       	eicall
 178:	8d 30       	cpi	r24, 0x0D	; 13
 17a:	01 f0       	breq	.+0      	; 0x17c <_ZN6APDWeb21registration_responseEPS_+0x17c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <_ZN6APDWeb21registration_responseEPS_+0x17e>
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	97 ff       	sbrs	r25, 7
 184:	00 c0       	rjmp	.+0      	; 0x186 <_ZN6APDWeb21registration_responseEPS_+0x186>
 186:	00 d0       	rcall	.+0      	; 0x188 <_ZN6APDWeb21registration_responseEPS_+0x188>
 188:	00 d0       	rcall	.+0      	; 0x18a <_ZN6APDWeb21registration_responseEPS_+0x18a>
 18a:	ed b7       	in	r30, 0x3d	; 61
 18c:	fe b7       	in	r31, 0x3e	; 62
 18e:	31 96       	adiw	r30, 0x01	; 1
 190:	ad b7       	in	r26, 0x3d	; 61
 192:	be b7       	in	r27, 0x3e	; 62
 194:	12 96       	adiw	r26, 0x02	; 2
 196:	dc 92       	st	X, r13
 198:	ce 92       	st	-X, r12
 19a:	11 97       	sbiw	r26, 0x01	; 1
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	33 83       	std	Z+3, r19	; 0x03
 1a2:	22 83       	std	Z+2, r18	; 0x02
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	8c 0f       	add	r24, r28
 1aa:	9d 1f       	adc	r25, r29
 1ac:	95 83       	std	Z+5, r25	; 0x05
 1ae:	84 83       	std	Z+4, r24	; 0x04
 1b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 1b4:	ad b7       	in	r26, 0x3d	; 61
 1b6:	be b7       	in	r27, 0x3e	; 62
 1b8:	16 96       	adiw	r26, 0x06	; 6
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	be bf       	out	0x3e, r27	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	ad bf       	out	0x3d, r26	; 61
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <_ZN6APDWeb21registration_responseEPS_+0x1c6>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 1ce:	69 81       	ldd	r22, Y+1	; 0x01
 1d0:	7a 81       	ldd	r23, Y+2	; 0x02
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	4a e0       	ldi	r20, 0x0A	; 10
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 1de:	f6 01       	movw	r30, r12
 1e0:	80 81       	ld	r24, Z
 1e2:	8a 30       	cpi	r24, 0x0A	; 10
 1e4:	01 f0       	breq	.+0      	; 0x1e6 <_ZN6APDWeb21registration_responseEPS_+0x1e6>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <_ZN6APDWeb21registration_responseEPS_+0x1e8>
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	c8 55       	subi	r28, 0x58	; 88
 1ec:	df 4f       	sbci	r29, 0xFF	; 255
 1ee:	f8 83       	st	Y, r31
 1f0:	c8 5a       	subi	r28, 0xA8	; 168
 1f2:	d0 40       	sbci	r29, 0x00	; 0
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <_ZN6APDWeb21registration_responseEPS_+0x1f6>
 1f6:	97 fe       	sbrs	r9, 7
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_ZN6APDWeb21registration_responseEPS_+0x1fa>
 1fa:	c6 01       	movw	r24, r12
 1fc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 200:	4c 01       	movw	r8, r24
 202:	00 c0       	rjmp	.+0      	; 0x204 <_ZN6APDWeb21registration_responseEPS_+0x204>
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	88 23       	and	r24, r24
 208:	01 f0       	breq	.+0      	; 0x20a <_ZN6APDWeb21registration_responseEPS_+0x20a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <_ZN6APDWeb21registration_responseEPS_+0x20c>
 20c:	00 d0       	rcall	.+0      	; 0x20e <_ZN6APDWeb21registration_responseEPS_+0x20e>
 20e:	00 d0       	rcall	.+0      	; 0x210 <_ZN6APDWeb21registration_responseEPS_+0x210>
 210:	ed b7       	in	r30, 0x3d	; 61
 212:	fe b7       	in	r31, 0x3e	; 62
 214:	31 96       	adiw	r30, 0x01	; 1
 216:	ad b7       	in	r26, 0x3d	; 61
 218:	be b7       	in	r27, 0x3e	; 62
 21a:	12 96       	adiw	r26, 0x02	; 2
 21c:	dc 92       	st	X, r13
 21e:	ce 92       	st	-X, r12
 220:	11 97       	sbiw	r26, 0x01	; 1
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	33 83       	std	Z+3, r19	; 0x03
 228:	22 83       	std	Z+2, r18	; 0x02
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	8c 0f       	add	r24, r28
 230:	9d 1f       	adc	r25, r29
 232:	95 83       	std	Z+5, r25	; 0x05
 234:	84 83       	std	Z+4, r24	; 0x04
 236:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 23a:	ad b7       	in	r26, 0x3d	; 61
 23c:	be b7       	in	r27, 0x3e	; 62
 23e:	16 96       	adiw	r26, 0x06	; 6
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	be bf       	out	0x3e, r27	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	ad bf       	out	0x3d, r26	; 61
 24a:	89 2b       	or	r24, r25
 24c:	01 f0       	breq	.+0      	; 0x24e <_ZN6APDWeb21registration_responseEPS_+0x24e>
 24e:	f3 01       	movw	r30, r6
 250:	80 81       	ld	r24, Z
 252:	88 23       	and	r24, r24
 254:	01 f4       	brne	.+0      	; 0x256 <_ZN6APDWeb21registration_responseEPS_+0x256>
 256:	c5 01       	movw	r24, r10
 258:	be 01       	movw	r22, r28
 25a:	6d 5f       	subi	r22, 0xFD	; 253
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 262:	c7 01       	movw	r24, r14
 264:	b5 01       	movw	r22, r10
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	b1 01       	movw	r22, r2
 27c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	b5 01       	movw	r22, r10
 28e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	c7 55       	subi	r28, 0x57	; 87
 296:	df 4f       	sbci	r29, 0xFF	; 255
 298:	f8 83       	st	Y, r31
 29a:	c9 5a       	subi	r28, 0xA9	; 169
 29c:	d0 40       	sbci	r29, 0x00	; 0
 29e:	d6 01       	movw	r26, r12
 2a0:	1c 92       	st	X, r1
 2a2:	d7 01       	movw	r26, r14
 2a4:	92 96       	adiw	r26, 0x22	; 34
 2a6:	ed 91       	ld	r30, X+
 2a8:	fc 91       	ld	r31, X
 2aa:	93 97       	sbiw	r26, 0x23	; 35
 2ac:	a0 81       	ld	r26, Z
 2ae:	b1 81       	ldd	r27, Z+1	; 0x01
 2b0:	14 96       	adiw	r26, 0x04	; 4
 2b2:	2d 91       	ld	r18, X+
 2b4:	3c 91       	ld	r19, X
 2b6:	15 97       	sbiw	r26, 0x05	; 5
 2b8:	cf 01       	movw	r24, r30
 2ba:	f9 01       	movw	r30, r18
 2bc:	19 95       	eicall
 2be:	89 2b       	or	r24, r25
 2c0:	01 f0       	breq	.+0      	; 0x2c2 <_ZN6APDWeb21registration_responseEPS_+0x2c2>
 2c2:	00 e0       	ldi	r16, 0x00	; 0
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <_ZN6APDWeb21registration_responseEPS_+0x2c8>
 2c8:	d7 01       	movw	r26, r14
 2ca:	92 96       	adiw	r26, 0x22	; 34
 2cc:	ed 91       	ld	r30, X+
 2ce:	fc 91       	ld	r31, X
 2d0:	93 97       	sbiw	r26, 0x23	; 35
 2d2:	a0 81       	ld	r26, Z
 2d4:	b1 81       	ldd	r27, Z+1	; 0x01
 2d6:	14 96       	adiw	r26, 0x04	; 4
 2d8:	2d 91       	ld	r18, X+
 2da:	3c 91       	ld	r19, X
 2dc:	15 97       	sbiw	r26, 0x05	; 5
 2de:	cf 01       	movw	r24, r30
 2e0:	f9 01       	movw	r30, r18
 2e2:	19 95       	eicall
 2e4:	89 2b       	or	r24, r25
 2e6:	01 f0       	breq	.+0      	; 0x2e8 <_ZN6APDWeb21registration_responseEPS_+0x2e8>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <_ZN6APDWeb21registration_responseEPS_+0x2ea>
 2ea:	f7 01       	movw	r30, r14
 2ec:	a2 a1       	ldd	r26, Z+34	; 0x22
 2ee:	b3 a1       	ldd	r27, Z+35	; 0x23
 2f0:	ed 91       	ld	r30, X+
 2f2:	fc 91       	ld	r31, X
 2f4:	11 97       	sbiw	r26, 0x01	; 1
 2f6:	02 84       	ldd	r0, Z+10	; 0x0a
 2f8:	f3 85       	ldd	r31, Z+11	; 0x0b
 2fa:	e0 2d       	mov	r30, r0
 2fc:	cd 01       	movw	r24, r26
 2fe:	19 95       	eicall
 300:	f7 01       	movw	r30, r14
 302:	a2 a1       	ldd	r26, Z+34	; 0x22
 304:	b3 a1       	ldd	r27, Z+35	; 0x23
 306:	ed 91       	ld	r30, X+
 308:	fc 91       	ld	r31, X
 30a:	11 97       	sbiw	r26, 0x01	; 1
 30c:	02 88       	ldd	r0, Z+18	; 0x12
 30e:	f3 89       	ldd	r31, Z+19	; 0x13
 310:	e0 2d       	mov	r30, r0
 312:	cd 01       	movw	r24, r26
 314:	19 95       	eicall
 316:	d7 01       	movw	r26, r14
 318:	97 96       	adiw	r26, 0x27	; 39
 31a:	1c 92       	st	X, r1
 31c:	1e 92       	st	-X, r1
 31e:	96 97       	sbiw	r26, 0x26	; 38
 320:	c7 55       	subi	r28, 0x57	; 87
 322:	df 4f       	sbci	r29, 0xFF	; 255
 324:	b8 81       	ld	r27, Y
 326:	c9 5a       	subi	r28, 0xA9	; 169
 328:	d0 40       	sbci	r29, 0x00	; 0
 32a:	bb 23       	and	r27, r27
 32c:	01 f0       	breq	.+0      	; 0x32e <_ZN6APDWeb21registration_responseEPS_+0x32e>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 336:	c7 01       	movw	r24, r14
 338:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb21registration_responseEPS_>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <_ZN6APDWeb21registration_responseEPS_+0x33e>
 33e:	c8 55       	subi	r28, 0x58	; 88
 340:	df 4f       	sbci	r29, 0xFF	; 255
 342:	e8 81       	ld	r30, Y
 344:	c8 5a       	subi	r28, 0xA8	; 168
 346:	d0 40       	sbci	r29, 0x00	; 0
 348:	ee 23       	and	r30, r30
 34a:	01 f4       	brne	.+0      	; 0x34c <_ZN6APDWeb21registration_responseEPS_+0x34c>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <_ZN6APDWeb21registration_responseEPS_+0x34e>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <_ZN6APDWeb21registration_responseEPS_+0x350>
 350:	c5 55       	subi	r28, 0x55	; 85
 352:	df 4f       	sbci	r29, 0xFF	; 255
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
 35e:	cf 91       	pop	r28
 360:	df 91       	pop	r29
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	df 90       	pop	r13
 36c:	cf 90       	pop	r12
 36e:	bf 90       	pop	r11
 370:	af 90       	pop	r10
 372:	9f 90       	pop	r9
 374:	8f 90       	pop	r8
 376:	7f 90       	pop	r7
 378:	6f 90       	pop	r6
 37a:	5f 90       	pop	r5
 37c:	4f 90       	pop	r4
 37e:	3f 90       	pop	r3
 380:	2f 90       	pop	r2
 382:	08 95       	ret

Disassembly of section .text._ZN6APDWeb18setupAPDuinoOnlineEv:

00000000 <_ZN6APDWeb18setupAPDuinoOnlineEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6APDWeb18setupAPDuinoOnlineEv+0xe>
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	0f 92       	push	r0
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	88 ec       	ldi	r24, 0xC8	; 200
  18:	90 e0       	ldi	r25, 0x00	; 0
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	e8 0e       	add	r14, r24
  1c:	f9 1e       	adc	r15, r25
  1e:	f7 01       	movw	r30, r14
  20:	10 82       	st	Z, r1
  22:	88 e3       	ldi	r24, 0x38	; 56
  24:	9f ef       	ldi	r25, 0xFF	; 255
  26:	e8 0e       	add	r14, r24
  28:	f9 1e       	adc	r15, r25

	// TODO Auto-generated destructor stub
}
  2a:	f7 01       	movw	r30, r14
  2c:	81 a5       	ldd	r24, Z+41	; 0x29
  2e:	88 23       	and	r24, r24
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6APDWeb18setupAPDuinoOnlineEv+0x32>
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6APDWeb18setupAPDuinoOnlineEv+0x34>
  34:	84 a5       	ldd	r24, Z+44	; 0x2c
  36:	95 a5       	ldd	r25, Z+45	; 0x2d
  38:	00 97       	sbiw	r24, 0x00	; 0
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN6APDWeb18setupAPDuinoOnlineEv+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN6APDWeb18setupAPDuinoOnlineEv+0x3e>
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
  42:	88 23       	and	r24, r24
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN6APDWeb18setupAPDuinoOnlineEv+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN6APDWeb18setupAPDuinoOnlineEv+0x48>
  48:	f7 01       	movw	r30, r14
  4a:	84 a5       	ldd	r24, Z+44	; 0x2c
  4c:	95 a5       	ldd	r25, Z+45	; 0x2d
  4e:	60 e0       	ldi	r22, 0x00	; 0
  50:	70 e0       	ldi	r23, 0x00	; 0
  52:	40 e0       	ldi	r20, 0x00	; 0
  54:	50 e0       	ldi	r21, 0x00	; 0
  56:	97 01       	movw	r18, r14
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
  5c:	18 16       	cp	r1, r24
  5e:	19 06       	cpc	r1, r25
  60:	04 f0       	brlt	.+0      	; 0x62 <_ZN6APDWeb18setupAPDuinoOnlineEv+0x62>
  62:	8c ec       	ldi	r24, 0xCC	; 204
  64:	89 83       	std	Y+1, r24	; 0x01
  66:	8c e0       	ldi	r24, 0x0C	; 12
  68:	8a 83       	std	Y+2, r24	; 0x02
  6a:	84 ee       	ldi	r24, 0xE4	; 228
  6c:	8b 83       	std	Y+3, r24	; 0x03
  6e:	83 e7       	ldi	r24, 0x73	; 115
  70:	8c 83       	std	Y+4, r24	; 0x04
  72:	86 e4       	ldi	r24, 0x46	; 70
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	e8 0e       	add	r14, r24
  78:	f9 1e       	adc	r15, r25
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	9a 81       	ldd	r25, Y+2	; 0x02
  7e:	ab 81       	ldd	r26, Y+3	; 0x03
  80:	bc 81       	ldd	r27, Y+4	; 0x04
  82:	f7 01       	movw	r30, r14
  84:	80 83       	st	Z, r24
  86:	91 83       	std	Z+1, r25	; 0x01
  88:	a2 83       	std	Z+2, r26	; 0x02
  8a:	b3 83       	std	Z+3, r27	; 0x03
  8c:	8a eb       	ldi	r24, 0xBA	; 186
  8e:	9f ef       	ldi	r25, 0xFF	; 255
  90:	e8 0e       	add	r14, r24
  92:	f9 1e       	adc	r15, r25
  94:	c7 01       	movw	r24, r14
  96:	86 5b       	subi	r24, 0xB6	; 182
  98:	9f 4f       	sbci	r25, 0xFF	; 255
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
  a2:	ea e6       	ldi	r30, 0x6A	; 106
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	ee 0e       	add	r14, r30
  a8:	ff 1e       	adc	r15, r31
  aa:	80 e5       	ldi	r24, 0x50	; 80
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	f7 01       	movw	r30, r14
  b0:	81 93       	st	Z+, r24
  b2:	91 93       	st	Z+, r25
  b4:	7f 01       	movw	r14, r30
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	9a ee       	ldi	r25, 0xEA	; 234
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	80 83       	st	Z, r24
  c0:	91 83       	std	Z+1, r25	; 0x01
  c2:	a2 83       	std	Z+2, r26	; 0x02
  c4:	b3 83       	std	Z+3, r27	; 0x03
  c6:	84 e9       	ldi	r24, 0x94	; 148
  c8:	9f ef       	ldi	r25, 0xFF	; 255
  ca:	e8 0e       	add	r14, r24
  cc:	f9 1e       	adc	r15, r25
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
  d6:	b7 01       	movw	r22, r14
  d8:	66 5b       	subi	r22, 0xB6	; 182
  da:	7f 4f       	sbci	r23, 0xFF	; 255
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
  ec:	87 01       	movw	r16, r14
  ee:	0a 5b       	subi	r16, 0xBA	; 186
  f0:	1f 4f       	sbci	r17, 0xFF	; 255
  f2:	c8 01       	movw	r24, r16
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
  f8:	f8 01       	movw	r30, r16
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	01 f0       	breq	.+0      	; 0x100 <_ZN6APDWeb18setupAPDuinoOnlineEv+0x100>
 100:	87 01       	movw	r16, r14
 102:	08 53       	subi	r16, 0x38	; 56
 104:	1f 4f       	sbci	r17, 0xFF	; 255
 106:	c7 01       	movw	r24, r14
 108:	b8 01       	movw	r22, r16
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	b8 01       	movw	r22, r16
 118:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
 11c:	64 e1       	ldi	r22, 0x14	; 20
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
 128:	c7 01       	movw	r24, r14
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
 12e:	8c e6       	ldi	r24, 0x6C	; 108
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	e8 0e       	add	r14, r24
 134:	f9 1e       	adc	r15, r25
 136:	f7 01       	movw	r30, r14
 138:	40 81       	ld	r20, Z
 13a:	51 81       	ldd	r21, Z+1	; 0x01
 13c:	62 81       	ldd	r22, Z+2	; 0x02
 13e:	73 81       	ldd	r23, Z+3	; 0x03
 140:	84 e9       	ldi	r24, 0x94	; 148
 142:	9f ef       	ldi	r25, 0xFF	; 255
 144:	e8 0e       	add	r14, r24
 146:	f9 1e       	adc	r15, r25
 148:	c7 01       	movw	r24, r14
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_ZN6APDWeb18setupAPDuinoOnlineEv+0x150>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	08 95       	ret
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb18setupAPDuinoOnlineEv>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_ZZN6APDWeb18thingspeak_loggingEvE3__c_3+0x13>

Disassembly of section .text._ZN6APDWeb5startEv:

00000000 <_ZN6APDWeb5startEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	bf 92       	push	r11
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
  18:	0f 93       	push	r16
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	1f 93       	push	r17
  1c:	df 93       	push	r29
  1e:	cf 93       	push	r28
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	ae 97       	sbiw	r28, 0x2e	; 46
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	f8 94       	cli

	// TODO Auto-generated destructor stub
}
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	0f be       	out	0x3f, r0	; 63
  2e:	cd bf       	out	0x3d, r28	; 61
  30:	3c 01       	movw	r6, r24
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  3a:	83 01       	movw	r16, r6
  3c:	ff 24       	eor	r15, r15
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	f8 01       	movw	r30, r16
  44:	62 81       	ldd	r22, Z+2	; 0x02
  46:	40 e1       	ldi	r20, 0x10	; 16
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  4e:	f5 e0       	ldi	r31, 0x05	; 5
  50:	ff 16       	cp	r15, r31
  52:	01 f0       	breq	.+0      	; 0x54 <_ZN6APDWeb5startEv+0x54>
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  5c:	f3 94       	inc	r15
  5e:	0f 5f       	subi	r16, 0xFF	; 255
  60:	1f 4f       	sbci	r17, 0xFF	; 255
  62:	26 e0       	ldi	r18, 0x06	; 6
  64:	f2 16       	cp	r15, r18
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN6APDWeb5startEv+0x68>
  68:	f3 01       	movw	r30, r6
  6a:	87 ad       	ldd	r24, Z+63	; 0x3f
  6c:	a2 e0       	ldi	r26, 0x02	; 2
  6e:	4a 2e       	mov	r4, r26
  70:	51 2c       	mov	r5, r1
  72:	46 0c       	add	r4, r6
  74:	57 1c       	adc	r5, r7
  76:	88 23       	and	r24, r24
  78:	01 f0       	breq	.+0      	; 0x7a <_ZN6APDWeb5startEv+0x7a>
  7a:	82 ad       	ldd	r24, Z+58	; 0x3a
  7c:	88 23       	and	r24, r24
  7e:	01 f0       	breq	.+0      	; 0x80 <_ZN6APDWeb5startEv+0x80>
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN6APDWeb5startEv+0x82>
  82:	f3 01       	movw	r30, r6
  84:	80 85       	ldd	r24, Z+8	; 0x08
  86:	88 23       	and	r24, r24
  88:	01 f4       	brne	.+0      	; 0x8a <_ZN6APDWeb5startEv+0x8a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN6APDWeb5startEv+0x8c>
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  9c:	e8 e0       	ldi	r30, 0x08	; 8
  9e:	ce 2e       	mov	r12, r30
  a0:	d1 2c       	mov	r13, r1
  a2:	c6 0c       	add	r12, r6
  a4:	d7 1c       	adc	r13, r7
  a6:	c6 01       	movw	r24, r12
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  b4:	70 e1       	ldi	r23, 0x10	; 16
  b6:	87 2e       	mov	r8, r23
  b8:	91 2c       	mov	r9, r1
  ba:	86 0c       	add	r8, r6
  bc:	97 1c       	adc	r9, r7
  be:	c4 01       	movw	r24, r8
  c0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  cc:	6c e0       	ldi	r22, 0x0C	; 12
  ce:	e6 2e       	mov	r14, r22
  d0:	f1 2c       	mov	r15, r1
  d2:	e6 0c       	add	r14, r6
  d4:	f7 1c       	adc	r15, r7
  d6:	c7 01       	movw	r24, r14
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  e4:	83 01       	movw	r16, r6
  e6:	0c 5e       	subi	r16, 0xEC	; 236
  e8:	1f 4f       	sbci	r17, 0xFF	; 255
  ea:	c8 01       	movw	r24, r16
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
  f0:	55 e0       	ldi	r21, 0x05	; 5
  f2:	a5 2e       	mov	r10, r21
  f4:	b1 2c       	mov	r11, r1
  f6:	ac 0e       	add	r10, r28
  f8:	bd 1e       	adc	r11, r29
  fa:	c5 01       	movw	r24, r10
  fc:	b6 01       	movw	r22, r12
  fe:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 102:	4b e0       	ldi	r20, 0x0B	; 11
 104:	c4 2e       	mov	r12, r20
 106:	d1 2c       	mov	r13, r1
 108:	cc 0e       	add	r12, r28
 10a:	dd 1e       	adc	r13, r29
 10c:	c6 01       	movw	r24, r12
 10e:	b8 01       	movw	r22, r16
 110:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 114:	8e 01       	movw	r16, r28
 116:	0f 5e       	subi	r16, 0xEF	; 239
 118:	1f 4f       	sbci	r17, 0xFF	; 255
 11a:	c8 01       	movw	r24, r16
 11c:	b7 01       	movw	r22, r14
 11e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 122:	37 e1       	ldi	r19, 0x17	; 23
 124:	e3 2e       	mov	r14, r19
 126:	f1 2c       	mov	r15, r1
 128:	ec 0e       	add	r14, r28
 12a:	fd 1e       	adc	r15, r29
 12c:	c7 01       	movw	r24, r14
 12e:	b4 01       	movw	r22, r8
 130:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	b2 01       	movw	r22, r4
 13a:	a5 01       	movw	r20, r10
 13c:	96 01       	movw	r18, r12
 13e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	f3 01       	movw	r30, r6
 146:	81 a7       	std	Z+41, r24	; 0x29
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	95 8f       	std	Z+29, r25	; 0x1d
 14e:	84 8f       	std	Z+28, r24	; 0x1c
 150:	12 ae       	std	Z+58, r1	; 0x3a
 152:	00 c0       	rjmp	.+0      	; 0x154 <_ZN6APDWeb5startEv+0x154>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	b2 01       	movw	r22, r4
 162:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 166:	89 2b       	or	r24, r25
 168:	01 f4       	brne	.+0      	; 0x16a <_ZN6APDWeb5startEv+0x16a>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 172:	80 e8       	ldi	r24, 0x80	; 128
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	f3 01       	movw	r30, r6
 178:	95 8f       	std	Z+29, r25	; 0x1d
 17a:	84 8f       	std	Z+28, r24	; 0x1c
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	00 c0       	rjmp	.+0      	; 0x180 <_ZN6APDWeb5startEv+0x180>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 188:	8e 01       	movw	r16, r28
 18a:	03 5e       	subi	r16, 0xE3	; 227
 18c:	1f 4f       	sbci	r17, 0xFF	; 255
 18e:	c8 01       	movw	r24, r16
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 198:	f8 01       	movw	r30, r16
 19a:	82 81       	ldd	r24, Z+2	; 0x02
 19c:	93 81       	ldd	r25, Z+3	; 0x03
 19e:	a4 81       	ldd	r26, Z+4	; 0x04
 1a0:	b5 81       	ldd	r27, Z+5	; 0x05
 1a2:	89 83       	std	Y+1, r24	; 0x01
 1a4:	9a 83       	std	Y+2, r25	; 0x02
 1a6:	ab 83       	std	Y+3, r26	; 0x03
 1a8:	bc 83       	std	Y+4, r27	; 0x04
 1aa:	f3 01       	movw	r30, r6
 1ac:	80 87       	std	Z+8, r24	; 0x08
 1ae:	91 87       	std	Z+9, r25	; 0x09
 1b0:	a2 87       	std	Z+10, r26	; 0x0a
 1b2:	b3 87       	std	Z+11, r27	; 0x0b
 1b4:	8e 01       	movw	r16, r28
 1b6:	0d 5d       	subi	r16, 0xDD	; 221
 1b8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ba:	c8 01       	movw	r24, r16
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 1c4:	f8 01       	movw	r30, r16
 1c6:	82 81       	ldd	r24, Z+2	; 0x02
 1c8:	93 81       	ldd	r25, Z+3	; 0x03
 1ca:	a4 81       	ldd	r26, Z+4	; 0x04
 1cc:	b5 81       	ldd	r27, Z+5	; 0x05
 1ce:	89 83       	std	Y+1, r24	; 0x01
 1d0:	9a 83       	std	Y+2, r25	; 0x02
 1d2:	ab 83       	std	Y+3, r26	; 0x03
 1d4:	bc 83       	std	Y+4, r27	; 0x04
 1d6:	f3 01       	movw	r30, r6
 1d8:	80 8b       	std	Z+16, r24	; 0x10
 1da:	91 8b       	std	Z+17, r25	; 0x11
 1dc:	a2 8b       	std	Z+18, r26	; 0x12
 1de:	b3 8b       	std	Z+19, r27	; 0x13
 1e0:	8e 01       	movw	r16, r28
 1e2:	07 5d       	subi	r16, 0xD7	; 215
 1e4:	1f 4f       	sbci	r17, 0xFF	; 255
 1e6:	c8 01       	movw	r24, r16
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 1f0:	f8 01       	movw	r30, r16
 1f2:	82 81       	ldd	r24, Z+2	; 0x02
 1f4:	93 81       	ldd	r25, Z+3	; 0x03
 1f6:	a4 81       	ldd	r26, Z+4	; 0x04
 1f8:	b5 81       	ldd	r27, Z+5	; 0x05
 1fa:	89 83       	std	Y+1, r24	; 0x01
 1fc:	9a 83       	std	Y+2, r25	; 0x02
 1fe:	ab 83       	std	Y+3, r26	; 0x03
 200:	bc 83       	std	Y+4, r27	; 0x04
 202:	f3 01       	movw	r30, r6
 204:	84 87       	std	Z+12, r24	; 0x0c
 206:	95 87       	std	Z+13, r25	; 0x0d
 208:	a6 87       	std	Z+14, r26	; 0x0e
 20a:	b7 87       	std	Z+15, r27	; 0x0f
 20c:	28 e0       	ldi	r18, 0x08	; 8
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	62 0e       	add	r6, r18
 212:	73 1e       	adc	r7, r19
 214:	c3 01       	movw	r24, r6
 216:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	68 0e       	add	r6, r24
 228:	79 1e       	adc	r7, r25
 22a:	c3 01       	movw	r24, r6
 22c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 238:	ec ef       	ldi	r30, 0xFC	; 252
 23a:	ff ef       	ldi	r31, 0xFF	; 255
 23c:	6e 0e       	add	r6, r30
 23e:	7f 1e       	adc	r7, r31
 240:	c3 01       	movw	r24, r6
 242:	24 ef       	ldi	r18, 0xF4	; 244
 244:	3f ef       	ldi	r19, 0xFF	; 255
 246:	62 0e       	add	r6, r18
 248:	73 1e       	adc	r7, r19
 24a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 256:	c3 01       	movw	r24, r6
 258:	44 96       	adiw	r24, 0x14	; 20
 25a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb5startEv>
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	f3 01       	movw	r30, r6
 262:	81 a7       	std	Z+41, r24	; 0x29
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	95 8f       	std	Z+29, r25	; 0x1d
 26a:	84 8f       	std	Z+28, r24	; 0x1c
 26c:	f3 01       	movw	r30, r6
 26e:	14 ae       	std	Z+60, r1	; 0x3c
 270:	13 ae       	std	Z+59, r1	; 0x3b
 272:	85 ad       	ldd	r24, Z+61	; 0x3d
 274:	96 ad       	ldd	r25, Z+62	; 0x3e
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	96 af       	std	Z+62, r25	; 0x3e
 27a:	85 af       	std	Z+61, r24	; 0x3d
 27c:	17 ae       	std	Z+63, r1	; 0x3f
 27e:	20 e4       	ldi	r18, 0x40	; 64
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	62 0e       	add	r6, r18
 284:	73 1e       	adc	r7, r19
 286:	f3 01       	movw	r30, r6
 288:	11 92       	st	Z+, r1
 28a:	11 92       	st	Z+, r1
 28c:	10 82       	st	Z, r1
 28e:	11 82       	std	Z+1, r1	; 0x01
 290:	12 82       	std	Z+2, r1	; 0x02
 292:	13 82       	std	Z+3, r1	; 0x03
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	ae 96       	adiw	r28, 0x2e	; 46
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	df 90       	pop	r13
 2b0:	cf 90       	pop	r12
 2b2:	bf 90       	pop	r11
 2b4:	af 90       	pop	r10
 2b6:	9f 90       	pop	r9
 2b8:	8f 90       	pop	r8
 2ba:	7f 90       	pop	r7
 2bc:	6f 90       	pop	r6
 2be:	5f 90       	pop	r5
 2c0:	4f 90       	pop	r4
 2c2:	08 95       	ret

Disassembly of section .text._ZN6APDWeb7restartEv:

00000000 <_ZN6APDWeb7restartEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	89 a5       	ldd	r24, Y+41	; 0x29
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <_ZN6APDWeb7restartEv+0xc>
   c:	aa a1       	ldd	r26, Y+34	; 0x22
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	bb a1       	ldd	r27, Y+35	; 0x23
  10:	10 97       	sbiw	r26, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN6APDWeb7restartEv+0x14>
  14:	ed 91       	ld	r30, X+
  16:	fc 91       	ld	r31, X
  18:	11 97       	sbiw	r26, 0x01	; 1
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	02 88       	ldd	r0, Z+18	; 0x12
  1c:	f3 89       	ldd	r31, Z+19	; 0x13
  1e:	e0 2d       	mov	r30, r0
  20:	cd 01       	movw	r24, r26
  22:	19 95       	eicall
  24:	68 ee       	ldi	r22, 0xE8	; 232
  26:	73 e0       	ldi	r23, 0x03	; 3
  28:	80 e0       	ldi	r24, 0x00	; 0

	// TODO Auto-generated destructor stub
}
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7restartEv>
  30:	19 a6       	std	Y+41, r1	; 0x29
  32:	1d 8e       	std	Y+29, r1	; 0x1d
  34:	1c 8e       	std	Y+28, r1	; 0x1c
  36:	ce 01       	movw	r24, r28
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7restartEv>
  3c:	88 23       	and	r24, r24
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN6APDWeb7restartEv+0x40>
  40:	ce 01       	movw	r24, r28
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7restartEv>
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN6APDWeb7restartEv+0x48>
  48:	8c 8d       	ldd	r24, Y+28	; 0x1c
  4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
  4c:	80 68       	ori	r24, 0x80	; 128
  4e:	9d 8f       	std	Y+29, r25	; 0x1d
  50:	8c 8f       	std	Y+28, r24	; 0x1c
  52:	ce 01       	movw	r24, r28
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb7restartEv>
  58:	89 a5       	ldd	r24, Y+41	; 0x29
  5a:	df 91       	pop	r29
  5c:	cf 91       	pop	r28
  5e:	08 95       	ret

Disassembly of section .text._ZN6APDWeb4loopEv:

00000000 <_ZN6APDWeb4loopEv>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8a a1       	ldd	r24, Y+34	; 0x22
   c:	9b a1       	ldd	r25, Y+35	; 0x23
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	89 2b       	or	r24, r25
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6APDWeb4loopEv+0x12>
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN6APDWeb4loopEv+0x14>
  14:	ce 01       	movw	r24, r28
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	ea a1       	ldd	r30, Y+34	; 0x22
  1c:	fb a1       	ldd	r31, Y+35	; 0x23
  1e:	a0 81       	ld	r26, Z
  20:	b1 81       	ldd	r27, Z+1	; 0x01
  22:	54 96       	adiw	r26, 0x14	; 20
  24:	2d 91       	ld	r18, X+
  26:	3c 91       	ld	r19, X
  28:	55 97       	sbiw	r26, 0x15	; 21

	// TODO Auto-generated destructor stub
}
  2a:	cf 01       	movw	r24, r30
  2c:	f9 01       	movw	r30, r18
  2e:	19 95       	eicall
  30:	88 23       	and	r24, r24
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN6APDWeb4loopEv+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6APDWeb4loopEv+0x36>
  36:	8c 8d       	ldd	r24, Y+28	; 0x1c
  38:	81 ff       	sbrs	r24, 1
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN6APDWeb4loopEv+0x3c>
  3c:	82 fd       	sbrc	r24, 2
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN6APDWeb4loopEv+0x40>
  40:	c0 5c       	subi	r28, 0xC0	; 192
  42:	df 4f       	sbci	r29, 0xFF	; 255
  44:	19 82       	std	Y+1, r1	; 0x01
  46:	18 82       	st	Y, r1
  48:	c0 54       	subi	r28, 0x40	; 64
  4a:	d0 40       	sbci	r29, 0x00	; 0
  4c:	88 a9       	ldd	r24, Y+48	; 0x30
  4e:	99 a9       	ldd	r25, Y+49	; 0x31
  50:	18 16       	cp	r1, r24
  52:	19 06       	cpc	r1, r25
  54:	04 f0       	brlt	.+0      	; 0x56 <_ZN6APDWeb4loopEv+0x56>
  56:	8c a9       	ldd	r24, Y+52	; 0x34
  58:	9d a9       	ldd	r25, Y+53	; 0x35
  5a:	18 16       	cp	r1, r24
  5c:	19 06       	cpc	r1, r25
  5e:	04 f4       	brge	.+0      	; 0x60 <_ZN6APDWeb4loopEv+0x60>
  60:	8e 01       	movw	r16, r28
  62:	05 57       	subi	r16, 0x75	; 117
  64:	1e 4f       	sbci	r17, 0xFE	; 254
  66:	f8 01       	movw	r30, r16
  68:	80 81       	ld	r24, Z
  6a:	91 81       	ldd	r25, Z+1	; 0x01
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	01 f0       	breq	.+0      	; 0x70 <_ZN6APDWeb4loopEv+0x70>
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  74:	88 23       	and	r24, r24
  76:	01 f0       	breq	.+0      	; 0x78 <_ZN6APDWeb4loopEv+0x78>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  80:	ce 01       	movw	r24, r28
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN6APDWeb4loopEv+0x88>
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  8c:	88 23       	and	r24, r24
  8e:	01 f0       	breq	.+0      	; 0x90 <_ZN6APDWeb4loopEv+0x90>
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  98:	ce 01       	movw	r24, r28
  9a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN6APDWeb4loopEv+0xa0>
  a0:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  a4:	88 23       	and	r24, r24
  a6:	01 f0       	breq	.+0      	; 0xa8 <_ZN6APDWeb4loopEv+0xa8>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  b0:	ce 01       	movw	r24, r28
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  b6:	f8 01       	movw	r30, r16
  b8:	80 81       	ld	r24, Z
  ba:	91 81       	ldd	r25, Z+1	; 0x01
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_ZN6APDWeb4loopEv+0xc2>
  c2:	ce 01       	movw	r24, r28
  c4:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  c8:	00 c0       	rjmp	.+0      	; 0xca <_ZN6APDWeb4loopEv+0xca>
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  d0:	88 a1       	ldd	r24, Y+32	; 0x20
  d2:	99 a1       	ldd	r25, Y+33	; 0x21
  d4:	89 2b       	or	r24, r25
  d6:	01 f0       	breq	.+0      	; 0xd8 <_ZN6APDWeb4loopEv+0xd8>
  d8:	ce 01       	movw	r24, r28
  da:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  de:	8f ad       	ldd	r24, Y+63	; 0x3f
  e0:	88 23       	and	r24, r24
  e2:	01 f0       	breq	.+0      	; 0xe4 <_ZN6APDWeb4loopEv+0xe4>
  e4:	ce 01       	movw	r24, r28
  e6:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWeb4loopEv>
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZN6APDWeb4loopEv+0xec>
  ec:	8e 01       	movw	r16, r28
  ee:	03 57       	subi	r16, 0x73	; 115
  f0:	1e 4f       	sbci	r17, 0xFE	; 254
  f2:	f8 01       	movw	r30, r16
  f4:	80 81       	ld	r24, Z
  f6:	91 81       	ldd	r25, Z+1	; 0x01
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	01 f4       	brne	.+0      	; 0xfc <_ZN6APDWeb4loopEv+0xfc>
  fc:	8e 01       	movw	r16, r28
  fe:	01 57       	subi	r16, 0x71	; 113
 100:	1e 4f       	sbci	r17, 0xFE	; 254
 102:	f8 01       	movw	r30, r16
 104:	80 81       	ld	r24, Z
 106:	91 81       	ldd	r25, Z+1	; 0x01
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	01 f4       	brne	.+0      	; 0x10c <_ZN6APDWeb4loopEv+0x10c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_ZN6APDWeb4loopEv+0x10e>
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	08 95       	ret

Disassembly of section .text._ZN6APDWebC1EP7NETCONFP7APDTime:

00000000 <_ZN6APDWebC1EP7NETCONFP7APDTime>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	16 2f       	mov	r17, r22
  10:	07 2f       	mov	r16, r23
  12:	7a 01       	movw	r14, r20
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	99 83       	std	Y+1, r25	; 0x01
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	88 83       	st	Y, r24
  1c:	ce 01       	movw	r24, r28
  1e:	ba 01       	movw	r22, r20
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC1EP7NETCONFP7APDTime>
  24:	de 01       	movw	r26, r28
  26:	12 96       	adiw	r26, 0x02	; 2
  28:	21 2f       	mov	r18, r17

	// TODO Auto-generated destructor stub
}
  2a:	30 2f       	mov	r19, r16
  2c:	c9 01       	movw	r24, r18
  2e:	fc 01       	movw	r30, r24
  30:	8a e1       	ldi	r24, 0x1A	; 26
  32:	01 90       	ld	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	81 50       	subi	r24, 0x01	; 1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6APDWebC1EP7NETCONFP7APDTime+0x3a>
  3a:	ce 01       	movw	r24, r28
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC1EP7NETCONFP7APDTime>
  40:	88 23       	and	r24, r24
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN6APDWebC1EP7NETCONFP7APDTime+0x44>
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6APDWebC1EP7NETCONFP7APDTime+0x4a>
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC1EP7NETCONFP7APDTime>
  52:	ce 01       	movw	r24, r28
  54:	b7 01       	movw	r22, r14
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC1EP7NETCONFP7APDTime>
  5a:	ce 01       	movw	r24, r28
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC1EP7NETCONFP7APDTime>
  60:	88 23       	and	r24, r24
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN6APDWebC1EP7NETCONFP7APDTime+0x64>
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN6APDWebC1EP7NETCONFP7APDTime+0x6a>
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC1EP7NETCONFP7APDTime>
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	08 95       	ret

Disassembly of section .text._ZN6APDWebC2EP7NETCONFP7APDTime:

00000000 <_ZN6APDWebC2EP7NETCONFP7APDTime>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	16 2f       	mov	r17, r22
  10:	07 2f       	mov	r16, r23
  12:	7a 01       	movw	r14, r20
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	99 83       	std	Y+1, r25	; 0x01
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	88 83       	st	Y, r24
  1c:	ce 01       	movw	r24, r28
  1e:	ba 01       	movw	r22, r20
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC2EP7NETCONFP7APDTime>
  24:	de 01       	movw	r26, r28
  26:	12 96       	adiw	r26, 0x02	; 2
  28:	21 2f       	mov	r18, r17

	// TODO Auto-generated destructor stub
}
  2a:	30 2f       	mov	r19, r16
  2c:	c9 01       	movw	r24, r18
  2e:	fc 01       	movw	r30, r24
  30:	8a e1       	ldi	r24, 0x1A	; 26
  32:	01 90       	ld	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	81 50       	subi	r24, 0x01	; 1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6APDWebC2EP7NETCONFP7APDTime+0x3a>
  3a:	ce 01       	movw	r24, r28
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC2EP7NETCONFP7APDTime>
  40:	88 23       	and	r24, r24
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN6APDWebC2EP7NETCONFP7APDTime+0x44>
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6APDWebC2EP7NETCONFP7APDTime+0x4a>
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC2EP7NETCONFP7APDTime>
  52:	ce 01       	movw	r24, r28
  54:	b7 01       	movw	r22, r14
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC2EP7NETCONFP7APDTime>
  5a:	ce 01       	movw	r24, r28
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC2EP7NETCONFP7APDTime>
  60:	88 23       	and	r24, r24
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN6APDWebC2EP7NETCONFP7APDTime+0x64>
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN6APDWebC2EP7NETCONFP7APDTime+0x6a>
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC2EP7NETCONFP7APDTime>
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	08 95       	ret

Disassembly of section .text._ZN6APDWebC1EP7APDTime:

00000000 <_ZN6APDWebC1EP7APDTime>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	80 83       	st	Z, r24
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC1EP7APDTime>
  16:	c8 01       	movw	r24, r16
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC1EP7APDTime>
	if (pwwwserver != NULL) free(pwwwclient);
  1c:	88 23       	and	r24, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6APDWebC1EP7APDTime+0x20>
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6APDWebC1EP7APDTime+0x26>
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0

	// TODO Auto-generated destructor stub
}
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC1EP7APDTime>
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6APDWebC2EP7APDTime:

00000000 <_ZN6APDWebC2EP7APDTime>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	80 83       	st	Z, r24
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC2EP7APDTime>
  16:	c8 01       	movw	r24, r16
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC2EP7APDTime>
	if (pwwwserver != NULL) free(pwwwclient);
  1c:	88 23       	and	r24, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6APDWebC2EP7APDTime+0x20>
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6APDWebC2EP7APDTime+0x26>
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0

	// TODO Auto-generated destructor stub
}
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebC2EP7APDTime>
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6APDWebD0Ev:

00000000 <_ZN6APDWebD0Ev>:
		SerPrintP("Failed to configure Ethernet. Fix DHCP on your LAN or provide a valid static config on SD and reset.\n");
	}
}


APDWeb::~APDWeb()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
{
	if (pwwwclient != NULL) free(pwwwclient);
   e:	8a a1       	ldd	r24, Y+34	; 0x22
  10:	9b a1       	ldd	r25, Y+35	; 0x23
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN6APDWebD0Ev+0x16>
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebD0Ev>
	if (pwwwserver != NULL) free(pwwwclient);
  1a:	88 a1       	ldd	r24, Y+32	; 0x20
  1c:	99 a1       	ldd	r25, Y+33	; 0x21
  1e:	89 2b       	or	r24, r25
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6APDWebD0Ev+0x22>
  22:	8a a1       	ldd	r24, Y+34	; 0x22
  24:	9b a1       	ldd	r25, Y+35	; 0x23
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebD0Ev>

	// TODO Auto-generated destructor stub
}
  2a:	ce 01       	movw	r24, r28
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6APDWebD0Ev>
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	08 95       	ret

APDuino.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000083  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000000b7  2**0
                  ALLOC
  3 .stab         00002afc  00000000  00000000  000000b8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00005ba7  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN7APDuino11bConfiguredEv 00000006  00000000  00000000  0000875b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN7APDuino20toggleRuleProcessingEv 00000030  00000000  00000000  00008761  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN7APDuino20enableRuleProcessingEv 0000000a  00000000  00000000  00008791  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._ZN7APDuino21disableRuleProcessingEv 00000008  00000000  00000000  0000879b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._GLOBAL__I__ZN7APDuinoC2El 00000016  00000000  00000000  000087a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .ctors        00000002  00000000  00000000  000087b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 11 .text._ZN7APDuino11idle_deviceEv 00000020  00000000  00000000  000087bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN7APDuino13unidle_deviceEv 00000020  00000000  00000000  000087db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN7APDuino6DebugPEPvi 0000001c  00000000  00000000  000087fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN7APDuino5DebugEPci 0000001c  00000000  00000000  00008817  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN7APDuino6PrintPEPv 00000012  00000000  00000000  00008833  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN7APDuino14startWebServerEv 000000ac  00000000  00000000  00008845  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN7APDuino15setupNetworkingEv 0000008c  00000000  00000000  000088f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN7APDuino18new_ethconf_parserEPviPc 00000246  00000000  00000000  0000897d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN7APDuino13storage_readyEv 00000014  00000000  00000000  00008bc3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN7APDuino11reconfigureEv 0000038a  00000000  00000000  00008bd7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN7APDuino17AddCustomFunctionEiPFvvE 00000154  00000000  00000000  00008f61  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN7APDuino11startIdlingEm 00000050  00000000  00000000  000090b5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN7APDuino12startLoggingEm 0000009e  00000000  00000000  00009105  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN7APDuino12setupStorageEiii 00000098  00000000  00000000  000091a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN7APDuino9loop_coreEv 00000056  00000000  00000000  0000923b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN7APDuino5PrintEPc 00000012  00000000  00000000  00009291  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN7APDuino7timeNowEv 0000005c  00000000  00000000  000092a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN7APDuino16checkTimeKeepingEv 000000aa  00000000  00000000  000092ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN7APDuino16setupTimeKeepingEv 00000044  00000000  00000000  000093a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN7APDuino10getUpTimeSEPc 0000000c  00000000  00000000  000093ed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN7APDuino8log_dataEv 00000178  00000000  00000000  000093f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN7APDuino15loop_operationsEv 00000102  00000000  00000000  00009571  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN7APDuino4loopEv 0000003c  00000000  00000000  00009673  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN7APDuino9getUpTimeEv 0000000c  00000000  00000000  000096af  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN7APDuino15initApplicationEv 0000019e  00000000  00000000  000096bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN7APDuino16setupWithStorageEii 00000064  00000000  00000000  00009859  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN7APDuino4initEl 0000016a  00000000  00000000  000098bd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN7APDuinoC1Ev 0000001a  00000000  00000000  00009a27  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN7APDuinoC2Ev 0000001a  00000000  00000000  00009a41  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZN7APDuinoC1El 00000012  00000000  00000000  00009a5b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZN7APDuinoC2El 00000012  00000000  00000000  00009a6d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZN7APDuinoD1Ev 0000005c  00000000  00000000  00009a7f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZN7APDuinoD2Ev 0000005c  00000000  00000000  00009adb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZN7APDuinoD0Ev 00000062  00000000  00000000  00009b37  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .rodata._ZTV7APDuino 00000008  00000000  00000000  00009b99  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 46 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  00009ba1  2**0
                  ALLOC
 47 .progmem.data 0000045a  00000000  00000000  00009ba1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN7APDuino11bConfiguredEv:

00000000 <_ZN7APDuino11bConfiguredEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	81 89       	ldd	r24, Z+17	; 0x11
   4:	08 95       	ret

Disassembly of section .text._ZN7APDuino20toggleRuleProcessingEv:

00000000 <_ZN7APDuino20toggleRuleProcessingEv>:
   0:	dc 01       	movw	r26, r24
   2:	5a 96       	adiw	r26, 0x1a	; 26
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	5b 97       	sbiw	r26, 0x1b	; 27
   a:	86 81       	ldd	r24, Z+6	; 0x06
   c:	97 81       	ldd	r25, Z+7	; 0x07
   e:	89 2b       	or	r24, r25

  this->bProcessRules = false;
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN7APDuino20toggleRuleProcessingEv+0x12>
  free(this->pra);
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN7APDuino20toggleRuleProcessingEv+0x18>
  18:	90 e0       	ldi	r25, 0x00	; 0
  free(this->pca);
  1a:	18 96       	adiw	r26, 0x08	; 8
  1c:	8c 91       	ld	r24, X
  1e:	18 97       	sbiw	r26, 0x08	; 8
  20:	81 11       	cpse	r24, r1
  22:	91 e0       	ldi	r25, 0x01	; 1
  free(this->psa);
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	98 27       	eor	r25, r24
  28:	89 2f       	mov	r24, r25
  2a:	18 96       	adiw	r26, 0x08	; 8
  2c:	8c 93       	st	X, r24

  free(this->pAPDWeb);
  2e:	08 95       	ret

Disassembly of section .text._ZN7APDuino20enableRuleProcessingEv:

00000000 <_ZN7APDuino20enableRuleProcessingEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	21 e0       	ldi	r18, 0x01	; 1
   2:	fc 01       	movw	r30, r24
   4:	20 87       	std	Z+8, r18	; 0x08
   6:	81 e0       	ldi	r24, 0x01	; 1
   8:	08 95       	ret

Disassembly of section .text._ZN7APDuino21disableRuleProcessingEv:

00000000 <_ZN7APDuino21disableRuleProcessingEv>:
   0:	fc 01       	movw	r30, r24
   2:	10 86       	std	Z+8, r1	; 0x08
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	08 95       	ret

Disassembly of section .text._GLOBAL__I__ZN7APDuinoC2El:

00000000 <_GLOBAL__I__ZN7APDuinoC2El>:
   0:	0f 93       	push	r16
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	40 e0       	ldi	r20, 0x00	; 0
   a:	20 e0       	ldi	r18, 0x00	; 0
   c:	00 e0       	ldi	r16, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_GLOBAL__I__ZN7APDuinoC2El>

  this->bProcessRules = false;
  free(this->pra);
  12:	0f 91       	pop	r16
  14:	08 95       	ret

Disassembly of section .text._ZN7APDuino11idle_deviceEv:

00000000 <_ZN7APDuino11idle_deviceEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	a0 e8       	ldi	r26, 0x80	; 128
   8:	bf e3       	ldi	r27, 0x3F	; 63
   a:	84 ab       	std	Z+52, r24	; 0x34
   c:	95 ab       	std	Z+53, r25	; 0x35
   e:	a6 ab       	std	Z+54, r26	; 0x36

  this->bProcessRules = false;
  10:	b7 ab       	std	Z+55, r27	; 0x37
  free(this->pra);
  12:	82 89       	ldd	r24, Z+18	; 0x12
  14:	93 89       	ldd	r25, Z+19	; 0x13
  16:	00 97       	sbiw	r24, 0x00	; 0
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN7APDuino11idle_deviceEv+0x1a>
  free(this->pca);
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11idle_deviceEv>
  1e:	08 95       	ret

Disassembly of section .text._ZN7APDuino13unidle_deviceEv:

00000000 <_ZN7APDuino13unidle_deviceEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	a0 e0       	ldi	r26, 0x00	; 0
   8:	b0 e0       	ldi	r27, 0x00	; 0
   a:	84 ab       	std	Z+52, r24	; 0x34
   c:	95 ab       	std	Z+53, r25	; 0x35
   e:	a6 ab       	std	Z+54, r26	; 0x36

  this->bProcessRules = false;
  10:	b7 ab       	std	Z+55, r27	; 0x37
  free(this->pra);
  12:	82 89       	ldd	r24, Z+18	; 0x12
  14:	93 89       	ldd	r25, Z+19	; 0x13
  16:	00 97       	sbiw	r24, 0x00	; 0
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN7APDuino13unidle_deviceEv+0x1a>
  free(this->pca);
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino13unidle_deviceEv>
  1e:	08 95       	ret

Disassembly of section .text._ZN7APDuino6DebugPEPvi:

00000000 <_ZN7APDuino6DebugPEPvi>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	81 85       	ldd	r24, Z+9	; 0x09
   4:	92 85       	ldd	r25, Z+10	; 0x0a
   6:	89 2b       	or	r24, r25
   8:	01 f0       	breq	.+0      	; 0xa <_ZN7APDuino6DebugPEPvi+0xa>
   a:	87 85       	ldd	r24, Z+15	; 0x0f
   c:	90 89       	ldd	r25, Z+16	; 0x10
   e:	84 17       	cp	r24, r20

  this->bProcessRules = false;
  10:	95 07       	cpc	r25, r21
  free(this->pra);
  12:	04 f0       	brlt	.+0      	; 0x14 <_ZN7APDuino6DebugPEPvi+0x14>
  14:	cb 01       	movw	r24, r22
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino6DebugPEPvi>
  free(this->pca);
  1a:	08 95       	ret

Disassembly of section .text._ZN7APDuino5DebugEPci:

00000000 <_ZN7APDuino5DebugEPci>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	81 85       	ldd	r24, Z+9	; 0x09
   4:	92 85       	ldd	r25, Z+10	; 0x0a
   6:	89 2b       	or	r24, r25
   8:	01 f0       	breq	.+0      	; 0xa <_ZN7APDuino5DebugEPci+0xa>
   a:	87 85       	ldd	r24, Z+15	; 0x0f
   c:	90 89       	ldd	r25, Z+16	; 0x10
   e:	84 17       	cp	r24, r20

  this->bProcessRules = false;
  10:	95 07       	cpc	r25, r21
  free(this->pra);
  12:	04 f0       	brlt	.+0      	; 0x14 <_ZN7APDuino5DebugEPci+0x14>
  14:	cb 01       	movw	r24, r22
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino5DebugEPci>
  free(this->pca);
  1a:	08 95       	ret

Disassembly of section .text._ZN7APDuino6PrintPEPv:

00000000 <_ZN7APDuino6PrintPEPv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	81 85       	ldd	r24, Z+9	; 0x09
   4:	92 85       	ldd	r25, Z+10	; 0x0a
   6:	89 2b       	or	r24, r25
   8:	01 f0       	breq	.+0      	; 0xa <_ZN7APDuino6PrintPEPv+0xa>
   a:	cb 01       	movw	r24, r22
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino6PrintPEPv>

  this->bProcessRules = false;
  10:	08 95       	ret

Disassembly of section .text._ZN7APDuino14startWebServerEv:

00000000 <_ZN7APDuino14startWebServerEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17

  this->bProcessRules = false;
  10:	cf 93       	push	r28
  free(this->pra);
  12:	df 93       	push	r29
  14:	ec 01       	movw	r28, r24
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  free(this->pca);
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino14startWebServerEv>
  1e:	8d 85       	ldd	r24, Y+13	; 0x0d
  20:	9e 85       	ldd	r25, Y+14	; 0x0e
  22:	89 2b       	or	r24, r25
  free(this->psa);
  24:	01 f0       	breq	.+0      	; 0x26 <_ZN7APDuino14startWebServerEv+0x26>
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino14startWebServerEv>

  free(this->pAPDWeb);
  2e:	ee 89       	ldd	r30, Y+22	; 0x16
  30:	ff 89       	ldd	r31, Y+23	; 0x17
  32:	a8 8d       	ldd	r26, Y+24	; 0x18
  34:	b9 8d       	ldd	r27, Y+25	; 0x19
  36:	8a 8d       	ldd	r24, Y+26	; 0x1a
  free(this->pAPDStorage);
  38:	9b 8d       	ldd	r25, Y+27	; 0x1b
  3a:	62 81       	ldd	r22, Z+2	; 0x02
  3c:	73 81       	ldd	r23, Z+3	; 0x03
  3e:	44 81       	ldd	r20, Z+4	; 0x04
  40:	55 81       	ldd	r21, Z+5	; 0x05
  free(this->pAPDTime);
  42:	12 96       	adiw	r26, 0x02	; 2
  44:	2d 91       	ld	r18, X+
  46:	3c 91       	ld	r19, X
  48:	13 97       	sbiw	r26, 0x03	; 3
  4a:	14 96       	adiw	r26, 0x04	; 4

  free(pAPDSerial);
  4c:	0d 91       	ld	r16, X+
  4e:	1c 91       	ld	r17, X
  50:	15 97       	sbiw	r26, 0x05	; 5
  52:	fc 01       	movw	r30, r24
  54:	e6 80       	ldd	r14, Z+6	; 0x06
  // TODO Auto-generated destructor stub
}
  56:	f7 80       	ldd	r15, Z+7	; 0x07
  58:	c0 84       	ldd	r12, Z+8	; 0x08
  5a:	d1 84       	ldd	r13, Z+9	; 0x09
  5c:	ab 84       	ldd	r10, Y+11	; 0x0b
  5e:	bc 84       	ldd	r11, Y+12	; 0x0c
  60:	8d 85       	ldd	r24, Y+13	; 0x0d
  62:	9e 85       	ldd	r25, Y+14	; 0x0e
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino14startWebServerEv>
  68:	ed 85       	ldd	r30, Y+13	; 0x0d
  6a:	fe 85       	ldd	r31, Y+14	; 0x0e
  6c:	30 97       	sbiw	r30, 0x00	; 0
  6e:	01 f0       	breq	.+0      	; 0x70 <_ZN7APDuino14startWebServerEv+0x70>
  70:	80 a1       	ldd	r24, Z+32	; 0x20
  72:	91 a1       	ldd	r25, Z+33	; 0x21
  74:	89 2b       	or	r24, r25
  76:	01 f0       	breq	.+0      	; 0x78 <_ZN7APDuino14startWebServerEv+0x78>
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	82 a1       	ldd	r24, Z+34	; 0x22
  7c:	93 a1       	ldd	r25, Z+35	; 0x23
  7e:	89 2b       	or	r24, r25
  80:	01 f0       	breq	.+0      	; 0x82 <_ZN7APDuino14startWebServerEv+0x82>
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	00 c0       	rjmp	.+0      	; 0x86 <_ZN7APDuino14startWebServerEv+0x86>
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	82 2f       	mov	r24, r18
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN7APDuino14startWebServerEv+0x8c>
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino14startWebServerEv>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	df 91       	pop	r29
  98:	cf 91       	pop	r28
  9a:	1f 91       	pop	r17
  9c:	0f 91       	pop	r16
  9e:	ff 90       	pop	r15
  a0:	ef 90       	pop	r14
  a2:	df 90       	pop	r13
  a4:	cf 90       	pop	r12
  a6:	bf 90       	pop	r11
  a8:	af 90       	pop	r10
  aa:	08 95       	ret

Disassembly of section .text._ZN7APDuino15setupNetworkingEv:

00000000 <_ZN7APDuino15setupNetworkingEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15setupNetworkingEv>

  this->bProcessRules = false;
  free(this->pra);
  12:	6a ef       	ldi	r22, 0xFA	; 250
  14:	70 e0       	ldi	r23, 0x00	; 0
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  free(this->pca);
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15setupNetworkingEv>
  1e:	8d 85       	ldd	r24, Y+13	; 0x0d
  20:	9e 85       	ldd	r25, Y+14	; 0x0e
  22:	89 2b       	or	r24, r25
  free(this->psa);
  24:	01 f4       	brne	.+0      	; 0x26 <_ZN7APDuino15setupNetworkingEv+0x26>
  26:	8b 85       	ldd	r24, Y+11	; 0x0b
  28:	9c 85       	ldd	r25, Y+12	; 0x0c
  2a:	00 97       	sbiw	r24, 0x00	; 0
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN7APDuino15setupNetworkingEv+0x2e>

  free(this->pAPDWeb);
  2e:	60 e0       	ldi	r22, 0x00	; 0
  30:	70 e0       	ldi	r23, 0x00	; 0
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	50 e0       	ldi	r21, 0x00	; 0
  36:	9e 01       	movw	r18, r28
  free(this->pAPDStorage);
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15setupNetworkingEv>
  3c:	18 16       	cp	r1, r24
  3e:	19 06       	cpc	r1, r25
  40:	04 f0       	brlt	.+0      	; 0x42 <_ZN7APDuino15setupNetworkingEv+0x42>
  free(this->pAPDTime);
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN7APDuino15setupNetworkingEv+0x48>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0

  free(pAPDSerial);
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15setupNetworkingEv>
  50:	8d 85       	ldd	r24, Y+13	; 0x0d
  52:	9e 85       	ldd	r25, Y+14	; 0x0e
  54:	89 2b       	or	r24, r25
  // TODO Auto-generated destructor stub
}
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN7APDuino15setupNetworkingEv+0x58>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15setupNetworkingEv>
  60:	81 e9       	ldi	r24, 0x91	; 145
  62:	91 e0       	ldi	r25, 0x01	; 1
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15setupNetworkingEv>
  68:	18 2f       	mov	r17, r24
  6a:	09 2f       	mov	r16, r25
  6c:	6e 8d       	ldd	r22, Y+30	; 0x1e
  6e:	7f 8d       	ldd	r23, Y+31	; 0x1f
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15setupNetworkingEv>
  74:	1d 87       	std	Y+13, r17	; 0x0d
  76:	0e 87       	std	Y+14, r16	; 0x0e
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZN7APDuino15setupNetworkingEv+0x7a>
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15setupNetworkingEv>
  82:	df 91       	pop	r29
  84:	cf 91       	pop	r28
  86:	1f 91       	pop	r17
  88:	0f 91       	pop	r16
  8a:	08 95       	ret

Disassembly of section .text._ZN7APDuino18new_ethconf_parserEPviPc:

00000000 <_ZN7APDuino18new_ethconf_parserEPviPc>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15

  this->bProcessRules = false;
  10:	0f 93       	push	r16
  free(this->pra);
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  free(this->pca);
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	6c 97       	sbiw	r28, 0x1c	; 28
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  free(this->psa);
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	98 2e       	mov	r9, r24
  2a:	89 2e       	mov	r8, r25
  2c:	8d b7       	in	r24, 0x3d	; 61

  free(this->pAPDWeb);
  2e:	9e b7       	in	r25, 0x3e	; 62
  30:	c4 97       	sbiw	r24, 0x34	; 52
  32:	0f b6       	in	r0, 0x3f	; 63
  34:	f8 94       	cli
  36:	9e bf       	out	0x3e, r25	; 62
  free(this->pAPDStorage);
  38:	0f be       	out	0x3f, r0	; 63
  3a:	8d bf       	out	0x3d, r24	; 61
  3c:	ed b7       	in	r30, 0x3d	; 61
  3e:	fe b7       	in	r31, 0x3e	; 62
  40:	31 96       	adiw	r30, 0x01	; 1
  free(this->pAPDTime);
  42:	ad b7       	in	r26, 0x3d	; 61
  44:	be b7       	in	r27, 0x3e	; 62
  46:	12 96       	adiw	r26, 0x02	; 2
  48:	5c 93       	st	X, r21
  4a:	4e 93       	st	-X, r20

  free(pAPDSerial);
  4c:	11 97       	sbiw	r26, 0x01	; 1
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	93 83       	std	Z+3, r25	; 0x03
  54:	82 83       	std	Z+2, r24	; 0x02
  // TODO Auto-generated destructor stub
}
  56:	ce 01       	movw	r24, r28
  58:	03 96       	adiw	r24, 0x03	; 3
  5a:	95 83       	std	Z+5, r25	; 0x05
  5c:	84 83       	std	Z+4, r24	; 0x04
  5e:	ce 01       	movw	r24, r28
  60:	04 96       	adiw	r24, 0x04	; 4
  62:	97 83       	std	Z+7, r25	; 0x07
  64:	86 83       	std	Z+6, r24	; 0x06
  66:	ce 01       	movw	r24, r28
  68:	05 96       	adiw	r24, 0x05	; 5
  6a:	91 87       	std	Z+9, r25	; 0x09
  6c:	80 87       	std	Z+8, r24	; 0x08
  6e:	ce 01       	movw	r24, r28
  70:	06 96       	adiw	r24, 0x06	; 6
  72:	93 87       	std	Z+11, r25	; 0x0b
  74:	82 87       	std	Z+10, r24	; 0x0a
  76:	ce 01       	movw	r24, r28
  78:	07 96       	adiw	r24, 0x07	; 7
  7a:	95 87       	std	Z+13, r25	; 0x0d
  7c:	84 87       	std	Z+12, r24	; 0x0c
  7e:	ce 01       	movw	r24, r28
  80:	08 96       	adiw	r24, 0x08	; 8
  82:	97 87       	std	Z+15, r25	; 0x0f
  84:	86 87       	std	Z+14, r24	; 0x0e
  86:	99 e0       	ldi	r25, 0x09	; 9
  88:	c9 2e       	mov	r12, r25
  8a:	d1 2c       	mov	r13, r1
  8c:	cc 0e       	add	r12, r28
  8e:	dd 1e       	adc	r13, r29
  90:	d1 8a       	std	Z+17, r13	; 0x11
  92:	c0 8a       	std	Z+16, r12	; 0x10
  94:	ce 01       	movw	r24, r28
  96:	0a 96       	adiw	r24, 0x0a	; 10
  98:	93 8b       	std	Z+19, r25	; 0x13
  9a:	82 8b       	std	Z+18, r24	; 0x12
  9c:	ce 01       	movw	r24, r28
  9e:	0b 96       	adiw	r24, 0x0b	; 11
  a0:	95 8b       	std	Z+21, r25	; 0x15
  a2:	84 8b       	std	Z+20, r24	; 0x14
  a4:	ce 01       	movw	r24, r28
  a6:	0c 96       	adiw	r24, 0x0c	; 12
  a8:	97 8b       	std	Z+23, r25	; 0x17
  aa:	86 8b       	std	Z+22, r24	; 0x16
  ac:	ce 01       	movw	r24, r28
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	91 8f       	std	Z+25, r25	; 0x19
  b2:	80 8f       	std	Z+24, r24	; 0x18
  b4:	ce 01       	movw	r24, r28
  b6:	42 96       	adiw	r24, 0x12	; 18
  b8:	93 8f       	std	Z+27, r25	; 0x1b
  ba:	82 8f       	std	Z+26, r24	; 0x1a
  bc:	ce 01       	movw	r24, r28
  be:	43 96       	adiw	r24, 0x13	; 19
  c0:	95 8f       	std	Z+29, r25	; 0x1d
  c2:	84 8f       	std	Z+28, r24	; 0x1c
  c4:	ce 01       	movw	r24, r28
  c6:	44 96       	adiw	r24, 0x14	; 20
  c8:	97 8f       	std	Z+31, r25	; 0x1f
  ca:	86 8f       	std	Z+30, r24	; 0x1e
  cc:	8d e0       	ldi	r24, 0x0D	; 13
  ce:	e8 2e       	mov	r14, r24
  d0:	f1 2c       	mov	r15, r1
  d2:	ec 0e       	add	r14, r28
  d4:	fd 1e       	adc	r15, r29
  d6:	f1 a2       	std	Z+33, r15	; 0x21
  d8:	e0 a2       	std	Z+32, r14	; 0x20
  da:	ce 01       	movw	r24, r28
  dc:	0e 96       	adiw	r24, 0x0e	; 14
  de:	93 a3       	std	Z+35, r25	; 0x23
  e0:	82 a3       	std	Z+34, r24	; 0x22
  e2:	ce 01       	movw	r24, r28
  e4:	0f 96       	adiw	r24, 0x0f	; 15
  e6:	95 a3       	std	Z+37, r25	; 0x25
  e8:	84 a3       	std	Z+36, r24	; 0x24
  ea:	ce 01       	movw	r24, r28
  ec:	40 96       	adiw	r24, 0x10	; 16
  ee:	97 a3       	std	Z+39, r25	; 0x27
  f0:	86 a3       	std	Z+38, r24	; 0x26
  f2:	8e 01       	movw	r16, r28
  f4:	0b 5e       	subi	r16, 0xEB	; 235
  f6:	1f 4f       	sbci	r17, 0xFF	; 255
  f8:	11 a7       	std	Z+41, r17	; 0x29
  fa:	00 a7       	std	Z+40, r16	; 0x28
  fc:	ce 01       	movw	r24, r28
  fe:	46 96       	adiw	r24, 0x16	; 22
 100:	93 a7       	std	Z+43, r25	; 0x2b
 102:	82 a7       	std	Z+42, r24	; 0x2a
 104:	ce 01       	movw	r24, r28
 106:	47 96       	adiw	r24, 0x17	; 23
 108:	95 a7       	std	Z+45, r25	; 0x2d
 10a:	84 a7       	std	Z+44, r24	; 0x2c
 10c:	ce 01       	movw	r24, r28
 10e:	48 96       	adiw	r24, 0x18	; 24
 110:	97 a7       	std	Z+47, r25	; 0x2f
 112:	86 a7       	std	Z+46, r24	; 0x2e
 114:	ce 01       	movw	r24, r28
 116:	49 96       	adiw	r24, 0x19	; 25
 118:	91 ab       	std	Z+49, r25	; 0x31
 11a:	80 ab       	std	Z+48, r24	; 0x30
 11c:	ce 01       	movw	r24, r28
 11e:	4b 96       	adiw	r24, 0x1b	; 27
 120:	93 ab       	std	Z+51, r25	; 0x33
 122:	82 ab       	std	Z+50, r24	; 0x32
 124:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 128:	5c 01       	movw	r10, r24
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	89 8b       	std	Y+17, r24	; 0x11
 12e:	ed b7       	in	r30, 0x3d	; 61
 130:	fe b7       	in	r31, 0x3e	; 62
 132:	f4 96       	adiw	r30, 0x34	; 52
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	fe bf       	out	0x3e, r31	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	ed bf       	out	0x3d, r30	; 61
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 14e:	c6 01       	movw	r24, r12
 150:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 15c:	ce 01       	movw	r24, r28
 15e:	41 96       	adiw	r24, 0x11	; 17
 160:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 16c:	c8 01       	movw	r24, r16
 16e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 17a:	c7 01       	movw	r24, r14
 17c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 188:	69 8d       	ldd	r22, Y+25	; 0x19
 18a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	4a e0       	ldi	r20, 0x0A	; 10
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 1a0:	6b 8d       	ldd	r22, Y+27	; 0x1b
 1a2:	7c 8d       	ldd	r23, Y+28	; 0x1c
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	4a e0       	ldi	r20, 0x0A	; 10
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 1b0:	f8 e1       	ldi	r31, 0x18	; 24
 1b2:	af 16       	cp	r10, r31
 1b4:	b1 04       	cpc	r11, r1
 1b6:	04 f4       	brge	.+0      	; 0x1b8 <_ZN7APDuino18new_ethconf_parserEPviPc+0x1b8>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	b5 01       	movw	r22, r10
 1ce:	4a e0       	ldi	r20, 0x0A	; 10
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 1de:	e9 2c       	mov	r14, r9
 1e0:	f8 2c       	mov	r15, r8
 1e2:	d7 01       	movw	r26, r14
 1e4:	1d 96       	adiw	r26, 0x0d	; 13
 1e6:	8d 91       	ld	r24, X+
 1e8:	9c 91       	ld	r25, X
 1ea:	1e 97       	sbiw	r26, 0x0e	; 14
 1ec:	89 2b       	or	r24, r25
 1ee:	01 f4       	brne	.+0      	; 0x1f0 <_ZN7APDuino18new_ethconf_parserEPviPc+0x1f0>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 1f8:	81 e9       	ldi	r24, 0x91	; 145
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 200:	18 2f       	mov	r17, r24
 202:	09 2f       	mov	r16, r25
 204:	f7 01       	movw	r30, r14
 206:	46 8d       	ldd	r20, Z+30	; 0x1e
 208:	57 8d       	ldd	r21, Z+31	; 0x1f
 20a:	be 01       	movw	r22, r28
 20c:	6d 5f       	subi	r22, 0xFD	; 253
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino18new_ethconf_parserEPviPc>
 214:	d7 01       	movw	r26, r14
 216:	1d 96       	adiw	r26, 0x0d	; 13
 218:	1c 93       	st	X, r17
 21a:	1d 97       	sbiw	r26, 0x0d	; 13
 21c:	1e 96       	adiw	r26, 0x0e	; 14
 21e:	0c 93       	st	X, r16
 220:	6c 96       	adiw	r28, 0x1c	; 28
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	bf 90       	pop	r11
 23e:	af 90       	pop	r10
 240:	9f 90       	pop	r9
 242:	8f 90       	pop	r8
 244:	08 95       	ret

Disassembly of section .text._ZN7APDuino13storage_readyEv:

00000000 <_ZN7APDuino13storage_readyEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	83 85       	ldd	r24, Z+11	; 0x0b
   4:	94 85       	ldd	r25, Z+12	; 0x0c
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f4       	brne	.+0      	; 0xa <_ZN7APDuino13storage_readyEv+0xa>
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	08 95       	ret
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino13storage_readyEv>

  this->bProcessRules = false;
  free(this->pra);
  12:	08 95       	ret

Disassembly of section .text._ZN7APDuino11reconfigureEv:

00000000 <_ZN7APDuino11reconfigureEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28

  this->bProcessRules = false;
  10:	df 93       	push	r29
  free(this->pra);
  12:	ec 01       	movw	r28, r24
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  free(this->pca);
  1c:	64 e6       	ldi	r22, 0x64	; 100
  1e:	70 e0       	ldi	r23, 0x00	; 0
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  free(this->psa);
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  28:	8d 85       	ldd	r24, Y+13	; 0x0d
  2a:	9e 85       	ldd	r25, Y+14	; 0x0e
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>

  free(this->pAPDWeb);
  30:	88 23       	and	r24, r24
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN7APDuino11reconfigureEv+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN7APDuino11reconfigureEv+0x36>
  36:	b8 84       	ldd	r11, Y+8	; 0x08
  free(this->pAPDStorage);
  38:	18 86       	std	Y+8, r1	; 0x08
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  3e:	6c 01       	movw	r12, r24
  40:	ee 24       	eor	r14, r14
  free(this->pAPDTime);
  42:	d7 fc       	sbrc	r13, 7
  44:	e0 94       	com	r14
  46:	fe 2c       	mov	r15, r14
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0

  free(pAPDSerial);
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  50:	6a e0       	ldi	r22, 0x0A	; 10
  52:	70 e0       	ldi	r23, 0x00	; 0
  54:	80 e0       	ldi	r24, 0x00	; 0
  // TODO Auto-generated destructor stub
}
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	b7 01       	movw	r22, r14
  62:	a6 01       	movw	r20, r12
  64:	2a e0       	ldi	r18, 0x0A	; 10
  66:	30 e0       	ldi	r19, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  74:	64 e6       	ldi	r22, 0x64	; 100
  76:	70 e0       	ldi	r23, 0x00	; 0
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	9f ef       	ldi	r25, 0xFF	; 255
  84:	9d 8f       	std	Y+29, r25	; 0x1d
  86:	8c 8f       	std	Y+28, r24	; 0x1c
  88:	aa 8d       	ldd	r26, Y+26	; 0x1a
  8a:	bb 8d       	ldd	r27, Y+27	; 0x1b
  8c:	10 97       	sbiw	r26, 0x00	; 0
  8e:	01 f0       	breq	.+0      	; 0x90 <_ZN7APDuino11reconfigureEv+0x90>
  90:	ed 91       	ld	r30, X+
  92:	fc 91       	ld	r31, X
  94:	11 97       	sbiw	r26, 0x01	; 1
  96:	02 80       	ldd	r0, Z+2	; 0x02
  98:	f3 81       	ldd	r31, Z+3	; 0x03
  9a:	e0 2d       	mov	r30, r0
  9c:	cd 01       	movw	r24, r26
  9e:	19 95       	eicall
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  ac:	bc 01       	movw	r22, r24
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	4a e0       	ldi	r20, 0x0A	; 10
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  c2:	64 e6       	ldi	r22, 0x64	; 100
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  ce:	a8 8d       	ldd	r26, Y+24	; 0x18
  d0:	b9 8d       	ldd	r27, Y+25	; 0x19
  d2:	10 97       	sbiw	r26, 0x00	; 0
  d4:	01 f0       	breq	.+0      	; 0xd6 <_ZN7APDuino11reconfigureEv+0xd6>
  d6:	ed 91       	ld	r30, X+
  d8:	fc 91       	ld	r31, X
  da:	11 97       	sbiw	r26, 0x01	; 1
  dc:	02 80       	ldd	r0, Z+2	; 0x02
  de:	f3 81       	ldd	r31, Z+3	; 0x03
  e0:	e0 2d       	mov	r30, r0
  e2:	cd 01       	movw	r24, r26
  e4:	19 95       	eicall
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  ee:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
  f2:	bc 01       	movw	r22, r24
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 108:	64 e6       	ldi	r22, 0x64	; 100
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 114:	ae 89       	ldd	r26, Y+22	; 0x16
 116:	bf 89       	ldd	r27, Y+23	; 0x17
 118:	10 97       	sbiw	r26, 0x00	; 0
 11a:	01 f0       	breq	.+0      	; 0x11c <_ZN7APDuino11reconfigureEv+0x11c>
 11c:	ed 91       	ld	r30, X+
 11e:	fc 91       	ld	r31, X
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	02 80       	ldd	r0, Z+2	; 0x02
 124:	f3 81       	ldd	r31, Z+3	; 0x03
 126:	e0 2d       	mov	r30, r0
 128:	cd 01       	movw	r24, r26
 12a:	19 95       	eicall
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 134:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 138:	bc 01       	movw	r22, r24
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	4a e0       	ldi	r20, 0x0A	; 10
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 14e:	64 e6       	ldi	r22, 0x64	; 100
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 162:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 166:	bc 01       	movw	r22, r24
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	4a e0       	ldi	r20, 0x0A	; 10
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 17c:	64 e6       	ldi	r22, 0x64	; 100
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 190:	18 2f       	mov	r17, r24
 192:	09 2f       	mov	r16, r25
 194:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 198:	1e 8b       	std	Y+22, r17	; 0x16
 19a:	0f 8b       	std	Y+23, r16	; 0x17
 19c:	88 e0       	ldi	r24, 0x08	; 8
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 1a4:	18 2f       	mov	r17, r24
 1a6:	09 2f       	mov	r16, r25
 1a8:	be 01       	movw	r22, r28
 1aa:	60 5e       	subi	r22, 0xE0	; 224
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 1b2:	18 8f       	std	Y+24, r17	; 0x18
 1b4:	09 8f       	std	Y+25, r16	; 0x19
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 1be:	18 2f       	mov	r17, r24
 1c0:	09 2f       	mov	r16, r25
 1c2:	6e 89       	ldd	r22, Y+22	; 0x16
 1c4:	7f 89       	ldd	r23, Y+23	; 0x17
 1c6:	48 8d       	ldd	r20, Y+24	; 0x18
 1c8:	59 8d       	ldd	r21, Y+25	; 0x19
 1ca:	9e 01       	movw	r18, r28
 1cc:	2c 5c       	subi	r18, 0xCC	; 204
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 1d4:	1a 8f       	std	Y+26, r17	; 0x1a
 1d6:	0b 8f       	std	Y+27, r16	; 0x1b
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 1e0:	6a e0       	ldi	r22, 0x0A	; 10
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 1ec:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 1f0:	bc 01       	movw	r22, r24
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	4a e0       	ldi	r20, 0x0A	; 10
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 206:	6a e0       	ldi	r22, 0x0A	; 10
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 21a:	6a e0       	ldi	r22, 0x0A	; 10
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 226:	6b 85       	ldd	r22, Y+11	; 0x0b
 228:	7c 85       	ldd	r23, Y+12	; 0x0c
 22a:	8e 89       	ldd	r24, Y+22	; 0x16
 22c:	9f 89       	ldd	r25, Y+23	; 0x17
 22e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 23a:	6a e0       	ldi	r22, 0x0A	; 10
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 246:	6b 85       	ldd	r22, Y+11	; 0x0b
 248:	7c 85       	ldd	r23, Y+12	; 0x0c
 24a:	88 8d       	ldd	r24, Y+24	; 0x18
 24c:	99 8d       	ldd	r25, Y+25	; 0x19
 24e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 25a:	6a e0       	ldi	r22, 0x0A	; 10
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 266:	6b 85       	ldd	r22, Y+11	; 0x0b
 268:	7c 85       	ldd	r23, Y+12	; 0x0c
 26a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 26c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 26e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 272:	ad 85       	ldd	r26, Y+13	; 0x0d
 274:	be 85       	ldd	r27, Y+14	; 0x0e
 276:	ea 8d       	ldd	r30, Y+26	; 0x1a
 278:	fb 8d       	ldd	r31, Y+27	; 0x1b
 27a:	86 81       	ldd	r24, Z+6	; 0x06
 27c:	97 81       	ldd	r25, Z+7	; 0x07
 27e:	d7 96       	adiw	r26, 0x37	; 55
 280:	9c 93       	st	X, r25
 282:	8e 93       	st	-X, r24
 284:	d6 97       	sbiw	r26, 0x36	; 54
 286:	80 85       	ldd	r24, Z+8	; 0x08
 288:	91 85       	ldd	r25, Z+9	; 0x09
 28a:	d9 96       	adiw	r26, 0x39	; 57
 28c:	9c 93       	st	X, r25
 28e:	8e 93       	st	-X, r24
 290:	d8 97       	sbiw	r26, 0x38	; 56
 292:	e8 8d       	ldd	r30, Y+24	; 0x18
 294:	f9 8d       	ldd	r31, Y+25	; 0x19
 296:	82 81       	ldd	r24, Z+2	; 0x02
 298:	93 81       	ldd	r25, Z+3	; 0x03
 29a:	d3 96       	adiw	r26, 0x33	; 51
 29c:	9c 93       	st	X, r25
 29e:	8e 93       	st	-X, r24
 2a0:	d2 97       	sbiw	r26, 0x32	; 50
 2a2:	84 81       	ldd	r24, Z+4	; 0x04
 2a4:	95 81       	ldd	r25, Z+5	; 0x05
 2a6:	d5 96       	adiw	r26, 0x35	; 53
 2a8:	9c 93       	st	X, r25
 2aa:	8e 93       	st	-X, r24
 2ac:	d4 97       	sbiw	r26, 0x34	; 52
 2ae:	ee 89       	ldd	r30, Y+22	; 0x16
 2b0:	ff 89       	ldd	r31, Y+23	; 0x17
 2b2:	82 81       	ldd	r24, Z+2	; 0x02
 2b4:	93 81       	ldd	r25, Z+3	; 0x03
 2b6:	9f 96       	adiw	r26, 0x2f	; 47
 2b8:	9c 93       	st	X, r25
 2ba:	8e 93       	st	-X, r24
 2bc:	9e 97       	sbiw	r26, 0x2e	; 46
 2be:	84 81       	ldd	r24, Z+4	; 0x04
 2c0:	95 81       	ldd	r25, Z+5	; 0x05
 2c2:	d1 96       	adiw	r26, 0x31	; 49
 2c4:	9c 93       	st	X, r25
 2c6:	8e 93       	st	-X, r24
 2c8:	d0 97       	sbiw	r26, 0x30	; 48
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 2d2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 2d6:	bc 01       	movw	r22, r24
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	4a e0       	ldi	r20, 0x0A	; 10
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 2ec:	6a e0       	ldi	r22, 0x0A	; 10
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 2f8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 2fc:	aa 27       	eor	r26, r26
 2fe:	97 fd       	sbrc	r25, 7
 300:	a0 95       	com	r26
 302:	ba 2f       	mov	r27, r26
 304:	c8 16       	cp	r12, r24
 306:	d9 06       	cpc	r13, r25
 308:	ea 06       	cpc	r14, r26
 30a:	fb 06       	cpc	r15, r27
 30c:	01 f4       	brne	.+0      	; 0x30e <_ZN7APDuino11reconfigureEv+0x30e>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	00 c0       	rjmp	.+0      	; 0x314 <_ZN7APDuino11reconfigureEv+0x314>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 31c:	4a 8d       	ldd	r20, Y+26	; 0x1a
 31e:	5b 8d       	ldd	r21, Y+27	; 0x1b
 320:	8e 89       	ldd	r24, Y+22	; 0x16
 322:	9f 89       	ldd	r25, Y+23	; 0x17
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 32c:	8b 85       	ldd	r24, Y+11	; 0x0b
 32e:	9c 85       	ldd	r25, Y+12	; 0x0c
 330:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 334:	88 23       	and	r24, r24
 336:	01 f4       	brne	.+0      	; 0x338 <_ZN7APDuino11reconfigureEv+0x338>
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	00 c0       	rjmp	.+0      	; 0x33c <_ZN7APDuino11reconfigureEv+0x33c>
 33c:	ee 89       	ldd	r30, Y+22	; 0x16
 33e:	ff 89       	ldd	r31, Y+23	; 0x17
 340:	84 81       	ldd	r24, Z+4	; 0x04
 342:	95 81       	ldd	r25, Z+5	; 0x05
 344:	18 16       	cp	r1, r24
 346:	19 06       	cpc	r1, r25
 348:	04 f0       	brlt	.+0      	; 0x34a <_ZN7APDuino11reconfigureEv+0x34a>
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	e8 8d       	ldd	r30, Y+24	; 0x18
 34e:	f9 8d       	ldd	r31, Y+25	; 0x19
 350:	84 81       	ldd	r24, Z+4	; 0x04
 352:	95 81       	ldd	r25, Z+5	; 0x05
 354:	18 16       	cp	r1, r24
 356:	19 06       	cpc	r1, r25
 358:	04 f4       	brge	.+0      	; 0x35a <_ZN7APDuino11reconfigureEv+0x35a>
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	29 8b       	std	Y+17, r18	; 0x11
 35e:	19 ae       	std	Y+57, r1	; 0x39
 360:	b8 86       	std	Y+8, r11	; 0x08
 362:	8d 85       	ldd	r24, Y+13	; 0x0d
 364:	9e 85       	ldd	r25, Y+14	; 0x0e
 366:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <_ZN7APDuino11reconfigureEv+0x36c>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11reconfigureEv>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	bf 90       	pop	r11
 388:	08 95       	ret

Disassembly of section .text._ZN7APDuino17AddCustomFunctionEiPFvvE:

00000000 <_ZN7APDuino17AddCustomFunctionEiPFvvE>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17

  this->bProcessRules = false;
  10:	cf 93       	push	r28
  free(this->pra);
  12:	df 93       	push	r29
  14:	6c 01       	movw	r12, r24
  16:	7b 01       	movw	r14, r22
  18:	8a 01       	movw	r16, r20
  free(this->pca);
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  22:	80 e0       	ldi	r24, 0x00	; 0
  free(this->psa);
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	b7 01       	movw	r22, r14
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>

  free(this->pAPDWeb);
  30:	e7 01       	movw	r28, r14
  32:	60 96       	adiw	r28, 0x10	; 16
  34:	cc 0f       	add	r28, r28
  36:	dd 1f       	adc	r29, r29
  free(this->pAPDStorage);
  38:	cc 0d       	add	r28, r12
  3a:	dd 1d       	adc	r29, r13
  3c:	88 81       	ld	r24, Y
  3e:	99 81       	ldd	r25, Y+1	; 0x01
  40:	89 2b       	or	r24, r25
  free(this->pAPDTime);
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x44>
  44:	ee 24       	eor	r14, r14
  46:	ea 94       	dec	r14
  48:	fe 2c       	mov	r15, r14
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x4c>

  free(pAPDSerial);
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  54:	80 e0       	ldi	r24, 0x00	; 0
  // TODO Auto-generated destructor stub
}
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	b8 01       	movw	r22, r16
  5a:	4a e0       	ldi	r20, 0x0A	; 10
  5c:	50 e0       	ldi	r21, 0x00	; 0
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  62:	19 83       	std	Y+1, r17	; 0x01
  64:	08 83       	st	Y, r16
  66:	00 e0       	ldi	r16, 0x00	; 0
  68:	10 e0       	ldi	r17, 0x00	; 0
  6a:	5e 01       	movw	r10, r28
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x6e>
  6e:	c8 01       	movw	r24, r16
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	02 80       	ldd	r0, Z+2	; 0x02
  76:	f3 81       	ldd	r31, Z+3	; 0x03
  78:	e0 2d       	mov	r30, r0
  7a:	e8 0f       	add	r30, r24
  7c:	f9 1f       	adc	r31, r25
  7e:	c0 81       	ld	r28, Z
  80:	d1 81       	ldd	r29, Z+1	; 0x01
  82:	20 97       	sbiw	r28, 0x00	; 0
  84:	01 f4       	brne	.+0      	; 0x86 <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x86>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x88>
  88:	8f 85       	ldd	r24, Y+15	; 0x0f
  8a:	98 89       	ldd	r25, Y+16	; 0x10
  8c:	8f 37       	cpi	r24, 0x7F	; 127
  8e:	91 05       	cpc	r25, r1
  90:	01 f0       	breq	.+0      	; 0x92 <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x92>
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x94>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	b8 01       	movw	r22, r16
  a2:	4a e0       	ldi	r20, 0x0A	; 10
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  b2:	89 89       	ldd	r24, Y+17	; 0x11
  b4:	9a 89       	ldd	r25, Y+18	; 0x12
  b6:	8e 15       	cp	r24, r14
  b8:	9f 05       	cpc	r25, r15
  ba:	01 f4       	brne	.+0      	; 0xbc <_ZN7APDuino17AddCustomFunctionEiPFvvE+0xbc>
  bc:	d5 01       	movw	r26, r10
  be:	8d 91       	ld	r24, X+
  c0:	9c 91       	ld	r25, X
  c2:	89 2b       	or	r24, r25
  c4:	01 f0       	breq	.+0      	; 0xc6 <_ZN7APDuino17AddCustomFunctionEiPFvvE+0xc6>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  ce:	69 89       	ldd	r22, Y+17	; 0x11
  d0:	7a 89       	ldd	r23, Y+18	; 0x12
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	4a e0       	ldi	r20, 0x0A	; 10
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	b8 01       	movw	r22, r16
  ec:	4a e0       	ldi	r20, 0x0A	; 10
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
  fc:	e9 89       	ldd	r30, Y+17	; 0x11
  fe:	fa 89       	ldd	r31, Y+18	; 0x12
 100:	70 96       	adiw	r30, 0x10	; 16
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	ec 0d       	add	r30, r12
 108:	fd 1d       	adc	r31, r13
 10a:	80 81       	ld	r24, Z
 10c:	91 81       	ldd	r25, Z+1	; 0x01
 10e:	9e ab       	std	Y+54, r25	; 0x36
 110:	8d ab       	std	Y+53, r24	; 0x35
 112:	00 c0       	rjmp	.+0      	; 0x114 <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x114>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	00 c0       	rjmp	.+0      	; 0x11a <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x11a>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino17AddCustomFunctionEiPFvvE>
 122:	0f 5f       	subi	r16, 0xFF	; 255
 124:	1f 4f       	sbci	r17, 0xFF	; 255
 126:	d6 01       	movw	r26, r12
 128:	58 96       	adiw	r26, 0x18	; 24
 12a:	ed 91       	ld	r30, X+
 12c:	fc 91       	ld	r31, X
 12e:	59 97       	sbiw	r26, 0x19	; 25
 130:	84 81       	ldd	r24, Z+4	; 0x04
 132:	95 81       	ldd	r25, Z+5	; 0x05
 134:	08 17       	cp	r16, r24
 136:	19 07       	cpc	r17, r25
 138:	04 f4       	brge	.+0      	; 0x13a <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x13a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_ZN7APDuino17AddCustomFunctionEiPFvvE+0x13c>
 13c:	c7 01       	movw	r24, r14
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	ff 90       	pop	r15
 148:	ef 90       	pop	r14
 14a:	df 90       	pop	r13
 14c:	cf 90       	pop	r12
 14e:	bf 90       	pop	r11
 150:	af 90       	pop	r10
 152:	08 95       	ret

Disassembly of section .text._ZN7APDuino11startIdlingEm:

00000000 <_ZN7APDuino11startIdlingEm>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29

  this->bProcessRules = false;
  10:	ec 01       	movw	r28, r24
  free(this->pra);
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
  16:	8a 89       	ldd	r24, Y+18	; 0x12
  18:	9b 89       	ldd	r25, Y+19	; 0x13
  free(this->pca);
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN7APDuino11startIdlingEm+0x1e>
  1e:	89 e0       	ldi	r24, 0x09	; 9
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11startIdlingEm>
  free(this->psa);
  26:	18 2f       	mov	r17, r24
  28:	09 2f       	mov	r16, r25
  2a:	b7 01       	movw	r22, r14
  2c:	a6 01       	movw	r20, r12

  free(this->pAPDWeb);
  2e:	21 e0       	ldi	r18, 0x01	; 1
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11startIdlingEm>
  34:	1a 8b       	std	Y+18, r17	; 0x12
  36:	0b 8b       	std	Y+19, r16	; 0x13
  free(this->pAPDStorage);
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN7APDuino11startIdlingEm+0x3a>
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino11startIdlingEm>
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  free(this->pAPDTime);
  42:	1f 91       	pop	r17
  44:	0f 91       	pop	r16
  46:	ff 90       	pop	r15
  48:	ef 90       	pop	r14
  4a:	df 90       	pop	r13

  free(pAPDSerial);
  4c:	cf 90       	pop	r12
  4e:	08 95       	ret

Disassembly of section .text._ZN7APDuino12startLoggingEm:

00000000 <_ZN7APDuino12startLoggingEm>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29

  this->bProcessRules = false;
  10:	ec 01       	movw	r28, r24
  free(this->pra);
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
  16:	89 89       	ldd	r24, Y+17	; 0x11
  18:	88 23       	and	r24, r24
  free(this->pca);
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN7APDuino12startLoggingEm+0x1c>
  1c:	8b 85       	ldd	r24, Y+11	; 0x0b
  1e:	9c 85       	ldd	r25, Y+12	; 0x0c
  20:	00 97       	sbiw	r24, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN7APDuino12startLoggingEm+0x24>
  free(this->psa);
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12startLoggingEm>
  28:	88 23       	and	r24, r24
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN7APDuino12startLoggingEm+0x2c>
  2c:	8b 85       	ldd	r24, Y+11	; 0x0b

  free(this->pAPDWeb);
  2e:	9c 85       	ldd	r25, Y+12	; 0x0c
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12startLoggingEm>
  34:	97 fd       	sbrc	r25, 7
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN7APDuino12startLoggingEm+0x38>
  free(this->pAPDStorage);
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN7APDuino12startLoggingEm+0x3e>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  free(this->pAPDTime);
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12startLoggingEm>
  46:	8c 89       	ldd	r24, Y+20	; 0x14
  48:	9d 89       	ldd	r25, Y+21	; 0x15
  4a:	00 97       	sbiw	r24, 0x00	; 0

  free(pAPDSerial);
  4c:	01 f4       	brne	.+0      	; 0x4e <_ZN7APDuino12startLoggingEm+0x4e>
  4e:	89 e0       	ldi	r24, 0x09	; 9
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12startLoggingEm>
  // TODO Auto-generated destructor stub
}
  56:	18 2f       	mov	r17, r24
  58:	09 2f       	mov	r16, r25
  5a:	b7 01       	movw	r22, r14
  5c:	a6 01       	movw	r20, r12
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12startLoggingEm>
  64:	1c 8b       	std	Y+20, r17	; 0x14
  66:	0d 8b       	std	Y+21, r16	; 0x15
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN7APDuino12startLoggingEm+0x6a>
  6a:	b7 01       	movw	r22, r14
  6c:	a6 01       	movw	r20, r12
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12startLoggingEm>
  72:	8c 89       	ldd	r24, Y+20	; 0x14
  74:	9d 89       	ldd	r25, Y+21	; 0x15
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12startLoggingEm>
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	8c 89       	ldd	r24, Y+20	; 0x14
  7e:	9d 89       	ldd	r25, Y+21	; 0x15
  80:	89 2b       	or	r24, r25
  82:	01 f0       	breq	.+0      	; 0x84 <_ZN7APDuino12startLoggingEm+0x84>
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN7APDuino12startLoggingEm+0x88>
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	82 2f       	mov	r24, r18
  8c:	df 91       	pop	r29
  8e:	cf 91       	pop	r28
  90:	1f 91       	pop	r17
  92:	0f 91       	pop	r16
  94:	ff 90       	pop	r15
  96:	ef 90       	pop	r14
  98:	df 90       	pop	r13
  9a:	cf 90       	pop	r12
  9c:	08 95       	ret

Disassembly of section .text._ZN7APDuino12setupStorageEiii:

00000000 <_ZN7APDuino12setupStorageEiii>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17

  this->bProcessRules = false;
  10:	cf 93       	push	r28
  free(this->pra);
  12:	df 93       	push	r29
  14:	8c 01       	movw	r16, r24
  16:	7b 01       	movw	r14, r22
  18:	6a 01       	movw	r12, r20
  free(this->pca);
  1a:	59 01       	movw	r10, r18
  1c:	fc 01       	movw	r30, r24
  1e:	83 85       	ldd	r24, Z+11	; 0x0b
  20:	94 85       	ldd	r25, Z+12	; 0x0c
  22:	89 2b       	or	r24, r25
  free(this->psa);
  24:	01 f4       	brne	.+0      	; 0x26 <_ZN7APDuino12setupStorageEiii+0x26>
  26:	8d e0       	ldi	r24, 0x0D	; 13
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12setupStorageEiii>

  free(this->pAPDWeb);
  2e:	ec 01       	movw	r28, r24
  30:	b7 01       	movw	r22, r14
  32:	a6 01       	movw	r20, r12
  34:	95 01       	movw	r18, r10
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12setupStorageEiii>
  free(this->pAPDStorage);
  3a:	f8 01       	movw	r30, r16
  3c:	d4 87       	std	Z+12, r29	; 0x0c
  3e:	c3 87       	std	Z+11, r28	; 0x0b
  40:	20 97       	sbiw	r28, 0x00	; 0
  free(this->pAPDTime);
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN7APDuino12setupStorageEiii+0x44>
  44:	ce 01       	movw	r24, r28
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12setupStorageEiii>
  4a:	80 e0       	ldi	r24, 0x00	; 0

  free(pAPDSerial);
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12setupStorageEiii>
  52:	f8 01       	movw	r30, r16
  54:	83 85       	ldd	r24, Z+11	; 0x0b
  // TODO Auto-generated destructor stub
}
  56:	94 85       	ldd	r25, Z+12	; 0x0c
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12setupStorageEiii>
  5c:	88 23       	and	r24, r24
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN7APDuino12setupStorageEiii+0x60>
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12setupStorageEiii>
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN7APDuino12setupStorageEiii+0x6e>
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZN7APDuino12setupStorageEiii+0x74>
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino12setupStorageEiii>
  7c:	f8 01       	movw	r30, r16
  7e:	83 85       	ldd	r24, Z+11	; 0x0b
  80:	94 85       	ldd	r25, Z+12	; 0x0c
  82:	df 91       	pop	r29
  84:	cf 91       	pop	r28
  86:	1f 91       	pop	r17
  88:	0f 91       	pop	r16
  8a:	ff 90       	pop	r15
  8c:	ef 90       	pop	r14
  8e:	df 90       	pop	r13
  90:	cf 90       	pop	r12
  92:	bf 90       	pop	r11
  94:	af 90       	pop	r10
  96:	08 95       	ret

Disassembly of section .text._ZN7APDuino9loop_coreEv:

00000000 <_ZN7APDuino9loop_coreEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	8d 85       	ldd	r24, Y+13	; 0x0d
   8:	9e 85       	ldd	r25, Y+14	; 0x0e
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN7APDuino9loop_coreEv+0xe>
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino9loop_coreEv>

  this->bProcessRules = false;
  free(this->pra);
  12:	ed 85       	ldd	r30, Y+13	; 0x0d
  14:	fe 85       	ldd	r31, Y+14	; 0x0e
  16:	86 8d       	ldd	r24, Z+30	; 0x1e
  18:	97 8d       	ldd	r25, Z+31	; 0x1f
  free(this->pca);
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN7APDuino9loop_coreEv+0x1e>
  1e:	17 8e       	std	Z+31, r1	; 0x1f
  20:	16 8e       	std	Z+30, r1	; 0x1e
  22:	81 30       	cpi	r24, 0x01	; 1
  free(this->psa);
  24:	91 05       	cpc	r25, r1
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN7APDuino9loop_coreEv+0x28>
  28:	02 97       	sbiw	r24, 0x02	; 2
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN7APDuino9loop_coreEv+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN7APDuino9loop_coreEv+0x2e>

  free(this->pAPDWeb);
  2e:	ce 01       	movw	r24, r28
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino9loop_coreEv>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN7APDuino9loop_coreEv+0x36>
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino9loop_coreEv>
  free(this->pAPDStorage);
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN7APDuino9loop_coreEv+0x3c>
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino9loop_coreEv>
  free(this->pAPDTime);
  44:	61 e0       	ldi	r22, 0x01	; 1
  46:	70 e0       	ldi	r23, 0x00	; 0
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0

  free(pAPDSerial);
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino9loop_coreEv>
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	08 95       	ret

Disassembly of section .text._ZN7APDuino5PrintEPc:

00000000 <_ZN7APDuino5PrintEPc>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	81 85       	ldd	r24, Z+9	; 0x09
   4:	92 85       	ldd	r25, Z+10	; 0x0a
   6:	89 2b       	or	r24, r25
   8:	01 f0       	breq	.+0      	; 0xa <_ZN7APDuino5PrintEPc+0xa>
   a:	cb 01       	movw	r24, r22
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino5PrintEPc>

  this->bProcessRules = false;
  10:	08 95       	ret

Disassembly of section .text._ZN7APDuino7timeNowEv:

00000000 <_ZN7APDuino7timeNowEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2c 97       	sbiw	r28, 0x0c	; 12
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62

  this->bProcessRules = false;
  10:	0f be       	out	0x3f, r0	; 63
  free(this->pra);
  12:	cd bf       	out	0x3d, r28	; 61
  14:	fc 01       	movw	r30, r24
  16:	86 8d       	ldd	r24, Z+30	; 0x1e
  18:	97 8d       	ldd	r25, Z+31	; 0x1f
  free(this->pca);
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino7timeNowEv>
  1e:	2f 83       	std	Y+7, r18	; 0x07
  20:	38 87       	std	Y+8, r19	; 0x08
  22:	49 87       	std	Y+9, r20	; 0x09
  free(this->psa);
  24:	5a 87       	std	Y+10, r21	; 0x0a
  26:	6b 87       	std	Y+11, r22	; 0x0b
  28:	7c 87       	std	Y+12, r23	; 0x0c
  2a:	de 01       	movw	r26, r28
  2c:	11 96       	adiw	r26, 0x01	; 1

  free(this->pAPDWeb);
  2e:	fe 01       	movw	r30, r28
  30:	37 96       	adiw	r30, 0x07	; 7
  32:	86 e0       	ldi	r24, 0x06	; 6
  34:	01 90       	ld	r0, Z+
  36:	0d 92       	st	X+, r0
  free(this->pAPDStorage);
  38:	81 50       	subi	r24, 0x01	; 1
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN7APDuino7timeNowEv+0x3c>
  3c:	29 81       	ldd	r18, Y+1	; 0x01
  3e:	3a 81       	ldd	r19, Y+2	; 0x02
  40:	4b 81       	ldd	r20, Y+3	; 0x03
  free(this->pAPDTime);
  42:	5c 81       	ldd	r21, Y+4	; 0x04
  44:	6d 81       	ldd	r22, Y+5	; 0x05
  46:	7e 81       	ldd	r23, Y+6	; 0x06
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	2c 96       	adiw	r28, 0x0c	; 12

  free(pAPDSerial);
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  // TODO Auto-generated destructor stub
}
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	08 95       	ret

Disassembly of section .text._ZN7APDuino16checkTimeKeepingEv:

00000000 <_ZN7APDuino16checkTimeKeepingEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	64 97       	sbiw	r28, 0x14	; 20
   e:	0f b6       	in	r0, 0x3f	; 63

  this->bProcessRules = false;
  10:	f8 94       	cli
  free(this->pra);
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  free(this->pca);
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16checkTimeKeepingEv>
  22:	f8 01       	movw	r30, r16
  free(this->psa);
  24:	86 8d       	ldd	r24, Z+30	; 0x1e
  26:	97 8d       	ldd	r25, Z+31	; 0x1f
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN7APDuino16checkTimeKeepingEv+0x2c>
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16checkTimeKeepingEv>

  free(this->pAPDWeb);
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16checkTimeKeepingEv>
  free(this->pAPDStorage);
  38:	f8 01       	movw	r30, r16
  3a:	46 8d       	ldd	r20, Z+30	; 0x1e
  3c:	57 8d       	ldd	r21, Z+31	; 0x1f
  3e:	66 27       	eor	r22, r22
  40:	57 fd       	sbrc	r21, 7
  free(this->pAPDTime);
  42:	60 95       	com	r22
  44:	76 2f       	mov	r23, r22
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	2a e0       	ldi	r18, 0x0A	; 10

  free(pAPDSerial);
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16checkTimeKeepingEv>
  52:	de 01       	movw	r26, r28
  54:	11 96       	adiw	r26, 0x01	; 1
  // TODO Auto-generated destructor stub
}
  56:	e0 e0       	ldi	r30, 0x00	; 0
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	84 e1       	ldi	r24, 0x14	; 20
  5c:	01 90       	ld	r0, Z+
  5e:	0d 92       	st	X+, r0
  60:	81 50       	subi	r24, 0x01	; 1
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN7APDuino16checkTimeKeepingEv+0x64>
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16checkTimeKeepingEv>
  6c:	f8 01       	movw	r30, r16
  6e:	86 8d       	ldd	r24, Z+30	; 0x1e
  70:	97 8d       	ldd	r25, Z+31	; 0x1f
  72:	be 01       	movw	r22, r28
  74:	6f 5f       	subi	r22, 0xFF	; 255
  76:	7f 4f       	sbci	r23, 0xFF	; 255
  78:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16checkTimeKeepingEv>
  7c:	bc 01       	movw	r22, r24
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16checkTimeKeepingEv>
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN7APDuino16checkTimeKeepingEv+0x8c>
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16checkTimeKeepingEv>
  94:	64 96       	adiw	r28, 0x14	; 20
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	1f 91       	pop	r17
  a6:	0f 91       	pop	r16
  a8:	08 95       	ret

Disassembly of section .text._ZN7APDuino16setupTimeKeepingEv:

00000000 <_ZN7APDuino16setupTimeKeepingEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16setupTimeKeepingEv>

  this->bProcessRules = false;
  free(this->pra);
  12:	8e 8d       	ldd	r24, Y+30	; 0x1e
  14:	9f 8d       	ldd	r25, Y+31	; 0x1f
  16:	89 2b       	or	r24, r25
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN7APDuino16setupTimeKeepingEv+0x1a>
  free(this->pca);
  1a:	8a e4       	ldi	r24, 0x4A	; 74
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16setupTimeKeepingEv>
  22:	18 2f       	mov	r17, r24
  free(this->psa);
  24:	09 2f       	mov	r16, r25
  26:	61 e0       	ldi	r22, 0x01	; 1
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16setupTimeKeepingEv>
  2c:	1e 8f       	std	Y+30, r17	; 0x1e

  free(this->pAPDWeb);
  2e:	0f 8f       	std	Y+31, r16	; 0x1f
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN7APDuino16setupTimeKeepingEv+0x32>
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16setupTimeKeepingEv>
  free(this->pAPDStorage);
  3a:	df 91       	pop	r29
  3c:	cf 91       	pop	r28
  3e:	1f 91       	pop	r17
  40:	0f 91       	pop	r16
  free(this->pAPDTime);
  42:	08 95       	ret

Disassembly of section .text._ZN7APDuino10getUpTimeSEPc:

00000000 <_ZN7APDuino10getUpTimeSEPc>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	86 8d       	ldd	r24, Z+30	; 0x1e
   4:	97 8d       	ldd	r25, Z+31	; 0x1f
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino10getUpTimeSEPc>
   a:	08 95       	ret

Disassembly of section .text._ZN7APDuino8log_dataEv:

00000000 <_ZN7APDuino8log_dataEv>:
   0:	9f 92       	push	r9
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16

  this->bProcessRules = false;
  10:	1f 93       	push	r17
  free(this->pra);
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  free(this->pca);
  1a:	c4 5a       	subi	r28, 0xA4	; 164
  1c:	d0 40       	sbci	r29, 0x00	; 0
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  free(this->psa);
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	6c 01       	movw	r12, r24
  2a:	1d a2       	std	Y+37, r1	; 0x25
  2c:	1e a2       	std	Y+38, r1	; 0x26

  free(this->pAPDWeb);
  2e:	1f a2       	std	Y+39, r1	; 0x27
  30:	18 a6       	std	Y+40, r1	; 0x28
  32:	fe 01       	movw	r30, r28
  34:	b9 96       	adiw	r30, 0x29	; 41
  36:	8c e7       	ldi	r24, 0x7C	; 124
  free(this->pAPDStorage);
  38:	df 01       	movw	r26, r30
  3a:	1d 92       	st	X+, r1
  3c:	8a 95       	dec	r24
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN7APDuino8log_dataEv+0x40>
  40:	19 82       	std	Y+1, r1	; 0x01
  free(this->pAPDTime);
  42:	1a 82       	std	Y+2, r1	; 0x02
  44:	1b 82       	std	Y+3, r1	; 0x03
  46:	1c 82       	std	Y+4, r1	; 0x04
  48:	fe 01       	movw	r30, r28
  4a:	35 96       	adiw	r30, 0x05	; 5

  free(pAPDSerial);
  4c:	8c e0       	ldi	r24, 0x0C	; 12
  4e:	df 01       	movw	r26, r30
  50:	1d 92       	st	X+, r1
  52:	8a 95       	dec	r24
  54:	01 f4       	brne	.+0      	; 0x56 <_ZN7APDuino8log_dataEv+0x56>
  // TODO Auto-generated destructor stub
}
  56:	d6 01       	movw	r26, r12
  58:	1b 96       	adiw	r26, 0x0b	; 11
  5a:	ed 91       	ld	r30, X+
  5c:	fc 91       	ld	r31, X
  5e:	1c 97       	sbiw	r26, 0x0c	; 12
  60:	80 85       	ldd	r24, Z+8	; 0x08
  62:	91 85       	ldd	r25, Z+9	; 0x09
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	70 e0       	ldi	r23, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino8log_dataEv>
  6c:	de 01       	movw	r26, r28
  6e:	51 96       	adiw	r26, 0x11	; 17
  70:	e0 e0       	ldi	r30, 0x00	; 0
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	84 e1       	ldi	r24, 0x14	; 20
  76:	01 90       	ld	r0, Z+
  78:	0d 92       	st	X+, r0
  7a:	81 50       	subi	r24, 0x01	; 1
  7c:	01 f4       	brne	.+0      	; 0x7e <_ZN7APDuino8log_dataEv+0x7e>
  7e:	f6 01       	movw	r30, r12
  80:	86 8d       	ldd	r24, Z+30	; 0x1e
  82:	97 8d       	ldd	r25, Z+31	; 0x1f
  84:	be 01       	movw	r22, r28
  86:	6f 5e       	subi	r22, 0xEF	; 239
  88:	7f 4f       	sbci	r23, 0xFF	; 255
  8a:	00 97       	sbiw	r24, 0x00	; 0
  8c:	01 f0       	breq	.+0      	; 0x8e <_ZN7APDuino8log_dataEv+0x8e>
  8e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino8log_dataEv>
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN7APDuino8log_dataEv+0x94>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino8log_dataEv>
  9c:	75 e2       	ldi	r23, 0x25	; 37
  9e:	e7 2e       	mov	r14, r23
  a0:	f1 2c       	mov	r15, r1
  a2:	ec 0e       	add	r14, r28
  a4:	fd 1e       	adc	r15, r29
  a6:	8e 01       	movw	r16, r28
  a8:	0f 5e       	subi	r16, 0xEF	; 239
  aa:	1f 4f       	sbci	r17, 0xFF	; 255
  ac:	c7 01       	movw	r24, r14
  ae:	b8 01       	movw	r22, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino8log_dataEv>
  b4:	d8 01       	movw	r26, r16
  b6:	0d 90       	ld	r0, X+
  b8:	00 20       	and	r0, r0
  ba:	01 f4       	brne	.+0      	; 0xbc <_ZN7APDuino8log_dataEv+0xbc>
  bc:	11 97       	sbiw	r26, 0x01	; 1
  be:	a0 1b       	sub	r26, r16
  c0:	b1 0b       	sbc	r27, r17
  c2:	ae 0d       	add	r26, r14
  c4:	bf 1d       	adc	r27, r15
  c6:	ee 24       	eor	r14, r14
  c8:	ff 24       	eor	r15, r15
  ca:	6c e2       	ldi	r22, 0x2C	; 44
  cc:	96 2e       	mov	r9, r22
  ce:	5e 01       	movw	r10, r28
  d0:	08 94       	sec
  d2:	a1 1c       	adc	r10, r1
  d4:	b1 1c       	adc	r11, r1
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <_ZN7APDuino8log_dataEv+0xd8>
  d8:	c7 01       	movw	r24, r14
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	f9 01       	movw	r30, r18
  e0:	22 81       	ldd	r18, Z+2	; 0x02
  e2:	33 81       	ldd	r19, Z+3	; 0x03
  e4:	28 0f       	add	r18, r24
  e6:	39 1f       	adc	r19, r25
  e8:	f9 01       	movw	r30, r18
  ea:	80 81       	ld	r24, Z
  ec:	91 81       	ldd	r25, Z+1	; 0x01
  ee:	fc 01       	movw	r30, r24
  f0:	83 8d       	ldd	r24, Z+27	; 0x1b
  f2:	94 8d       	ldd	r25, Z+28	; 0x1c
  f4:	89 2b       	or	r24, r25
  f6:	01 f0       	breq	.+0      	; 0xf8 <_ZN7APDuino8log_dataEv+0xf8>
  f8:	9d 92       	st	X+, r9
  fa:	8d 01       	movw	r16, r26
  fc:	f6 01       	movw	r30, r12
  fe:	86 89       	ldd	r24, Z+22	; 0x16
 100:	97 89       	ldd	r25, Z+23	; 0x17
 102:	b7 01       	movw	r22, r14
 104:	a5 01       	movw	r20, r10
 106:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino8log_dataEv>
 10a:	bc 01       	movw	r22, r24
 10c:	c8 01       	movw	r24, r16
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino8log_dataEv>
 112:	d5 01       	movw	r26, r10
 114:	0d 90       	ld	r0, X+
 116:	00 20       	and	r0, r0
 118:	01 f4       	brne	.+0      	; 0x11a <_ZN7APDuino8log_dataEv+0x11a>
 11a:	11 97       	sbiw	r26, 0x01	; 1
 11c:	aa 19       	sub	r26, r10
 11e:	bb 09       	sbc	r27, r11
 120:	a0 0f       	add	r26, r16
 122:	b1 1f       	adc	r27, r17
 124:	08 94       	sec
 126:	e1 1c       	adc	r14, r1
 128:	f1 1c       	adc	r15, r1
 12a:	f6 01       	movw	r30, r12
 12c:	26 89       	ldd	r18, Z+22	; 0x16
 12e:	37 89       	ldd	r19, Z+23	; 0x17
 130:	f9 01       	movw	r30, r18
 132:	84 81       	ldd	r24, Z+4	; 0x04
 134:	95 81       	ldd	r25, Z+5	; 0x05
 136:	e8 16       	cp	r14, r24
 138:	f9 06       	cpc	r15, r25
 13a:	04 f0       	brlt	.+0      	; 0x13c <_ZN7APDuino8log_dataEv+0x13c>
 13c:	1c 92       	st	X, r1
 13e:	d6 01       	movw	r26, r12
 140:	1b 96       	adiw	r26, 0x0b	; 11
 142:	8d 91       	ld	r24, X+
 144:	9c 91       	ld	r25, X
 146:	1c 97       	sbiw	r26, 0x0c	; 12
 148:	be 01       	movw	r22, r28
 14a:	6b 5d       	subi	r22, 0xDB	; 219
 14c:	7f 4f       	sbci	r23, 0xFF	; 255
 14e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino8log_dataEv>
 152:	cc 55       	subi	r28, 0x5C	; 92
 154:	df 4f       	sbci	r29, 0xFF	; 255
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	df 90       	pop	r13
 16e:	cf 90       	pop	r12
 170:	bf 90       	pop	r11
 172:	af 90       	pop	r10
 174:	9f 90       	pop	r9
 176:	08 95       	ret

Disassembly of section .text._ZN7APDuino15loop_operationsEv:

00000000 <_ZN7APDuino15loop_operationsEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	2b 97       	sbiw	r28, 0x0b	; 11
   e:	0f b6       	in	r0, 0x3f	; 63

  this->bProcessRules = false;
  10:	f8 94       	cli
  free(this->pra);
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  free(this->pca);
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15loop_operationsEv>
  1e:	d8 01       	movw	r26, r16
  20:	52 96       	adiw	r26, 0x12	; 18
  22:	8d 91       	ld	r24, X+
  free(this->psa);
  24:	9c 91       	ld	r25, X
  26:	53 97       	sbiw	r26, 0x13	; 19
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN7APDuino15loop_operationsEv+0x2c>
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15loop_operationsEv>

  free(this->pAPDWeb);
  30:	88 23       	and	r24, r24
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN7APDuino15loop_operationsEv+0x34>
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15loop_operationsEv>
  free(this->pAPDStorage);
  3a:	f8 01       	movw	r30, r16
  3c:	86 89       	ldd	r24, Z+22	; 0x16
  3e:	97 89       	ldd	r25, Z+23	; 0x17
  40:	89 2b       	or	r24, r25
  free(this->pAPDTime);
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN7APDuino15loop_operationsEv+0x44>
  44:	19 82       	std	Y+1, r1	; 0x01
  46:	1a 82       	std	Y+2, r1	; 0x02
  48:	1b 82       	std	Y+3, r1	; 0x03
  4a:	1c 82       	std	Y+4, r1	; 0x04

  free(pAPDSerial);
  4c:	fe 01       	movw	r30, r28
  4e:	35 96       	adiw	r30, 0x05	; 5
  50:	87 e0       	ldi	r24, 0x07	; 7
  52:	df 01       	movw	r26, r30
  54:	1d 92       	st	X+, r1
  // TODO Auto-generated destructor stub
}
  56:	8a 95       	dec	r24
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN7APDuino15loop_operationsEv+0x5a>
  5a:	f8 01       	movw	r30, r16
  5c:	24 8d       	ldd	r18, Z+28	; 0x1c
  5e:	35 8d       	ldd	r19, Z+29	; 0x1d
  60:	00 d0       	rcall	.+0      	; 0x62 <_ZN7APDuino15loop_operationsEv+0x62>
  62:	00 d0       	rcall	.+0      	; 0x64 <_ZN7APDuino15loop_operationsEv+0x64>
  64:	ed b7       	in	r30, 0x3d	; 61
  66:	fe b7       	in	r31, 0x3e	; 62
  68:	31 96       	adiw	r30, 0x01	; 1
  6a:	ce 01       	movw	r24, r28
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	ad b7       	in	r26, 0x3d	; 61
  70:	be b7       	in	r27, 0x3e	; 62
  72:	12 96       	adiw	r26, 0x02	; 2
  74:	9c 93       	st	X, r25
  76:	8e 93       	st	-X, r24
  78:	11 97       	sbiw	r26, 0x01	; 1
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	93 83       	std	Z+3, r25	; 0x03
  80:	82 83       	std	Z+2, r24	; 0x02
  82:	35 83       	std	Z+5, r19	; 0x05
  84:	24 83       	std	Z+4, r18	; 0x04
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15loop_operationsEv>
  8a:	ed b7       	in	r30, 0x3d	; 61
  8c:	fe b7       	in	r31, 0x3e	; 62
  8e:	36 96       	adiw	r30, 0x06	; 6
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	fe bf       	out	0x3e, r31	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	ed bf       	out	0x3d, r30	; 61
  9a:	d8 01       	movw	r26, r16
  9c:	56 96       	adiw	r26, 0x16	; 22
  9e:	8d 91       	ld	r24, X+
  a0:	9c 91       	ld	r25, X
  a2:	57 97       	sbiw	r26, 0x17	; 23
  a4:	18 96       	adiw	r26, 0x08	; 8
  a6:	6c 91       	ld	r22, X
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15loop_operationsEv>
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15loop_operationsEv>
  b8:	f8 01       	movw	r30, r16
  ba:	22 8d       	ldd	r18, Z+26	; 0x1a
  bc:	33 8d       	ldd	r19, Z+27	; 0x1b
  be:	21 15       	cp	r18, r1
  c0:	31 05       	cpc	r19, r1
  c2:	01 f0       	breq	.+0      	; 0xc4 <_ZN7APDuino15loop_operationsEv+0xc4>
  c4:	80 85       	ldd	r24, Z+8	; 0x08
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	01 f4       	brne	.+0      	; 0xca <_ZN7APDuino15loop_operationsEv+0xca>
  ca:	c9 01       	movw	r24, r18
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15loop_operationsEv>
  d0:	d8 01       	movw	r26, r16
  d2:	54 96       	adiw	r26, 0x14	; 20
  d4:	8d 91       	ld	r24, X+
  d6:	9c 91       	ld	r25, X
  d8:	55 97       	sbiw	r26, 0x15	; 21
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	01 f0       	breq	.+0      	; 0xde <_ZN7APDuino15loop_operationsEv+0xde>
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15loop_operationsEv>
  e2:	88 23       	and	r24, r24
  e4:	01 f0       	breq	.+0      	; 0xe6 <_ZN7APDuino15loop_operationsEv+0xe6>
  e6:	c8 01       	movw	r24, r16
  e8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15loop_operationsEv>
  ec:	2b 96       	adiw	r28, 0x0b	; 11
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	cd bf       	out	0x3d, r28	; 61
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	08 95       	ret

Disassembly of section .text._ZN7APDuino4loopEv:

00000000 <_ZN7APDuino4loopEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4loopEv>
   a:	89 89       	ldd	r24, Y+17	; 0x11
   c:	88 23       	and	r24, r24
   e:	01 f0       	breq	.+0      	; 0x10 <_ZN7APDuino4loopEv+0x10>

  this->bProcessRules = false;
  10:	ce 01       	movw	r24, r28
  free(this->pra);
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4loopEv>
  16:	89 ad       	ldd	r24, Y+57	; 0x39
  18:	88 23       	and	r24, r24
  free(this->pca);
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN7APDuino4loopEv+0x1c>
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4loopEv>
  free(this->psa);
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	89 af       	std	Y+57, r24	; 0x39
  28:	88 87       	std	Y+8, r24	; 0x08
  2a:	61 e0       	ldi	r22, 0x01	; 1
  2c:	70 e0       	ldi	r23, 0x00	; 0

  free(this->pAPDWeb);
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4loopEv>
  36:	df 91       	pop	r29
  free(this->pAPDStorage);
  38:	cf 91       	pop	r28
  3a:	08 95       	ret

Disassembly of section .text._ZN7APDuino9getUpTimeEv:

00000000 <_ZN7APDuino9getUpTimeEv>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	86 8d       	ldd	r24, Z+30	; 0x1e
   4:	97 8d       	ldd	r25, Z+31	; 0x1f
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino9getUpTimeEv>
   a:	08 95       	ret

Disassembly of section .text._ZN7APDuino15initApplicationEv:

00000000 <_ZN7APDuino15initApplicationEv>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN7APDuino15initApplicationEv+0xe>
   e:	0f 92       	push	r0

  this->bProcessRules = false;
  10:	cd b7       	in	r28, 0x3d	; 61
  free(this->pra);
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	dc 01       	movw	r26, r24
  18:	1b 96       	adiw	r26, 0x0b	; 11
  free(this->pca);
  1a:	8d 91       	ld	r24, X+
  1c:	9c 91       	ld	r25, X
  1e:	1c 97       	sbiw	r26, 0x0c	; 12
  20:	00 97       	sbiw	r24, 0x00	; 0
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN7APDuino15initApplicationEv+0x24>
  free(this->psa);
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN7APDuino15initApplicationEv+0x26>
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  2a:	88 23       	and	r24, r24
  2c:	01 f4       	brne	.+0      	; 0x2e <_ZN7APDuino15initApplicationEv+0x2e>

  free(this->pAPDWeb);
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN7APDuino15initApplicationEv+0x30>
  30:	c7 01       	movw	r24, r14
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  36:	62 e3       	ldi	r22, 0x32	; 50
  free(this->pAPDStorage);
  38:	70 e0       	ldi	r23, 0x00	; 0
  3a:	80 e0       	ldi	r24, 0x00	; 0
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  free(this->pAPDTime);
  42:	c7 01       	movw	r24, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  48:	62 e3       	ldi	r22, 0x32	; 50
  4a:	70 e0       	ldi	r23, 0x00	; 0

  free(pAPDSerial);
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  54:	f7 01       	movw	r30, r14
  // TODO Auto-generated destructor stub
}
  56:	86 8d       	ldd	r24, Z+30	; 0x1e
  58:	97 8d       	ldd	r25, Z+31	; 0x1f
  5a:	89 2b       	or	r24, r25
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN7APDuino15initApplicationEv+0x5e>
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN7APDuino15initApplicationEv+0x62>
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	d7 01       	movw	r26, r14
  66:	1d 96       	adiw	r26, 0x0d	; 13
  68:	8d 91       	ld	r24, X+
  6a:	9c 91       	ld	r25, X
  6c:	1e 97       	sbiw	r26, 0x0e	; 14
  6e:	89 2b       	or	r24, r25
  70:	01 f0       	breq	.+0      	; 0x72 <_ZN7APDuino15initApplicationEv+0x72>
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	f7 01       	movw	r30, r14
  76:	20 af       	std	Z+56, r18	; 0x38
  78:	86 8d       	ldd	r24, Z+30	; 0x1e
  7a:	97 8d       	ldd	r25, Z+31	; 0x1f
  7c:	21 ec       	ldi	r18, 0xC1	; 193
  7e:	29 83       	std	Y+1, r18	; 0x01
  80:	21 ee       	ldi	r18, 0xE1	; 225
  82:	2a 83       	std	Y+2, r18	; 0x02
  84:	2e e0       	ldi	r18, 0x0E	; 14
  86:	2b 83       	std	Y+3, r18	; 0x03
  88:	25 eb       	ldi	r18, 0xB5	; 181
  8a:	2c 83       	std	Y+4, r18	; 0x04
  8c:	68 eb       	ldi	r22, 0xB8	; 184
  8e:	72 e2       	ldi	r23, 0x22	; 34
  90:	ae 01       	movw	r20, r28
  92:	4f 5f       	subi	r20, 0xFF	; 255
  94:	5f 4f       	sbci	r21, 0xFF	; 255
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	01 e0       	ldi	r16, 0x01	; 1
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  a2:	c7 01       	movw	r24, r14
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  a8:	d7 01       	movw	r26, r14
  aa:	1b 96       	adiw	r26, 0x0b	; 11
  ac:	6d 91       	ld	r22, X+
  ae:	7c 91       	ld	r23, X
  b0:	1c 97       	sbiw	r26, 0x0c	; 12
  b2:	56 96       	adiw	r26, 0x16	; 22
  b4:	8d 91       	ld	r24, X+
  b6:	9c 91       	ld	r25, X
  b8:	57 97       	sbiw	r26, 0x17	; 23
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  be:	f7 01       	movw	r30, r14
  c0:	63 85       	ldd	r22, Z+11	; 0x0b
  c2:	74 85       	ldd	r23, Z+12	; 0x0c
  c4:	80 8d       	ldd	r24, Z+24	; 0x18
  c6:	91 8d       	ldd	r25, Z+25	; 0x19
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  cc:	d7 01       	movw	r26, r14
  ce:	1b 96       	adiw	r26, 0x0b	; 11
  d0:	6d 91       	ld	r22, X+
  d2:	7c 91       	ld	r23, X
  d4:	1c 97       	sbiw	r26, 0x0c	; 12
  d6:	5a 96       	adiw	r26, 0x1a	; 26
  d8:	8d 91       	ld	r24, X+
  da:	9c 91       	ld	r25, X
  dc:	5b 97       	sbiw	r26, 0x1b	; 27
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  e2:	f7 01       	movw	r30, r14
  e4:	42 8d       	ldd	r20, Z+26	; 0x1a
  e6:	53 8d       	ldd	r21, Z+27	; 0x1b
  e8:	86 89       	ldd	r24, Z+22	; 0x16
  ea:	97 89       	ldd	r25, Z+23	; 0x17
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
  f4:	d7 01       	movw	r26, r14
  f6:	1b 96       	adiw	r26, 0x0b	; 11
  f8:	8d 91       	ld	r24, X+
  fa:	9c 91       	ld	r25, X
  fc:	1c 97       	sbiw	r26, 0x0c	; 12
  fe:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
 102:	88 23       	and	r24, r24
 104:	01 f4       	brne	.+0      	; 0x106 <_ZN7APDuino15initApplicationEv+0x106>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	00 c0       	rjmp	.+0      	; 0x10a <_ZN7APDuino15initApplicationEv+0x10a>
 10a:	d7 01       	movw	r26, r14
 10c:	56 96       	adiw	r26, 0x16	; 22
 10e:	ed 91       	ld	r30, X+
 110:	fc 91       	ld	r31, X
 112:	57 97       	sbiw	r26, 0x17	; 23
 114:	84 81       	ldd	r24, Z+4	; 0x04
 116:	95 81       	ldd	r25, Z+5	; 0x05
 118:	18 16       	cp	r1, r24
 11a:	19 06       	cpc	r1, r25
 11c:	04 f0       	brlt	.+0      	; 0x11e <_ZN7APDuino15initApplicationEv+0x11e>
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	d7 01       	movw	r26, r14
 122:	58 96       	adiw	r26, 0x18	; 24
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	59 97       	sbiw	r26, 0x19	; 25
 12a:	84 81       	ldd	r24, Z+4	; 0x04
 12c:	95 81       	ldd	r25, Z+5	; 0x05
 12e:	18 16       	cp	r1, r24
 130:	19 06       	cpc	r1, r25
 132:	04 f4       	brge	.+0      	; 0x134 <_ZN7APDuino15initApplicationEv+0x134>
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	f7 01       	movw	r30, r14
 138:	21 8b       	std	Z+17, r18	; 0x11
 13a:	c7 01       	movw	r24, r14
 13c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
 140:	d7 01       	movw	r26, r14
 142:	1d 96       	adiw	r26, 0x0d	; 13
 144:	8d 91       	ld	r24, X+
 146:	9c 91       	ld	r25, X
 148:	1e 97       	sbiw	r26, 0x0e	; 14
 14a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
 14e:	f7 01       	movw	r30, r14
 150:	85 85       	ldd	r24, Z+13	; 0x0d
 152:	96 85       	ldd	r25, Z+14	; 0x0e
 154:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
 158:	d7 01       	movw	r26, r14
 15a:	1d 96       	adiw	r26, 0x0d	; 13
 15c:	8d 91       	ld	r24, X+
 15e:	9c 91       	ld	r25, X
 160:	1e 97       	sbiw	r26, 0x0e	; 14
 162:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
 166:	f7 01       	movw	r30, r14
 168:	81 89       	ldd	r24, Z+17	; 0x11
 16a:	88 23       	and	r24, r24
 16c:	01 f0       	breq	.+0      	; 0x16e <_ZN7APDuino15initApplicationEv+0x16e>
 16e:	c7 01       	movw	r24, r14
 170:	40 e6       	ldi	r20, 0x60	; 96
 172:	5a ee       	ldi	r21, 0xEA	; 234
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
 17c:	64 e6       	ldi	r22, 0x64	; 100
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino15initApplicationEv>
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	08 95       	ret

Disassembly of section .text._ZN7APDuino16setupWithStorageEii:

00000000 <_ZN7APDuino16setupWithStorageEii>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	8b 01       	movw	r16, r22

  this->bProcessRules = false;
  10:	7a 01       	movw	r14, r20
  free(this->pra);
  12:	6a ef       	ldi	r22, 0xFA	; 250
  14:	70 e0       	ldi	r23, 0x00	; 0
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  free(this->pca);
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16setupWithStorageEii>
  1e:	ce 01       	movw	r24, r28
  20:	65 e3       	ldi	r22, 0x35	; 53
  22:	70 e0       	ldi	r23, 0x00	; 0
  free(this->psa);
  24:	a8 01       	movw	r20, r16
  26:	97 01       	movw	r18, r14
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16setupWithStorageEii>
  2c:	89 2b       	or	r24, r25

  free(this->pAPDWeb);
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN7APDuino16setupWithStorageEii+0x30>
  30:	8b 85       	ldd	r24, Y+11	; 0x0b
  32:	9c 85       	ldd	r25, Y+12	; 0x0c
  34:	00 97       	sbiw	r24, 0x00	; 0
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN7APDuino16setupWithStorageEii+0x38>
  free(this->pAPDStorage);
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16setupWithStorageEii>
  3c:	88 23       	and	r24, r24
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN7APDuino16setupWithStorageEii+0x40>
  40:	ce 01       	movw	r24, r28
  free(this->pAPDTime);
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16setupWithStorageEii>
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN7APDuino16setupWithStorageEii+0x48>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0

  free(pAPDSerial);
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN7APDuino16setupWithStorageEii+0x4e>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino16setupWithStorageEii>
  // TODO Auto-generated destructor stub
}
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN7APDuino4initEl:

00000000 <_ZN7APDuino4initEl>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29

  this->bProcessRules = false;
  10:	ec 01       	movw	r28, r24
  free(this->pra);
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
  16:	fc 01       	movw	r30, r24
  18:	80 e0       	ldi	r24, 0x00	; 0
  free(this->pca);
  1a:	90 e0       	ldi	r25, 0x00	; 0
  1c:	11 a2       	std	Z+33, r1	; 0x21
  1e:	10 a2       	std	Z+32, r1	; 0x20
  20:	01 96       	adiw	r24, 0x01	; 1
  22:	32 96       	adiw	r30, 0x02	; 2
  free(this->psa);
  24:	8a 30       	cpi	r24, 0x0A	; 10
  26:	91 05       	cpc	r25, r1
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN7APDuino4initEl+0x2a>
  2a:	1a 86       	std	Y+10, r1	; 0x0a
  2c:	19 86       	std	Y+9, r1	; 0x09

  free(this->pAPDWeb);
  2e:	1b 82       	std	Y+3, r1	; 0x03
  30:	1a 82       	std	Y+2, r1	; 0x02
  32:	81 e4       	ldi	r24, 0x41	; 65
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  free(this->pAPDStorage);
  3a:	8c 83       	std	Y+4, r24	; 0x04
  3c:	9d 83       	std	Y+5, r25	; 0x05
  3e:	60 e0       	ldi	r22, 0x00	; 0
  40:	70 e0       	ldi	r23, 0x00	; 0
  free(this->pAPDTime);
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  46:	80 e1       	ldi	r24, 0x10	; 16
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>

  free(pAPDSerial);
  4e:	8e 83       	std	Y+6, r24	; 0x06
  50:	9f 83       	std	Y+7, r25	; 0x07
  52:	60 e0       	ldi	r22, 0x00	; 0
  54:	70 e0       	ldi	r23, 0x00	; 0
  // TODO Auto-generated destructor stub
}
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  5a:	82 e0       	ldi	r24, 0x02	; 2
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  62:	18 2f       	mov	r17, r24
  64:	09 2f       	mov	r16, r25
  66:	b7 01       	movw	r22, r14
  68:	a6 01       	movw	r20, r12
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  6e:	19 87       	std	Y+9, r17	; 0x09
  70:	0a 87       	std	Y+10, r16	; 0x0a
  72:	6a e0       	ldi	r22, 0x0A	; 10
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  7e:	8c e0       	ldi	r24, 0x0C	; 12
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  86:	18 2f       	mov	r17, r24
  88:	09 2f       	mov	r16, r25
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  8e:	1e 8b       	std	Y+22, r17	; 0x16
  90:	0f 8b       	std	Y+23, r16	; 0x17
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  9a:	18 2f       	mov	r17, r24
  9c:	09 2f       	mov	r16, r25
  9e:	be 01       	movw	r22, r28
  a0:	60 5e       	subi	r22, 0xE0	; 224
  a2:	7f 4f       	sbci	r23, 0xFF	; 255
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  a8:	18 8f       	std	Y+24, r17	; 0x18
  aa:	09 8f       	std	Y+25, r16	; 0x19
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  b4:	18 2f       	mov	r17, r24
  b6:	09 2f       	mov	r16, r25
  b8:	6e 89       	ldd	r22, Y+22	; 0x16
  ba:	7f 89       	ldd	r23, Y+23	; 0x17
  bc:	48 8d       	ldd	r20, Y+24	; 0x18
  be:	59 8d       	ldd	r21, Y+25	; 0x19
  c0:	9e 01       	movw	r18, r28
  c2:	2c 5c       	subi	r18, 0xCC	; 204
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  ca:	1a 8f       	std	Y+26, r17	; 0x1a
  cc:	0b 8f       	std	Y+27, r16	; 0x1b
  ce:	1c 86       	std	Y+12, r1	; 0x0c
  d0:	1b 86       	std	Y+11, r1	; 0x0b
  d2:	1f 8e       	std	Y+31, r1	; 0x1f
  d4:	1e 8e       	std	Y+30, r1	; 0x1e
  d6:	1e 86       	std	Y+14, r1	; 0x0e
  d8:	1d 86       	std	Y+13, r1	; 0x0d
  da:	1b 8a       	std	Y+19, r1	; 0x13
  dc:	1a 8a       	std	Y+18, r1	; 0x12
  de:	1d 8a       	std	Y+21, r1	; 0x15
  e0:	1c 8a       	std	Y+20, r1	; 0x14
  e2:	19 ae       	std	Y+57, r1	; 0x39
  e4:	18 ae       	std	Y+56, r1	; 0x38
  e6:	18 86       	std	Y+8, r1	; 0x08
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 110:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 114:	bc 01       	movw	r22, r24
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	4a e0       	ldi	r20, 0x0A	; 10
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 12e:	88 23       	and	r24, r24
 130:	01 f0       	breq	.+0      	; 0x132 <_ZN7APDuino4initEl+0x132>
 132:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 136:	88 23       	and	r24, r24
 138:	01 f4       	brne	.+0      	; 0x13a <_ZN7APDuino4initEl+0x13a>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 142:	19 8a       	std	Y+17, r1	; 0x11
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 14c:	6e e1       	ldi	r22, 0x1E	; 30
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuino4initEl>
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	df 90       	pop	r13
 166:	cf 90       	pop	r12
 168:	08 95       	ret

Disassembly of section .text._ZN7APDuinoC1Ev:

00000000 <_ZN7APDuinoC1Ev>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	40 e8       	ldi	r20, 0x80	; 128
   e:	55 e2       	ldi	r21, 0x25	; 37

  this->bProcessRules = false;
  10:	60 e0       	ldi	r22, 0x00	; 0
  free(this->pra);
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoC1Ev>
  18:	08 95       	ret

Disassembly of section .text._ZN7APDuinoC2Ev:

00000000 <_ZN7APDuinoC2Ev>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	40 e8       	ldi	r20, 0x80	; 128
   e:	55 e2       	ldi	r21, 0x25	; 37

  this->bProcessRules = false;
  10:	60 e0       	ldi	r22, 0x00	; 0
  free(this->pra);
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoC2Ev>
  18:	08 95       	ret

Disassembly of section .text._ZN7APDuinoC1El:

00000000 <_ZN7APDuinoC1El>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoC1El>

  this->bProcessRules = false;
  10:	08 95       	ret

Disassembly of section .text._ZN7APDuinoC2El:

00000000 <_ZN7APDuinoC2El>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoC2El>

  this->bProcessRules = false;
  10:	08 95       	ret

Disassembly of section .text._ZN7APDuinoD1Ev:

00000000 <_ZN7APDuinoD1Ev>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24

  this->bProcessRules = false;
  10:	10 86       	std	Z+8, r1	; 0x08
  free(this->pra);
  12:	82 8d       	ldd	r24, Z+26	; 0x1a
  14:	93 8d       	ldd	r25, Z+27	; 0x1b
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD1Ev>
  free(this->pca);
  1a:	f8 01       	movw	r30, r16
  1c:	80 8d       	ldd	r24, Z+24	; 0x18
  1e:	91 8d       	ldd	r25, Z+25	; 0x19
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD1Ev>
  free(this->psa);
  24:	f8 01       	movw	r30, r16
  26:	86 89       	ldd	r24, Z+22	; 0x16
  28:	97 89       	ldd	r25, Z+23	; 0x17
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD1Ev>

  free(this->pAPDWeb);
  2e:	f8 01       	movw	r30, r16
  30:	85 85       	ldd	r24, Z+13	; 0x0d
  32:	96 85       	ldd	r25, Z+14	; 0x0e
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD1Ev>
  free(this->pAPDStorage);
  38:	f8 01       	movw	r30, r16
  3a:	83 85       	ldd	r24, Z+11	; 0x0b
  3c:	94 85       	ldd	r25, Z+12	; 0x0c
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD1Ev>
  free(this->pAPDTime);
  42:	f8 01       	movw	r30, r16
  44:	86 8d       	ldd	r24, Z+30	; 0x1e
  46:	97 8d       	ldd	r25, Z+31	; 0x1f
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD1Ev>

  free(pAPDSerial);
  4c:	f8 01       	movw	r30, r16
  4e:	81 85       	ldd	r24, Z+9	; 0x09
  50:	92 85       	ldd	r25, Z+10	; 0x0a
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD1Ev>
  // TODO Auto-generated destructor stub
}
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN7APDuinoD2Ev:

00000000 <_ZN7APDuinoD2Ev>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24

  this->bProcessRules = false;
  10:	10 86       	std	Z+8, r1	; 0x08
  free(this->pra);
  12:	82 8d       	ldd	r24, Z+26	; 0x1a
  14:	93 8d       	ldd	r25, Z+27	; 0x1b
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD2Ev>
  free(this->pca);
  1a:	f8 01       	movw	r30, r16
  1c:	80 8d       	ldd	r24, Z+24	; 0x18
  1e:	91 8d       	ldd	r25, Z+25	; 0x19
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD2Ev>
  free(this->psa);
  24:	f8 01       	movw	r30, r16
  26:	86 89       	ldd	r24, Z+22	; 0x16
  28:	97 89       	ldd	r25, Z+23	; 0x17
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD2Ev>

  free(this->pAPDWeb);
  2e:	f8 01       	movw	r30, r16
  30:	85 85       	ldd	r24, Z+13	; 0x0d
  32:	96 85       	ldd	r25, Z+14	; 0x0e
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD2Ev>
  free(this->pAPDStorage);
  38:	f8 01       	movw	r30, r16
  3a:	83 85       	ldd	r24, Z+11	; 0x0b
  3c:	94 85       	ldd	r25, Z+12	; 0x0c
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD2Ev>
  free(this->pAPDTime);
  42:	f8 01       	movw	r30, r16
  44:	86 8d       	ldd	r24, Z+30	; 0x1e
  46:	97 8d       	ldd	r25, Z+31	; 0x1f
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD2Ev>

  free(pAPDSerial);
  4c:	f8 01       	movw	r30, r16
  4e:	81 85       	ldd	r24, Z+9	; 0x09
  50:	92 85       	ldd	r25, Z+10	; 0x0a
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD2Ev>
  // TODO Auto-generated destructor stub
}
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN7APDuinoD0Ev:

00000000 <_ZN7APDuinoD0Ev>:

APDuino::APDuino() {
  init(9600);
}

APDuino::~APDuino() {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	f8 01       	movw	r30, r16
   c:	91 83       	std	Z+1, r25	; 0x01
   e:	80 83       	st	Z, r24

  this->bProcessRules = false;
  10:	10 86       	std	Z+8, r1	; 0x08
  free(this->pra);
  12:	82 8d       	ldd	r24, Z+26	; 0x1a
  14:	93 8d       	ldd	r25, Z+27	; 0x1b
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD0Ev>
  free(this->pca);
  1a:	f8 01       	movw	r30, r16
  1c:	80 8d       	ldd	r24, Z+24	; 0x18
  1e:	91 8d       	ldd	r25, Z+25	; 0x19
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD0Ev>
  free(this->psa);
  24:	f8 01       	movw	r30, r16
  26:	86 89       	ldd	r24, Z+22	; 0x16
  28:	97 89       	ldd	r25, Z+23	; 0x17
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD0Ev>

  free(this->pAPDWeb);
  2e:	f8 01       	movw	r30, r16
  30:	85 85       	ldd	r24, Z+13	; 0x0d
  32:	96 85       	ldd	r25, Z+14	; 0x0e
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD0Ev>
  free(this->pAPDStorage);
  38:	f8 01       	movw	r30, r16
  3a:	83 85       	ldd	r24, Z+11	; 0x0b
  3c:	94 85       	ldd	r25, Z+12	; 0x0c
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD0Ev>
  free(this->pAPDTime);
  42:	f8 01       	movw	r30, r16
  44:	86 8d       	ldd	r24, Z+30	; 0x1e
  46:	97 8d       	ldd	r25, Z+31	; 0x1f
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD0Ev>

  free(pAPDSerial);
  4c:	f8 01       	movw	r30, r16
  4e:	81 85       	ldd	r24, Z+9	; 0x09
  50:	92 85       	ldd	r25, Z+10	; 0x0a
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD0Ev>
  // TODO Auto-generated destructor stub
}
  56:	c8 01       	movw	r24, r16
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN7APDuinoD0Ev>
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	08 95       	ret

apd_utils.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000006c  2**0
                  ALLOC
  3 .stab         00001338  00000000  00000000  0000006c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003d52  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z13hex_digit_valc 0000004a  00000000  00000000  000050f6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z13read_hex_bytePc 0000009c  00000000  00000000  00005140  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z10soft_resetv 00000006  00000000  00000000  000051dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._Z7getPstrPv 0000007c  00000000  00000000  000051e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z8hexbytesPcPhi 000000be  00000000  00000000  0000525e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z9apsprintfPcPKcz 00000012  00000000  00000000  0000531c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._Z24get_line_count_from_filePc 000000c6  00000000  00000000  0000532e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._Z9testscanfv 000000b8  00000000  00000000  000053f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._Z10testprintfv 000000a4  00000000  00000000  000054ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text._Z13hex_digit_valc:

00000000 <_Z13hex_digit_valc>:
 *      Author: George Schreiber
 */

#include "apd_utils.h"

bool testprintf()  {
   0:	98 2f       	mov	r25, r24
   2:	80 53       	subi	r24, 0x30	; 48
   4:	8a 30       	cpi	r24, 0x0A	; 10
   6:	00 f4       	brcc	.+0      	; 0x8 <_Z13hex_digit_valc+0x8>
   8:	29 2f       	mov	r18, r25
   a:	33 27       	eor	r19, r19
   c:	27 fd       	sbrc	r18, 7
   e:	30 95       	com	r19
  10:	20 53       	subi	r18, 0x30	; 48
  12:	30 40       	sbci	r19, 0x00	; 0
  char sztest[10] ="";
  14:	00 c0       	rjmp	.+0      	; 0x16 <_Z13hex_digit_valc+0x16>
  16:	89 2f       	mov	r24, r25
  18:	81 56       	subi	r24, 0x61	; 97
  1a:	86 30       	cpi	r24, 0x06	; 6
  1c:	00 f4       	brcc	.+0      	; 0x1e <_Z13hex_digit_valc+0x1e>
  1e:	29 2f       	mov	r18, r25
  20:	33 27       	eor	r19, r19
  22:	27 fd       	sbrc	r18, 7
  24:	30 95       	com	r19
  26:	27 55       	subi	r18, 0x57	; 87
  28:	30 40       	sbci	r19, 0x00	; 0
  sprintf(sztest,"%f", 2012.0326);
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_Z13hex_digit_valc+0x2c>
  2c:	89 2f       	mov	r24, r25
  2e:	81 54       	subi	r24, 0x41	; 65
  30:	86 30       	cpi	r24, 0x06	; 6
  32:	00 f0       	brcs	.+0      	; 0x34 <_Z13hex_digit_valc+0x34>
  34:	2f ef       	ldi	r18, 0xFF	; 255
  36:	3f ef       	ldi	r19, 0xFF	; 255
  38:	00 c0       	rjmp	.+0      	; 0x3a <_Z13hex_digit_valc+0x3a>
  3a:	29 2f       	mov	r18, r25
  3c:	33 27       	eor	r19, r19
  3e:	27 fd       	sbrc	r18, 7
  40:	30 95       	com	r19
  42:	27 53       	subi	r18, 0x37	; 55
  44:	30 40       	sbci	r19, 0x00	; 0
  46:	c9 01       	movw	r24, r18
  48:	08 95       	ret

Disassembly of section .text._Z13read_hex_bytePc:

00000000 <_Z13read_hex_bytePc>:
 *      Author: George Schreiber
 */

#include "apd_utils.h"

bool testprintf()  {
   0:	fc 01       	movw	r30, r24
   2:	20 81       	ld	r18, Z
   4:	82 2f       	mov	r24, r18
   6:	80 53       	subi	r24, 0x30	; 48
   8:	8a 30       	cpi	r24, 0x0A	; 10
   a:	00 f4       	brcc	.+0      	; 0xc <_Z13read_hex_bytePc+0xc>
   c:	33 27       	eor	r19, r19
   e:	27 fd       	sbrc	r18, 7
  10:	30 95       	com	r19
  12:	20 53       	subi	r18, 0x30	; 48
  char sztest[10] ="";
  14:	30 40       	sbci	r19, 0x00	; 0
  16:	00 c0       	rjmp	.+0      	; 0x18 <_Z13read_hex_bytePc+0x18>
  18:	82 2f       	mov	r24, r18
  1a:	81 56       	subi	r24, 0x61	; 97
  1c:	86 30       	cpi	r24, 0x06	; 6
  1e:	00 f4       	brcc	.+0      	; 0x20 <_Z13read_hex_bytePc+0x20>
  20:	33 27       	eor	r19, r19
  22:	27 fd       	sbrc	r18, 7
  24:	30 95       	com	r19
  26:	27 55       	subi	r18, 0x57	; 87
  28:	30 40       	sbci	r19, 0x00	; 0
  sprintf(sztest,"%f", 2012.0326);
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_Z13read_hex_bytePc+0x2c>
  2c:	82 2f       	mov	r24, r18
  2e:	81 54       	subi	r24, 0x41	; 65
  30:	86 30       	cpi	r24, 0x06	; 6
  32:	00 f0       	brcs	.+0      	; 0x34 <_Z13read_hex_bytePc+0x34>
  34:	2f ef       	ldi	r18, 0xFF	; 255
  36:	3f ef       	ldi	r19, 0xFF	; 255
  38:	00 c0       	rjmp	.+0      	; 0x3a <_Z13read_hex_bytePc+0x3a>
  3a:	33 27       	eor	r19, r19
  3c:	27 fd       	sbrc	r18, 7
  3e:	30 95       	com	r19
  40:	27 53       	subi	r18, 0x37	; 55
  42:	30 40       	sbci	r19, 0x00	; 0
  44:	91 81       	ldd	r25, Z+1	; 0x01
  46:	89 2f       	mov	r24, r25
  48:	80 53       	subi	r24, 0x30	; 48
  4a:	8a 30       	cpi	r24, 0x0A	; 10
  4c:	00 f4       	brcc	.+0      	; 0x4e <_Z13read_hex_bytePc+0x4e>
  4e:	89 2f       	mov	r24, r25
  50:	99 27       	eor	r25, r25
  52:	87 fd       	sbrc	r24, 7
  54:	90 95       	com	r25
  56:	c0 97       	sbiw	r24, 0x30	; 48
  58:	00 c0       	rjmp	.+0      	; 0x5a <_Z13read_hex_bytePc+0x5a>
  5a:	89 2f       	mov	r24, r25
  5c:	81 56       	subi	r24, 0x61	; 97
  5e:	86 30       	cpi	r24, 0x06	; 6
  60:	00 f4       	brcc	.+0      	; 0x62 <_Z13read_hex_bytePc+0x62>
  62:	89 2f       	mov	r24, r25
  64:	99 27       	eor	r25, r25
  66:	87 fd       	sbrc	r24, 7
  68:	90 95       	com	r25
  6a:	87 55       	subi	r24, 0x57	; 87
  6c:	90 40       	sbci	r25, 0x00	; 0
  if (sztest[0] == '?') { // minimal version :(
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_Z13read_hex_bytePc+0x70>
  70:	89 2f       	mov	r24, r25
  72:	81 54       	subi	r24, 0x41	; 65
  74:	86 30       	cpi	r24, 0x06	; 6
  76:	00 f0       	brcs	.+0      	; 0x78 <_Z13read_hex_bytePc+0x78>
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	9f ef       	ldi	r25, 0xFF	; 255
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_Z13read_hex_bytePc+0x7e>
  7e:	89 2f       	mov	r24, r25
  80:	99 27       	eor	r25, r25
  82:	87 fd       	sbrc	r24, 7
  84:	90 95       	com	r25
  86:	c7 97       	sbiw	r24, 0x37	; 55
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	94 e0       	ldi	r25, 0x04	; 4
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	9a 95       	dec	r25
    return false;
  } else if (sztest[0] == '2' ) {	// float-capable :)
    return true;
  }
  return false; // should never get here...
}
  92:	01 f4       	brne	.+0      	; 0x94 <_Z13read_hex_bytePc+0x94>
  94:	28 0f       	add	r18, r24
  96:	31 1d       	adc	r19, r1
  98:	c9 01       	movw	r24, r18
  9a:	08 95       	ret

Disassembly of section .text._Z10soft_resetv:

00000000 <_Z10soft_resetv>:
 *      Author: George Schreiber
 */

#include "apd_utils.h"

bool testprintf()  {
   0:	0c 94 00 00 	jmp	0	; 0x0 <_Z10soft_resetv>
   4:	08 95       	ret

Disassembly of section .text._Z7getPstrPv:

00000000 <_Z7getPstrPv>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	00 97       	sbiw	r24, 0x00	; 0
  char sztest[10] ="";
  14:	01 f0       	breq	.+0      	; 0x16 <_Z7getPstrPv+0x16>
  16:	0e 94 00 00 	call	0	; 0x0 <_Z7getPstrPv>
  1a:	6c 01       	movw	r12, r24
  1c:	8c 01       	movw	r16, r24
  1e:	0f 5f       	subi	r16, 0xFF	; 255
  20:	1f 4f       	sbci	r17, 0xFF	; 255
  22:	c8 01       	movw	r24, r16
  24:	0e 94 00 00 	call	0	; 0x0 <_Z7getPstrPv>
  28:	ec 01       	movw	r28, r24
  sprintf(sztest,"%f", 2012.0326);
  2a:	00 97       	sbiw	r24, 0x00	; 0
  2c:	01 f0       	breq	.+0      	; 0x2e <_Z7getPstrPv+0x2e>
  2e:	60 e0       	ldi	r22, 0x00	; 0
  30:	70 e0       	ldi	r23, 0x00	; 0
  32:	a8 01       	movw	r20, r16
  34:	0e 94 00 00 	call	0	; 0x0 <_Z7getPstrPv>
  38:	ce 01       	movw	r24, r28
  3a:	b7 01       	movw	r22, r14
  3c:	0e 94 00 00 	call	0	; 0x0 <_Z7getPstrPv>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_Z7getPstrPv+0x42>
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	60 e0       	ldi	r22, 0x00	; 0
  48:	70 e0       	ldi	r23, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_Z7getPstrPv>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	b6 01       	movw	r22, r12
  54:	4a e0       	ldi	r20, 0x0A	; 10
  56:	50 e0       	ldi	r21, 0x00	; 0
  58:	0e 94 00 00 	call	0	; 0x0 <_Z7getPstrPv>
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	60 e0       	ldi	r22, 0x00	; 0
  62:	70 e0       	ldi	r23, 0x00	; 0
  64:	0e 94 00 00 	call	0	; 0x0 <_Z7getPstrPv>
  68:	ce 01       	movw	r24, r28
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  if (sztest[0] == '?') { // minimal version :(
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	df 90       	pop	r13
  78:	cf 90       	pop	r12
  7a:	08 95       	ret

Disassembly of section .text._Z8hexbytesPcPhi:

00000000 <_Z8hexbytesPcPhi>:
 *      Author: George Schreiber
 */

#include "apd_utils.h"

bool testprintf()  {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  char sztest[10] ="";
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	00 d0       	rcall	.+0      	; 0x1a <_Z8hexbytesPcPhi+0x1a>
  1a:	cd b7       	in	r28, 0x3d	; 61
  1c:	de b7       	in	r29, 0x3e	; 62
  1e:	9c 01       	movw	r18, r24
  20:	4b 01       	movw	r8, r22
  22:	5a 01       	movw	r10, r20
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f0       	breq	.+0      	; 0x28 <_Z8hexbytesPcPhi+0x28>
  28:	dc 01       	movw	r26, r24
  sprintf(sztest,"%f", 2012.0326);
  2a:	0d 90       	ld	r0, X+
  2c:	00 20       	and	r0, r0
  2e:	01 f4       	brne	.+0      	; 0x30 <_Z8hexbytesPcPhi+0x30>
  30:	11 97       	sbiw	r26, 0x01	; 1
  32:	a8 1b       	sub	r26, r24
  34:	b9 0b       	sbc	r27, r25
  36:	a3 30       	cpi	r26, 0x03	; 3
  38:	b1 05       	cpc	r27, r1
  3a:	00 f0       	brcs	.+0      	; 0x3c <_Z8hexbytesPcPhi+0x3c>
  3c:	a0 fd       	sbrc	r26, 0
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_Z8hexbytesPcPhi+0x40>
  40:	80 91 00 00 	lds	r24, 0x0000
  44:	89 83       	std	Y+1, r24	; 0x01
  46:	1b 82       	std	Y+3, r1	; 0x03
  48:	1a 82       	std	Y+2, r1	; 0x02
  4a:	79 01       	movw	r14, r18
  4c:	00 e0       	ldi	r16, 0x00	; 0
  4e:	10 e0       	ldi	r17, 0x00	; 0
  50:	6e 01       	movw	r12, r28
  52:	08 94       	sec
  54:	c1 1c       	adc	r12, r1
  56:	d1 1c       	adc	r13, r1
  58:	00 c0       	rjmp	.+0      	; 0x5a <_Z8hexbytesPcPhi+0x5a>
  5a:	c6 01       	movw	r24, r12
  5c:	b7 01       	movw	r22, r14
  5e:	42 e0       	ldi	r20, 0x02	; 2
  60:	50 e0       	ldi	r21, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_Z8hexbytesPcPhi>
  66:	c6 01       	movw	r24, r12
  68:	0e 94 00 00 	call	0	; 0x0 <_Z8hexbytesPcPhi>
  6c:	f4 01       	movw	r30, r8
  if (sztest[0] == '?') { // minimal version :(
  6e:	e0 0f       	add	r30, r16
  70:	f1 1f       	adc	r31, r17
  72:	80 83       	st	Z, r24
  74:	82 e0       	ldi	r24, 0x02	; 2
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	e8 0e       	add	r14, r24
  7a:	f9 1e       	adc	r15, r25
  7c:	0f 5f       	subi	r16, 0xFF	; 255
  7e:	1f 4f       	sbci	r17, 0xFF	; 255
  80:	f7 01       	movw	r30, r14
  82:	80 81       	ld	r24, Z
  84:	88 23       	and	r24, r24
  86:	01 f0       	breq	.+0      	; 0x88 <_Z8hexbytesPcPhi+0x88>
  88:	0a 15       	cp	r16, r10
  8a:	1b 05       	cpc	r17, r11
  8c:	04 f0       	brlt	.+0      	; 0x8e <_Z8hexbytesPcPhi+0x8e>
  8e:	0a 15       	cp	r16, r10
  90:	1b 05       	cpc	r17, r11
    return false;
  } else if (sztest[0] == '2' ) {	// float-capable :)
    return true;
  }
  return false; // should never get here...
}
  92:	01 f4       	brne	.+0      	; 0x94 <_Z8hexbytesPcPhi+0x94>
  94:	b4 01       	movw	r22, r8
  96:	00 c0       	rjmp	.+0      	; 0x98 <_Z8hexbytesPcPhi+0x98>
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	cb 01       	movw	r24, r22
  9e:	0f 90       	pop	r0
  a0:	0f 90       	pop	r0
  a2:	0f 90       	pop	r0
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	1f 91       	pop	r17
  aa:	0f 91       	pop	r16
  ac:	ff 90       	pop	r15
  ae:	ef 90       	pop	r14
  b0:	df 90       	pop	r13
  b2:	cf 90       	pop	r12
  b4:	bf 90       	pop	r11
  b6:	af 90       	pop	r10
  b8:	9f 90       	pop	r9
  ba:	8f 90       	pop	r8
  bc:	08 95       	ret

Disassembly of section .text._Z9apsprintfPcPKcz:

00000000 <_Z9apsprintfPcPKcz>:
 *      Author: George Schreiber
 */

#include "apd_utils.h"

bool testprintf()  {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	80 e0       	ldi	r24, 0x00	; 0
   a:	90 e0       	ldi	r25, 0x00	; 0
   c:	cf 91       	pop	r28
   e:	df 91       	pop	r29
  10:	08 95       	ret

Disassembly of section .text._Z24get_line_count_from_filePc:

00000000 <_Z24get_line_count_from_filePc>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	df 93       	push	r29
   e:	cf 93       	push	r28
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  char sztest[10] ="";
  14:	c3 58       	subi	r28, 0x83	; 131
  16:	d0 40       	sbci	r29, 0x00	; 0
  18:	0f b6       	in	r0, 0x3f	; 63
  1a:	f8 94       	cli
  1c:	de bf       	out	0x3e, r29	; 62
  1e:	0f be       	out	0x3f, r0	; 63
  20:	cd bf       	out	0x3d, r28	; 61
  22:	bc 01       	movw	r22, r24
  24:	18 a2       	std	Y+32, r1	; 0x20
  26:	19 a2       	std	Y+33, r1	; 0x21
  28:	1a a2       	std	Y+34, r1	; 0x22
  sprintf(sztest,"%f", 2012.0326);
  2a:	1b a2       	std	Y+35, r1	; 0x23
  2c:	fe 01       	movw	r30, r28
  2e:	b4 96       	adiw	r30, 0x24	; 36
  30:	80 e6       	ldi	r24, 0x60	; 96
  32:	df 01       	movw	r26, r30
  34:	1d 92       	st	X+, r1
  36:	8a 95       	dec	r24
  38:	01 f4       	brne	.+0      	; 0x3a <_Z24get_line_count_from_filePc+0x3a>
  3a:	ce 01       	movw	r24, r28
  3c:	01 96       	adiw	r24, 0x01	; 1
  3e:	41 e0       	ldi	r20, 0x01	; 1
  40:	0e 94 00 00 	call	0	; 0x0 <_Z24get_line_count_from_filePc>
  44:	88 85       	ldd	r24, Y+8	; 0x08
  46:	88 23       	and	r24, r24
  48:	01 f4       	brne	.+0      	; 0x4a <_Z24get_line_count_from_filePc+0x4a>
  4a:	0f ef       	ldi	r16, 0xFF	; 255
  4c:	1f ef       	ldi	r17, 0xFF	; 255
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_Z24get_line_count_from_filePc+0x50>
  50:	00 e0       	ldi	r16, 0x00	; 0
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	35 e0       	ldi	r19, 0x05	; 5
  56:	e3 2e       	mov	r14, r19
  58:	f1 2c       	mov	r15, r1
  5a:	ec 0e       	add	r14, r28
  5c:	fd 1e       	adc	r15, r29
  5e:	20 e2       	ldi	r18, 0x20	; 32
  60:	c2 2e       	mov	r12, r18
  62:	d1 2c       	mov	r13, r1
  64:	cc 0e       	add	r12, r28
  66:	dd 1e       	adc	r13, r29
  68:	00 c0       	rjmp	.+0      	; 0x6a <_Z24get_line_count_from_filePc+0x6a>
  6a:	88 a1       	ldd	r24, Y+32	; 0x20
  6c:	88 23       	and	r24, r24
  if (sztest[0] == '?') { // minimal version :(
  6e:	01 f0       	breq	.+0      	; 0x70 <_Z24get_line_count_from_filePc+0x70>
  70:	0f 5f       	subi	r16, 0xFF	; 255
  72:	1f 4f       	sbci	r17, 0xFF	; 255
  74:	c7 01       	movw	r24, r14
  76:	b6 01       	movw	r22, r12
  78:	44 e6       	ldi	r20, 0x64	; 100
  7a:	50 e0       	ldi	r21, 0x00	; 0
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	0e 94 00 00 	call	0	; 0x0 <_Z24get_line_count_from_filePc>
  84:	89 2b       	or	r24, r25
  86:	01 f4       	brne	.+0      	; 0x88 <_Z24get_line_count_from_filePc+0x88>
  88:	c7 01       	movw	r24, r14
  8a:	0e 94 00 00 	call	0	; 0x0 <_Z24get_line_count_from_filePc>
  8e:	88 85       	ldd	r24, Y+8	; 0x08
  90:	88 23       	and	r24, r24
    return false;
  } else if (sztest[0] == '2' ) {	// float-capable :)
    return true;
  }
  return false; // should never get here...
}
  92:	01 f0       	breq	.+0      	; 0x94 <_Z24get_line_count_from_filePc+0x94>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	ce 01       	movw	r24, r28
  9e:	05 96       	adiw	r24, 0x05	; 5
  a0:	0e 94 00 00 	call	0	; 0x0 <_Z24get_line_count_from_filePc>
  a4:	c8 01       	movw	r24, r16
  a6:	cd 57       	subi	r28, 0x7D	; 125
  a8:	df 4f       	sbci	r29, 0xFF	; 255
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	1f 91       	pop	r17
  ba:	0f 91       	pop	r16
  bc:	ff 90       	pop	r15
  be:	ef 90       	pop	r14
  c0:	df 90       	pop	r13
  c2:	cf 90       	pop	r12
  c4:	08 95       	ret

Disassembly of section .text._Z9testscanfv:

00000000 <_Z9testscanfv>:
 *      Author: George Schreiber
 */

#include "apd_utils.h"

bool testprintf()  {
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	df 93       	push	r29
   c:	cf 93       	push	r28
   e:	00 d0       	rcall	.+0      	; 0x10 <_Z9testscanfv+0x10>
  10:	0f 92       	push	r0
  12:	cd b7       	in	r28, 0x3d	; 61
  char sztest[10] ="";
  14:	de b7       	in	r29, 0x3e	; 62
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	a0 e0       	ldi	r26, 0x00	; 0
  1c:	b0 e0       	ldi	r27, 0x00	; 0
  1e:	89 83       	std	Y+1, r24	; 0x01
  20:	9a 83       	std	Y+2, r25	; 0x02
  22:	ab 83       	std	Y+3, r26	; 0x03
  24:	bc 83       	std	Y+4, r27	; 0x04
  26:	00 d0       	rcall	.+0      	; 0x28 <_Z9testscanfv+0x28>
  28:	00 d0       	rcall	.+0      	; 0x2a <_Z9testscanfv+0x2a>
  sprintf(sztest,"%f", 2012.0326);
  2a:	ed b7       	in	r30, 0x3d	; 61
  2c:	fe b7       	in	r31, 0x3e	; 62
  2e:	31 96       	adiw	r30, 0x01	; 1
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	ad b7       	in	r26, 0x3d	; 61
  36:	be b7       	in	r27, 0x3e	; 62
  38:	12 96       	adiw	r26, 0x02	; 2
  3a:	9c 93       	st	X, r25
  3c:	8e 93       	st	-X, r24
  3e:	11 97       	sbiw	r26, 0x01	; 1
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	93 83       	std	Z+3, r25	; 0x03
  46:	82 83       	std	Z+2, r24	; 0x02
  48:	ce 01       	movw	r24, r28
  4a:	01 96       	adiw	r24, 0x01	; 1
  4c:	95 83       	std	Z+5, r25	; 0x05
  4e:	84 83       	std	Z+4, r24	; 0x04
  50:	0e 94 00 00 	call	0	; 0x0 <_Z9testscanfv>
  54:	e9 80       	ldd	r14, Y+1	; 0x01
  56:	fa 80       	ldd	r15, Y+2	; 0x02
  58:	0b 81       	ldd	r16, Y+3	; 0x03
  5a:	1c 81       	ldd	r17, Y+4	; 0x04
  5c:	8d b7       	in	r24, 0x3d	; 61
  5e:	9e b7       	in	r25, 0x3e	; 62
  60:	06 96       	adiw	r24, 0x06	; 6
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	f8 94       	cli
  66:	9e bf       	out	0x3e, r25	; 62
  68:	0f be       	out	0x3f, r0	; 63
  6a:	8d bf       	out	0x3d, r24	; 61
  6c:	c8 01       	movw	r24, r16
  if (sztest[0] == '?') { // minimal version :(
  6e:	b7 01       	movw	r22, r14
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	50 e0       	ldi	r21, 0x00	; 0
  78:	0e 94 00 00 	call	0	; 0x0 <_Z9testscanfv>
  7c:	88 23       	and	r24, r24
  7e:	01 f4       	brne	.+0      	; 0x80 <_Z9testscanfv+0x80>
  80:	dd 24       	eor	r13, r13
  82:	00 c0       	rjmp	.+0      	; 0x84 <_Z9testscanfv+0x84>
  84:	dd 24       	eor	r13, r13
  86:	c8 01       	movw	r24, r16
  88:	b7 01       	movw	r22, r14
  8a:	2b e0       	ldi	r18, 0x0B	; 11
  8c:	31 e8       	ldi	r19, 0x81	; 129
  8e:	4b ef       	ldi	r20, 0xFB	; 251
  90:	54 e4       	ldi	r21, 0x44	; 68
    return false;
  } else if (sztest[0] == '2' ) {	// float-capable :)
    return true;
  }
  return false; // should never get here...
}
  92:	0e 94 00 00 	call	0	; 0x0 <_Z9testscanfv>
  96:	88 23       	and	r24, r24
  98:	01 f4       	brne	.+0      	; 0x9a <_Z9testscanfv+0x9a>
  9a:	dd 24       	eor	r13, r13
  9c:	d3 94       	inc	r13
  9e:	8d 2d       	mov	r24, r13
  a0:	0f 90       	pop	r0
  a2:	0f 90       	pop	r0
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	08 95       	ret

Disassembly of section .text._Z10testprintfv:

00000000 <_Z10testprintfv>:
 *      Author: George Schreiber
 */

#include "apd_utils.h"

bool testprintf()  {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  char sztest[10] ="";
  14:	19 82       	std	Y+1, r1	; 0x01
  16:	1a 82       	std	Y+2, r1	; 0x02
  18:	1b 82       	std	Y+3, r1	; 0x03
  1a:	1c 82       	std	Y+4, r1	; 0x04
  1c:	fe 01       	movw	r30, r28
  1e:	35 96       	adiw	r30, 0x05	; 5
  20:	86 e0       	ldi	r24, 0x06	; 6
  22:	df 01       	movw	r26, r30
  24:	1d 92       	st	X+, r1
  26:	8a 95       	dec	r24
  28:	01 f4       	brne	.+0      	; 0x2a <_Z10testprintfv+0x2a>
  sprintf(sztest,"%f", 2012.0326);
  2a:	2d b7       	in	r18, 0x3d	; 61
  2c:	3e b7       	in	r19, 0x3e	; 62
  2e:	28 50       	subi	r18, 0x08	; 8
  30:	30 40       	sbci	r19, 0x00	; 0
  32:	0f b6       	in	r0, 0x3f	; 63
  34:	f8 94       	cli
  36:	3e bf       	out	0x3e, r19	; 62
  38:	0f be       	out	0x3f, r0	; 63
  3a:	2d bf       	out	0x3d, r18	; 61
  3c:	ed b7       	in	r30, 0x3d	; 61
  3e:	fe b7       	in	r31, 0x3e	; 62
  40:	31 96       	adiw	r30, 0x01	; 1
  42:	ce 01       	movw	r24, r28
  44:	01 96       	adiw	r24, 0x01	; 1
  46:	ad b7       	in	r26, 0x3d	; 61
  48:	be b7       	in	r27, 0x3e	; 62
  4a:	12 96       	adiw	r26, 0x02	; 2
  4c:	9c 93       	st	X, r25
  4e:	8e 93       	st	-X, r24
  50:	11 97       	sbiw	r26, 0x01	; 1
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	93 83       	std	Z+3, r25	; 0x03
  58:	82 83       	std	Z+2, r24	; 0x02
  5a:	8b e0       	ldi	r24, 0x0B	; 11
  5c:	91 e8       	ldi	r25, 0x81	; 129
  5e:	ab ef       	ldi	r26, 0xFB	; 251
  60:	b4 e4       	ldi	r27, 0x44	; 68
  62:	84 83       	std	Z+4, r24	; 0x04
  64:	95 83       	std	Z+5, r25	; 0x05
  66:	a6 83       	std	Z+6, r26	; 0x06
  68:	b7 83       	std	Z+7, r27	; 0x07
  6a:	0e 94 00 00 	call	0	; 0x0 <_Z10testprintfv>
  if (sztest[0] == '?') { // minimal version :(
  6e:	99 81       	ldd	r25, Y+1	; 0x01
  70:	2d b7       	in	r18, 0x3d	; 61
  72:	3e b7       	in	r19, 0x3e	; 62
  74:	28 5f       	subi	r18, 0xF8	; 248
  76:	3f 4f       	sbci	r19, 0xFF	; 255
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	f8 94       	cli
  7c:	3e bf       	out	0x3e, r19	; 62
  7e:	0f be       	out	0x3f, r0	; 63
  80:	2d bf       	out	0x3d, r18	; 61
  82:	9f 33       	cpi	r25, 0x3F	; 63
  84:	01 f4       	brne	.+0      	; 0x86 <_Z10testprintfv+0x86>
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	00 c0       	rjmp	.+0      	; 0x8a <_Z10testprintfv+0x8a>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	92 33       	cpi	r25, 0x32	; 50
  8e:	01 f4       	brne	.+0      	; 0x90 <_Z10testprintfv+0x90>
  90:	81 e0       	ldi	r24, 0x01	; 1
    return false;
  } else if (sztest[0] == '2' ) {	// float-capable :)
    return true;
  }
  return false; // should never get here...
}
  92:	2a 96       	adiw	r28, 0x0a	; 10
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	de bf       	out	0x3e, r29	; 62
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	cd bf       	out	0x3d, r28	; 61
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

Stepper.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000c24  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000104f  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN7Stepper8setSpeedEl 00000050  00000000  00000000  00001ca7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN7Stepper7versionEv 00000006  00000000  00000000  00001cf7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text._ZN7Stepper9stepMotorEi 000000ec  00000000  00000000  00001cfd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN7Stepper4stepEi 000000c4  00000000  00000000  00001de9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN7StepperC1Eiiiii 00000076  00000000  00000000  00001ead  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN7StepperC2Eiiiii 00000076  00000000  00000000  00001f23  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN7StepperC1Eiii 00000052  00000000  00000000  00001f99  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN7StepperC2Eiii 00000052  00000000  00000000  00001feb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text._ZN7Stepper8setSpeedEl:

00000000 <_ZN7Stepper8setSpeedEl>:

/*
 * two-wire constructor.
 * Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
{
  this->step_number = 0;      // which step the motor is on
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
  this->speed = 0;        // the motor speed, in revolutions per minute
   e:	7a 01       	movw	r14, r20
  10:	8b 01       	movw	r16, r22
  this->direction = 0;      // motor direction
  12:	fc 01       	movw	r30, r24
  14:	20 85       	ldd	r18, Z+8	; 0x08
  this->last_step_time = 0;    // time stamp in ms of the last step taken
  16:	31 85       	ldd	r19, Z+9	; 0x09
  18:	44 27       	eor	r20, r20
  1a:	37 fd       	sbrc	r19, 7
  1c:	40 95       	com	r20
  this->number_of_steps = number_of_steps;    // total number of steps for this motor
  1e:	54 2f       	mov	r21, r20
  20:	60 e6       	ldi	r22, 0x60	; 96
  
  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  22:	7a ee       	ldi	r23, 0xEA	; 234
  24:	80 e0       	ldi	r24, 0x00	; 0
  this->motor_pin_2 = motor_pin_2;
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper8setSpeedEl>

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
  2c:	ca 01       	movw	r24, r20
  2e:	b9 01       	movw	r22, r18
  pinMode(this->motor_pin_2, OUTPUT);
  30:	a8 01       	movw	r20, r16
  32:	97 01       	movw	r18, r14
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper8setSpeedEl>
  38:	f6 01       	movw	r30, r12
  
  // When there are only 2 pins, set the other two to 0:
  this->motor_pin_3 = 0;
  3a:	24 83       	std	Z+4, r18	; 0x04
  3c:	35 83       	std	Z+5, r19	; 0x05
  3e:	46 83       	std	Z+6, r20	; 0x06
  this->motor_pin_4 = 0;
  40:	57 83       	std	Z+7, r21	; 0x07
  42:	1f 91       	pop	r17
  
  // pin_count is used by the stepMotor() method:
  this->pin_count = 2;
  44:	0f 91       	pop	r16
  46:	ff 90       	pop	r15
  48:	ef 90       	pop	r14
  4a:	df 90       	pop	r13
}
  4c:	cf 90       	pop	r12
  4e:	08 95       	ret

Disassembly of section .text._ZN7Stepper7versionEv:

00000000 <_ZN7Stepper7versionEv>:

/*
 * two-wire constructor.
 * Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2)
   0:	84 e0       	ldi	r24, 0x04	; 4
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	08 95       	ret

Disassembly of section .text._ZN7Stepper9stepMotorEi:

00000000 <_ZN7Stepper9stepMotorEi>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
{
  this->step_number = 0;      // which step the motor is on
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	8a 85       	ldd	r24, Y+10	; 0x0a
  this->speed = 0;        // the motor speed, in revolutions per minute
   e:	9b 85       	ldd	r25, Y+11	; 0x0b
  10:	02 97       	sbiw	r24, 0x02	; 2
  this->direction = 0;      // motor direction
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN7Stepper9stepMotorEi+0x14>
  14:	61 30       	cpi	r22, 0x01	; 1
  this->last_step_time = 0;    // time stamp in ms of the last step taken
  16:	71 05       	cpc	r23, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN7Stepper9stepMotorEi+0x1a>
  1a:	62 30       	cpi	r22, 0x02	; 2
  1c:	71 05       	cpc	r23, r1
  this->number_of_steps = number_of_steps;    // total number of steps for this motor
  1e:	04 f4       	brge	.+0      	; 0x20 <_ZN7Stepper9stepMotorEi+0x20>
  20:	61 15       	cp	r22, r1
  
  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  22:	71 05       	cpc	r23, r1
  24:	01 f0       	breq	.+0      	; 0x26 <_ZN7Stepper9stepMotorEi+0x26>
  this->motor_pin_2 = motor_pin_2;
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN7Stepper9stepMotorEi+0x28>
  28:	62 30       	cpi	r22, 0x02	; 2

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
  2a:	71 05       	cpc	r23, r1
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN7Stepper9stepMotorEi+0x2e>
  2e:	63 30       	cpi	r22, 0x03	; 3
  pinMode(this->motor_pin_2, OUTPUT);
  30:	71 05       	cpc	r23, r1
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN7Stepper9stepMotorEi+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN7Stepper9stepMotorEi+0x36>
  36:	8e 85       	ldd	r24, Y+14	; 0x0e
  38:	60 e0       	ldi	r22, 0x00	; 0
  
  // When there are only 2 pins, set the other two to 0:
  this->motor_pin_3 = 0;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN7Stepper9stepMotorEi+0x3c>
  3c:	8e 85       	ldd	r24, Y+14	; 0x0e
  3e:	61 e0       	ldi	r22, 0x01	; 1
  this->motor_pin_4 = 0;
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  
  // pin_count is used by the stepMotor() method:
  this->pin_count = 2;
  44:	88 89       	ldd	r24, Y+16	; 0x10
  46:	61 e0       	ldi	r22, 0x01	; 1
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN7Stepper9stepMotorEi+0x4a>
  4a:	8e 85       	ldd	r24, Y+14	; 0x0e
}
  4c:	61 e0       	ldi	r22, 0x01	; 1
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN7Stepper9stepMotorEi+0x50>
  50:	8e 85       	ldd	r24, Y+14	; 0x0e
  52:	60 e0       	ldi	r22, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  58:	88 89       	ldd	r24, Y+16	; 0x10
  5a:	60 e0       	ldi	r22, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  60:	8a 85       	ldd	r24, Y+10	; 0x0a
  62:	9b 85       	ldd	r25, Y+11	; 0x0b
  64:	04 97       	sbiw	r24, 0x04	; 4
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN7Stepper9stepMotorEi+0x68>
  68:	01 30       	cpi	r16, 0x01	; 1
  6a:	11 05       	cpc	r17, r1
  6c:	01 f0       	breq	.+0      	; 0x6e <_ZN7Stepper9stepMotorEi+0x6e>
  6e:	02 30       	cpi	r16, 0x02	; 2
  70:	11 05       	cpc	r17, r1
  72:	04 f4       	brge	.+0      	; 0x74 <_ZN7Stepper9stepMotorEi+0x74>
  74:	01 2b       	or	r16, r17
  76:	01 f0       	breq	.+0      	; 0x78 <_ZN7Stepper9stepMotorEi+0x78>
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZN7Stepper9stepMotorEi+0x7a>
  7a:	02 30       	cpi	r16, 0x02	; 2
  7c:	11 05       	cpc	r17, r1
  7e:	01 f0       	breq	.+0      	; 0x80 <_ZN7Stepper9stepMotorEi+0x80>
  80:	03 30       	cpi	r16, 0x03	; 3
  82:	11 05       	cpc	r17, r1
  84:	01 f4       	brne	.+0      	; 0x86 <_ZN7Stepper9stepMotorEi+0x86>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN7Stepper9stepMotorEi+0x88>
  88:	8e 85       	ldd	r24, Y+14	; 0x0e
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  90:	88 89       	ldd	r24, Y+16	; 0x10
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN7Stepper9stepMotorEi+0x96>
  96:	8e 85       	ldd	r24, Y+14	; 0x0e
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  9e:	88 89       	ldd	r24, Y+16	; 0x10
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  a6:	8a 89       	ldd	r24, Y+18	; 0x12
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  ae:	8c 89       	ldd	r24, Y+20	; 0x14
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN7Stepper9stepMotorEi+0xb4>
  b4:	8e 85       	ldd	r24, Y+14	; 0x0e
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  bc:	88 89       	ldd	r24, Y+16	; 0x10
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_ZN7Stepper9stepMotorEi+0xc2>
  c2:	8e 85       	ldd	r24, Y+14	; 0x0e
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  ca:	88 89       	ldd	r24, Y+16	; 0x10
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  d2:	8a 89       	ldd	r24, Y+18	; 0x12
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  da:	8c 89       	ldd	r24, Y+20	; 0x14
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper9stepMotorEi>
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	08 95       	ret

Disassembly of section .text._ZN7Stepper4stepEi:

00000000 <_ZN7Stepper4stepEi>:

/*
 * two-wire constructor.
 * Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
{
  this->step_number = 0;      // which step the motor is on
   8:	ec 01       	movw	r28, r24
   a:	16 16       	cp	r1, r22
   c:	17 06       	cpc	r1, r23
  this->speed = 0;        // the motor speed, in revolutions per minute
   e:	04 f4       	brge	.+0      	; 0x10 <_ZN7Stepper4stepEi+0x10>
  10:	81 e0       	ldi	r24, 0x01	; 1
  this->direction = 0;      // motor direction
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	99 83       	std	Y+1, r25	; 0x01
  this->last_step_time = 0;    // time stamp in ms of the last step taken
  16:	88 83       	st	Y, r24
  18:	77 ff       	sbrs	r23, 7
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN7Stepper4stepEi+0x1c>
  1c:	19 82       	std	Y+1, r1	; 0x01
  this->number_of_steps = number_of_steps;    // total number of steps for this motor
  1e:	18 82       	st	Y, r1
  20:	8b 01       	movw	r16, r22
  
  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  22:	77 ff       	sbrs	r23, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN7Stepper4stepEi+0x26>
  this->motor_pin_2 = motor_pin_2;
  26:	10 95       	com	r17
  28:	01 95       	neg	r16

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
  2a:	1f 4f       	sbci	r17, 0xFF	; 255
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN7Stepper4stepEi+0x2e>
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper4stepEi>
  pinMode(this->motor_pin_2, OUTPUT);
  32:	2e 89       	ldd	r18, Y+22	; 0x16
  34:	3f 89       	ldd	r19, Y+23	; 0x17
  36:	48 8d       	ldd	r20, Y+24	; 0x18
  38:	59 8d       	ldd	r21, Y+25	; 0x19
  
  // When there are only 2 pins, set the other two to 0:
  this->motor_pin_3 = 0;
  3a:	62 1b       	sub	r22, r18
  3c:	73 0b       	sbc	r23, r19
  3e:	84 0b       	sbc	r24, r20
  this->motor_pin_4 = 0;
  40:	95 0b       	sbc	r25, r21
  42:	2c 81       	ldd	r18, Y+4	; 0x04
  
  // pin_count is used by the stepMotor() method:
  this->pin_count = 2;
  44:	3d 81       	ldd	r19, Y+5	; 0x05
  46:	4e 81       	ldd	r20, Y+6	; 0x06
  48:	5f 81       	ldd	r21, Y+7	; 0x07
  4a:	62 17       	cp	r22, r18
}
  4c:	73 07       	cpc	r23, r19
  4e:	84 07       	cpc	r24, r20
  50:	95 07       	cpc	r25, r21
  52:	00 f0       	brcs	.+0      	; 0x54 <_ZN7Stepper4stepEi+0x54>
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper4stepEi>
  58:	6e 8b       	std	Y+22, r22	; 0x16
  5a:	7f 8b       	std	Y+23, r23	; 0x17
  5c:	88 8f       	std	Y+24, r24	; 0x18
  5e:	99 8f       	std	Y+25, r25	; 0x19
  60:	88 81       	ld	r24, Y
  62:	99 81       	ldd	r25, Y+1	; 0x01
  64:	2c 85       	ldd	r18, Y+12	; 0x0c
  66:	3d 85       	ldd	r19, Y+13	; 0x0d
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	01 f4       	brne	.+0      	; 0x6c <_ZN7Stepper4stepEi+0x6c>
  6c:	2f 5f       	subi	r18, 0xFF	; 255
  6e:	3f 4f       	sbci	r19, 0xFF	; 255
  70:	3d 87       	std	Y+13, r19	; 0x0d
  72:	2c 87       	std	Y+12, r18	; 0x0c
  74:	88 85       	ldd	r24, Y+8	; 0x08
  76:	99 85       	ldd	r25, Y+9	; 0x09
  78:	28 17       	cp	r18, r24
  7a:	39 07       	cpc	r19, r25
  7c:	01 f4       	brne	.+0      	; 0x7e <_ZN7Stepper4stepEi+0x7e>
  7e:	1d 86       	std	Y+13, r1	; 0x0d
  80:	1c 86       	std	Y+12, r1	; 0x0c
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN7Stepper4stepEi+0x84>
  84:	23 2b       	or	r18, r19
  86:	01 f4       	brne	.+0      	; 0x88 <_ZN7Stepper4stepEi+0x88>
  88:	88 85       	ldd	r24, Y+8	; 0x08
  8a:	99 85       	ldd	r25, Y+9	; 0x09
  8c:	9d 87       	std	Y+13, r25	; 0x0d
  8e:	8c 87       	std	Y+12, r24	; 0x0c
  90:	8c 85       	ldd	r24, Y+12	; 0x0c
  92:	9d 85       	ldd	r25, Y+13	; 0x0d
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	9d 87       	std	Y+13, r25	; 0x0d
  98:	8c 87       	std	Y+12, r24	; 0x0c
  9a:	01 50       	subi	r16, 0x01	; 1
  9c:	10 40       	sbci	r17, 0x00	; 0
  9e:	8c 85       	ldd	r24, Y+12	; 0x0c
  a0:	9d 85       	ldd	r25, Y+13	; 0x0d
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper4stepEi>
  aa:	bc 01       	movw	r22, r24
  ac:	ce 01       	movw	r24, r28
  ae:	0e 94 00 00 	call	0	; 0x0 <_ZN7Stepper4stepEi>
  b2:	01 15       	cp	r16, r1
  b4:	11 05       	cpc	r17, r1
  b6:	01 f0       	breq	.+0      	; 0xb8 <_ZN7Stepper4stepEi+0xb8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <_ZN7Stepper4stepEi+0xba>
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	0f 91       	pop	r16
  c2:	08 95       	ret

Disassembly of section .text._ZN7StepperC1Eiiiii:

00000000 <_ZN7StepperC1Eiiiii>:

/*
 * two-wire constructor.
 * Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
{
  this->step_number = 0;      // which step the motor is on
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
  this->speed = 0;        // the motor speed, in revolutions per minute
   e:	84 2f       	mov	r24, r20
  10:	f6 01       	movw	r30, r12
  this->direction = 0;      // motor direction
  12:	15 86       	std	Z+13, r1	; 0x0d
  14:	14 86       	std	Z+12, r1	; 0x0c
  this->last_step_time = 0;    // time stamp in ms of the last step taken
  16:	13 82       	std	Z+3, r1	; 0x03
  18:	12 82       	std	Z+2, r1	; 0x02
  1a:	11 82       	std	Z+1, r1	; 0x01
  1c:	10 82       	st	Z, r1
  this->number_of_steps = number_of_steps;    // total number of steps for this motor
  1e:	16 8a       	std	Z+22, r1	; 0x16
  20:	17 8a       	std	Z+23, r1	; 0x17
  
  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  22:	10 8e       	std	Z+24, r1	; 0x18
  24:	11 8e       	std	Z+25, r1	; 0x19
  this->motor_pin_2 = motor_pin_2;
  26:	71 87       	std	Z+9, r23	; 0x09
  28:	60 87       	std	Z+8, r22	; 0x08

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
  2a:	46 87       	std	Z+14, r20	; 0x0e
  2c:	57 87       	std	Z+15, r21	; 0x0f
  2e:	31 8b       	std	Z+17, r19	; 0x11
  pinMode(this->motor_pin_2, OUTPUT);
  30:	20 8b       	std	Z+16, r18	; 0x10
  32:	13 8b       	std	Z+19, r17	; 0x13
  34:	02 8b       	std	Z+18, r16	; 0x12
  36:	f5 8a       	std	Z+21, r15	; 0x15
  38:	e4 8a       	std	Z+20, r14	; 0x14
  
  // When there are only 2 pins, set the other two to 0:
  this->motor_pin_3 = 0;
  3a:	61 e0       	ldi	r22, 0x01	; 1
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC1Eiiiii>
  this->motor_pin_4 = 0;
  40:	f6 01       	movw	r30, r12
  42:	80 89       	ldd	r24, Z+16	; 0x10
  
  // pin_count is used by the stepMotor() method:
  this->pin_count = 2;
  44:	61 e0       	ldi	r22, 0x01	; 1
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC1Eiiiii>
  4a:	f6 01       	movw	r30, r12
}
  4c:	82 89       	ldd	r24, Z+18	; 0x12
  4e:	61 e0       	ldi	r22, 0x01	; 1
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC1Eiiiii>
  54:	f6 01       	movw	r30, r12
  56:	84 89       	ldd	r24, Z+20	; 0x14
  58:	61 e0       	ldi	r22, 0x01	; 1
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC1Eiiiii>
  5e:	84 e0       	ldi	r24, 0x04	; 4
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	f6 01       	movw	r30, r12
  64:	93 87       	std	Z+11, r25	; 0x0b
  66:	82 87       	std	Z+10, r24	; 0x0a
  68:	1f 91       	pop	r17
  6a:	0f 91       	pop	r16
  6c:	ff 90       	pop	r15
  6e:	ef 90       	pop	r14
  70:	df 90       	pop	r13
  72:	cf 90       	pop	r12
  74:	08 95       	ret

Disassembly of section .text._ZN7StepperC2Eiiiii:

00000000 <_ZN7StepperC2Eiiiii>:

/*
 * two-wire constructor.
 * Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
{
  this->step_number = 0;      // which step the motor is on
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
  this->speed = 0;        // the motor speed, in revolutions per minute
   e:	84 2f       	mov	r24, r20
  10:	f6 01       	movw	r30, r12
  this->direction = 0;      // motor direction
  12:	15 86       	std	Z+13, r1	; 0x0d
  14:	14 86       	std	Z+12, r1	; 0x0c
  this->last_step_time = 0;    // time stamp in ms of the last step taken
  16:	13 82       	std	Z+3, r1	; 0x03
  18:	12 82       	std	Z+2, r1	; 0x02
  1a:	11 82       	std	Z+1, r1	; 0x01
  1c:	10 82       	st	Z, r1
  this->number_of_steps = number_of_steps;    // total number of steps for this motor
  1e:	16 8a       	std	Z+22, r1	; 0x16
  20:	17 8a       	std	Z+23, r1	; 0x17
  
  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  22:	10 8e       	std	Z+24, r1	; 0x18
  24:	11 8e       	std	Z+25, r1	; 0x19
  this->motor_pin_2 = motor_pin_2;
  26:	71 87       	std	Z+9, r23	; 0x09
  28:	60 87       	std	Z+8, r22	; 0x08

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
  2a:	46 87       	std	Z+14, r20	; 0x0e
  2c:	57 87       	std	Z+15, r21	; 0x0f
  2e:	31 8b       	std	Z+17, r19	; 0x11
  pinMode(this->motor_pin_2, OUTPUT);
  30:	20 8b       	std	Z+16, r18	; 0x10
  32:	13 8b       	std	Z+19, r17	; 0x13
  34:	02 8b       	std	Z+18, r16	; 0x12
  36:	f5 8a       	std	Z+21, r15	; 0x15
  38:	e4 8a       	std	Z+20, r14	; 0x14
  
  // When there are only 2 pins, set the other two to 0:
  this->motor_pin_3 = 0;
  3a:	61 e0       	ldi	r22, 0x01	; 1
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC2Eiiiii>
  this->motor_pin_4 = 0;
  40:	f6 01       	movw	r30, r12
  42:	80 89       	ldd	r24, Z+16	; 0x10
  
  // pin_count is used by the stepMotor() method:
  this->pin_count = 2;
  44:	61 e0       	ldi	r22, 0x01	; 1
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC2Eiiiii>
  4a:	f6 01       	movw	r30, r12
}
  4c:	82 89       	ldd	r24, Z+18	; 0x12
  4e:	61 e0       	ldi	r22, 0x01	; 1
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC2Eiiiii>
  54:	f6 01       	movw	r30, r12
  56:	84 89       	ldd	r24, Z+20	; 0x14
  58:	61 e0       	ldi	r22, 0x01	; 1
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC2Eiiiii>
  5e:	84 e0       	ldi	r24, 0x04	; 4
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	f6 01       	movw	r30, r12
  64:	93 87       	std	Z+11, r25	; 0x0b
  66:	82 87       	std	Z+10, r24	; 0x0a
  68:	1f 91       	pop	r17
  6a:	0f 91       	pop	r16
  6c:	ff 90       	pop	r15
  6e:	ef 90       	pop	r14
  70:	df 90       	pop	r13
  72:	cf 90       	pop	r12
  74:	08 95       	ret

Disassembly of section .text._ZN7StepperC1Eiii:

00000000 <_ZN7StepperC1Eiii>:

/*
 * two-wire constructor.
 * Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	84 2f       	mov	r24, r20
{
  this->step_number = 0;      // which step the motor is on
   8:	f8 01       	movw	r30, r16
   a:	15 86       	std	Z+13, r1	; 0x0d
   c:	14 86       	std	Z+12, r1	; 0x0c
  this->speed = 0;        // the motor speed, in revolutions per minute
   e:	13 82       	std	Z+3, r1	; 0x03
  10:	12 82       	std	Z+2, r1	; 0x02
  this->direction = 0;      // motor direction
  12:	11 82       	std	Z+1, r1	; 0x01
  14:	10 82       	st	Z, r1
  this->last_step_time = 0;    // time stamp in ms of the last step taken
  16:	16 8a       	std	Z+22, r1	; 0x16
  18:	17 8a       	std	Z+23, r1	; 0x17
  1a:	10 8e       	std	Z+24, r1	; 0x18
  1c:	11 8e       	std	Z+25, r1	; 0x19
  this->number_of_steps = number_of_steps;    // total number of steps for this motor
  1e:	71 87       	std	Z+9, r23	; 0x09
  20:	60 87       	std	Z+8, r22	; 0x08
  
  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  22:	46 87       	std	Z+14, r20	; 0x0e
  24:	57 87       	std	Z+15, r21	; 0x0f
  this->motor_pin_2 = motor_pin_2;
  26:	31 8b       	std	Z+17, r19	; 0x11
  28:	20 8b       	std	Z+16, r18	; 0x10

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
  2a:	61 e0       	ldi	r22, 0x01	; 1
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC1Eiii>
  pinMode(this->motor_pin_2, OUTPUT);
  30:	f8 01       	movw	r30, r16
  32:	80 89       	ldd	r24, Z+16	; 0x10
  34:	61 e0       	ldi	r22, 0x01	; 1
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC1Eiii>
  
  // When there are only 2 pins, set the other two to 0:
  this->motor_pin_3 = 0;
  3a:	f8 01       	movw	r30, r16
  3c:	13 8a       	std	Z+19, r1	; 0x13
  3e:	12 8a       	std	Z+18, r1	; 0x12
  this->motor_pin_4 = 0;
  40:	15 8a       	std	Z+21, r1	; 0x15
  42:	14 8a       	std	Z+20, r1	; 0x14
  
  // pin_count is used by the stepMotor() method:
  this->pin_count = 2;
  44:	82 e0       	ldi	r24, 0x02	; 2
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	93 87       	std	Z+11, r25	; 0x0b
  4a:	82 87       	std	Z+10, r24	; 0x0a
}
  4c:	1f 91       	pop	r17
  4e:	0f 91       	pop	r16
  50:	08 95       	ret

Disassembly of section .text._ZN7StepperC2Eiii:

00000000 <_ZN7StepperC2Eiii>:

/*
 * two-wire constructor.
 * Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	84 2f       	mov	r24, r20
{
  this->step_number = 0;      // which step the motor is on
   8:	f8 01       	movw	r30, r16
   a:	15 86       	std	Z+13, r1	; 0x0d
   c:	14 86       	std	Z+12, r1	; 0x0c
  this->speed = 0;        // the motor speed, in revolutions per minute
   e:	13 82       	std	Z+3, r1	; 0x03
  10:	12 82       	std	Z+2, r1	; 0x02
  this->direction = 0;      // motor direction
  12:	11 82       	std	Z+1, r1	; 0x01
  14:	10 82       	st	Z, r1
  this->last_step_time = 0;    // time stamp in ms of the last step taken
  16:	16 8a       	std	Z+22, r1	; 0x16
  18:	17 8a       	std	Z+23, r1	; 0x17
  1a:	10 8e       	std	Z+24, r1	; 0x18
  1c:	11 8e       	std	Z+25, r1	; 0x19
  this->number_of_steps = number_of_steps;    // total number of steps for this motor
  1e:	71 87       	std	Z+9, r23	; 0x09
  20:	60 87       	std	Z+8, r22	; 0x08
  
  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  22:	46 87       	std	Z+14, r20	; 0x0e
  24:	57 87       	std	Z+15, r21	; 0x0f
  this->motor_pin_2 = motor_pin_2;
  26:	31 8b       	std	Z+17, r19	; 0x11
  28:	20 8b       	std	Z+16, r18	; 0x10

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
  2a:	61 e0       	ldi	r22, 0x01	; 1
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC2Eiii>
  pinMode(this->motor_pin_2, OUTPUT);
  30:	f8 01       	movw	r30, r16
  32:	80 89       	ldd	r24, Z+16	; 0x10
  34:	61 e0       	ldi	r22, 0x01	; 1
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7StepperC2Eiii>
  
  // When there are only 2 pins, set the other two to 0:
  this->motor_pin_3 = 0;
  3a:	f8 01       	movw	r30, r16
  3c:	13 8a       	std	Z+19, r1	; 0x13
  3e:	12 8a       	std	Z+18, r1	; 0x12
  this->motor_pin_4 = 0;
  40:	15 8a       	std	Z+21, r1	; 0x15
  42:	14 8a       	std	Z+20, r1	; 0x14
  
  // pin_count is used by the stepMotor() method:
  this->pin_count = 2;
  44:	82 e0       	ldi	r24, 0x02	; 2
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	93 87       	std	Z+11, r25	; 0x0b
  4a:	82 87       	std	Z+10, r24	; 0x0a
}
  4c:	1f 91       	pop	r17
  4e:	0f 91       	pop	r16
  50:	08 95       	ret

SoftwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000010d4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000170a  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN14SoftwareSerial6listenEv 00000038  00000000  00000000  00002812  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN14SoftwareSerial4recvEv 000000d4  00000000  00000000  0000284a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN14SoftwareSerial12tx_pin_writeEh 0000001e  00000000  00000000  0000291e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN14SoftwareSerial11rx_pin_readEv 00000014  00000000  00000000  0000293c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.__vector_9 0000005c  00000000  00000000  00002950  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__vector_10 0000005c  00000000  00000000  000029ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.__vector_11 0000005c  00000000  00000000  00002a08  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN14SoftwareSerial5beginEl 000001c0  00000000  00000000  00002a64  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN14SoftwareSerial3endEv 0000007e  00000000  00000000  00002c24  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN14SoftwareSerialD1Ev 00000012  00000000  00000000  00002ca2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN14SoftwareSerialD2Ev 00000012  00000000  00000000  00002cb4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN14SoftwareSerial4readEv 00000042  00000000  00000000  00002cc6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN14SoftwareSerial9availableEv 00000034  00000000  00000000  00002d08  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN14SoftwareSerial5writeEh 00000164  00000000  00000000  00002d3c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN14SoftwareSerial5flushEv 00000022  00000000  00000000  00002ea0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN14SoftwareSerial4peekEv 00000038  00000000  00000000  00002ec2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN14SoftwareSerial5setRXEh 00000056  00000000  00000000  00002efa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN14SoftwareSerial5setTXEh 00000056  00000000  00000000  00002f50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN14SoftwareSerialC1Ehhb 0000005c  00000000  00000000  00002fa6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN14SoftwareSerialC2Ehhb 0000005c  00000000  00000000  00003002  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .bss._ZN14SoftwareSerial13active_objectE 00000002  00000000  00000000  0000305e  2**0
                  ALLOC
 26 .bss._ZN14SoftwareSerial15_receive_bufferE 00000040  00000000  00000000  0000305e  2**0
                  ALLOC
 27 .bss._ZN14SoftwareSerial20_receive_buffer_tailE 00000001  00000000  00000000  0000305e  2**0
                  ALLOC
 28 .bss._ZN14SoftwareSerial20_receive_buffer_headE 00000001  00000000  00000000  0000305e  2**0
                  ALLOC
 29 .rodata._ZTV14SoftwareSerial 00000010  00000000  00000000  0000305e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 30 .progmem.data 00000090  00000000  00000000  0000306e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 31 .rodata._ZTV6Stream 00000010  00000000  00000000  000030fe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN14SoftwareSerial6listenEv:

00000000 <_ZN14SoftwareSerial6listenEv>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	fc 01       	movw	r30, r24
   2:	80 91 00 00 	lds	r24, 0x0000
   6:	90 91 00 00 	lds	r25, 0x0000
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   a:	8e 17       	cp	r24, r30
   c:	9f 07       	cpc	r25, r31
   e:	01 f4       	brne	.+0      	; 0x10 <_ZN14SoftwareSerial6listenEv+0x10>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	08 95       	ret
  14:	83 8d       	ldd	r24, Z+27	; 0x1b
  16:	8e 7f       	andi	r24, 0xFE	; 254
  18:	83 8f       	std	Z+27, r24	; 0x1b
  1a:	9f b7       	in	r25, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	10 92 00 00 	sts	0x0000, r1
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	80 93 00 00 	sts	0x0000, r24
  2a:	f0 93 00 00 	sts	0x0000, r31
  2e:	e0 93 00 00 	sts	0x0000, r30
  32:	9f bf       	out	0x3f, r25	; 63
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial4recvEv:

00000000 <_ZN14SoftwareSerial4recvEv>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	73 8d       	ldd	r23, Z+27	; 0x1b
   c:	76 95       	lsr	r23
   e:	71 70       	andi	r23, 0x01	; 1
  10:	a6 85       	ldd	r26, Z+14	; 0x0e
  12:	b7 85       	ldd	r27, Z+15	; 0x0f
  14:	95 85       	ldd	r25, Z+13	; 0x0d
  16:	77 23       	and	r23, r23
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN14SoftwareSerial4recvEv+0x1a>
  1a:	8c 91       	ld	r24, X
  1c:	89 23       	and	r24, r25
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN14SoftwareSerial4recvEv+0x20>
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN14SoftwareSerial4recvEv+0x22>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN14SoftwareSerial4recvEv+0x24>
  24:	8c 91       	ld	r24, X
  26:	89 23       	and	r24, r25
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN14SoftwareSerial4recvEv+0x2a>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN14SoftwareSerial4recvEv+0x2c>
  2c:	83 89       	ldd	r24, Z+19	; 0x13
  2e:	94 89       	ldd	r25, Z+20	; 0x14
  30:	20 e0       	ldi	r18, 0x00	; 0
  32:	01 97       	sbiw	r24, 0x01	; 1
  34:	2f ef       	ldi	r18, 0xFF	; 255
  36:	8f 3f       	cpi	r24, 0xFF	; 255
  38:	92 07       	cpc	r25, r18
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN14SoftwareSerial4recvEv+0x3c>
  3c:	c5 89       	ldd	r28, Z+21	; 0x15
  3e:	d6 89       	ldd	r29, Z+22	; 0x16
  40:	a6 85       	ldd	r26, Z+14	; 0x0e
  42:	b7 85       	ldd	r27, Z+15	; 0x0f
{
  setTX(transmitPin);
  44:	15 85       	ldd	r17, Z+13	; 0x0d
  46:	60 e0       	ldi	r22, 0x00	; 0
  48:	31 e0       	ldi	r19, 0x01	; 1
  4a:	40 e0       	ldi	r20, 0x00	; 0
  setRX(receivePin);
  4c:	50 e0       	ldi	r21, 0x00	; 0
  4e:	00 e0       	ldi	r16, 0x00	; 0
  50:	ce 01       	movw	r24, r28
  52:	20 2f       	mov	r18, r16
}
  54:	01 97       	sbiw	r24, 0x01	; 1
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	8f 3f       	cpi	r24, 0xFF	; 255
  5a:	92 07       	cpc	r25, r18
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN14SoftwareSerial4recvEv+0x5e>
  5e:	8c 91       	ld	r24, X
  60:	81 23       	and	r24, r17
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN14SoftwareSerial4recvEv+0x64>
  64:	63 2b       	or	r22, r19
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN14SoftwareSerial4recvEv+0x68>
  68:	83 2f       	mov	r24, r19
  6a:	80 95       	com	r24
  6c:	68 23       	and	r22, r24
  6e:	33 0f       	add	r19, r19
  70:	4f 5f       	subi	r20, 0xFF	; 255
  72:	5f 4f       	sbci	r21, 0xFF	; 255
  74:	48 30       	cpi	r20, 0x08	; 8
  76:	51 05       	cpc	r21, r1
  78:	01 f4       	brne	.+0      	; 0x7a <_ZN14SoftwareSerial4recvEv+0x7a>
  7a:	87 89       	ldd	r24, Z+23	; 0x17
  7c:	90 8d       	ldd	r25, Z+24	; 0x18
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	8f 3f       	cpi	r24, 0xFF	; 255
  86:	92 07       	cpc	r25, r18
  88:	01 f4       	brne	.+0      	; 0x8a <_ZN14SoftwareSerial4recvEv+0x8a>
  8a:	71 11       	cpse	r23, r1
  8c:	60 95       	com	r22
  8e:	80 91 00 00 	lds	r24, 0x0000
  92:	20 91 00 00 	lds	r18, 0x0000
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	8f 73       	andi	r24, 0x3F	; 63
  9c:	90 70       	andi	r25, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	82 17       	cp	r24, r18
  a2:	93 07       	cpc	r25, r19
  a4:	01 f0       	breq	.+0      	; 0xa6 <_ZN14SoftwareSerial4recvEv+0xa6>
  a6:	e0 91 00 00 	lds	r30, 0x0000
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	e0 50       	subi	r30, 0x00	; 0
  ae:	f0 40       	sbci	r31, 0x00	; 0
  b0:	60 83       	st	Z, r22
  b2:	80 91 00 00 	lds	r24, 0x0000
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	8f 73       	andi	r24, 0x3F	; 63
  bc:	90 70       	andi	r25, 0x00	; 0
  be:	80 93 00 00 	sts	0x0000, r24
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN14SoftwareSerial4recvEv+0xc4>
  c4:	83 8d       	ldd	r24, Z+27	; 0x1b
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	83 8f       	std	Z+27, r24	; 0x1b
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial12tx_pin_writeEh:

00000000 <_ZN14SoftwareSerial12tx_pin_writeEh>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	fc 01       	movw	r30, r24
   2:	a1 89       	ldd	r26, Z+17	; 0x11
   4:	b2 89       	ldd	r27, Z+18	; 0x12
   6:	90 89       	ldd	r25, Z+16	; 0x10
   8:	66 23       	and	r22, r22
   a:	01 f4       	brne	.+0      	; 0xc <_ZN14SoftwareSerial12tx_pin_writeEh+0xc>
   c:	8c 91       	ld	r24, X
   e:	90 95       	com	r25
  10:	98 23       	and	r25, r24
  12:	9c 93       	st	X, r25
  14:	08 95       	ret
  16:	8c 91       	ld	r24, X
  18:	89 2b       	or	r24, r25
  1a:	8c 93       	st	X, r24
  1c:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial11rx_pin_readEv:

00000000 <_ZN14SoftwareSerial11rx_pin_readEv>:
   0:	dc 01       	movw	r26, r24
   2:	1e 96       	adiw	r26, 0x0e	; 14
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1f 97       	sbiw	r26, 0x0f	; 15
   a:	80 81       	ld	r24, Z
   c:	1d 96       	adiw	r26, 0x0d	; 13
   e:	9c 91       	ld	r25, X
  10:	89 23       	and	r24, r25
  12:	08 95       	ret

Disassembly of section .text.__vector_9:

00000000 <__vector_9>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_9+0x32>
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_9>
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
{
  setTX(transmitPin);
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  setRX(receivePin);
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
}
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_10:

00000000 <__vector_10>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_10+0x32>
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_10>
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
{
  setTX(transmitPin);
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  setRX(receivePin);
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
}
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_11:

00000000 <__vector_11>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_11+0x32>
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_11>
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
{
  setTX(transmitPin);
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  setRX(receivePin);
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
}
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text._ZN14SoftwareSerial5beginEl:

00000000 <_ZN14SoftwareSerial5beginEl>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  12:	7a 01       	movw	r14, r20
  14:	8b 01       	movw	r16, r22
  16:	1a 8e       	std	Y+26, r1	; 0x1a
  18:	19 8e       	std	Y+25, r1	; 0x19
  1a:	18 8e       	std	Y+24, r1	; 0x18
  1c:	1f 8a       	std	Y+23, r1	; 0x17
  1e:	1e 8a       	std	Y+22, r1	; 0x16
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	1d 8a       	std	Y+21, r1	; 0x15
  22:	1c 8a       	std	Y+20, r1	; 0x14
  24:	1b 8a       	std	Y+19, r1	; 0x13
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	69 01       	movw	r12, r18
  2c:	cc 0c       	add	r12, r12
  2e:	dd 1c       	adc	r13, r13
  30:	c2 0e       	add	r12, r18
  32:	d3 1e       	adc	r13, r19
  34:	b6 01       	movw	r22, r12
  36:	66 0f       	add	r22, r22
  38:	77 1f       	adc	r23, r23
  3a:	66 0f       	add	r22, r22
  3c:	77 1f       	adc	r23, r23
  3e:	ab 01       	movw	r20, r22
  40:	40 50       	subi	r20, 0x00	; 0
  42:	50 40       	sbci	r21, 0x00	; 0
{
  setTX(transmitPin);
  44:	fa 01       	movw	r30, r20
  46:	85 91       	lpm	r24, Z+
  48:	95 91       	lpm	r25, Z+
  4a:	a5 91       	lpm	r26, Z+
  setRX(receivePin);
  4c:	b4 91       	lpm	r27, Z+
  4e:	8e 15       	cp	r24, r14
  50:	9f 05       	cpc	r25, r15
  52:	a0 07       	cpc	r26, r16
}
  54:	b1 07       	cpc	r27, r17
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN14SoftwareSerial5beginEl+0x58>
  58:	fb 01       	movw	r30, r22
  5a:	e0 50       	subi	r30, 0x00	; 0
  5c:	f0 40       	sbci	r31, 0x00	; 0
  5e:	85 91       	lpm	r24, Z+
  60:	94 91       	lpm	r25, Z+
  62:	9c 8b       	std	Y+20, r25	; 0x14
  64:	8b 8b       	std	Y+19, r24	; 0x13
  66:	fb 01       	movw	r30, r22
  68:	e0 50       	subi	r30, 0x00	; 0
  6a:	f0 40       	sbci	r31, 0x00	; 0
  6c:	85 91       	lpm	r24, Z+
  6e:	94 91       	lpm	r25, Z+
  70:	9e 8b       	std	Y+22, r25	; 0x16
  72:	8d 8b       	std	Y+21, r24	; 0x15
  74:	fb 01       	movw	r30, r22
  76:	e0 50       	subi	r30, 0x00	; 0
  78:	f0 40       	sbci	r31, 0x00	; 0
  7a:	85 91       	lpm	r24, Z+
  7c:	94 91       	lpm	r25, Z+
  7e:	98 8f       	std	Y+24, r25	; 0x18
  80:	8f 8b       	std	Y+23, r24	; 0x17
  82:	fb 01       	movw	r30, r22
  84:	e0 50       	subi	r30, 0x00	; 0
  86:	f0 40       	sbci	r31, 0x00	; 0
  88:	85 91       	lpm	r24, Z+
  8a:	94 91       	lpm	r25, Z+
  8c:	9a 8f       	std	Y+26, r25	; 0x1a
  8e:	89 8f       	std	Y+25, r24	; 0x19
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZN14SoftwareSerial5beginEl+0x92>
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	2c 30       	cpi	r18, 0x0C	; 12
  98:	31 05       	cpc	r19, r1
  9a:	01 f0       	breq	.+0      	; 0x9c <_ZN14SoftwareSerial5beginEl+0x9c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZN14SoftwareSerial5beginEl+0x9e>
  9e:	8f 89       	ldd	r24, Y+23	; 0x17
  a0:	98 8d       	ldd	r25, Y+24	; 0x18
  a2:	89 2b       	or	r24, r25
  a4:	01 f4       	brne	.+0      	; 0xa6 <_ZN14SoftwareSerial5beginEl+0xa6>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN14SoftwareSerial5beginEl+0xa8>
  a8:	9c 85       	ldd	r25, Y+12	; 0x0c
  aa:	29 2f       	mov	r18, r25
  ac:	2a 50       	subi	r18, 0x0A	; 10
  ae:	24 30       	cpi	r18, 0x04	; 4
  b0:	00 f0       	brcs	.+0      	; 0xb2 <_ZN14SoftwareSerial5beginEl+0xb2>
  b2:	89 2f       	mov	r24, r25
  b4:	82 53       	subi	r24, 0x32	; 50
  b6:	84 30       	cpi	r24, 0x04	; 4
  b8:	00 f0       	brcs	.+0      	; 0xba <_ZN14SoftwareSerial5beginEl+0xba>
  ba:	8c 50       	subi	r24, 0x0C	; 12
  bc:	88 30       	cpi	r24, 0x08	; 8
  be:	00 f0       	brcs	.+0      	; 0xc0 <_ZN14SoftwareSerial5beginEl+0xc0>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_ZN14SoftwareSerial5beginEl+0xc2>
  c2:	30 91 68 00 	lds	r19, 0x0068
  c6:	24 30       	cpi	r18, 0x04	; 4
  c8:	00 f0       	brcs	.+0      	; 0xca <_ZN14SoftwareSerial5beginEl+0xca>
  ca:	89 2f       	mov	r24, r25
  cc:	82 53       	subi	r24, 0x32	; 50
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	00 f0       	brcs	.+0      	; 0xd2 <_ZN14SoftwareSerial5beginEl+0xd2>
  d2:	9e 53       	subi	r25, 0x3E	; 62
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	00 f4       	brcc	.+0      	; 0xd8 <_ZN14SoftwareSerial5beginEl+0xd8>
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	00 c0       	rjmp	.+0      	; 0xdc <_ZN14SoftwareSerial5beginEl+0xdc>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	83 2b       	or	r24, r19
  e0:	80 93 68 00 	sts	0x0068, r24
  e4:	2c 85       	ldd	r18, Y+12	; 0x0c
  e6:	92 2f       	mov	r25, r18
  e8:	9a 50       	subi	r25, 0x0A	; 10
  ea:	94 30       	cpi	r25, 0x04	; 4
  ec:	00 f0       	brcs	.+0      	; 0xee <_ZN14SoftwareSerial5beginEl+0xee>
  ee:	82 2f       	mov	r24, r18
  f0:	82 53       	subi	r24, 0x32	; 50
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	00 f0       	brcs	.+0      	; 0xf6 <_ZN14SoftwareSerial5beginEl+0xf6>
  f6:	8c 50       	subi	r24, 0x0C	; 12
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	00 f4       	brcc	.+0      	; 0xfc <_ZN14SoftwareSerial5beginEl+0xfc>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_ZN14SoftwareSerial5beginEl+0xfe>
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	88 30       	cpi	r24, 0x08	; 8
 104:	00 f0       	brcs	.+0      	; 0x106 <_ZN14SoftwareSerial5beginEl+0x106>
 106:	e0 e0       	ldi	r30, 0x00	; 0
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_ZN14SoftwareSerial5beginEl+0x10c>
 10c:	ed e6       	ldi	r30, 0x6D	; 109
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZN14SoftwareSerial5beginEl+0x112>
 112:	eb e6       	ldi	r30, 0x6B	; 107
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	ab e6       	ldi	r26, 0x6B	; 107
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	40 81       	ld	r20, Z
 11c:	94 30       	cpi	r25, 0x04	; 4
 11e:	00 f4       	brcc	.+0      	; 0x120 <_ZN14SoftwareSerial5beginEl+0x120>
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	26 50       	subi	r18, 0x06	; 6
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	00 c0       	rjmp	.+0      	; 0x128 <_ZN14SoftwareSerial5beginEl+0x128>
 128:	22 33       	cpi	r18, 0x32	; 50
 12a:	01 f4       	brne	.+0      	; 0x12c <_ZN14SoftwareSerial5beginEl+0x12c>
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_ZN14SoftwareSerial5beginEl+0x130>
 130:	23 33       	cpi	r18, 0x33	; 51
 132:	01 f4       	brne	.+0      	; 0x134 <_ZN14SoftwareSerial5beginEl+0x134>
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	00 c0       	rjmp	.+0      	; 0x138 <_ZN14SoftwareSerial5beginEl+0x138>
 138:	24 33       	cpi	r18, 0x34	; 52
 13a:	01 f4       	brne	.+0      	; 0x13c <_ZN14SoftwareSerial5beginEl+0x13c>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_ZN14SoftwareSerial5beginEl+0x140>
 140:	25 33       	cpi	r18, 0x35	; 53
 142:	01 f0       	breq	.+0      	; 0x144 <_ZN14SoftwareSerial5beginEl+0x144>
 144:	82 2f       	mov	r24, r18
 146:	8e 53       	subi	r24, 0x3E	; 62
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	00 f4       	brcc	.+0      	; 0x14c <_ZN14SoftwareSerial5beginEl+0x14c>
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	2e 53       	subi	r18, 0x3E	; 62
 150:	30 40       	sbci	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	00 c0       	rjmp	.+0      	; 0x158 <_ZN14SoftwareSerial5beginEl+0x158>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	02 f4       	brpl	.+0      	; 0x160 <_ZN14SoftwareSerial5beginEl+0x160>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_ZN14SoftwareSerial5beginEl+0x162>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	84 2b       	or	r24, r20
 166:	8c 93       	st	X, r24
 168:	89 8d       	ldd	r24, Y+25	; 0x19
 16a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	8f 3f       	cpi	r24, 0xFF	; 255
 174:	92 07       	cpc	r25, r18
 176:	01 f4       	brne	.+0      	; 0x178 <_ZN14SoftwareSerial5beginEl+0x178>
 178:	80 91 00 00 	lds	r24, 0x0000
 17c:	90 91 00 00 	lds	r25, 0x0000
 180:	8c 17       	cp	r24, r28
 182:	9d 07       	cpc	r25, r29
 184:	01 f0       	breq	.+0      	; 0x186 <_ZN14SoftwareSerial5beginEl+0x186>
 186:	8b 8d       	ldd	r24, Y+27	; 0x1b
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	8b 8f       	std	Y+27, r24	; 0x1b
 18c:	9f b7       	in	r25, 0x3f	; 63
 18e:	f8 94       	cli
 190:	10 92 00 00 	sts	0x0000, r1
 194:	80 91 00 00 	lds	r24, 0x0000
 198:	80 93 00 00 	sts	0x0000, r24
 19c:	d0 93 00 00 	sts	0x0000, r29
 1a0:	c0 93 00 00 	sts	0x0000, r28
 1a4:	9f bf       	out	0x3f, r25	; 63
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <_ZN14SoftwareSerial5beginEl+0x1a8>
 1a8:	ad e6       	ldi	r26, 0x6D	; 109
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_ZN14SoftwareSerial5beginEl+0x1ae>
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial3endEv:

00000000 <_ZN14SoftwareSerial3endEv>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	fc 01       	movw	r30, r24
   2:	24 85       	ldd	r18, Z+12	; 0x0c
   4:	92 2f       	mov	r25, r18
   6:	9a 50       	subi	r25, 0x0A	; 10
   8:	94 30       	cpi	r25, 0x04	; 4
   a:	00 f0       	brcs	.+0      	; 0xc <_ZN14SoftwareSerial3endEv+0xc>
   c:	82 2f       	mov	r24, r18
   e:	82 53       	subi	r24, 0x32	; 50
  10:	84 30       	cpi	r24, 0x04	; 4
  12:	00 f0       	brcs	.+0      	; 0x14 <_ZN14SoftwareSerial3endEv+0x14>
  14:	8c 50       	subi	r24, 0x0C	; 12
  16:	88 30       	cpi	r24, 0x08	; 8
  18:	00 f4       	brcc	.+0      	; 0x1a <_ZN14SoftwareSerial3endEv+0x1a>
  1a:	ed e6       	ldi	r30, 0x6D	; 109
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	ad e6       	ldi	r26, 0x6D	; 109
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN14SoftwareSerial3endEv+0x24>
  24:	eb e6       	ldi	r30, 0x6B	; 107
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	ab e6       	ldi	r26, 0x6B	; 107
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	40 81       	ld	r20, Z
  2e:	94 30       	cpi	r25, 0x04	; 4
  30:	00 f4       	brcc	.+0      	; 0x32 <_ZN14SoftwareSerial3endEv+0x32>
  32:	30 e0       	ldi	r19, 0x00	; 0
  34:	26 50       	subi	r18, 0x06	; 6
  36:	30 40       	sbci	r19, 0x00	; 0
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN14SoftwareSerial3endEv+0x3a>
  3a:	22 33       	cpi	r18, 0x32	; 50
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN14SoftwareSerial3endEv+0x3e>
  3e:	87 ef       	ldi	r24, 0xF7	; 247
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN14SoftwareSerial3endEv+0x42>
  42:	23 33       	cpi	r18, 0x33	; 51
{
  setTX(transmitPin);
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN14SoftwareSerial3endEv+0x46>
  46:	8b ef       	ldi	r24, 0xFB	; 251
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN14SoftwareSerial3endEv+0x4a>
  4a:	24 33       	cpi	r18, 0x34	; 52
  setRX(receivePin);
  4c:	01 f4       	brne	.+0      	; 0x4e <_ZN14SoftwareSerial3endEv+0x4e>
  4e:	8d ef       	ldi	r24, 0xFD	; 253
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN14SoftwareSerial3endEv+0x52>
  52:	25 33       	cpi	r18, 0x35	; 53
}
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN14SoftwareSerial3endEv+0x56>
  56:	82 2f       	mov	r24, r18
  58:	8e 53       	subi	r24, 0x3E	; 62
  5a:	88 30       	cpi	r24, 0x08	; 8
  5c:	00 f4       	brcc	.+0      	; 0x5e <_ZN14SoftwareSerial3endEv+0x5e>
  5e:	30 e0       	ldi	r19, 0x00	; 0
  60:	2e 53       	subi	r18, 0x3E	; 62
  62:	30 40       	sbci	r19, 0x00	; 0
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN14SoftwareSerial3endEv+0x6a>
  6a:	88 0f       	add	r24, r24
  6c:	99 1f       	adc	r25, r25
  6e:	2a 95       	dec	r18
  70:	02 f4       	brpl	.+0      	; 0x72 <_ZN14SoftwareSerial3endEv+0x72>
  72:	80 95       	com	r24
  74:	00 c0       	rjmp	.+0      	; 0x76 <_ZN14SoftwareSerial3endEv+0x76>
  76:	8e ef       	ldi	r24, 0xFE	; 254
  78:	84 23       	and	r24, r20
  7a:	8c 93       	st	X, r24
  7c:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerialD1Ev:

00000000 <_ZN14SoftwareSerialD1Ev>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialD1Ev>
  10:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerialD2Ev:

00000000 <_ZN14SoftwareSerialD2Ev>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialD2Ev>
  10:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial4readEv:

00000000 <_ZN14SoftwareSerial4readEv>:
   0:	20 91 00 00 	lds	r18, 0x0000
   4:	30 91 00 00 	lds	r19, 0x0000
   8:	28 17       	cp	r18, r24
   a:	39 07       	cpc	r19, r25
   c:	01 f4       	brne	.+0      	; 0xe <_ZN14SoftwareSerial4readEv+0xe>
   e:	90 91 00 00 	lds	r25, 0x0000
  12:	80 91 00 00 	lds	r24, 0x0000
  16:	98 17       	cp	r25, r24
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN14SoftwareSerial4readEv+0x1a>
  1a:	2f ef       	ldi	r18, 0xFF	; 255
  1c:	3f ef       	ldi	r19, 0xFF	; 255
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN14SoftwareSerial4readEv+0x20>
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	e0 91 00 00 	lds	r30, 0x0000
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	20 81       	ld	r18, Z
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	8f 73       	andi	r24, 0x3F	; 63
  36:	90 70       	andi	r25, 0x00	; 0
  38:	80 93 00 00 	sts	0x0000, r24
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	c9 01       	movw	r24, r18
  40:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial9availableEv:

00000000 <_ZN14SoftwareSerial9availableEv>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	20 91 00 00 	lds	r18, 0x0000
   4:	30 91 00 00 	lds	r19, 0x0000
   8:	28 17       	cp	r18, r24
   a:	39 07       	cpc	r19, r25
   c:	01 f0       	breq	.+0      	; 0xe <_ZN14SoftwareSerial9availableEv+0xe>
   e:	20 e0       	ldi	r18, 0x00	; 0
  10:	30 e0       	ldi	r19, 0x00	; 0
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN14SoftwareSerial9availableEv+0x14>
  14:	80 91 00 00 	lds	r24, 0x0000
  18:	20 91 00 00 	lds	r18, 0x0000
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	80 5c       	subi	r24, 0xC0	; 192
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	9f 4f       	sbci	r25, 0xFF	; 255
  22:	82 1b       	sub	r24, r18
  24:	91 09       	sbc	r25, r1
  26:	60 e4       	ldi	r22, 0x40	; 64
  28:	70 e0       	ldi	r23, 0x00	; 0
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial9availableEv>
  2e:	9c 01       	movw	r18, r24
  30:	c9 01       	movw	r24, r18
  32:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial5writeEh:

00000000 <_ZN14SoftwareSerial5writeEh>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	dc 01       	movw	r26, r24
   6:	59 96       	adiw	r26, 0x19	; 25
   8:	8d 91       	ld	r24, X+
   a:	9c 91       	ld	r25, X
   c:	5a 97       	sbiw	r26, 0x1a	; 26
   e:	89 2b       	or	r24, r25
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN14SoftwareSerial5writeEh+0x12>
  12:	81 e0       	ldi	r24, 0x01	; 1
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	13 96       	adiw	r26, 0x03	; 3
  18:	9c 93       	st	X, r25
  1a:	8e 93       	st	-X, r24
  1c:	12 97       	sbiw	r26, 0x02	; 2
  1e:	20 e0       	ldi	r18, 0x00	; 0
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	30 e0       	ldi	r19, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN14SoftwareSerial5writeEh+0x24>
  24:	0f b7       	in	r16, 0x3f	; 63
  26:	f8 94       	cli
  28:	5b 96       	adiw	r26, 0x1b	; 27
  2a:	8c 91       	ld	r24, X
  2c:	5b 97       	sbiw	r26, 0x1b	; 27
  2e:	51 96       	adiw	r26, 0x11	; 17
  30:	ed 91       	ld	r30, X+
  32:	fc 91       	ld	r31, X
  34:	52 97       	sbiw	r26, 0x12	; 18
  36:	50 96       	adiw	r26, 0x10	; 16
  38:	2c 91       	ld	r18, X
  3a:	50 97       	sbiw	r26, 0x10	; 16
  3c:	81 ff       	sbrs	r24, 1
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN14SoftwareSerial5writeEh+0x40>
  40:	80 81       	ld	r24, Z
  42:	82 2b       	or	r24, r18
{
  setTX(transmitPin);
  44:	80 83       	st	Z, r24
  46:	59 96       	adiw	r26, 0x19	; 25
  48:	8d 91       	ld	r24, X+
  4a:	9c 91       	ld	r25, X
  setRX(receivePin);
  4c:	5a 97       	sbiw	r26, 0x1a	; 26
  4e:	05 96       	adiw	r24, 0x05	; 5
  50:	20 e0       	ldi	r18, 0x00	; 0
  52:	01 97       	sbiw	r24, 0x01	; 1
}
  54:	2f ef       	ldi	r18, 0xFF	; 255
  56:	8f 3f       	cpi	r24, 0xFF	; 255
  58:	92 07       	cpc	r25, r18
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN14SoftwareSerial5writeEh+0x5c>
  5c:	5b 96       	adiw	r26, 0x1b	; 27
  5e:	8c 91       	ld	r24, X
  60:	5b 97       	sbiw	r26, 0x1b	; 27
  62:	81 ff       	sbrs	r24, 1
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN14SoftwareSerial5writeEh+0x66>
  66:	31 e0       	ldi	r19, 0x01	; 1
  68:	40 e0       	ldi	r20, 0x00	; 0
  6a:	50 e0       	ldi	r21, 0x00	; 0
  6c:	70 e0       	ldi	r23, 0x00	; 0
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	83 2f       	mov	r24, r19
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	86 23       	and	r24, r22
  76:	97 23       	and	r25, r23
  78:	51 96       	adiw	r26, 0x11	; 17
  7a:	ed 91       	ld	r30, X+
  7c:	fc 91       	ld	r31, X
  7e:	52 97       	sbiw	r26, 0x12	; 18
  80:	50 96       	adiw	r26, 0x10	; 16
  82:	2c 91       	ld	r18, X
  84:	50 97       	sbiw	r26, 0x10	; 16
  86:	89 2b       	or	r24, r25
  88:	01 f0       	breq	.+0      	; 0x8a <_ZN14SoftwareSerial5writeEh+0x8a>
  8a:	80 81       	ld	r24, Z
  8c:	20 95       	com	r18
  8e:	28 23       	and	r18, r24
  90:	20 83       	st	Z, r18
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN14SoftwareSerial5writeEh+0x94>
  94:	80 81       	ld	r24, Z
  96:	82 2b       	or	r24, r18
  98:	80 83       	st	Z, r24
  9a:	59 96       	adiw	r26, 0x19	; 25
  9c:	8d 91       	ld	r24, X+
  9e:	9c 91       	ld	r25, X
  a0:	5a 97       	sbiw	r26, 0x1a	; 26
  a2:	21 2f       	mov	r18, r17
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	8f 3f       	cpi	r24, 0xFF	; 255
  aa:	92 07       	cpc	r25, r18
  ac:	01 f4       	brne	.+0      	; 0xae <_ZN14SoftwareSerial5writeEh+0xae>
  ae:	33 0f       	add	r19, r19
  b0:	4f 5f       	subi	r20, 0xFF	; 255
  b2:	5f 4f       	sbci	r21, 0xFF	; 255
  b4:	48 30       	cpi	r20, 0x08	; 8
  b6:	51 05       	cpc	r21, r1
  b8:	01 f4       	brne	.+0      	; 0xba <_ZN14SoftwareSerial5writeEh+0xba>
  ba:	51 96       	adiw	r26, 0x11	; 17
  bc:	ed 91       	ld	r30, X+
  be:	fc 91       	ld	r31, X
  c0:	52 97       	sbiw	r26, 0x12	; 18
  c2:	90 81       	ld	r25, Z
  c4:	50 96       	adiw	r26, 0x10	; 16
  c6:	8c 91       	ld	r24, X
  c8:	50 97       	sbiw	r26, 0x10	; 16
  ca:	80 95       	com	r24
  cc:	89 23       	and	r24, r25
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN14SoftwareSerial5writeEh+0xd0>
  d0:	31 e0       	ldi	r19, 0x01	; 1
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	83 2f       	mov	r24, r19
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	86 23       	and	r24, r22
  e0:	97 23       	and	r25, r23
  e2:	51 96       	adiw	r26, 0x11	; 17
  e4:	ed 91       	ld	r30, X+
  e6:	fc 91       	ld	r31, X
  e8:	52 97       	sbiw	r26, 0x12	; 18
  ea:	50 96       	adiw	r26, 0x10	; 16
  ec:	2c 91       	ld	r18, X
  ee:	50 97       	sbiw	r26, 0x10	; 16
  f0:	89 2b       	or	r24, r25
  f2:	01 f0       	breq	.+0      	; 0xf4 <_ZN14SoftwareSerial5writeEh+0xf4>
  f4:	80 81       	ld	r24, Z
  f6:	82 2b       	or	r24, r18
  f8:	80 83       	st	Z, r24
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_ZN14SoftwareSerial5writeEh+0xfc>
  fc:	80 81       	ld	r24, Z
  fe:	20 95       	com	r18
 100:	28 23       	and	r18, r24
 102:	20 83       	st	Z, r18
 104:	59 96       	adiw	r26, 0x19	; 25
 106:	8d 91       	ld	r24, X+
 108:	9c 91       	ld	r25, X
 10a:	5a 97       	sbiw	r26, 0x1a	; 26
 10c:	21 2f       	mov	r18, r17
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	8f 3f       	cpi	r24, 0xFF	; 255
 114:	92 07       	cpc	r25, r18
 116:	01 f4       	brne	.+0      	; 0x118 <_ZN14SoftwareSerial5writeEh+0x118>
 118:	33 0f       	add	r19, r19
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	48 30       	cpi	r20, 0x08	; 8
 120:	51 05       	cpc	r21, r1
 122:	01 f4       	brne	.+0      	; 0x124 <_ZN14SoftwareSerial5writeEh+0x124>
 124:	51 96       	adiw	r26, 0x11	; 17
 126:	ed 91       	ld	r30, X+
 128:	fc 91       	ld	r31, X
 12a:	52 97       	sbiw	r26, 0x12	; 18
 12c:	80 81       	ld	r24, Z
 12e:	50 96       	adiw	r26, 0x10	; 16
 130:	9c 91       	ld	r25, X
 132:	50 97       	sbiw	r26, 0x10	; 16
 134:	89 2b       	or	r24, r25
 136:	80 83       	st	Z, r24
 138:	0f bf       	out	0x3f, r16	; 63
 13a:	59 96       	adiw	r26, 0x19	; 25
 13c:	8d 91       	ld	r24, X+
 13e:	9c 91       	ld	r25, X
 140:	5a 97       	sbiw	r26, 0x1a	; 26
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	8f 3f       	cpi	r24, 0xFF	; 255
 14a:	92 07       	cpc	r25, r18
 14c:	01 f4       	brne	.+0      	; 0x14e <_ZN14SoftwareSerial5writeEh+0x14e>
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	c9 01       	movw	r24, r18
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret
 15a:	80 81       	ld	r24, Z
 15c:	20 95       	com	r18
 15e:	28 23       	and	r18, r24
 160:	20 83       	st	Z, r18
 162:	00 c0       	rjmp	.+0      	; 0x164 <__SREG__+0x125>

Disassembly of section .text._ZN14SoftwareSerial5flushEv:

00000000 <_ZN14SoftwareSerial5flushEv>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	20 91 00 00 	lds	r18, 0x0000
   4:	30 91 00 00 	lds	r19, 0x0000
   8:	28 17       	cp	r18, r24
   a:	39 07       	cpc	r19, r25
   c:	01 f4       	brne	.+0      	; 0xe <_ZN14SoftwareSerial5flushEv+0xe>
   e:	9f b7       	in	r25, 0x3f	; 63
  10:	f8 94       	cli
  12:	10 92 00 00 	sts	0x0000, r1
  16:	80 91 00 00 	lds	r24, 0x0000
  1a:	80 93 00 00 	sts	0x0000, r24
  1e:	9f bf       	out	0x3f, r25	; 63
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial4peekEv:

00000000 <_ZN14SoftwareSerial4peekEv>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	20 91 00 00 	lds	r18, 0x0000
   4:	30 91 00 00 	lds	r19, 0x0000
   8:	28 17       	cp	r18, r24
   a:	39 07       	cpc	r19, r25
   c:	01 f4       	brne	.+0      	; 0xe <_ZN14SoftwareSerial4peekEv+0xe>
   e:	90 91 00 00 	lds	r25, 0x0000
  12:	80 91 00 00 	lds	r24, 0x0000
  16:	98 17       	cp	r25, r24
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN14SoftwareSerial4peekEv+0x1a>
  1a:	2f ef       	ldi	r18, 0xFF	; 255
  1c:	3f ef       	ldi	r19, 0xFF	; 255
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN14SoftwareSerial4peekEv+0x20>
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	e0 91 00 00 	lds	r30, 0x0000
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	80 81       	ld	r24, Z
  2c:	28 2f       	mov	r18, r24
  2e:	33 27       	eor	r19, r19
  30:	27 fd       	sbrc	r18, 7
  32:	30 95       	com	r19
  34:	c9 01       	movw	r24, r18
  36:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial5setRXEh:

00000000 <_ZN14SoftwareSerial5setRXEh>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	16 2f       	mov	r17, r22
   a:	86 2f       	mov	r24, r22
   c:	60 e0       	ldi	r22, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial5setRXEh>
  12:	8b 8d       	ldd	r24, Y+27	; 0x1b
  14:	81 fd       	sbrc	r24, 1
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN14SoftwareSerial5setRXEh+0x18>
  18:	81 2f       	mov	r24, r17
  1a:	61 e0       	ldi	r22, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial5setRXEh>
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	1c 87       	std	Y+12, r17	; 0x0c
  22:	21 2f       	mov	r18, r17
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	c9 01       	movw	r24, r18
  28:	80 50       	subi	r24, 0x00	; 0
  2a:	90 40       	sbci	r25, 0x00	; 0
  2c:	fc 01       	movw	r30, r24
  2e:	84 91       	lpm	r24, Z+
  30:	8d 87       	std	Y+13, r24	; 0x0d
  32:	20 50       	subi	r18, 0x00	; 0
  34:	30 40       	sbci	r19, 0x00	; 0
  36:	f9 01       	movw	r30, r18
  38:	64 91       	lpm	r22, Z+
  3a:	e6 2f       	mov	r30, r22
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	ee 0f       	add	r30, r30
  40:	ff 1f       	adc	r31, r31
  42:	e0 50       	subi	r30, 0x00	; 0
{
  setTX(transmitPin);
  44:	f0 40       	sbci	r31, 0x00	; 0
  46:	85 91       	lpm	r24, Z+
  48:	94 91       	lpm	r25, Z+
  4a:	9f 87       	std	Y+15, r25	; 0x0f
  setRX(receivePin);
  4c:	8e 87       	std	Y+14, r24	; 0x0e
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
}
  54:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial5setTXEh:

00000000 <_ZN14SoftwareSerial5setTXEh>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	8c 01       	movw	r16, r24
   8:	f6 2e       	mov	r15, r22
   a:	86 2f       	mov	r24, r22
   c:	61 e0       	ldi	r22, 0x01	; 1
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial5setTXEh>
  12:	8f 2d       	mov	r24, r15
  14:	61 e0       	ldi	r22, 0x01	; 1
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial5setTXEh>
  1a:	8f 2d       	mov	r24, r15
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	fc 01       	movw	r30, r24
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	e0 50       	subi	r30, 0x00	; 0
  22:	f0 40       	sbci	r31, 0x00	; 0
  24:	e4 91       	lpm	r30, Z+
  26:	d8 01       	movw	r26, r16
  28:	50 96       	adiw	r26, 0x10	; 16
  2a:	ec 93       	st	X, r30
  2c:	50 97       	sbiw	r26, 0x10	; 16
  2e:	80 50       	subi	r24, 0x00	; 0
  30:	90 40       	sbci	r25, 0x00	; 0
  32:	fc 01       	movw	r30, r24
  34:	64 91       	lpm	r22, Z+
  36:	e6 2f       	mov	r30, r22
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	ee 0f       	add	r30, r30
  3c:	ff 1f       	adc	r31, r31
  3e:	e0 50       	subi	r30, 0x00	; 0
  40:	f0 40       	sbci	r31, 0x00	; 0
  42:	85 91       	lpm	r24, Z+
{
  setTX(transmitPin);
  44:	94 91       	lpm	r25, Z+
  46:	52 96       	adiw	r26, 0x12	; 18
  48:	9c 93       	st	X, r25
  4a:	8e 93       	st	-X, r24
  setRX(receivePin);
  4c:	51 97       	sbiw	r26, 0x11	; 17
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	ff 90       	pop	r15
}
  54:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerialC1Ehhb:

00000000 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	8c 01       	movw	r16, r24
   8:	f6 2e       	mov	r15, r22
   a:	fc 01       	movw	r30, r24
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	12 82       	std	Z+2, r1	; 0x02
  10:	88 ee       	ldi	r24, 0xE8	; 232
  12:	93 e0       	ldi	r25, 0x03	; 3
  14:	a0 e0       	ldi	r26, 0x00	; 0
  16:	b0 e0       	ldi	r27, 0x00	; 0
  18:	84 83       	std	Z+4, r24	; 0x04
  1a:	95 83       	std	Z+5, r25	; 0x05
  1c:	a6 83       	std	Z+6, r26	; 0x06
  1e:	b7 83       	std	Z+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	91 83       	std	Z+1, r25	; 0x01
  26:	80 83       	st	Z, r24
  28:	14 8a       	std	Z+20, r1	; 0x14
  2a:	13 8a       	std	Z+19, r1	; 0x13
  2c:	16 8a       	std	Z+22, r1	; 0x16
  2e:	15 8a       	std	Z+21, r1	; 0x15
  30:	10 8e       	std	Z+24, r1	; 0x18
  32:	17 8a       	std	Z+23, r1	; 0x17
  34:	12 8e       	std	Z+26, r1	; 0x1a
  36:	11 8e       	std	Z+25, r1	; 0x19
  38:	83 8d       	ldd	r24, Z+27	; 0x1b
  3a:	21 70       	andi	r18, 0x01	; 1
  3c:	22 0f       	add	r18, r18
  3e:	8c 7f       	andi	r24, 0xFC	; 252
  40:	82 2b       	or	r24, r18
  42:	83 8f       	std	Z+27, r24	; 0x1b
{
  setTX(transmitPin);
  44:	c8 01       	movw	r24, r16
  46:	64 2f       	mov	r22, r20
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialC1Ehhb>
  setRX(receivePin);
  4c:	c8 01       	movw	r24, r16
  4e:	6f 2d       	mov	r22, r15
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialC1Ehhb>
}
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerialC2Ehhb:

00000000 <_ZN14SoftwareSerialC2Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	8c 01       	movw	r16, r24
   8:	f6 2e       	mov	r15, r22
   a:	fc 01       	movw	r30, r24
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	12 82       	std	Z+2, r1	; 0x02
  10:	88 ee       	ldi	r24, 0xE8	; 232
  12:	93 e0       	ldi	r25, 0x03	; 3
  14:	a0 e0       	ldi	r26, 0x00	; 0
  16:	b0 e0       	ldi	r27, 0x00	; 0
  18:	84 83       	std	Z+4, r24	; 0x04
  1a:	95 83       	std	Z+5, r25	; 0x05
  1c:	a6 83       	std	Z+6, r26	; 0x06
  1e:	b7 83       	std	Z+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	91 83       	std	Z+1, r25	; 0x01
  26:	80 83       	st	Z, r24
  28:	14 8a       	std	Z+20, r1	; 0x14
  2a:	13 8a       	std	Z+19, r1	; 0x13
  2c:	16 8a       	std	Z+22, r1	; 0x16
  2e:	15 8a       	std	Z+21, r1	; 0x15
  30:	10 8e       	std	Z+24, r1	; 0x18
  32:	17 8a       	std	Z+23, r1	; 0x17
  34:	12 8e       	std	Z+26, r1	; 0x1a
  36:	11 8e       	std	Z+25, r1	; 0x19
  38:	83 8d       	ldd	r24, Z+27	; 0x1b
  3a:	21 70       	andi	r18, 0x01	; 1
  3c:	22 0f       	add	r18, r18
  3e:	8c 7f       	andi	r24, 0xFC	; 252
  40:	82 2b       	or	r24, r18
  42:	83 8f       	std	Z+27, r24	; 0x1b
{
  setTX(transmitPin);
  44:	c8 01       	movw	r24, r16
  46:	64 2f       	mov	r22, r20
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialC2Ehhb>
  setRX(receivePin);
  4c:	c8 01       	movw	r24, r16
  4e:	6f 2d       	mov	r22, r15
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialC2Ehhb>
}
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	08 95       	ret

Servo.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000ca8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000010e5  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN5ServoC2Ev 00000034  00000000  00000000  00001dc1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN5ServoC1Ev 00000034  00000000  00000000  00001df5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN5Servo6detachEv 00000060  00000000  00000000  00001e29  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Servo17writeMicrosecondsEi 0000008e  00000000  00000000  00001e89  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN5Servo16readMicrosecondsEv 0000003e  00000000  00000000  00001f17  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN5Servo8attachedEv 00000024  00000000  00000000  00001f55  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN5Servo4readEv 000000aa  00000000  00000000  00001f79  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Servo5writeEi 000000d0  00000000  00000000  00002023  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN5Servo6attachEiii 00000160  00000000  00000000  000020f3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN5Servo6attachEi 0000000e  00000000  00000000  00002253  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZL17handle_interrupts18timer16_Sequence_tPVjS1_ 00000182  00000000  00000000  00002261  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.__vector_47 0000005c  00000000  00000000  000023e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.__vector_42 0000005c  00000000  00000000  0000243f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.__vector_32 0000005c  00000000  00000000  0000249b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text.__vector_17 0000005c  00000000  00000000  000024f7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .bss.ServoCount 00000001  00000000  00000000  00002553  2**0
                  ALLOC
 21 .bss._ZL6servos 00000090  00000000  00000000  00002553  2**0
                  ALLOC
 22 .bss._ZL7Channel 00000004  00000000  00000000  00002553  2**0
                  ALLOC

Disassembly of section .text._ZN5ServoC2Ev:

00000000 <_ZN5ServoC2Ev>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	fc 01       	movw	r30, r24
   2:	80 91 00 00 	lds	r24, 0x0000
   6:	80 33       	cpi	r24, 0x30	; 48
   8:	00 f4       	brcc	.+0      	; 0xa <_ZN5ServoC2Ev+0xa>
   a:	80 83       	st	Z, r24
   c:	8f 5f       	subi	r24, 0xFF	; 255
   e:	80 93 00 00 	sts	0x0000, r24
  12:	81 50       	subi	r24, 0x01	; 1
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	fc 01       	movw	r30, r24
  18:	ee 0f       	add	r30, r30
  1a:	ff 1f       	adc	r31, r31
  1c:	e8 0f       	add	r30, r24
  1e:	f9 1f       	adc	r31, r25
  20:	e0 50       	subi	r30, 0x00	; 0
  22:	f0 40       	sbci	r31, 0x00	; 0
  24:	88 eb       	ldi	r24, 0xB8	; 184
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	9b e0       	ldi	r25, 0x0B	; 11
  28:	92 83       	std	Z+2, r25	; 0x02
  2a:	81 83       	std	Z+1, r24	; 0x01
  2c:	08 95       	ret
  2e:	8f ef       	ldi	r24, 0xFF	; 255
  30:	80 83       	st	Z, r24
  32:	08 95       	ret

Disassembly of section .text._ZN5ServoC1Ev:

00000000 <_ZN5ServoC1Ev>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	fc 01       	movw	r30, r24
   2:	80 91 00 00 	lds	r24, 0x0000
   6:	80 33       	cpi	r24, 0x30	; 48
   8:	00 f4       	brcc	.+0      	; 0xa <_ZN5ServoC1Ev+0xa>
   a:	80 83       	st	Z, r24
   c:	8f 5f       	subi	r24, 0xFF	; 255
   e:	80 93 00 00 	sts	0x0000, r24
  12:	81 50       	subi	r24, 0x01	; 1
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	fc 01       	movw	r30, r24
  18:	ee 0f       	add	r30, r30
  1a:	ff 1f       	adc	r31, r31
  1c:	e8 0f       	add	r30, r24
  1e:	f9 1f       	adc	r31, r25
  20:	e0 50       	subi	r30, 0x00	; 0
  22:	f0 40       	sbci	r31, 0x00	; 0
  24:	88 eb       	ldi	r24, 0xB8	; 184
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	9b e0       	ldi	r25, 0x0B	; 11
  28:	92 83       	std	Z+2, r25	; 0x02
  2a:	81 83       	std	Z+1, r24	; 0x01
  2c:	08 95       	ret
  2e:	8f ef       	ldi	r24, 0xFF	; 255
  30:	80 83       	st	Z, r24
  32:	08 95       	ret

Disassembly of section .text._ZN5Servo6detachEv:

00000000 <_ZN5Servo6detachEv>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	dc 01       	movw	r26, r24
   2:	8c 91       	ld	r24, X
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	fc 01       	movw	r30, r24
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e8 0f       	add	r30, r24
   e:	f9 1f       	adc	r31, r25
  10:	e0 50       	subi	r30, 0x00	; 0
  12:	f0 40       	sbci	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	8f 7b       	andi	r24, 0xBF	; 191
  18:	80 83       	st	Z, r24
  1a:	8c 91       	ld	r24, X
  1c:	6c e0       	ldi	r22, 0x0C	; 12
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6detachEv>
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	ac 01       	movw	r20, r24
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	44 0f       	add	r20, r20
  28:	55 1f       	adc	r21, r21
  2a:	48 0f       	add	r20, r24
  2c:	59 1f       	adc	r21, r25
  2e:	44 0f       	add	r20, r20
  30:	55 1f       	adc	r21, r21
  32:	44 0f       	add	r20, r20
  34:	55 1f       	adc	r21, r21
}
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	30 e0       	ldi	r19, 0x00	; 0
  3a:	c9 01       	movw	r24, r18
  3c:	84 0f       	add	r24, r20
  3e:	95 1f       	adc	r25, r21
  40:	fc 01       	movw	r30, r24
  42:	ee 0f       	add	r30, r30
  44:	ff 1f       	adc	r31, r31
  46:	e8 0f       	add	r30, r24
  48:	f9 1f       	adc	r31, r25
  4a:	e0 50       	subi	r30, 0x00	; 0
  4c:	f0 40       	sbci	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	86 fd       	sbrc	r24, 6
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN5Servo6detachEv+0x54>
  54:	2f 5f       	subi	r18, 0xFF	; 255
  56:	3f 4f       	sbci	r19, 0xFF	; 255
  58:	2c 30       	cpi	r18, 0x0C	; 12
  5a:	31 05       	cpc	r19, r1
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN5Servo6detachEv+0x5e>
  5e:	08 95       	ret

Disassembly of section .text._ZN5Servo17writeMicrosecondsEi:

00000000 <_ZN5Servo17writeMicrosecondsEi>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	fc 01       	movw	r30, r24
   2:	20 81       	ld	r18, Z
   4:	20 33       	cpi	r18, 0x30	; 48
   6:	00 f0       	brcs	.+0      	; 0x8 <_ZN5Servo17writeMicrosecondsEi+0x8>
   8:	00 c0       	rjmp	.+0      	; 0xa <_ZN5Servo17writeMicrosecondsEi+0xa>
   a:	81 81       	ldd	r24, Z+1	; 0x01
   c:	99 27       	eor	r25, r25
   e:	87 fd       	sbrc	r24, 7
  10:	90 95       	com	r25
  12:	48 e8       	ldi	r20, 0x88	; 136
  14:	50 e0       	ldi	r21, 0x00	; 0
  16:	48 1b       	sub	r20, r24
  18:	59 0b       	sbc	r21, r25
  1a:	44 0f       	add	r20, r20
  1c:	55 1f       	adc	r21, r21
  1e:	44 0f       	add	r20, r20
  20:	55 1f       	adc	r21, r21
  22:	64 17       	cp	r22, r20
  24:	75 07       	cpc	r23, r21
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	04 f0       	brlt	.+0      	; 0x28 <_ZN5Servo17writeMicrosecondsEi+0x28>
  28:	82 81       	ldd	r24, Z+2	; 0x02
  2a:	99 27       	eor	r25, r25
  2c:	87 fd       	sbrc	r24, 7
  2e:	90 95       	com	r25
  30:	48 e5       	ldi	r20, 0x58	; 88
  32:	52 e0       	ldi	r21, 0x02	; 2
  34:	48 1b       	sub	r20, r24
}
  36:	59 0b       	sbc	r21, r25
  38:	44 0f       	add	r20, r20
  3a:	55 1f       	adc	r21, r21
  3c:	44 0f       	add	r20, r20
  3e:	55 1f       	adc	r21, r21
  40:	64 17       	cp	r22, r20
  42:	75 07       	cpc	r23, r21
  44:	04 f4       	brge	.+0      	; 0x46 <_ZN5Servo17writeMicrosecondsEi+0x46>
  46:	ab 01       	movw	r20, r22
  48:	42 50       	subi	r20, 0x02	; 2
  4a:	50 40       	sbci	r21, 0x00	; 0
  4c:	ca 01       	movw	r24, r20
  4e:	aa 27       	eor	r26, r26
  50:	97 fd       	sbrc	r25, 7
  52:	a0 95       	com	r26
  54:	ba 2f       	mov	r27, r26
  56:	74 e0       	ldi	r23, 0x04	; 4
  58:	88 0f       	add	r24, r24
  5a:	99 1f       	adc	r25, r25
  5c:	aa 1f       	adc	r26, r26
  5e:	bb 1f       	adc	r27, r27
  60:	7a 95       	dec	r23
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN5Servo17writeMicrosecondsEi+0x64>
  64:	63 e0       	ldi	r22, 0x03	; 3
  66:	b6 95       	lsr	r27
  68:	a7 95       	ror	r26
  6a:	97 95       	ror	r25
  6c:	87 95       	ror	r24
  6e:	6a 95       	dec	r22
  70:	01 f4       	brne	.+0      	; 0x72 <_ZN5Servo17writeMicrosecondsEi+0x72>
  72:	4f b7       	in	r20, 0x3f	; 63
  74:	f8 94       	cli
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	f9 01       	movw	r30, r18
  7a:	ee 0f       	add	r30, r30
  7c:	ff 1f       	adc	r31, r31
  7e:	e2 0f       	add	r30, r18
  80:	f3 1f       	adc	r31, r19
  82:	e0 50       	subi	r30, 0x00	; 0
  84:	f0 40       	sbci	r31, 0x00	; 0
  86:	92 83       	std	Z+2, r25	; 0x02
  88:	81 83       	std	Z+1, r24	; 0x01
  8a:	4f bf       	out	0x3f, r20	; 63
  8c:	08 95       	ret

Disassembly of section .text._ZN5Servo16readMicrosecondsEv:

00000000 <_ZN5Servo16readMicrosecondsEv>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	8f 3f       	cpi	r24, 0xFF	; 255
   6:	01 f4       	brne	.+0      	; 0x8 <_ZN5Servo16readMicrosecondsEv+0x8>
   8:	20 e0       	ldi	r18, 0x00	; 0
   a:	30 e0       	ldi	r19, 0x00	; 0
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZN5Servo16readMicrosecondsEv+0xe>
   e:	90 e0       	ldi	r25, 0x00	; 0
  10:	fc 01       	movw	r30, r24
  12:	ee 0f       	add	r30, r30
  14:	ff 1f       	adc	r31, r31
  16:	e8 0f       	add	r30, r24
  18:	f9 1f       	adc	r31, r25
  1a:	e0 50       	subi	r30, 0x00	; 0
  1c:	f0 40       	sbci	r31, 0x00	; 0
  1e:	21 81       	ldd	r18, Z+1	; 0x01
  20:	32 81       	ldd	r19, Z+2	; 0x02
  22:	83 e0       	ldi	r24, 0x03	; 3
  24:	22 0f       	add	r18, r18
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	33 1f       	adc	r19, r19
  28:	8a 95       	dec	r24
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN5Servo16readMicrosecondsEv+0x2c>
  2c:	b4 e0       	ldi	r27, 0x04	; 4
  2e:	36 95       	lsr	r19
  30:	27 95       	ror	r18
  32:	ba 95       	dec	r27
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN5Servo16readMicrosecondsEv+0x36>
}
  36:	2e 5f       	subi	r18, 0xFE	; 254
  38:	3f 4f       	sbci	r19, 0xFF	; 255
  3a:	c9 01       	movw	r24, r18
  3c:	08 95       	ret

Disassembly of section .text._ZN5Servo8attachedEv:

00000000 <_ZN5Servo8attachedEv>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	fc 01       	movw	r30, r24
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e8 0f       	add	r30, r24
   e:	f9 1f       	adc	r31, r25
  10:	e0 50       	subi	r30, 0x00	; 0
  12:	f0 40       	sbci	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	82 95       	swap	r24
  18:	86 95       	lsr	r24
  1a:	86 95       	lsr	r24
  1c:	81 70       	andi	r24, 0x01	; 1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN5Servo8attachedEv+0x20>
  20:	81 e0       	ldi	r24, 0x01	; 1
  22:	08 95       	ret

Disassembly of section .text._ZN5Servo4readEv:

00000000 <_ZN5Servo4readEv>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	8c 01       	movw	r16, r24
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo4readEv>
  16:	00 d0       	rcall	.+0      	; 0x18 <_ZN5Servo4readEv+0x18>
  18:	0f 92       	push	r0
  1a:	01 96       	adiw	r24, 0x01	; 1
  1c:	aa 27       	eor	r26, r26
  1e:	97 fd       	sbrc	r25, 7
  20:	a0 95       	com	r26
  22:	ba 2f       	mov	r27, r26
  24:	f8 01       	movw	r30, r16
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	61 81       	ldd	r22, Z+1	; 0x01
  28:	77 27       	eor	r23, r23
  2a:	67 fd       	sbrc	r22, 7
  2c:	70 95       	com	r23
  2e:	28 e8       	ldi	r18, 0x88	; 136
  30:	30 e0       	ldi	r19, 0x00	; 0
  32:	26 1b       	sub	r18, r22
  34:	37 0b       	sbc	r19, r23
}
  36:	22 0f       	add	r18, r18
  38:	33 1f       	adc	r19, r19
  3a:	22 0f       	add	r18, r18
  3c:	33 1f       	adc	r19, r19
  3e:	44 27       	eor	r20, r20
  40:	37 fd       	sbrc	r19, 7
  42:	40 95       	com	r20
  44:	54 2f       	mov	r21, r20
  46:	62 81       	ldd	r22, Z+2	; 0x02
  48:	77 27       	eor	r23, r23
  4a:	67 fd       	sbrc	r22, 7
  4c:	70 95       	com	r23
  4e:	e8 e5       	ldi	r30, 0x58	; 88
  50:	ee 2e       	mov	r14, r30
  52:	e2 e0       	ldi	r30, 0x02	; 2
  54:	fe 2e       	mov	r15, r30
  56:	e6 1a       	sub	r14, r22
  58:	f7 0a       	sbc	r15, r23
  5a:	ee 0c       	add	r14, r14
  5c:	ff 1c       	adc	r15, r15
  5e:	ee 0c       	add	r14, r14
  60:	ff 1c       	adc	r15, r15
  62:	00 27       	eor	r16, r16
  64:	f7 fc       	sbrc	r15, 7
  66:	00 95       	com	r16
  68:	10 2f       	mov	r17, r16
  6a:	64 eb       	ldi	r22, 0xB4	; 180
  6c:	a6 2e       	mov	r10, r22
  6e:	b1 2c       	mov	r11, r1
  70:	c1 2c       	mov	r12, r1
  72:	d1 2c       	mov	r13, r1
  74:	ed b7       	in	r30, 0x3d	; 61
  76:	fe b7       	in	r31, 0x3e	; 62
  78:	a1 82       	std	Z+1, r10	; 0x01
  7a:	b2 82       	std	Z+2, r11	; 0x02
  7c:	c3 82       	std	Z+3, r12	; 0x03
  7e:	d4 82       	std	Z+4, r13	; 0x04
  80:	bc 01       	movw	r22, r24
  82:	cd 01       	movw	r24, r26
  84:	aa 24       	eor	r10, r10
  86:	bb 24       	eor	r11, r11
  88:	65 01       	movw	r12, r10
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo4readEv>
  8e:	0f 90       	pop	r0
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	0f 90       	pop	r0
  96:	cb 01       	movw	r24, r22
  98:	1f 91       	pop	r17
  9a:	0f 91       	pop	r16
  9c:	ff 90       	pop	r15
  9e:	ef 90       	pop	r14
  a0:	df 90       	pop	r13
  a2:	cf 90       	pop	r12
  a4:	bf 90       	pop	r11
  a6:	af 90       	pop	r10
  a8:	08 95       	ret

Disassembly of section .text._ZN5Servo5writeEi:

00000000 <_ZN5Servo5writeEi>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	ec 01       	movw	r28, r24
  16:	9b 01       	movw	r18, r22
  18:	82 e0       	ldi	r24, 0x02	; 2
  1a:	60 32       	cpi	r22, 0x20	; 32
  1c:	78 07       	cpc	r23, r24
  1e:	04 f0       	brlt	.+0      	; 0x20 <_ZN5Servo5writeEi+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN5Servo5writeEi+0x22>
  22:	77 ff       	sbrs	r23, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN5Servo5writeEi+0x26>
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN5Servo5writeEi+0x2c>
  2c:	65 3b       	cpi	r22, 0xB5	; 181
  2e:	71 05       	cpc	r23, r1
  30:	04 f0       	brlt	.+0      	; 0x32 <_ZN5Servo5writeEi+0x32>
  32:	24 eb       	ldi	r18, 0xB4	; 180
  34:	30 e0       	ldi	r19, 0x00	; 0
}
  36:	00 d0       	rcall	.+0      	; 0x38 <_ZN5Servo5writeEi+0x38>
  38:	0f 92       	push	r0
  3a:	b9 01       	movw	r22, r18
  3c:	88 27       	eor	r24, r24
  3e:	77 fd       	sbrc	r23, 7
  40:	80 95       	com	r24
  42:	98 2f       	mov	r25, r24
  44:	29 81       	ldd	r18, Y+1	; 0x01
  46:	33 27       	eor	r19, r19
  48:	27 fd       	sbrc	r18, 7
  4a:	30 95       	com	r19
  4c:	e8 e8       	ldi	r30, 0x88	; 136
  4e:	ae 2e       	mov	r10, r30
  50:	b1 2c       	mov	r11, r1
  52:	a2 1a       	sub	r10, r18
  54:	b3 0a       	sbc	r11, r19
  56:	aa 0c       	add	r10, r10
  58:	bb 1c       	adc	r11, r11
  5a:	aa 0c       	add	r10, r10
  5c:	bb 1c       	adc	r11, r11
  5e:	cc 24       	eor	r12, r12
  60:	b7 fc       	sbrc	r11, 7
  62:	c0 94       	com	r12
  64:	dc 2c       	mov	r13, r12
  66:	ea 81       	ldd	r30, Y+2	; 0x02
  68:	ff 27       	eor	r31, r31
  6a:	e7 fd       	sbrc	r30, 7
  6c:	f0 95       	com	r31
  6e:	28 e5       	ldi	r18, 0x58	; 88
  70:	32 e0       	ldi	r19, 0x02	; 2
  72:	2e 1b       	sub	r18, r30
  74:	3f 0b       	sbc	r19, r31
  76:	22 0f       	add	r18, r18
  78:	33 1f       	adc	r19, r19
  7a:	22 0f       	add	r18, r18
  7c:	33 1f       	adc	r19, r19
  7e:	44 27       	eor	r20, r20
  80:	37 fd       	sbrc	r19, 7
  82:	40 95       	com	r20
  84:	54 2f       	mov	r21, r20
  86:	ed b7       	in	r30, 0x3d	; 61
  88:	fe b7       	in	r31, 0x3e	; 62
  8a:	21 83       	std	Z+1, r18	; 0x01
  8c:	32 83       	std	Z+2, r19	; 0x02
  8e:	43 83       	std	Z+3, r20	; 0x03
  90:	54 83       	std	Z+4, r21	; 0x04
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	04 eb       	ldi	r16, 0xB4	; 180
  9c:	e0 2e       	mov	r14, r16
  9e:	f1 2c       	mov	r15, r1
  a0:	01 2d       	mov	r16, r1
  a2:	11 2d       	mov	r17, r1
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo5writeEi>
  a8:	9b 01       	movw	r18, r22
  aa:	0f 90       	pop	r0
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	0f 90       	pop	r0
  b2:	ce 01       	movw	r24, r28
  b4:	b9 01       	movw	r22, r18
  b6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo5writeEi>
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	0f 91       	pop	r16
  c2:	ff 90       	pop	r15
  c4:	ef 90       	pop	r14
  c6:	df 90       	pop	r13
  c8:	cf 90       	pop	r12
  ca:	bf 90       	pop	r11
  cc:	af 90       	pop	r10
  ce:	08 95       	ret

Disassembly of section .text._ZN5Servo6attachEiii:

00000000 <_ZN5Servo6attachEiii>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	16 2f       	mov	r17, r22
  12:	7a 01       	movw	r14, r20
  14:	69 01       	movw	r12, r18
  16:	88 81       	ld	r24, Y
  18:	80 33       	cpi	r24, 0x30	; 48
  1a:	00 f0       	brcs	.+0      	; 0x1c <_ZN5Servo6attachEiii+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN5Servo6attachEiii+0x1e>
  1e:	86 2f       	mov	r24, r22
  20:	61 e0       	ldi	r22, 0x01	; 1
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEiii>
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	88 81       	ld	r24, Y
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	fc 01       	movw	r30, r24
  2c:	ee 0f       	add	r30, r30
  2e:	ff 1f       	adc	r31, r31
  30:	e8 0f       	add	r30, r24
  32:	f9 1f       	adc	r31, r25
  34:	e0 50       	subi	r30, 0x00	; 0
}
  36:	f0 40       	sbci	r31, 0x00	; 0
  38:	1f 73       	andi	r17, 0x3F	; 63
  3a:	80 81       	ld	r24, Z
  3c:	80 7c       	andi	r24, 0xC0	; 192
  3e:	81 2b       	or	r24, r17
  40:	80 83       	st	Z, r24
  42:	80 e2       	ldi	r24, 0x20	; 32
  44:	92 e0       	ldi	r25, 0x02	; 2
  46:	8e 19       	sub	r24, r14
  48:	9f 09       	sbc	r25, r15
  4a:	64 e0       	ldi	r22, 0x04	; 4
  4c:	70 e0       	ldi	r23, 0x00	; 0
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEiii>
  52:	69 83       	std	Y+1, r22	; 0x01
  54:	80 e6       	ldi	r24, 0x60	; 96
  56:	99 e0       	ldi	r25, 0x09	; 9
  58:	8c 19       	sub	r24, r12
  5a:	9d 09       	sbc	r25, r13
  5c:	64 e0       	ldi	r22, 0x04	; 4
  5e:	70 e0       	ldi	r23, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEiii>
  64:	6a 83       	std	Y+2, r22	; 0x02
  66:	a8 81       	ld	r26, Y
  68:	8a 2f       	mov	r24, r26
  6a:	6c e0       	ldi	r22, 0x0C	; 12
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEiii>
  70:	68 2f       	mov	r22, r24
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	ab 01       	movw	r20, r22
  76:	44 0f       	add	r20, r20
  78:	55 1f       	adc	r21, r21
  7a:	46 0f       	add	r20, r22
  7c:	57 1f       	adc	r21, r23
  7e:	44 0f       	add	r20, r20
  80:	55 1f       	adc	r21, r21
  82:	44 0f       	add	r20, r20
  84:	55 1f       	adc	r21, r21
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	c9 01       	movw	r24, r18
  8c:	84 0f       	add	r24, r20
  8e:	95 1f       	adc	r25, r21
  90:	fc 01       	movw	r30, r24
  92:	ee 0f       	add	r30, r30
  94:	ff 1f       	adc	r31, r31
  96:	e8 0f       	add	r30, r24
  98:	f9 1f       	adc	r31, r25
  9a:	e0 50       	subi	r30, 0x00	; 0
  9c:	f0 40       	sbci	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	86 fd       	sbrc	r24, 6
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN5Servo6attachEiii+0xa4>
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
  a8:	2c 30       	cpi	r18, 0x0C	; 12
  aa:	31 05       	cpc	r19, r1
  ac:	01 f4       	brne	.+0      	; 0xae <_ZN5Servo6attachEiii+0xae>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN5Servo6attachEiii+0xb0>
  b0:	10 92 80 00 	sts	0x0080, r1
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	80 93 81 00 	sts	0x0081, r24
  ba:	10 92 85 00 	sts	0x0085, r1
  be:	10 92 84 00 	sts	0x0084, r1
  c2:	b1 9a       	sbi	0x16, 1	; 22
  c4:	80 91 6f 00 	lds	r24, 0x006F
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 93 6f 00 	sts	0x006F, r24
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN5Servo6attachEiii+0xd0>
  d0:	62 30       	cpi	r22, 0x02	; 2
  d2:	71 05       	cpc	r23, r1
  d4:	01 f4       	brne	.+0      	; 0xd6 <_ZN5Servo6attachEiii+0xd6>
  d6:	10 92 90 00 	sts	0x0090, r1
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 91 00 	sts	0x0091, r24
  e0:	10 92 95 00 	sts	0x0095, r1
  e4:	10 92 94 00 	sts	0x0094, r1
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	80 93 71 00 	sts	0x0071, r24
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_ZN5Servo6attachEiii+0xf0>
  f0:	63 30       	cpi	r22, 0x03	; 3
  f2:	71 05       	cpc	r23, r1
  f4:	01 f4       	brne	.+0      	; 0xf6 <_ZN5Servo6attachEiii+0xf6>
  f6:	10 92 a0 00 	sts	0x00A0, r1
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 a1 00 	sts	0x00A1, r24
 100:	10 92 a5 00 	sts	0x00A5, r1
 104:	10 92 a4 00 	sts	0x00A4, r1
 108:	89 bb       	out	0x19, r24	; 25
 10a:	80 93 72 00 	sts	0x0072, r24
 10e:	00 c0       	rjmp	.+0      	; 0x110 <_ZN5Servo6attachEiii+0x110>
 110:	67 2b       	or	r22, r23
 112:	01 f4       	brne	.+0      	; 0x114 <_ZN5Servo6attachEiii+0x114>
 114:	10 92 20 01 	sts	0x0120, r1
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	80 93 21 01 	sts	0x0121, r24
 11e:	10 92 25 01 	sts	0x0125, r1
 122:	10 92 24 01 	sts	0x0124, r1
 126:	8a bb       	out	0x1a, r24	; 26
 128:	80 93 73 00 	sts	0x0073, r24
 12c:	8a 2f       	mov	r24, r26
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	e8 0f       	add	r30, r24
 138:	f9 1f       	adc	r31, r25
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	f0 40       	sbci	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
 144:	88 81       	ld	r24, Y
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	df 90       	pop	r13
 152:	cf 90       	pop	r12
 154:	08 95       	ret
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	71 05       	cpc	r23, r1
 15a:	01 f0       	breq	.+0      	; 0x15c <_ZN5Servo6attachEiii+0x15c>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <_ZN5Servo6attachEiii+0x15e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <__SREG__+0x121>

Disassembly of section .text._ZN5Servo6attachEi:

00000000 <_ZN5Servo6attachEi>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	40 e2       	ldi	r20, 0x20	; 32
   2:	52 e0       	ldi	r21, 0x02	; 2
   4:	20 e6       	ldi	r18, 0x60	; 96
   6:	39 e0       	ldi	r19, 0x09	; 9
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEi>
   c:	08 95       	ret

Disassembly of section .text._ZL17handle_interrupts18timer16_Sequence_tPVjS1_:

00000000 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	8b 01       	movw	r16, r22
   e:	7a 01       	movw	r14, r20
  10:	ec 01       	movw	r28, r24
  12:	dc 01       	movw	r26, r24
  14:	a0 50       	subi	r26, 0x00	; 0
  16:	b0 40       	sbci	r27, 0x00	; 0
  18:	8c 91       	ld	r24, X
  1a:	87 ff       	sbrs	r24, 7
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x1e>
  1e:	fb 01       	movw	r30, r22
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x26>
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	ae 01       	movw	r20, r28
  28:	44 0f       	add	r20, r20
  2a:	55 1f       	adc	r21, r21
  2c:	4c 0f       	add	r20, r28
  2e:	5d 1f       	adc	r21, r29
  30:	44 0f       	add	r20, r20
  32:	55 1f       	adc	r21, r21
  34:	44 0f       	add	r20, r20
}
  36:	55 1f       	adc	r21, r21
  38:	2c 91       	ld	r18, X
  3a:	33 27       	eor	r19, r19
  3c:	27 fd       	sbrc	r18, 7
  3e:	30 95       	com	r19
  40:	24 0f       	add	r18, r20
  42:	35 1f       	adc	r19, r21
  44:	80 91 00 00 	lds	r24, 0x0000
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	28 17       	cp	r18, r24
  4c:	39 07       	cpc	r19, r25
  4e:	04 f4       	brge	.+0      	; 0x50 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x50>
  50:	8c 91       	ld	r24, X
  52:	99 27       	eor	r25, r25
  54:	87 fd       	sbrc	r24, 7
  56:	90 95       	com	r25
  58:	84 0f       	add	r24, r20
  5a:	95 1f       	adc	r25, r21
  5c:	fc 01       	movw	r30, r24
  5e:	ee 0f       	add	r30, r30
  60:	ff 1f       	adc	r31, r31
  62:	e8 0f       	add	r30, r24
  64:	f9 1f       	adc	r31, r25
  66:	e0 50       	subi	r30, 0x00	; 0
  68:	f0 40       	sbci	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	86 ff       	sbrs	r24, 6
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x70>
  70:	8c 91       	ld	r24, X
  72:	99 27       	eor	r25, r25
  74:	87 fd       	sbrc	r24, 7
  76:	90 95       	com	r25
  78:	84 0f       	add	r24, r20
  7a:	95 1f       	adc	r25, r21
  7c:	fc 01       	movw	r30, r24
  7e:	ee 0f       	add	r30, r30
  80:	ff 1f       	adc	r31, r31
  82:	e8 0f       	add	r30, r24
  84:	f9 1f       	adc	r31, r25
  86:	e0 50       	subi	r30, 0x00	; 0
  88:	f0 40       	sbci	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 73       	andi	r24, 0x3F	; 63
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	0e 94 00 00 	call	0	; 0x0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
  94:	de 01       	movw	r26, r28
  96:	a0 50       	subi	r26, 0x00	; 0
  98:	b0 40       	sbci	r27, 0x00	; 0
  9a:	8c 91       	ld	r24, X
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	8c 93       	st	X, r24
  a0:	ae 01       	movw	r20, r28
  a2:	44 0f       	add	r20, r20
  a4:	55 1f       	adc	r21, r21
  a6:	4c 0f       	add	r20, r28
  a8:	5d 1f       	adc	r21, r29
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	44 0f       	add	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	2c 91       	ld	r18, X
  b4:	33 27       	eor	r19, r19
  b6:	27 fd       	sbrc	r18, 7
  b8:	30 95       	com	r19
  ba:	24 0f       	add	r18, r20
  bc:	35 1f       	adc	r19, r21
  be:	80 91 00 00 	lds	r24, 0x0000
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	04 f0       	brlt	.+0      	; 0xca <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
  cc:	8c 91       	ld	r24, X
  ce:	8c 30       	cpi	r24, 0x0C	; 12
  d0:	04 f0       	brlt	.+0      	; 0xd2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd2>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd4>
  d4:	f8 01       	movw	r30, r16
  d6:	20 81       	ld	r18, Z
  d8:	31 81       	ldd	r19, Z+1	; 0x01
  da:	8c 91       	ld	r24, X
  dc:	99 27       	eor	r25, r25
  de:	87 fd       	sbrc	r24, 7
  e0:	90 95       	com	r25
  e2:	84 0f       	add	r24, r20
  e4:	95 1f       	adc	r25, r21
  e6:	fc 01       	movw	r30, r24
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e8 0f       	add	r30, r24
  ee:	f9 1f       	adc	r31, r25
  f0:	e0 50       	subi	r30, 0x00	; 0
  f2:	f0 40       	sbci	r31, 0x00	; 0
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	92 81       	ldd	r25, Z+2	; 0x02
  f8:	28 0f       	add	r18, r24
  fa:	39 1f       	adc	r19, r25
  fc:	f7 01       	movw	r30, r14
  fe:	31 83       	std	Z+1, r19	; 0x01
 100:	20 83       	st	Z, r18
 102:	8c 91       	ld	r24, X
 104:	99 27       	eor	r25, r25
 106:	87 fd       	sbrc	r24, 7
 108:	90 95       	com	r25
 10a:	84 0f       	add	r24, r20
 10c:	95 1f       	adc	r25, r21
 10e:	fc 01       	movw	r30, r24
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	e8 0f       	add	r30, r24
 116:	f9 1f       	adc	r31, r25
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	f0 40       	sbci	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	86 ff       	sbrs	r24, 6
 120:	00 c0       	rjmp	.+0      	; 0x122 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x122>
 122:	8c 91       	ld	r24, X
 124:	99 27       	eor	r25, r25
 126:	87 fd       	sbrc	r24, 7
 128:	90 95       	com	r25
 12a:	84 0f       	add	r24, r20
 12c:	95 1f       	adc	r25, r21
 12e:	fc 01       	movw	r30, r24
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 0f       	add	r30, r24
 136:	f9 1f       	adc	r31, r25
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	f0 40       	sbci	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8f 73       	andi	r24, 0x3F	; 63
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 00 00 	call	0	; 0x0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
 146:	00 c0       	rjmp	.+0      	; 0x148 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x148>
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	9c e9       	ldi	r25, 0x9C	; 156
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x14e>
 14e:	f8 01       	movw	r30, r16
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	04 96       	adiw	r24, 0x04	; 4
 156:	f7 01       	movw	r30, r14
 158:	91 83       	std	Z+1, r25	; 0x01
 15a:	80 83       	st	Z, r24
 15c:	c0 50       	subi	r28, 0x00	; 0
 15e:	d0 40       	sbci	r29, 0x00	; 0
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	88 83       	st	Y, r24
 164:	00 c0       	rjmp	.+0      	; 0x166 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x166>
 166:	f8 01       	movw	r30, r16
 168:	80 81       	ld	r24, Z
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	84 54       	subi	r24, 0x44	; 68
 16e:	9c 49       	sbci	r25, 0x9C	; 156
 170:	00 f0       	brcs	.+0      	; 0x172 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x172>
 172:	00 c0       	rjmp	.+0      	; 0x174 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x174>
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	08 95       	ret

Disassembly of section .text.__vector_47:

00000000 <__vector_47>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	64 e2       	ldi	r22, 0x24	; 36
  2c:	71 e0       	ldi	r23, 0x01	; 1
  2e:	48 e2       	ldi	r20, 0x28	; 40
  30:	51 e0       	ldi	r21, 0x01	; 1
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_47>
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_42:

00000000 <__vector_42>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	83 e0       	ldi	r24, 0x03	; 3
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	64 ea       	ldi	r22, 0xA4	; 164
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	48 ea       	ldi	r20, 0xA8	; 168
  30:	50 e0       	ldi	r21, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_42>
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_32:

00000000 <__vector_32>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	82 e0       	ldi	r24, 0x02	; 2
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	64 e9       	ldi	r22, 0x94	; 148
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	48 e9       	ldi	r20, 0x98	; 152
  30:	50 e0       	ldi	r21, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_32>
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_17:

00000000 <__vector_17>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	81 e0       	ldi	r24, 0x01	; 1
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	64 e8       	ldi	r22, 0x84	; 132
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	48 e8       	ldi	r20, 0x88	; 136
  30:	50 e0       	ldi	r21, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_17>
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti
